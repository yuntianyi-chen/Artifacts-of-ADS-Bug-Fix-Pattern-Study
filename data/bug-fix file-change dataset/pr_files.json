{
    "ApolloAuto/apollo/1": [
        {
            "sha": "7c99b408703001a4c9f1fe5ca46c332ed5ce7fb4",
            "filename": "docs/quickstart/apollo_1_0_hardware_system_installation_guide.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e0d3b98ae8f114294209f2fefd0d32bc59866587/docs%2Fquickstart%2Fapollo_1_0_hardware_system_installation_guide.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e0d3b98ae8f114294209f2fefd0d32bc59866587/docs%2Fquickstart%2Fapollo_1_0_hardware_system_installation_guide.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fquickstart%2Fapollo_1_0_hardware_system_installation_guide.md?ref=e0d3b98ae8f114294209f2fefd0d32bc59866587",
            "patch": "@@ -158,7 +158,7 @@ For more information about the CAN-PCIe/402, see:\n There are **two** GPS-IMU **options** available,and the choice depends upon the one that most fits your needs:\n \n - **Option 1: NovAtel SPAN-IGM-A1**\n-- **Option 2: NovAtel SPAN\u00ae ProPak6\u2122 and NovAtel IMU-IGM-A1 **\n+- **Option 2: NovAtel SPAN\u00ae ProPak6\u2122 and NovAtel IMU-IGM-A1**\n \n ### Option 1: The NovAtel SPAN-IGM-A1\n \n@@ -503,7 +503,7 @@ The following two diagrams indicate the locations of where the three major compo\n \n This section provides general information about installing **one** of two choices:\n \n-- **Option 1: **GPS-IMU: **NovAtel SPAN-IGM-A1**\n+- **Option 1:** GPS-IMU: **NovAtel SPAN-IGM-A1**\n - **Option 2:** GPS-IMU: **NovAtel SPAN\u00ae ProPak6\u2122 and NovAtel IMU-IGM-A1**\n \n #### Option 1: Installing the NovAtel SPAN-IGM-A1"
        }
    ],
    "ApolloAuto/apollo/7": [
        {
            "sha": "fe068b826e00ab6d2d0ed664c191726e264c18fa",
            "filename": "docs/quickstart/apollo_1_0_hardware_system_installation_guide.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0b4593ae6ce953f4d5e31964584bf26e0ec2d89c/docs%2Fquickstart%2Fapollo_1_0_hardware_system_installation_guide.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0b4593ae6ce953f4d5e31964584bf26e0ec2d89c/docs%2Fquickstart%2Fapollo_1_0_hardware_system_installation_guide.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fquickstart%2Fapollo_1_0_hardware_system_installation_guide.md?ref=0b4593ae6ce953f4d5e31964584bf26e0ec2d89c",
            "patch": "@@ -426,7 +426,7 @@ After having the release package downloaded:\n ```\n tar zxvf linux-4.4.32-apollo-1.0.0.tar.gz\n cd install\n-sudo ./install_kernel.sh\n+sudo bash install_kernel.sh\n ```\n 3. Build the ESD CAN driver source code\n "
        }
    ],
    "ApolloAuto/apollo/43": [
        {
            "sha": "36686b531bded8eb6907b622e9be9fcbddd70d37",
            "filename": "README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5b2f26a424c021e1719a32e8bea59cd9ea11ec48/README.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5b2f26a424c021e1719a32e8bea59cd9ea11ec48/README.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/README.md?ref=5b2f26a424c021e1719a32e8bea59cd9ea11ec48",
            "patch": "@@ -65,7 +65,7 @@ to the corresponding Docker specification file (`./docker/dev.dockerfile`).\n Apollo documents can be found under the [docs](https://github.com/ApolloAuto/apollo/blob/master/docs/) repository.\n    * [quickstart](https://github.com/ApolloAuto/apollo/blob/master/docs/quickstart/): the quickstart tutorial.\n    * [demo_guide](https://github.com/ApolloAuto/apollo/blob/master/docs/demo_guide/): the guide for demonstration.\n-   * [how to contribute code](https://github.com/ApolloAuto/apollo/blob/master/docs/howto/how_to_contribute_code.md): the guide for contributing code to Apollo.\n+   * [how to contribute code](https://github.com/ApolloAuto/apollo/blob/master/CONTRIBUTING.md): the guide for contributing code to Apollo.\n    * [howto](https://github.com/ApolloAuto/apollo/blob/master/docs/howto/): tutorials on how to build, run and modify codes.\n    * [specs](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/): Specification documents of Apollo 1.0.\n "
        }
    ],
    "ApolloAuto/apollo/165": [
        {
            "sha": "87a7af98987a2d65255a73c315aa5443da01ea4d",
            "filename": "modules/common/vehicle_state/vehicle_state.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1de3272addc9258a82c086b489a4352c29295786/modules%2Fcommon%2Fvehicle_state%2Fvehicle_state.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1de3272addc9258a82c086b489a4352c29295786/modules%2Fcommon%2Fvehicle_state%2Fvehicle_state.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Fvehicle_state%2Fvehicle_state.cc?ref=1de3272addc9258a82c086b489a4352c29295786",
            "patch": "@@ -28,7 +28,9 @@ VehicleState::VehicleState(\n     const localization::LocalizationEstimate &localization) {\n   ConstructExceptLinearVelocity(&localization);\n   if (localization.has_pose() && localization.pose().has_linear_velocity()) {\n-    linear_v_ = localization.pose().linear_velocity().y();\n+    double linear_v_x = localization.pose().linear_velocity().x();\n+    double linear_v_y = localization.pose().linear_velocity().y();\n+    linear_v_ = std::hypot(linear_v_x, linear_v_y);\n   }\n }\n "
        }
    ],
    "ApolloAuto/apollo/826": [
        {
            "sha": "05c05c04cfdb50a53e8af278dcf87ea45a2f6a49",
            "filename": "modules/prediction/predictor/sequence/sequence_predictor.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/92b7434c4656555d8350fc051e5d1d5c32897db6/modules%2Fprediction%2Fpredictor%2Fsequence%2Fsequence_predictor.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/92b7434c4656555d8350fc051e5d1d5c32897db6/modules%2Fprediction%2Fpredictor%2Fsequence%2Fsequence_predictor.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fpredictor%2Fsequence%2Fsequence_predictor.cc?ref=92b7434c4656555d8350fc051e5d1d5c32897db6",
            "patch": "@@ -77,7 +77,7 @@ void SequencePredictor::FilterLaneSequences(\n     lane_change_type[i] = GetLaneChangeType(lane_id, sequence);\n \n     if (lane_change_type[i] == LaneChangeType::INVALID) {\n-        continue;\n+      continue;\n     }\n \n     double probability = sequence.probability();\n@@ -98,7 +98,9 @@ void SequencePredictor::FilterLaneSequences(\n     const LaneSequence& sequence = lane_graph.lane_sequence(i);\n \n     // The obstacle has interference with ADC within a small distance\n-    if (GetLaneChangeDistanceWithADC(sequence) < FLAGS_lane_change_dist) {\n+    if (GetLaneChangeDistanceWithADC(sequence) < FLAGS_lane_change_dist &&\n+        (lane_change_type[i] == LaneChangeType::LEFT ||\n+         lane_change_type[i] == LaneChangeType::RIGHT)) {\n       (*enable_lane_sequence)[i] = false;\n       continue;\n     }"
        }
    ],
    "ApolloAuto/apollo/844": [
        {
            "sha": "ac663e16bbab4ae26ea579161c26aefe116dec51",
            "filename": "modules/planning/tasks/qp_spline_path/qp_spline_path_generator.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 6,
            "changes": 10,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/96807e79d0245ab3a226c8d4971297171dbd81c8/modules%2Fplanning%2Ftasks%2Fqp_spline_path%2Fqp_spline_path_generator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/96807e79d0245ab3a226c8d4971297171dbd81c8/modules%2Fplanning%2Ftasks%2Fqp_spline_path%2Fqp_spline_path_generator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fqp_spline_path%2Fqp_spline_path_generator.cc?ref=96807e79d0245ab3a226c8d4971297171dbd81c8",
            "patch": "@@ -257,11 +257,10 @@ bool QpSplinePathGenerator::AddConstraint(\n   ADEBUG << \"init frenet point: \" << init_frenet_point_.ShortDebugString();\n \n   // add end point constraint, equality constraint\n-  spline_constraint->AddPointConstraint(knots_.back(), 0.0);\n-\n-  spline_constraint->AddPointDerivativeConstraint(knots_.back(), 0.0);\n-\n-  spline_constraint->AddPointSecondDerivativeConstraint(knots_.back(), 0.0);\n+  spline_constraint->AddPointConstraint(evaluated_s_.back(), 0.0);\n+  spline_constraint->AddPointDerivativeConstraint(evaluated_s_.back(), 0.0);\n+  spline_constraint->AddPointSecondDerivativeConstraint(evaluated_s_.back(),\n+                                                        0.0);\n \n   // kappa bound is based on the inequality:\n   // kappa = d(phi)/ds <= d(phi)/dx = d2y/dx2\n@@ -310,7 +309,6 @@ bool QpSplinePathGenerator::AddConstraint(\n     boundary_high.emplace_back(common::util::MinElement(\n         std::vector<double>{road_boundary.second, static_obs_boundary.second,\n                             dynamic_obs_boundary.second}));\n-\n     ADEBUG << \"s:\" << evaluated_s_[i] << \" boundary_low:\" << boundary_low.back()\n            << \" boundary_high:\" << boundary_high.back()\n            << \" road_boundary_low: \" << road_boundary.first"
        }
    ],
    "ApolloAuto/apollo/870": [
        {
            "sha": "cd4a6ef2a74a07c8e40d6c1f47eec600c3dd107c",
            "filename": "modules/planning/common/speed/st_boundary.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/bd7cd728b3f20159808d614b628f80edb387803e/modules%2Fplanning%2Fcommon%2Fspeed%2Fst_boundary.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/bd7cd728b3f20159808d614b628f80edb387803e/modules%2Fplanning%2Fcommon%2Fspeed%2Fst_boundary.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Fspeed%2Fst_boundary.cc?ref=bd7cd728b3f20159808d614b628f80edb387803e",
            "patch": "@@ -291,7 +291,7 @@ bool StBoundary::GetUnblockSRange(const double curr_time, double* s_upper,\n   if (boundary_type_ == BoundaryType::STOP ||\n       boundary_type_ == BoundaryType::YIELD ||\n       boundary_type_ == BoundaryType::FOLLOW) {\n-    *s_upper = std::fmin(*s_upper, lower_cross_s);\n+    *s_upper = lower_cross_s;\n   } else if (boundary_type_ == BoundaryType::OVERTAKE) {\n     *s_lower = std::fmax(*s_lower, upper_cross_s);\n   } else {"
        }
    ],
    "ApolloAuto/apollo/1252": [
        {
            "sha": "f27f6eb143538d5b30a8636b3be8679b6e97f044",
            "filename": "modules/planning/reference_line/reference_line_provider.cc",
            "status": "modified",
            "additions": 9,
            "deletions": 2,
            "changes": 11,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/906904973196ff363ccf0dda830a28b0e4980f51/modules%2Fplanning%2Freference_line%2Freference_line_provider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/906904973196ff363ccf0dda830a28b0e4980f51/modules%2Fplanning%2Freference_line%2Freference_line_provider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Freference_line%2Freference_line_provider.cc?ref=906904973196ff363ccf0dda830a28b0e4980f51",
            "patch": "@@ -385,9 +385,16 @@ bool ReferenceLineProvider::IsReferenceLineSmoothValid(\n   constexpr double kReferenceLineDiffCheckStep = 10.0;\n   for (double s = 0.0; s + kReferenceLineDiffCheckStep / 2.0 < raw.Length();\n        s += kReferenceLineDiffCheckStep) {\n-    auto xy_old = raw.GetReferencePoint(s);\n     auto xy_new = smoothed.GetReferencePoint(s);\n-    const double diff = xy_old.DistanceTo(xy_new);\n+\n+    common::SLPoint sl_new;\n+    if (!raw.XYToSL(xy_new, &sl_new)) {\n+      AERROR << \"Fail to change xy point on smoothed reference line to sl \"\n+                \"point respect to raw reference line.\";\n+      return false;\n+    }\n+\n+    const double diff = std::fabs(sl_new.l());\n     if (diff > FLAGS_smoothed_reference_line_max_diff) {\n       AERROR << \"Fail to provide reference line because too large diff \"\n                 \"between smoothed and raw reference lines. diff: \""
        }
    ],
    "ApolloAuto/apollo/1336": [
        {
            "sha": "50d97cb0732540aa6755f9f165bfdb4c5441b745",
            "filename": "modules/planning/reference_line/spiral_reference_line_smoother.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f2a93c66d23a564f381f0f0361695807465caf64/modules%2Fplanning%2Freference_line%2Fspiral_reference_line_smoother.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f2a93c66d23a564f381f0f0361695807465caf64/modules%2Fplanning%2Freference_line%2Fspiral_reference_line_smoother.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Freference_line%2Fspiral_reference_line_smoother.cc?ref=f2a93c66d23a564f381f0f0361695807465caf64",
            "patch": "@@ -79,6 +79,8 @@ bool SpiralReferenceLineSmoother::Smooth(\n     for (const auto& anchor_point : anchor_points_) {\n       if (anchor_point.enforced) {\n         start_index++;\n+      } else {\n+        break;\n       }\n     }\n "
        }
    ],
    "ApolloAuto/apollo/1404": [
        {
            "sha": "c1aafc8b0748e2b97c145e7198381bcb473425fe",
            "filename": "docs/specs/qp_spline_path_optimizer.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f185208c2f38232bcfbb950b0b5e4dbc67249a90/docs%2Fspecs%2Fqp_spline_path_optimizer.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f185208c2f38232bcfbb950b0b5e4dbc67249a90/docs%2Fspecs%2Fqp_spline_path_optimizer.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2Fqp_spline_path_optimizer.md?ref=f185208c2f38232bcfbb950b0b5e4dbc67249a90",
            "patch": "@@ -144,7 +144,7 @@ f'_i(s)^2 ds =\\begin{vmatrix} a_{i0} & a_{i1} & a_{i2} & a_{i3} & a_{i4} & a_{i5\n $$\n </p>\n \n-Please notice that we got a 10 x 10 matrix to represent the derivative cost of 5th order spline.\n+Please notice that we got a 6 x 6 matrix to represent the derivative cost of 5th order spline.\n \n \n "
        }
    ],
    "ApolloAuto/apollo/1425": [
        {
            "sha": "877c1891c7b6c3ad7419a3384dd342f447fb9ddd",
            "filename": "modules/map/pnc_map/route_segments_test.cc",
            "status": "modified",
            "additions": 9,
            "deletions": 9,
            "changes": 18,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/7e71c6cee5e74ffdcd795ca083dbc5ef229ff706/modules%2Fmap%2Fpnc_map%2Froute_segments_test.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/7e71c6cee5e74ffdcd795ca083dbc5ef229ff706/modules%2Fmap%2Fpnc_map%2Froute_segments_test.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Fpnc_map%2Froute_segments_test.cc?ref=7e71c6cee5e74ffdcd795ca083dbc5ef229ff706",
            "patch": "@@ -49,24 +49,24 @@ hdmap::HDMap RouteSegmentsTest::hdmap_;\n TEST_F(RouteSegmentsTest, GetProjection) {\n   auto lane1 = hdmap_.GetLaneById(hdmap::MakeMapId(\"9_1_-1\"));\n   RouteSegments route_segments;\n-  route_segments.emplace_back(lane1, 10, 20);\n+  route_segments.emplace_back(lane1, 5, 10);\n   LaneWaypoint waypoint;\n-  auto point = lane1->GetSmoothPoint(5);\n+  auto point = lane1->GetSmoothPoint(3);\n   common::SLPoint sl;\n   EXPECT_FALSE(route_segments.GetProjection(point, &sl, &waypoint));\n-  point = lane1->GetSmoothPoint(10);\n+  point = lane1->GetSmoothPoint(5);\n   EXPECT_TRUE(route_segments.GetProjection(point, &sl, &waypoint));\n   EXPECT_EQ(lane1, waypoint.lane);\n-  EXPECT_NEAR(10.0, waypoint.s, 1e-4);\n+  EXPECT_NEAR(5.0, waypoint.s, 1e-4);\n   EXPECT_NEAR(0.0, sl.s(), 1e-4);\n   EXPECT_NEAR(0.0, sl.l(), 1e-4);\n-  point = lane1->GetSmoothPoint(15);\n+  point = lane1->GetSmoothPoint(8);\n   EXPECT_TRUE(route_segments.GetProjection(point, &sl, &waypoint));\n   EXPECT_EQ(lane1, waypoint.lane);\n-  EXPECT_NEAR(15.0, waypoint.s, 1e-4);\n-  EXPECT_NEAR(5.0, sl.s(), 1e-4);\n+  EXPECT_NEAR(8.0, waypoint.s, 1e-4);\n+  EXPECT_NEAR(3.0, sl.s(), 1e-4);\n   EXPECT_NEAR(0.0, sl.l(), 1e-4);\n-  point = lane1->GetSmoothPoint(25);\n+  point = lane1->GetSmoothPoint(15);\n   EXPECT_FALSE(route_segments.GetProjection(point, &sl, &waypoint));\n   auto lane2 = hdmap_.GetLaneById(hdmap::MakeMapId(\"13_1_-1\"));\n   route_segments.emplace_back(lane2, 20, 30);\n@@ -77,7 +77,7 @@ TEST_F(RouteSegmentsTest, GetProjection) {\n   EXPECT_TRUE(route_segments.GetProjection(point, &sl, &waypoint));\n   EXPECT_EQ(lane2, waypoint.lane);\n   EXPECT_NEAR(25.0, waypoint.s, 1e-4);\n-  EXPECT_NEAR(15.0, sl.s(), 1e-4);\n+  EXPECT_NEAR(10.0, sl.s(), 1e-4);\n   EXPECT_NEAR(0.0, sl.l(), 1e-4);\n   point = lane2->GetSmoothPoint(31);\n   EXPECT_FALSE(route_segments.GetProjection(point, &sl, &waypoint));"
        }
    ],
    "ApolloAuto/apollo/1736": [
        {
            "sha": "942e819f9735ab484c6cf440628b397c500d4902",
            "filename": "modules/map/hdmap/adapter/xml_parser/util_xml_parser.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/7cb0712581d40859eb87429c310772b13261991e/modules%2Fmap%2Fhdmap%2Fadapter%2Fxml_parser%2Futil_xml_parser.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/7cb0712581d40859eb87429c310772b13261991e/modules%2Fmap%2Fhdmap%2Fadapter%2Fxml_parser%2Futil_xml_parser.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Fhdmap%2Fadapter%2Fxml_parser%2Futil_xml_parser.cc?ref=7cb0712581d40859eb87429c310772b13261991e",
            "patch": "@@ -140,7 +140,7 @@ Status UtilXmlParser::ParseOutline(const tinyxml2::XMLElement& xml_node,\n     WGS84ToUTM(ptx, pty, ptz, &output_x, &output_y, &output_z);\n     pt->set_x(output_x);\n     pt->set_y(output_y);\n-    // pt->set_z(output_z);\n+    pt->set_z(output_z);\n \n     sub_node = sub_node->NextSiblingElement(\"cornerGlobal\");\n   }"
        }
    ],
    "ApolloAuto/apollo/1814": [
        {
            "sha": "b971fab0f6efb0611ebabb2596cf7ed3b5450b00",
            "filename": "modules/map/tools/proto_map_generator.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b639681e221241ca28238b14ba753f04ff4e5836/modules%2Fmap%2Ftools%2Fproto_map_generator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b639681e221241ca28238b14ba753f04ff4e5836/modules%2Fmap%2Ftools%2Fproto_map_generator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Ftools%2Fproto_map_generator.cc?ref=b639681e221241ca28238b14ba753f04ff4e5836",
            "patch": "@@ -35,7 +35,7 @@ int main(int argc, char **argv) {\n \n   google::ParseCommandLineFlags(&argc, &argv, true);\n \n-  const auto map_filename = apollo::hdmap::BaseMapFile();\n+  const auto map_filename = FLAGS_map_dir + \"/base_map.xml\";;\n   apollo::hdmap::Map pb_map;\n   CHECK(apollo::hdmap::adapter::OpendriveAdapter::LoadData(\n       map_filename, &pb_map)) << \"fail to load data\";"
        }
    ],
    "ApolloAuto/apollo/1873": [
        {
            "sha": "42c04dab33d221270fd92a023ad7d9cc2fc56c67",
            "filename": "modules/map/pnc_map/route_segments.cc",
            "status": "modified",
            "additions": 6,
            "deletions": 26,
            "changes": 32,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/bcb2f8dd65f126bf640917b6b1feb8969753a354/modules%2Fmap%2Fpnc_map%2Froute_segments.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/bcb2f8dd65f126bf640917b6b1feb8969753a354/modules%2Fmap%2Fpnc_map%2Froute_segments.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Fpnc_map%2Froute_segments.cc?ref=bcb2f8dd65f126bf640917b6b1feb8969753a354",
            "patch": "@@ -278,7 +278,7 @@ bool RouteSegments::CanDriveFrom(const LaneWaypoint &waypoint) const {\n   common::SLPoint route_sl;\n   bool has_projection = GetProjection(point, &route_sl, &segment_waypoint);\n   if (!has_projection) {\n-    ADEBUG << \"No projection from waypoint: \" << waypoint.DebugString();\n+    AERROR << \"No projection from waypoint: \" << waypoint.DebugString();\n     return false;\n   }\n   // 2. heading should be the same.\n@@ -287,31 +287,11 @@ bool RouteSegments::CanDriveFrom(const LaneWaypoint &waypoint) const {\n   double heading_diff =\n       common::math::AngleDiff(waypoint_heading, segment_heading);\n   if (std::fabs(heading_diff) > M_PI / 2) {\n-    ADEBUG << \"Angle diff too large\";\n+    AERROR << \"Angle diff too large:\" << heading_diff;\n     return false;\n   }\n \n-  // 3. segment waypoint should be waypoint's neighbor\n-  // assume waypoint is at left side\n-  const auto *neighbor_ids =\n-      &(segment_waypoint.lane->lane().left_neighbor_forward_lane_id());\n-  if (route_sl.l() < 0) {  // waypoint is at right side\n-    neighbor_ids =\n-        &(segment_waypoint.lane->lane().right_neighbor_forward_lane_id());\n-  }\n-  bool is_neighbor = false;\n-  for (const auto &id : *neighbor_ids) {\n-    if (id.id() == waypoint.lane->id().id()) {\n-      is_neighbor = true;\n-      break;\n-    }\n-  }\n-  if (!is_neighbor) {\n-    ADEBUG << \"waypoint is not neighbor of current segment\";\n-    return false;\n-  }\n-\n-  // 4. the waypoint and the projected lane should not be separated apart.\n+  // 3. the waypoint and the projected lane should not be separated apart.\n   double waypoint_left_width = 0.0;\n   double waypoint_right_width = 0.0;\n   waypoint.lane->GetWidth(waypoint.s, &waypoint_left_width,\n@@ -323,17 +303,17 @@ bool RouteSegments::CanDriveFrom(const LaneWaypoint &waypoint) const {\n   auto segment_projected_point =\n       segment_waypoint.lane->GetSmoothPoint(segment_waypoint.s);\n   double dist = common::util::DistanceXY(point, segment_projected_point);\n-  const double kLaneSeparationDistance = 0.2;\n+  const double kLaneSeparationDistance = 0.3;\n   if (route_sl.l() < 0) {  // waypoint at right side\n     if (dist >\n         waypoint_left_width + segment_right_width + kLaneSeparationDistance) {\n-      ADEBUG << \"waypoint is too far to reach\";\n+      AERROR << \"waypoint is too far to reach: \" << dist;\n       return false;\n     }\n   } else {  // waypoint at left side\n     if (dist >\n         waypoint_right_width + segment_left_width + kLaneSeparationDistance) {\n-      ADEBUG << \"waypoint is too far to reach\";\n+      AERROR << \"waypoint is too far to reach: \" << dist;\n       return false;\n     }\n   }"
        }
    ],
    "ApolloAuto/apollo/1895": [
        {
            "sha": "c91b87405ca1efe400ba26ec354dfefd8f2976c0",
            "filename": "modules/localization/msf/msf_localization.cc",
            "status": "modified",
            "additions": 11,
            "deletions": 2,
            "changes": 13,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a2628487fe6f8dfc70647f4f74a7afde8ed4f8ed/modules%2Flocalization%2Fmsf%2Fmsf_localization.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a2628487fe6f8dfc70647f4f74a7afde8ed4f8ed/modules%2Flocalization%2Fmsf%2Fmsf_localization.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Fmsf_localization.cc?ref=a2628487fe6f8dfc70647f4f74a7afde8ed4f8ed",
            "patch": "@@ -23,6 +23,7 @@\n \n #include \"modules/common/adapters/adapter_manager.h\"\n #include \"modules/common/math/quaternion.h\"\n+#include \"modules/common/math/math_utils.h\"\n #include \"modules/common/time/time.h\"\n #include \"modules/common/util/file.h\"\n #include \"modules/common/util/string_tokenizer.h\"\n@@ -277,8 +278,16 @@ void MSFLocalization::OnRawImu(const drivers::gnss::Imu &imu_msg) {\n   auto itr_end = integ_localization_list.end();\n   for (; itr != itr_end; ++itr) {\n     if (itr->state() == LocalizationMeasureState::OK) {\n-      PublishPoseBroadcastTF(itr->localization());\n-      AdapterManager::PublishLocalization(itr->localization());\n+      // add PI/2 for heading\n+      LocalizationEstimate local_result = itr->localization();\n+      apollo::localization::Pose *posepb_loc\n+          = local_result.mutable_pose();\n+      double new_heading = apollo::common::math::\n+          NormalizeAngle(posepb_loc->heading() + M_PI_2);\n+      posepb_loc->set_heading(new_heading);\n+\n+      PublishPoseBroadcastTF(local_result);\n+      AdapterManager::PublishLocalization(local_result);\n     }\n   }\n "
        }
    ],
    "ApolloAuto/apollo/1944": [
        {
            "sha": "c280d720ecc0c555958d34bbeebff9a93a1f8777",
            "filename": "modules/tools/rosbag/drive_event.py",
            "status": "modified",
            "additions": 8,
            "deletions": 12,
            "changes": 20,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c5e419855d5c85039f561929c3a08b3da6cf3948/modules%2Ftools%2Frosbag%2Fdrive_event.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c5e419855d5c85039f561929c3a08b3da6cf3948/modules%2Ftools%2Frosbag%2Fdrive_event.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Frosbag%2Fdrive_event.py?ref=c5e419855d5c85039f561929c3a08b3da6cf3948",
            "patch": "@@ -24,6 +24,7 @@\n import argparse\n import datetime\n import shutil\n+import time\n import os\n import rospy\n import sys\n@@ -97,28 +98,23 @@ def OnReceiveLocalization(localization_msg):\n             continue\n         if event_type[0].lower() != 'd':\n             continue\n-        current_time = rospy.get_rostime()\n+        current_time = time.time()\n         event_str = None\n         while not event_str:\n             event_str = raw_input(\"Type Event:>\")\n             event_str = event_str.strip()\n-        seq_num += 1\n-        time = datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\")\n-        filename = time + \"%03d_drive_event.pb.txt\" % seq_num\n-        filename = os.path.join(g_args.dir, filename)\n-        while os.path.isfile(filename):\n-            seq_num += 1\n-            filename = os.path.join(g_args.dir,\n-                                    \"%03d_drive_event.pb.txt\" % seq_num)\n-        seconds = current_time.secs + current_time.nsecs / 1000.0\n         event_msg = drive_event_meta_msg.msg_type()()\n-        event_msg.header.timestamp_sec = seconds\n+        event_msg.header.timestamp_sec = current_time\n         event_msg.header.module_name = \"drive_event\"\n+        seq_num += 1\n         event_msg.header.sequence_num = seq_num\n         event_msg.header.version = 1\n         event_msg.event = event_str\n         if g_localization:\n             event_msg.location.CopyFrom(g_localization.pose)\n         pub.publish(event_msg)\n+        time_str = datetime.datetime.fromtimestamp(current_time).strftime(\n+            \"%Y%m%d%H%M%S\")\n+        filename = os.path.join(g_args.dir, \"%s_drive_event.pb.txt\" % time_str)\n         proto_utils.write_pb_to_text_file(event_msg, filename)\n-        print(\"logged to rosbag and written file %s\" % filename)\n+        print(\"logged to rosbag and written to file %s\" % filename)"
        }
    ],
    "ApolloAuto/apollo/2056": [
        {
            "sha": "8031c668e960d77fc3b2d974ef3a5c486bd29b65",
            "filename": "modules/control/controller/mpc_controller.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 4,
            "changes": 7,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b8771e8c8cfe914123cb0c1e1505a61206beee16/modules%2Fcontrol%2Fcontroller%2Fmpc_controller.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b8771e8c8cfe914123cb0c1e1505a61206beee16/modules%2Fcontrol%2Fcontroller%2Fmpc_controller.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcontrol%2Fcontroller%2Fmpc_controller.cc?ref=b8771e8c8cfe914123cb0c1e1505a61206beee16",
            "patch": "@@ -255,8 +255,8 @@ void MPCController::LoadMPCGainScheduler(\n       << \"Fail to load heading error gain scheduler\";\n \n   feedforwardterm_interpolation_.reset(new Interpolation1D);\n-  CHECK(heading_err_interpolation_->Init(xy2))\n-      << \"Fail to load heading error gain scheduler\";\n+  CHECK(feedforwardterm_interpolation_->Init(xy2))\n+      << \"Fail to load feedforwardterm gain scheduler\";\n \n   steer_weight_interpolation_.reset(new Interpolation1D);\n   CHECK(steer_weight_interpolation_->Init(xy2))\n@@ -409,9 +409,8 @@ Status MPCController::ComputeControlCommand(\n   cmd->set_brake(brake_cmd);\n \n   debug->set_heading(VehicleStateProvider::instance()->heading());\n-  debug->set_steer_angle(steer_angle);\n   debug->set_steering_position(chassis->steering_percentage());\n-\n+  debug->set_steer_angle(steer_angle);\n   debug->set_steer_angle_feedforward(steer_angle_feedforwardterm_updated_);\n   debug->set_steer_angle_feedback(steer_angle_feedback);\n   debug->set_steering_position(chassis->steering_percentage());"
        }
    ],
    "ApolloAuto/apollo/2084": [
        {
            "sha": "febce6924afe17ebdcaf9be60c5671eccb44a652",
            "filename": "modules/prediction/container/obstacles/obstacle.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/08161e953b39acb91a5101aff79e6b93a624b69c/modules%2Fprediction%2Fcontainer%2Fobstacles%2Fobstacle.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/08161e953b39acb91a5101aff79e6b93a624b69c/modules%2Fprediction%2Fcontainer%2Fobstacles%2Fobstacle.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fcontainer%2Fobstacles%2Fobstacle.cc?ref=08161e953b39acb91a5101aff79e6b93a624b69c",
            "patch": "@@ -292,8 +292,8 @@ void Obstacle::SetVelocity(const PerceptionObstacle& perception_obstacle,\n         double prev_y = mutable_feature(0)->position().y();\n         double diff_x = feature->position().x() - prev_x;\n         double diff_y = feature->position().y() - prev_y;\n-        if (diff_x > FLAGS_valid_position_diff_thred &&\n-            diff_y > FLAGS_valid_position_diff_thred) {\n+        if (std::abs(diff_x) > FLAGS_valid_position_diff_thred &&\n+            std::abs(diff_y) > FLAGS_valid_position_diff_thred) {\n           velocity_heading = std::atan2(diff_y, diff_x);\n           velocity_x = speed * std::cos(velocity_heading);\n           velocity_y = speed * std::sin(velocity_heading);"
        }
    ],
    "ApolloAuto/apollo/2136": [
        {
            "sha": "86d325073cbfeda34b994a9b3707d808bf2bc7d5",
            "filename": "modules/planning/tasks/speed_decider/speed_decider.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/63e4a1c2c097328eb935b8ea58e0977043214ae6/modules%2Fplanning%2Ftasks%2Fspeed_decider%2Fspeed_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/63e4a1c2c097328eb935b8ea58e0977043214ae6/modules%2Fplanning%2Ftasks%2Fspeed_decider%2Fspeed_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fspeed_decider%2Fspeed_decider.cc?ref=63e4a1c2c097328eb935b8ea58e0977043214ae6",
            "patch": "@@ -114,6 +114,9 @@ bool SpeedDecider::IsLowSpeedDecelerating(\n // if the obstacle drive at current speed and ego vehicle use some reasonable\n // deceleration\n bool SpeedDecider::IsTooClose(const PathObstacle& path_obstacle) const {\n+  if (!path_obstacle.IsBlockingObstacle()) {\n+    return false;\n+  }\n   if (path_obstacle.st_boundary().min_t() > 0.0) {\n     return false;\n   }"
        }
    ],
    "ApolloAuto/apollo/2142": [
        {
            "sha": "93c6fbbed2d8686b35314e04f212cc1b5f80f969",
            "filename": "docs/quickstart/apollo_2_0_sensor_calibration_guide.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/95184f3af47bac722db82b0c38f735d588557a98/docs%2Fquickstart%2Fapollo_2_0_sensor_calibration_guide.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/95184f3af47bac722db82b0c38f735d588557a98/docs%2Fquickstart%2Fapollo_2_0_sensor_calibration_guide.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fquickstart%2Fapollo_2_0_sensor_calibration_guide.md?ref=95184f3af47bac722db82b0c38f735d588557a98",
            "patch": "@@ -76,7 +76,7 @@ In Apollo 2.0, we add three new calibration functions: Camera-to-Camera calibrat\n \r\n   Because our calibration method is based on nature sence, an ideal calibration place can significantly improve the precision. We recommend selecting a textured site contains some land marks, such as trees, poles, street lights, traffic signs, stationary objects and clear traffic lines. A good calibraiton environment is shown below: \r\n \r\n-  ![](images/apollo_2.0_sensor_calibration/calibration_place.png)\r\n+  ![](images/calibration/sensor_calibration/calibration_place.png)\r\n   <p align=\"center\"> Figure 1. A good calibraiton place </p>\r\n \r\n 4. Required Topics\r\n@@ -290,10 +290,10 @@ When the calibration is completed, the corresponding calibration result verifica\n * Result Examples: As shown in the following figures, figure 6 shows a good calibration result which meet the precision requirements, and figure 7 is a phenomenon that does not meet the requirements of precision.\r\n \r\n ![](images/calibration/sensor_calibration/radar_cam_good.png)\r\n-<p align=\"center\"> Figure 2. The good Camera-to-Radar calibration validation result </p>\r\n+<p align=\"center\"> Figure 6. The good Camera-to-Radar calibration validation result </p>\r\n \r\n ![](images/calibration/sensor_calibration/radar_cam_error.png)\r\n-<p align=\"center\"> Figure 3. The bad Camera-to-Radar calibration validation result </p>\r\n+<p align=\"center\"> Figure 7. The bad Camera-to-Radar calibration validation result </p>\r\n \r\n * Attentions: \r\n \r"
        }
    ],
    "ApolloAuto/apollo/2264": [
        {
            "sha": "782d11d677fb36ed6920935b9ea8b6673a61af40",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 11,
            "deletions": 5,
            "changes": 16,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5b18d59143f17ead6c6933388c765fa7d3dcc9bf/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5b18d59143f17ead6c6933388c765fa7d3dcc9bf/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=5b18d59143f17ead6c6933388c765fa7d3dcc9bf",
            "patch": "@@ -81,6 +81,10 @@ if [ -z \"${DOCKER_REPO}\" ]; then\n     DOCKER_REPO=apolloauto/apollo\n fi\n \n+if [ \"$INCHINA\" == \"yes\" ]; then\n+    DOCKER_REPO=registry.docker-cn.com/apolloauto/apollo\n+fi\n+\n IMG=${DOCKER_REPO}:$VERSION\n APOLLO_ROOT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/../..\" && pwd )\"\n \n@@ -94,11 +98,7 @@ source ${APOLLO_ROOT_DIR}/scripts/apollo_base.sh\n \n function main(){\n \n-    if [ \"$INCHINA\" == \"yes\" ]; then\n-        docker pull \"registry.docker-cn.com/${IMG}\"\n-    else\n-        docker pull $IMG\n-    fi\n+    docker pull $IMG\n \n     docker ps -a --format \"{{.Names}}\" | grep 'apollo_dev' 1>/dev/null\n     if [ $? == 0 ]; then\n@@ -165,6 +165,12 @@ function main(){\n         --shm-size 512M \\\n         $IMG \\\n         /bin/bash\n+\n+    if [ $? -ne 0 ];then\n+\terror \"Failed to start docker container \\\"apollo_dev\\\" based on image: $IMG\"\n+\texit 1\n+    fi\n+\n     if [ \"${USER}\" != \"root\" ]; then\n         docker exec apollo_dev bash -c '/apollo/scripts/docker_adduser.sh'\n     fi"
        }
    ],
    "ApolloAuto/apollo/2511": [
        {
            "sha": "a9762a8a232c2a99411a205deebf6fe402a6c536",
            "filename": "modules/planning/tasks/dp_poly_path/dp_road_graph.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f7644385b8c70ceea3114d769454175b8352efd2/modules%2Fplanning%2Ftasks%2Fdp_poly_path%2Fdp_road_graph.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f7644385b8c70ceea3114d769454175b8352efd2/modules%2Fplanning%2Ftasks%2Fdp_poly_path%2Fdp_road_graph.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdp_poly_path%2Fdp_road_graph.cc?ref=f7644385b8c70ceea3114d769454175b8352efd2",
            "patch": "@@ -329,7 +329,7 @@ bool DPRoadGraph::SamplePathWaypoints(\n     }\n     std::vector<common::SLPoint> level_points;\n     planning_internal::SampleLayerDebug sample_layer_debug;\n-    for (uint8_t j = 0; j < sample_l.size(); ++j) {\n+    for (size_t j = 0; j < sample_l.size(); ++j) {\n       const double l = sample_l[j];\n       constexpr double kResonateDistance = 1e-3;\n       common::SLPoint sl;"
        }
    ],
    "ApolloAuto/apollo/2549": [
        {
            "sha": "288b9a7debd8b07ccece873456cee1a353051282",
            "filename": "docs/quickstart/apollo_2_0_sensor_calibration_guide.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3e9f4311b0233d236cfb5d3619f7aa54620c511b/docs%2Fquickstart%2Fapollo_2_0_sensor_calibration_guide.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3e9f4311b0233d236cfb5d3619f7aa54620c511b/docs%2Fquickstart%2Fapollo_2_0_sensor_calibration_guide.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fquickstart%2Fapollo_2_0_sensor_calibration_guide.md?ref=3e9f4311b0233d236cfb5d3619f7aa54620c511b",
            "patch": "@@ -155,10 +155,10 @@ rostopic echo /apollo/sensor/gnss/ins_stat\n \r\n ```bash\r\n cd /apollo/scripts\r\n-bash sensor_calibration.sh lidar_camera\r\n+bash sensor_calibration.sh camera_camera\r\n ```\r\n \r\n-2. Run the Camera-to-Camera Calibration Tool using these commands:\r\n+2. Follow these guidelines to collect data:\r\n \r\n   * Because the two cameras have different timestamps, they cannot be completely synchronized, so it is important to drive the vehicle very slowly when recording the data. The slow speed of the vehicle can effectively alleviate the image mismatch that is caused by the different timestamps.\r\n \r"
        }
    ],
    "ApolloAuto/apollo/2708": [
        {
            "sha": "e7207751d74dabf54b64091596e9b5dfb39c7159",
            "filename": "modules/common/time/time.h",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ca22938bdfd708382f40d848e44c46b8dc46549c/modules%2Fcommon%2Ftime%2Ftime.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ca22938bdfd708382f40d848e44c46b8dc46549c/modules%2Fcommon%2Ftime%2Ftime.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Ftime%2Ftime.h?ref=ca22938bdfd708382f40d848e44c46b8dc46549c",
            "patch": "@@ -55,8 +55,9 @@ using Duration = std::chrono::nanoseconds;\n  */\n using Timestamp = std::chrono::time_point<std::chrono::system_clock, Duration>;\n \n-static_assert(std::is_same<int64_t, Duration::rep>::value,\n-              \"The underlying type of the microseconds should be int64.\");\n+static_assert(\n+    sizeof(std::chrono::nanoseconds) >= sizeof(int64_t),\n+    \"The underlying type of the nanoseconds should be at least 64 bits.\");\n \n using nanos = std::chrono::nanoseconds;\n using micros = std::chrono::microseconds;"
        }
    ],
    "ApolloAuto/apollo/2969": [
        {
            "sha": "9d21c8ea50d06548f4d328e33ab56b364946341a",
            "filename": "modules/common/kv_db/kv_db.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/8144dfd2a321ca26580d754cb37b4a8f804df27a/modules%2Fcommon%2Fkv_db%2Fkv_db.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/8144dfd2a321ca26580d754cb37b4a8f804df27a/modules%2Fcommon%2Fkv_db%2Fkv_db.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Fkv_db%2Fkv_db.cc?ref=8144dfd2a321ca26580d754cb37b4a8f804df27a",
            "patch": "@@ -86,7 +86,8 @@ bool KVDB::Has(const std::string &key) {\n \n   std::string value;\n   const auto status = GetDB()->Get(options, key, &value);\n-  return !status.IsNotFound();\n+  CHECK(status.ok() || status.IsNotFound()) << status.ToString();\n+  return status.ok();\n }\n \n std::string KVDB::Get(const std::string &key,\n@@ -95,6 +96,7 @@ std::string KVDB::Get(const std::string &key,\n \n   std::string value;\n   const auto status = GetDB()->Get(options, key, &value);\n+  CHECK(status.ok() || status.IsNotFound()) << status.ToString();\n   return status.ok() ? value : default_value;\n }\n "
        }
    ],
    "ApolloAuto/apollo/2971": [
        {
            "sha": "542c4b70812fb7b2c0ae7b03af965f19eef67012",
            "filename": "modules/tools/calibration/result2pb.py",
            "status": "modified",
            "additions": 5,
            "deletions": 6,
            "changes": 11,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/21f865f514510cbcb8f442d2f956645d1ac9c8ee/modules%2Ftools%2Fcalibration%2Fresult2pb.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/21f865f514510cbcb8f442d2f956645d1ac9c8ee/modules%2Ftools%2Fcalibration%2Fresult2pb.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fcalibration%2Fresult2pb.py?ref=21f865f514510cbcb8f442d2f956645d1ac9c8ee",
            "patch": "@@ -101,17 +101,16 @@ def get_calibration_table_pb(speed_table):\n             item.command = cmd\n     return calibration_table_pb\n \n-\n if __name__ == \"__main__\":\n-    if len(sys.argv) < 2:\n-        print \"usage: python plot_results.py old_control_conf.pb.txt result.csv\"\n+    if len(sys.argv) != 3:\n+        print(\"Usage: python plot_results.py old_control_conf.pb.txt result.csv\")\n+        sys.exit(0)\n \n     ctl_conf_pb = proto_utils.get_pb_from_text_file(sys.argv[1], ControlConf())\n     speed_table_dict = load_calibration_raw_data(sys.argv[2])\n     calibration_table_pb = get_calibration_table_pb(speed_table_dict)\n     ctl_conf_pb.lon_controller_conf.calibration_table.CopyFrom(\n         calibration_table_pb)\n \n-    f = open('control_conf.pb.txt', 'w')\n-    f.write(str(ctl_conf_pb))\n-    f.close()\n+    with open('control_conf.pb.txt', 'w') as f:\n+        f.write(str(ctl_conf_pb))"
        }
    ],
    "ApolloAuto/apollo/3000": [
        {
            "sha": "0ea3fcb8e1fd8d74b3a70ae31d1b78c21b6149d3",
            "filename": "modules/planning/planning.cc",
            "status": "modified",
            "additions": 17,
            "deletions": 5,
            "changes": 22,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d03a0d2f27230a03f3b24f894a11eb6d8ec1a37e/modules%2Fplanning%2Fplanning.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d03a0d2f27230a03f3b24f894a11eb6d8ec1a37e/modules%2Fplanning%2Fplanning.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fplanning.cc?ref=d03a0d2f27230a03f3b24f894a11eb6d8ec1a37e",
            "patch": "@@ -290,10 +290,16 @@ void Planning::RunOnce() {\n     std::string msg(\"Failed to init frame\");\n     AERROR << msg;\n     if (FLAGS_publish_estop) {\n-      ADCTrajectory estop;\n-      estop.mutable_estop();\n-      status.Save(estop.mutable_header()->mutable_status());\n-      PublishPlanningPb(&estop, start_timestamp);\n+      // Because the function \"Control::ProduceControlCommand()\" checks the\n+      // \"estop\" signal with the following line (Line 170 in control.cc):\n+      // estop_ = estop_ || trajectory_.estop().is_estop();\n+      // we should add more information to ensure the estop being triggered.\n+      ADCTrajectory estop_trajectory;\n+      EStop* estop = estop_trajectory.mutable_estop();\n+      estop->set_is_estop(true);\n+      estop->set_reason(status.error_message());\n+      status.Save(estop_trajectory.mutable_header()->mutable_status());\n+      PublishPlanningPb(&estop_trajectory, start_timestamp);\n     } else {\n       not_ready->set_reason(msg);\n       status.Save(not_ready_pb.mutable_header()->mutable_status());\n@@ -326,7 +332,13 @@ void Planning::RunOnce() {\n     AERROR << \"Planning failed:\" << status.ToString();\n     if (FLAGS_publish_estop) {\n       AERROR << \"Planning failed and set estop\";\n-      trajectory_pb->mutable_estop();\n+      // Because the function \"Control::ProduceControlCommand()\" checks the\n+      // \"estop\" signal with the following line (Line 170 in control.cc):\n+      // estop_ = estop_ || trajectory_.estop().is_estop();\n+      // we should add more information to ensure the estop being triggered.\n+      EStop* estop = trajectory_pb->mutable_estop();\n+      estop->set_is_estop(true);\n+      estop->set_reason(status.error_message());\n     }\n   }\n "
        }
    ],
    "ApolloAuto/apollo/3496": [
        {
            "sha": "ea35ef5145b6f01b9391c8533416deb5ceddc2a9",
            "filename": "modules/perception/obstacle/camera/detector/yolo_camera_detector/yolo_camera_detector.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/eec14dc63292ee2af47b4c8c9a14591bffe55b1c/modules%2Fperception%2Fobstacle%2Fcamera%2Fdetector%2Fyolo_camera_detector%2Fyolo_camera_detector.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/eec14dc63292ee2af47b4c8c9a14591bffe55b1c/modules%2Fperception%2Fobstacle%2Fcamera%2Fdetector%2Fyolo_camera_detector%2Fyolo_camera_detector.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fobstacle%2Fcamera%2Fdetector%2Fyolo_camera_detector%2Fyolo_camera_detector.cc?ref=eec14dc63292ee2af47b4c8c9a14591bffe55b1c",
            "patch": "@@ -134,7 +134,7 @@ void YoloCameraDetector::load_intrinsic(\n   // inference input shape\n   if (options.intrinsic == nullptr) {\n     AWARN << \"YoloCameraDetector options.intrinsic is nullptr. Use default\";\n-    image_height_ = 1208;\n+    image_height_ = 1080;\n     image_width_ = 1920;\n   } else {\n     image_height_ = options.intrinsic->get_height();"
        }
    ],
    "ApolloAuto/apollo/3545": [
        {
            "sha": "ce9add0f9bc490d0a9a2175767a7b2a0e71dd2d5",
            "filename": "modules/tools/supervisord/release.conf",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/78c72a2d1db3474b2b8ff560cdbf0f92b1644e8e/modules%2Ftools%2Fsupervisord%2Frelease.conf",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/78c72a2d1db3474b2b8ff560cdbf0f92b1644e8e/modules%2Ftools%2Fsupervisord%2Frelease.conf",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fsupervisord%2Frelease.conf?ref=78c72a2d1db3474b2b8ff560cdbf0f92b1644e8e",
            "patch": "@@ -150,7 +150,7 @@ redirect_stderr=true\n stdout_logfile=/apollo/data/log/conti_radar.out\n \n [program:mobileye]\n-command=/apollo/modules/drivers/mobileye/mobileye\n+command=/apollo/modules/drivers/mobileye/mobileye --flagfile=/apollo/modules/drivers/mobileye/conf/mobileye.conf\n autostart=false\n numprocs=1\n exitcodes=0\n@@ -205,7 +205,7 @@ redirect_stderr=true\n stdout_logfile=/apollo/data/log/planning.out\n \n [program:navigation_planning]\n-command=/apollo/modules/planning/planning --flagfile=/apollo/modules/planning/conf/planning_navi.conf --stderrthreshold=3 --use_navigation_mode\n+command=/apollo/modules/planning/planning --flagfile=/apollo/modules/planning/conf/planning_navi.conf --stderrthreshold=3\n autostart=false\n numprocs=1\n exitcodes=0"
        }
    ],
    "ApolloAuto/apollo/3777": [
        {
            "sha": "9a9b36efedfdcb3bd9402d2f8cbfe2b71f6b83e0",
            "filename": "modules/perception/obstacle/camera/visualizer/glfw_fusion_viewer.cc",
            "status": "modified",
            "additions": 8,
            "deletions": 7,
            "changes": 15,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d0d94262235ed2024c882db7a689d554793c1f0e/modules%2Fperception%2Fobstacle%2Fcamera%2Fvisualizer%2Fglfw_fusion_viewer.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d0d94262235ed2024c882db7a689d554793c1f0e/modules%2Fperception%2Fobstacle%2Fcamera%2Fvisualizer%2Fglfw_fusion_viewer.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fobstacle%2Fcamera%2Fvisualizer%2Fglfw_fusion_viewer.cc?ref=d0d94262235ed2024c882db7a689d554793c1f0e",
            "patch": "@@ -192,16 +192,17 @@ bool GLFWFusionViewer::initialize() {\n     ConfigManager* config_manager = ConfigManager::instance();\n     const ModelConfig* lane_post_process_model_config =\n         config_manager->GetModelConfig(FLAGS_onboard_lane_post_processor);\n+\n     if (lane_post_process_model_config == nullptr) {\n-      AERROR << \"Unknown lane post-processing model: \"\n+      AWARN << \"Unknown lane post-processing model: \"\n              << FLAGS_onboard_lane_post_processor;\n-      return false;\n-    }\n-    if (!lane_post_process_model_config->GetValue(\"lane_map_confidence_thresh\",\n-                                                  &lane_map_threshold_)) {\n-      AERROR << \"The confidence threshold of label map not found.\";\n-      return false;\n+    } else {\n+      if (!lane_post_process_model_config\n+        ->GetValue(\"lane_map_confidence_thresh\", &lane_map_threshold_)) {\n+        AWARN << \"The confidence threshold of label map not found.\";\n+      }\n     }\n+\n     AINFO << \"onboard lane post-processor: \"\n           << FLAGS_onboard_lane_post_processor;\n     AINFO << \"lane map confidence threshold = \" << lane_map_threshold_;"
        }
    ],
    "ApolloAuto/apollo/3793": [
        {
            "sha": "768893d6e07fdb4a4d7441d99be12a1d43f577b0",
            "filename": "modules/planning/lattice/trajectory_generation/end_condition_sampler.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/71dd72a0f651b779422a04201bac0a4283aa00a8/modules%2Fplanning%2Flattice%2Ftrajectory_generation%2Fend_condition_sampler.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/71dd72a0f651b779422a04201bac0a4283aa00a8/modules%2Fplanning%2Flattice%2Ftrajectory_generation%2Fend_condition_sampler.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Flattice%2Ftrajectory_generation%2Fend_condition_sampler.cc?ref=71dd72a0f651b779422a04201bac0a4283aa00a8",
            "patch": "@@ -170,7 +170,8 @@ EndConditionSampler::QueryPathTimeObstacleSamplePoints() const {\n           obstacle_id, path_time_point.s(), path_time_point.t());\n       SamplePoint sample_point;\n       sample_point.mutable_path_time_point()->CopyFrom(path_time_point);\n-      sample_point.mutable_path_time_point()->set_s(FLAGS_default_lon_buffer);\n+      sample_point.mutable_path_time_point()->set_s(\n+          path_time_point.s() + FLAGS_default_lon_buffer);\n       sample_point.set_ref_v(v);\n       sample_points.push_back(std::move(sample_point));\n     }\n@@ -183,7 +184,8 @@ EndConditionSampler::QueryPathTimeObstacleSamplePoints() const {\n           obstacle_id, path_time_point.s(), path_time_point.t());\n       SamplePoint sample_point;\n       sample_point.mutable_path_time_point()->CopyFrom(path_time_point);\n-      sample_point.mutable_path_time_point()->set_s(-FLAGS_default_lon_buffer);\n+      sample_point.mutable_path_time_point()->set_s(\n+          path_time_point.s() - FLAGS_default_lon_buffer);\n       sample_point.set_ref_v(v);\n       sample_points.push_back(std::move(sample_point));\n     }"
        }
    ],
    "ApolloAuto/apollo/3842": [
        {
            "sha": "67fd411c8ad0fc3c342243d8f3fc31eb949da6f3",
            "filename": "modules/localization/msf/common/util/threadpool.h",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/82a7e0aa94c57938a404028a0468916e90f95aff/modules%2Flocalization%2Fmsf%2Fcommon%2Futil%2Fthreadpool.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/82a7e0aa94c57938a404028a0468916e90f95aff/modules%2Flocalization%2Fmsf%2Fcommon%2Futil%2Fthreadpool.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Fcommon%2Futil%2Fthreadpool.h?ref=82a7e0aa94c57938a404028a0468916e90f95aff",
            "patch": "@@ -253,7 +253,7 @@ class ThreadPoolImpl : public std::enable_shared_from_this<ThreadPoolImpl> {\n     self->task_or_terminate_workers_event_.notify_all();\n \n     if (wait) {\n-      while (active_worker_count_ > 0) {\n+      while (worker_count_ > 0) {\n         self->worker_idle_or_terminated_event_.wait(lock);\n       }\n "
        }
    ],
    "ApolloAuto/apollo/3965": [
        {
            "sha": "aa5ccf5096a009349c0ec3baecc4732f78075934",
            "filename": "modules/canbus/vehicle/gem/protocol/turn_cmd_63.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c587f9aa6aa44d4d54bf399a1fa6bd9e322d8dc7/modules%2Fcanbus%2Fvehicle%2Fgem%2Fprotocol%2Fturn_cmd_63.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c587f9aa6aa44d4d54bf399a1fa6bd9e322d8dc7/modules%2Fcanbus%2Fvehicle%2Fgem%2Fprotocol%2Fturn_cmd_63.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcanbus%2Fvehicle%2Fgem%2Fprotocol%2Fturn_cmd_63.cc?ref=c587f9aa6aa44d4d54bf399a1fa6bd9e322d8dc7",
            "patch": "@@ -41,7 +41,7 @@ void Turncmd63::UpdateData(uint8_t* data) {\n \n void Turncmd63::Reset() {\n   // TODO(QiL) :you should check this manually\n-  turn_signal_cmd_ = Turn_cmd_63::TURN_SIGNAL_CMD_RIGHT;\n+  turn_signal_cmd_ = Turn_cmd_63::TURN_SIGNAL_CMD_NONE;\n }\n \n Turncmd63* Turncmd63::set_turn_signal_cmd("
        }
    ],
    "ApolloAuto/apollo/3986": [
        {
            "sha": "36d2ba4503e133ef9cd9a18f6765992b30cf51cb",
            "filename": "docs/howto/how_to_run_apollo_2.5_perception_visualizer.md",
            "status": "modified",
            "additions": 9,
            "deletions": 9,
            "changes": 18,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a95562244716464d739b1b1b92e8c9ac54b8d58a/docs%2Fhowto%2Fhow_to_run_apollo_2.5_perception_visualizer.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a95562244716464d739b1b1b92e8c9ac54b8d58a/docs%2Fhowto%2Fhow_to_run_apollo_2.5_perception_visualizer.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fhowto%2Fhow_to_run_apollo_2.5_perception_visualizer.md?ref=a95562244716464d739b1b1b92e8c9ac54b8d58a",
            "patch": "@@ -1,19 +1,19 @@\n # How to Run Offline Perception LowCost Visualizer (Apollo 2.5)\n \n-For Apollo 2.5, we provide an offline visualization tool based OpenGL and PCL libraries to show the obstacle perception results(including lane info) in both image front view and bird view. \n+For Apollo 2.5, we provide an offline visualization tool based OpenGL and PCL libraries to show the obstacle perception results(including lane info) in both image front view and bird view.\n \n We introduce the detailed steps to build and run the offline visualizer in docker as below:\n \n-### 1. Build The Perception Lowcost \n+### 1. Build The Perception Lowcost\n We use Bazel to build the offline perception visualizer.\n ```\n cd /apollo\n-bazel build_opt_gpu\n+./apollo.sh build_opt_gpu\n \n ```\n-In order to invoke visualizer subnode, we need to change the pointing of dag streaming config by modifying perception_lowcost.conf with either of the following two gflag config: \n+In order to invoke visualizer subnode, we need to change the pointing of dag streaming config by modifying perception_lowcost.conf with either of the following two gflag config:\n \n-This config is image only: \n+This config is image only:\n \n ```\n  --dag_config_path=conf/dag_camera_obstacle_lane_motion_vis.config\n@@ -34,11 +34,11 @@ Please double check your collected rosbag contains topic including camera images\n /apollo/sensor/camera/obstacle/front_6mm\n \n ```\n-After that, you can start perception and play bags \n+After that, you can start perception and play bags\n \n-```  \n+```\n ./scripts/perception_lowcost.sh start\n-rosbag play <bag file> --clock \n+rosbag play <bag file> --clock\n ```\n \n-Now you will see a pop-up window showing the perception result with images frame-by-frame. Top level panes are showing image detections in both 2D and 3D. Bottom left is the bird view visualization showing image obstacle tracks, radar obstacle tracks as well as fused tracks. You may switch on/off by pressing `O` (image track), `F` (fused track) and `D` (radar track) on the fly. \n\\ No newline at end of file\n+Now you will see a pop-up window showing the perception result with images frame-by-frame. Top level panes are showing image detections in both 2D and 3D. Bottom left is the bird view visualization showing image obstacle tracks, radar obstacle tracks as well as fused tracks. You may switch on/off by pressing `O` (image track), `F` (fused track) and `D` (radar track) on the fly.\n\\ No newline at end of file"
        }
    ],
    "ApolloAuto/apollo/4070": [
        {
            "sha": "d747836de13339ff4b72d4bc2cdc8aadee313a8c",
            "filename": "modules/map/relative_map/navigation_lane.cc",
            "status": "modified",
            "additions": 7,
            "deletions": 5,
            "changes": 12,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/77300d0dc21f681efc2a6a6caa20912752f0261f/modules%2Fmap%2Frelative_map%2Fnavigation_lane.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/77300d0dc21f681efc2a6a6caa20912752f0261f/modules%2Fmap%2Frelative_map%2Fnavigation_lane.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Frelative_map%2Fnavigation_lane.cc?ref=77300d0dc21f681efc2a6a6caa20912752f0261f",
            "patch": "@@ -196,14 +196,16 @@ bool NavigationLane::UpdateProjectionIndex(const common::Path &path) {\n   double min_d = std::numeric_limits<double>::max();\n   const int path_size = path.path_point_size();\n \n-  // I create a condition here that sets the \"last_project_index_\" to 0,\n+  // We create a condition here that sets the \"last_project_index_\" to 0,\n   // should the vehicle reach the end point of a cyclic/circular route. For\n   // cyclic/circular navigation lines where the distance between their starting\n-  // and end points are very small, it is tedious and unnecessary to re-send\n+  // and end points is very small, it is tedious and unnecessary to re-send\n   // navigation lines every time.\n-  if (last_project_index_ == path_size - 2) {\n-    const double d =\n-        DistanceXY(original_pose_.position(), path.path_point(0));\n+  const double kLoopEpsilon = 10.0;\n+  if (DistanceXY(path.path_point(0), path.path_point(path_size - 1)) <\n+          kLoopEpsilon &&\n+      last_project_index_ >= path_size - 2) {\n+    const double d = DistanceXY(original_pose_.position(), path.path_point(0));\n     if (d < FLAGS_max_distance_to_navigation_line) {\n       last_project_index_ = 0;\n       return true;"
        }
    ],
    "ApolloAuto/apollo/4081": [
        {
            "sha": "f5f31551675703249a24fc4728991ad633fe8de6",
            "filename": "modules/planning/planning.cc",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b33d7c861edc4ea240c5359fa69ecee61ee629fa/modules%2Fplanning%2Fplanning.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b33d7c861edc4ea240c5359fa69ecee61ee629fa/modules%2Fplanning%2Fplanning.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fplanning.cc?ref=b33d7c861edc4ea240c5359fa69ecee61ee629fa",
            "patch": "@@ -141,7 +141,11 @@ bool Planning::IsVehicleStateValid(const VehicleState& vehicle_state) {\n Status Planning::Start() {\n   timer_ = AdapterManager::CreateTimer(\n       ros::Duration(1.0 / FLAGS_planning_loop_rate), &Planning::OnTimer, this);\n-  reference_line_provider_->Start();\n+  // The \"reference_line_provider_\" may not be created yet in navigation mode.\n+  // It is necessary to check its existence.\n+  if (reference_line_provider_) {\n+    reference_line_provider_->Start();\n+  }\n   start_time_ = Clock::NowInSeconds();\n   AINFO << \"Planning started\";\n   return Status::OK();"
        }
    ],
    "ApolloAuto/apollo/4365": [
        {
            "sha": "a968344ac7e5dd9fc95167bf4ade887ba0a47f52",
            "filename": "modules/map/relative_map/navigation_lane.cc",
            "status": "modified",
            "additions": 13,
            "deletions": 5,
            "changes": 18,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d9acff3d75f8aab131729e15d4b1ac9267ba7dbc/modules%2Fmap%2Frelative_map%2Fnavigation_lane.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d9acff3d75f8aab131729e15d4b1ac9267ba7dbc/modules%2Fmap%2Frelative_map%2Fnavigation_lane.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Frelative_map%2Fnavigation_lane.cc?ref=d9acff3d75f8aab131729e15d4b1ac9267ba7dbc",
            "patch": "@@ -61,6 +61,7 @@ bool NavigationLane::GeneratePath() {\n     current_navi_path_ = std::make_shared<NavigationPath>();\n     auto *path = current_navi_path_->mutable_path();\n     ConvertLaneMarkerToPath(lane_marker, path);\n+    current_navi_path_->set_path_priority(0);\n   };\n \n   // priority: merge > navigation line > perception lane marker\n@@ -73,6 +74,8 @@ bool NavigationLane::GeneratePath() {\n       auto current_navi_path = std::make_shared<NavigationPath>();\n       auto *path = current_navi_path->mutable_path();\n       if (ConvertNavigationLineToPath(path, i)) {\n+        current_navi_path->set_path_priority(\n+            navigation_info_.navigation_path(i).path_priority());\n         navigation_path_list_.emplace_back(i, current_navi_path);\n       }\n     }\n@@ -99,20 +102,21 @@ bool NavigationLane::GeneratePath() {\n \n     // Get which navigation path the vehicle is currently on.\n     double min_d = std::numeric_limits<double>::max();\n+    int current_line_index = 0;\n     for (const auto &navi_path_pair : navigation_path_list_) {\n       AINFO << \"Current navigation path index is: \" << navi_path_pair.first;\n       double current_d = last_project_index_map_[navi_path_pair.first].second;\n       if (current_d < min_d) {\n         min_d = current_d;\n+        current_line_index = navi_path_pair.first;\n         current_navi_path_ = navi_path_pair.second;\n       }\n     }\n \n     // Merge current navigation path where the vehicle is located with perceived\n     // lane markers.\n-    // Incorrect, don't use it temporarily.\n-    // auto *path = current_navi_path_->mutable_path();\n-    // MergeNavigationLineAndLaneMarker(path, current_line_index);\n+    auto *path = current_navi_path_->mutable_path();\n+    MergeNavigationLineAndLaneMarker(path, current_line_index);\n     return true;\n   }\n \n@@ -162,20 +166,24 @@ void NavigationLane::MergeNavigationLineAndLaneMarker(common::Path *path,\n   const double len = std::fmin(\n       navigation_path.path_point(navigation_path.path_point_size() - 1).s(),\n       lane_marker_path.path_point(lane_marker_path.path_point_size() - 1).s());\n+  const double start_s = std::fmax(navigation_path.path_point(0).s(),\n+                                   lane_marker_path.path_point(0).s());\n \n   const double ds = 1.0;\n   int navigation_index = 0;\n   int lane_marker_index = 0;\n-  for (double s = 0.0; s < len; s += ds) {\n+  common::Path temp_path;\n+  for (double s = start_s; s < len; s += ds) {\n     auto p1 = GetPathPointByS(navigation_path, navigation_index, s,\n                               &navigation_index);\n     auto p2 = GetPathPointByS(lane_marker_path, lane_marker_index, s,\n                               &lane_marker_index);\n-    auto *p = path->add_path_point();\n+    auto *p = temp_path.add_path_point();\n     const double kWeight = 0.9;\n     *p = common::util::GetWeightedAverageOfTwoPathPoints(p1, p2, kWeight,\n                                                          1 - kWeight);\n   }\n+  path->mutable_path_point()->CopyFrom(temp_path.path_point());\n }\n \n common::PathPoint NavigationLane::GetPathPointByS(const common::Path &path,"
        }
    ],
    "ApolloAuto/apollo/4470": [
        {
            "sha": "fdd2503dbafb1ca1a33897d7833e5eef3877d93c",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d7abe2995fc66445d3aa7684f41c44055e4fce51/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d7abe2995fc66445d3aa7684f41c44055e4fce51/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=d7abe2995fc66445d3aa7684f41c44055e4fce51",
            "patch": "@@ -266,7 +266,7 @@ function main(){\n         -e DOCKER_USER=$USER \\\n         -e USER=$USER \\\n         -e DOCKER_USER_ID=$USER_ID \\\n-        -e DOCKER_GRP=$GRP \\\n+        -e DOCKER_GRP=\"$GRP\" \\\n         -e DOCKER_GRP_ID=$GRP_ID \\\n         -e DOCKER_IMG=$IMG \\\n         $(local_volumes) \\"
        }
    ],
    "ApolloAuto/apollo/4629": [
        {
            "sha": "e21ac912adee1348d19a32cda2d9e3913771fe67",
            "filename": "modules/tools/perception/garage_perception.bash",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4e665faa63d88d9c7719986d852c15adfc6b1c1f/modules%2Ftools%2Fperception%2Fgarage_perception.bash",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4e665faa63d88d9c7719986d852c15adfc6b1c1f/modules%2Ftools%2Fperception%2Fgarage_perception.bash",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fperception%2Fgarage_perception.bash?ref=4e665faa63d88d9c7719986d852c15adfc6b1c1f",
            "patch": "@@ -1,2 +1,2 @@\n #!/usr/bin/env bash\n-python replay_perception.py -f garage_*.json\n+python replay_perception.py garage_*.json"
        }
    ],
    "ApolloAuto/apollo/4765": [
        {
            "sha": "a2aa0027e9a7b2f15286f21fd99d17e1c480a5d6",
            "filename": "modules/tools/rosbag/sample_pnc_topics.py",
            "status": "modified",
            "additions": 6,
            "deletions": 5,
            "changes": 11,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/344a61bbad17bcdcec516a3d7c983c08d85aabcd/modules%2Ftools%2Frosbag%2Fsample_pnc_topics.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/344a61bbad17bcdcec516a3d7c983c08d85aabcd/modules%2Ftools%2Frosbag%2Fsample_pnc_topics.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Frosbag%2Fsample_pnc_topics.py?ref=344a61bbad17bcdcec516a3d7c983c08d85aabcd",
            "patch": "@@ -15,6 +15,7 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n ###############################################################################\n+\n \"\"\"\n Sample PNC topics. For each /path/to/a.bag, will generate\n /path/to/pnc_sample/a.bag.\n@@ -68,8 +69,8 @@ class SamplePNC(object):\n         '/apollo/monitor/static_info',\n     ]\n \n-    @staticmethod\n-    def ProcessBags(bags):\n+    @classmethod\n+    def process_bags(cls, bags):\n         for bag_file in bags:\n             output_dir = os.path.join(os.path.dirname(bag_file), 'pnc_sample')\n             output_bag = os.path.join(output_dir, os.path.basename(bag_file))\n@@ -87,9 +88,9 @@ def ProcessBags(bags):\n                         bag_out.write(topic, msg, t)\n \n if __name__ == '__main__':\n-    if len(sys.argv) == 1:\n-        glog.fatal('Wrong arguments!')\n+    if len(sys.argv) < 2:\n+        print(\"Usage: %s <bag_path> ...\" % sys.argv[0])\n         sys.exit(1)\n \n     bags = sorted(sum([glob.glob(arg) for arg in sys.argv[1:]], []))\n-    SamplePNC.ProcessBags(bags)\n+    SamplePNC.process_bags(bags)"
        }
    ],
    "ApolloAuto/apollo/4776": [
        {
            "sha": "0dd7dd5897c40c4e73093c39ce052c6c2e97c61d",
            "filename": "modules/tools/rosbag/copy_bags_between_disks.py",
            "status": "modified",
            "additions": 22,
            "deletions": 15,
            "changes": 37,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2dc36e373e7091170e82e50580eebbeff7040874/modules%2Ftools%2Frosbag%2Fcopy_bags_between_disks.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2dc36e373e7091170e82e50580eebbeff7040874/modules%2Ftools%2Frosbag%2Fcopy_bags_between_disks.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Frosbag%2Fcopy_bags_between_disks.py?ref=2dc36e373e7091170e82e50580eebbeff7040874",
            "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python\n \n ###############################################################################\n # Copyright 2018 The Apollo Authors. All Rights Reserved.\n@@ -15,6 +15,7 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n ###############################################################################\n+\n \"\"\"\n Copy bags between disks.\n \"\"\"\n@@ -31,19 +32,21 @@\n \n from modules.canbus.proto.chassis_pb2 import Chassis\n \n-kChassisTopic = '/apollo/canbus/chassis'\n-kDriveEventTopic = '/apollo/drive_event'\n-kLargeSizeTopics = set([\n+K_CHASSIS_TOPIC = '/apollo/canbus/chassis'\n+K_DRIVE_EVENT_TOPIC = '/apollo/drive_event'\n+\n+K_LARGE_SIZE_TOPICS = set([\n     '/apollo/sensor/camera/obstacle/front_6mm',\n     '/apollo/sensor/camera/traffic/image_long',\n     '/apollo/sensor/camera/traffic/image_short',\n     '/apollo/sensor/velodyne64/compensator/PointCloud2',\n ])\n-kCopyLargeSizeTopicsSecondsBeforeEvent = 20.0\n+K_COPY_LARGE_SIZE_TOPICS_SECONDS_BEFORE_EVENT = 20.0\n \n \n def GetDisks():\n     \"\"\"Get disks, which should be mounted under /media.\"\"\"\n+\n     disks = [disk.mountpoint for disk in psutil.disk_partitions()\n              if disk.mountpoint.startswith('/media/')]\n     disks.append('/apollo')\n@@ -83,31 +86,31 @@ def GetDisks():\n         sys.exit(1)\n     return copy_from, copy_to\n \n-\n def CollectEvents(bags):\n     \"\"\"Collect interested event timestamps.\"\"\"\n+\n     print('Collecting events...', end='')\n     events = []\n     cur_driving_mode = None\n     for bag_file in bags:\n         with Bag(bag_file, 'r') as bag:\n-            for topic, msg, t in bag.read_messages(topics=[kChassisTopic,\n-                                                           kDriveEventTopic]):\n+            for topic, msg, t in bag.read_messages(topics=[K_CHASSIS_TOPIC,\n+                                                           K_DRIVE_EVENT_TOPIC]):\n                 # For disengagement, take the message time as event time.\n-                if topic == kChassisTopic:\n+                if topic == K_CHASSIS_TOPIC:\n                     if (cur_driving_mode == Chassis.COMPLETE_AUTO_DRIVE and\n                         msg.driving_mode == Chassis.EMERGENCY_MODE):\n                         events.append(t.to_sec())\n                     cur_driving_mode = msg.driving_mode\n                 # For DriveEvent, take the header time as event time.\n-                elif topic == kDriveEventTopic:\n+                elif topic == K_DRIVE_EVENT_TOPIC:\n                     events.append(msg.header.timestamp_sec)\n     print('Collected {} events.'.format(len(events)))\n     return events\n \n-\n def SmartCopyBags(from_dir, to_dir):\n     \"\"\"Copy a task but filter useless sensor data.\"\"\"\n+\n     bags = sorted(glob.glob(os.path.join(from_dir, '*.bag')))\n     if len(bags) == 0:\n         return\n@@ -124,7 +127,7 @@ def SmartCopyBags(from_dir, to_dir):\n         with Bag(from_bag, 'r') as bag_in, Bag(to_bag, 'w') as bag_out:\n             for topic, msg, t in bag_in.read_messages():\n                 # For small size topics, always copy.\n-                if topic not in kLargeSizeTopics:\n+                if topic not in K_LARGE_SIZE_TOPICS:\n                     bag_out.write(topic, msg, t)\n                     continue\n \n@@ -133,12 +136,13 @@ def SmartCopyBags(from_dir, to_dir):\n                     next_event += 1\n                 # For large size topics, only copy when it's near an event.\n                 if (next_event < len(events) and events[next_event] - msg_sec <\n-                        kCopyLargeSizeTopicsSecondsBeforeEvent):\n+                    K_COPY_LARGE_SIZE_TOPICS_SECONDS_BEFORE_EVENT):\n                     bag_out.write(topic, msg, t)\n \n \n def SmartCopyDir(from_dir, to_dir):\n     \"\"\"Copy directory.\"\"\"\n+\n     print('Copy dir: {} -> {}'.format(from_dir, to_dir))\n     is_task_dir = False\n     for f in sorted(os.listdir(from_dir), reverse=True):\n@@ -155,12 +159,15 @@ def SmartCopyDir(from_dir, to_dir):\n \n         if f.endswith('.bag'):\n             is_task_dir = True\n+            break;\n+\n     if is_task_dir:\n         SmartCopyBags(from_dir, to_dir)\n \n \n-def Main():\n+def main():\n     \"\"\"Do the job.\"\"\"\n+\n     copy_from, copy_to = GetDisks()\n     from_dir = os.path.join(copy_from, 'data/bag')\n     if not os.path.exists(from_dir):\n@@ -188,4 +195,4 @@ def Main():\n             shutil.copytree(src, os.path.join(copy_to, dst)\n \n if __name__ == '__main__':\n-    Main()\n+    main()"
        }
    ],
    "ApolloAuto/apollo/4784": [
        {
            "sha": "e87e1114f2b9d9fef6bfab5564412cf2cc8b1bbd",
            "filename": "modules/tools/calibration/result2pb.py",
            "status": "modified",
            "additions": 4,
            "deletions": 9,
            "changes": 13,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/94e1e32814d1566f43671b7279c492f40964ff72/modules%2Ftools%2Fcalibration%2Fresult2pb.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/94e1e32814d1566f43671b7279c492f40964ff72/modules%2Ftools%2Fcalibration%2Fresult2pb.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fcalibration%2Fresult2pb.py?ref=94e1e32814d1566f43671b7279c492f40964ff72",
            "patch": "@@ -24,10 +24,9 @@\n from modules.control.proto import calibration_table_pb2\n from modules.control.proto.control_conf_pb2 import ControlConf\n \n-\n def load_calibration_raw_data(fn):\n     speed_table = {}\n-    f = open(fn, 'r')\n+    with open(fn, 'r') as f:\n     for line in f:\n         items = line.split(',')\n         cmd = round(float(items[0]))\n@@ -43,7 +42,6 @@ def load_calibration_raw_data(fn):\n             cmd_table = {}\n             cmd_table[cmd] = [acc]\n             speed_table[speed] = cmd_table\n-    f.close()\n     for speed, cmd_table in speed_table.items():\n         new_cmd_table = {}\n         for cmd, acc_list in cmd_table.items():\n@@ -61,10 +59,9 @@ def load_calibration_raw_data(fn):\n         speed_table2[speed] = acc_table\n     return speed_table2\n \n-\n def load_calibration_raw_data_old(fn):\n     speed_table = {}\n-    f = open(fn, 'r')\n+    with open(fn, 'r') as f:\n     for line in f:\n         items = line.split(',')\n         cmd = round(float(items[0]))\n@@ -80,10 +77,8 @@ def load_calibration_raw_data_old(fn):\n             acc_table = {}\n             acc_table[acc] = [cmd]\n             speed_table[speed] = acc_table\n-    f.close()\n     return speed_table\n \n-\n def get_calibration_table_pb(speed_table):\n     calibration_table_pb = calibration_table_pb2.ControlCalibrationTable()\n     speeds = speed_table.keys()\n@@ -103,8 +98,8 @@ def get_calibration_table_pb(speed_table):\n \n if __name__ == \"__main__\":\n     if len(sys.argv) != 3:\n-        print(\"Usage: python plot_results.py old_control_conf.pb.txt result.csv\")\n-        sys.exit(0)\n+        print(\"Usage: %s old_control_conf.pb.txt result.csv\" % sys.argv[0])\n+        sys.exit(1)\n \n     ctl_conf_pb = proto_utils.get_pb_from_text_file(sys.argv[1], ControlConf())\n     speed_table_dict = load_calibration_raw_data(sys.argv[2])"
        }
    ],
    "ApolloAuto/apollo/4790": [
        {
            "sha": "137a0035dcdf9b4203e5c0c45f1b77b35a5abaf3",
            "filename": "modules/map/tools/sim_map_generator.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3c85a3bcf2d085de072e778f803280a9fc23aecf/modules%2Fmap%2Ftools%2Fsim_map_generator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3c85a3bcf2d085de072e778f803280a9fc23aecf/modules%2Fmap%2Ftools%2Fsim_map_generator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Ftools%2Fsim_map_generator.cc?ref=3c85a3bcf2d085de072e778f803280a9fc23aecf",
            "patch": "@@ -33,7 +33,7 @@\n  */\n \n DEFINE_string(output_dir, \"/tmp/\", \"output map directory\");\n-DEFINE_double(angle_threshold, 1 / 180 * M_PI, /* 1 degree */\n+DEFINE_double(angle_threshold, 1. / 180 * M_PI, /* 1 degree */\n               \"Points are sampled when the accumulated direction change \"\n               \"exceeds the threshold\");\n DEFINE_int32(downsample_distance, 5, \"downsample rate for a normal path\");"
        }
    ],
    "ApolloAuto/apollo/4890": [
        {
            "sha": "d7728904b0440cb9ae2c54153f79c4ba37f752b3",
            "filename": "docs/specs/Navigation/SPAN-IGM-A1_Installation_Guide.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4bd57297d04a1392df8a819d9d584b729fe58080/docs%2Fspecs%2FNavigation%2FSPAN-IGM-A1_Installation_Guide.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4bd57297d04a1392df8a819d9d584b729fe58080/docs%2Fspecs%2FNavigation%2FSPAN-IGM-A1_Installation_Guide.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2FNavigation%2FSPAN-IGM-A1_Installation_Guide.md?ref=4bd57297d04a1392df8a819d9d584b729fe58080",
            "patch": "@@ -53,7 +53,7 @@ For additional information, visit Page 5 of [the SPAN-IGM\u2122 Quick Start Guide](\n \n ### Configuring the GPS and IMU\n \n-Configure the GPS and IMU as shown below. The setting can be configured by keying in the following command or loading a batch file in Novatel Connect:\n+Configure the SPAN-IGM-A1 as shown below. The setting can be configured by keying in the following command or loading a batch file in Novatel Connect:\n \n ```\n WIFICONFIG STATE OFF\n@@ -104,7 +104,7 @@ log USB1 vehiclebodyrotationb onchanged\n SAVECONFIG\n ```\n \n-**![warning_icon](/Users/hanyang07/apollo/docs/quickstart/images/warning_icon.png) WARNING:** Modify the **<u>SETIMUTOANTOFFSE</u>T** line based on the actual measurement (of the antenna and the IMU offset).\n+**![warning_icon](images/warning_icon.png) WARNING:** Modify the **<u>SETIMUTOANTOFFSET</u>** line based on the actual measurement (of the antenna and the SPAN-IGM-A1 offset).\n \n For example:\n \n@@ -127,4 +127,4 @@ For additional information on the NovAtel SPAN-IGM-A1:\n \n ## Disclaimer\n \n-This device is `Apollo Platform Supported`\n\\ No newline at end of file\n+This device is `Apollo Platform Supported`"
        }
    ],
    "ApolloAuto/apollo/4907": [
        {
            "sha": "d5298d8df27dd8fbdce3f1c039d623c8ab0e2a75",
            "filename": "docs/specs/Guideline_sensor_Installation_apollo_3.0.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3f78ef6e029b75f1fe5cbfeb2cd8f755e23eb833/docs%2Fspecs%2FGuideline_sensor_Installation_apollo_3.0.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3f78ef6e029b75f1fe5cbfeb2cd8f755e23eb833/docs%2Fspecs%2FGuideline_sensor_Installation_apollo_3.0.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2FGuideline_sensor_Installation_apollo_3.0.md?ref=3f78ef6e029b75f1fe5cbfeb2cd8f755e23eb833",
            "patch": "@@ -40,7 +40,7 @@ One camera with 6mm-lens should face the front of ego-vehicle. The front-facing\n After installation of cameras, The physical x, y, z location of camera w.r.t. origin should be saved in the calibration file.  \t\n \n #### Verification of camera Setups\n-The orientation of all three cameras should be all zeros. When the camera is installed, it is required to record a rosbag by driving a straight highway. By the replay of rosbag, the camera orientation should be re-adjusted to have pitch, yaw, and roll angles to be zero degree. When the camera is correctly installed, the horizon should be at the half of image width and not tilted. The vanishing point should be also at the center of the image. Please see the image below for the ideal camera setup.\n+The orientation of all three cameras should be all zeros. When the camera is installed, it is required to record a rosbag by driving a straight highway. By the replay of rosbag, the camera orientation should be re-adjusted to have pitch, yaw, and roll angles to be zero degree. When the camera is correctly installed, the horizon should be at the half of image height and not tilted. The vanishing point should be also at the center of the image. Please see the image below for the ideal camera setup.\n \n ![Image](images/perception_setup_figure4.png)\n \n@@ -66,4 +66,4 @@ transform:\n         y: -0.235\n         z: 1.256 \n ```\n-If angles are not zero, they need to be calibrated and represented in quarternion (see above stransformation->rotation).\n+If angles are not zero, they need to be calibrated and represented in quaternion (see above transform->rotation)."
        }
    ],
    "ApolloAuto/apollo/4924": [
        {
            "sha": "87894e20d7a009642e1483274585e019a21193bd",
            "filename": "modules/perception/obstacle/camera/common/camera.h",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/81a02c99d681337a462ab8ff9dbdf6b02895e383/modules%2Fperception%2Fobstacle%2Fcamera%2Fcommon%2Fcamera.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/81a02c99d681337a462ab8ff9dbdf6b02895e383/modules%2Fperception%2Fobstacle%2Fcamera%2Fcommon%2Fcamera.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fobstacle%2Fcamera%2Fcommon%2Fcamera.h?ref=81a02c99d681337a462ab8ff9dbdf6b02895e383",
            "patch": "@@ -262,10 +262,10 @@ class CameraDistort : public CameraModel<T> {\n   /**@brief Set the distortion parameters. */\n   void set_distort_params(T d0, T d1, T d2, T d3, T d4) {\n     distort_params_[0] = d0;\n-    distort_params_[0] = d1;\n-    distort_params_[0] = d2;\n-    distort_params_[0] = d3;\n-    distort_params_[0] = d4;\n+    distort_params_[1] = d1;\n+    distort_params_[2] = d2;\n+    distort_params_[3] = d3;\n+    distort_params_[4] = d4;\n   }\n \n   /**@brief Set the distortion parameters. */"
        }
    ],
    "ApolloAuto/apollo/5107": [
        {
            "sha": "a946fe950f178411b2c83a66ac6c472e5f30435c",
            "filename": "modules/planning/common/planning_gflags.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/70092180567076d287247871597ed10da197764a/modules%2Fplanning%2Fcommon%2Fplanning_gflags.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/70092180567076d287247871597ed10da197764a/modules%2Fplanning%2Fcommon%2Fplanning_gflags.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Fplanning_gflags.cc?ref=70092180567076d287247871597ed10da197764a",
            "patch": "@@ -347,13 +347,13 @@ DEFINE_bool(lateral_optimization, true,\n DEFINE_double(weight_lateral_offset, 1.0,\n     \"weight for lateral offset \"\n     \"in lateral trajectory optimization\");\n-DEFINE_double(weight_lateral_derivative, 1.0,\n+DEFINE_double(weight_lateral_derivative, 10.0,\n     \"weight for lateral derivative \"\n     \"in lateral trajectory optimization\");\n-DEFINE_double(weight_lateral_second_order_derivative, 1.0,\n+DEFINE_double(weight_lateral_second_order_derivative, 30.0,\n     \"weight for lateral second order derivative \"\n     \"in lateral trajectory optimization\");\n-DEFINE_double(weight_lateral_obstacle_distance, 1.0,\n+DEFINE_double(weight_lateral_obstacle_distance, 5.0,\n     \"weight for lateral obstacle distance in lateral trajectory optimization\");\n DEFINE_double(lateral_third_order_derivative_max, 2.0,\n     \"the maximal allowance for lateral third order derivative\");"
        }
    ],
    "ApolloAuto/apollo/5133": [
        {
            "sha": "ce37c5b7e1a4258adc96024849a6b3a27d06cb6c",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 7,
            "deletions": 5,
            "changes": 12,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/975b88d328c55ca6c9580b48614b0440b0daebbc/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/975b88d328c55ca6c9580b48614b0440b0daebbc/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=975b88d328c55ca6c9580b48614b0440b0daebbc",
            "patch": "@@ -173,10 +173,6 @@ if [ \"$LOCAL_IMAGE\" == \"yes\" ] && [ -z \"$VERSION_OPT\" ]; then\n     VERSION=\"local_dev\"\n fi\n \n-# Included default maps.\n-for map_name in ${DEFAULT_MAPS[@]}; do\n-    source ${APOLLO_ROOT_DIR}/docker/scripts/restart_map_volume.sh ${map_name} \"${VOLUME_VERSION}\"\n-done\n \n IMG=${DOCKER_REPO}:$VERSION\n \n@@ -217,8 +213,14 @@ function main(){\n     docker ps -a --format \"{{.Names}}\" | grep 'apollo_dev' 1>/dev/null\n     if [ $? == 0 ]; then\n         docker stop apollo_dev 1>/dev/null\n-        docker rm -f apollo_dev 1>/dev/null\n+        docker rm -v -f apollo_dev 1>/dev/null\n     fi\n+\n+    # Included default maps.\n+    for map_name in ${DEFAULT_MAPS[@]}; do\n+      source ${APOLLO_ROOT_DIR}/docker/scripts/restart_map_volume.sh ${map_name} \"${VOLUME_VERSION}\"\n+    done\n+\n     local display=\"\"\n     if [[ -z ${DISPLAY} ]];then\n         display=\":0\""
        }
    ],
    "ApolloAuto/apollo/5142": [
        {
            "sha": "ff64c7844e0595d7a91d70f5e2e1099adb27d117",
            "filename": "modules/planning/conf/planning_config_navi.pb.txt",
            "status": "modified",
            "additions": 0,
            "deletions": 4,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e656c7e89b6089b74996b9c65fedff7e1193b7e2/modules%2Fplanning%2Fconf%2Fplanning_config_navi.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e656c7e89b6089b74996b9c65fedff7e1193b7e2/modules%2Fplanning%2Fconf%2Fplanning_config_navi.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fconf%2Fplanning_config_navi.pb.txt?ref=e656c7e89b6089b74996b9c65fedff7e1193b7e2",
            "patch": "@@ -222,9 +222,5 @@ navi_planner_config {\n         obstacle_buffer: 0.5\n         safe_distance_base: 2.0\n         safe_distance_ratio: 1.0\n-        following_accel_ratio: 0.5\n-        curve_speed_limit_ratio: 0.01\n-        hard_speed_limit: 10.0\n-        hard_accel_limit: 6.0\n     }\n }"
        }
    ],
    "ApolloAuto/apollo/5190": [
        {
            "sha": "0899f0d996f35336558c1dd5f8dcb2b256b0606f",
            "filename": "modules/planning/tasks/traffic_decider/crosswalk.cc",
            "status": "modified",
            "additions": 10,
            "deletions": 4,
            "changes": 14,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/dc83404d63f4ffcbca18bee323e036cb45e0f2a5/modules%2Fplanning%2Ftasks%2Ftraffic_decider%2Fcrosswalk.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/dc83404d63f4ffcbca18bee323e036cb45e0f2a5/modules%2Fplanning%2Ftasks%2Ftraffic_decider%2Fcrosswalk.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Ftraffic_decider%2Fcrosswalk.cc?ref=dc83404d63f4ffcbca18bee323e036cb45e0f2a5",
            "patch": "@@ -79,6 +79,7 @@ void Crosswalk::MakeDecisions(Frame* const frame,\n \n   auto* path_decision = reference_line_info->path_decision();\n   double adc_front_edge_s = reference_line_info->AdcSlBoundary().end_s();\n+  double adc_end_edge_s = reference_line_info->AdcSlBoundary().start_s();\n \n   CrosswalkToStop crosswalks_to_stop;\n \n@@ -188,11 +189,12 @@ void Crosswalk::MakeDecisions(Frame* const frame,\n       } else if (obstacle_l_distance <=\n                  config_.crosswalk().stop_strick_l_distance()) {\n         // (2) when l_distance <= strick_l_distance + on_road, always STOP\n-        if (is_on_road) {\n+        if (is_on_road && obstacle_sl_point.s() > adc_end_edge_s) {\n           stop = true;\n           ADEBUG << \"need_stop(<=11): obstacle_id[\" << obstacle_id << \"] type[\"\n-                 << obstacle_type_name << \"] crosswalk_id[\" << crosswalk_id\n-                 << \"] ON_ROAD\";\n+                 << obstacle_type_name << \"] s[\" << obstacle_sl_point.s()\n+                 << \"] adc_end_edge_s[ \" << adc_end_edge_s\n+                 << \"] crosswalk_id[\" << crosswalk_id << \"] ON_ROAD\";\n         } else if (is_path_cross) {\n           // (3) when l_distance <= strick_l_distance + not on_road,\n           //     STOP only if path crosses\n@@ -223,7 +225,11 @@ void Crosswalk::MakeDecisions(Frame* const frame,\n         // TODO(all)\n         // (4) when l_distance is between loose_l and strick_l\n         //     use history decision of this crosswalk to smooth unsteadiness\n-        stop = true;\n+        stop = false;\n+        ADEBUG << \"need_stop(between 11 & l2): obstacle_id[\" << obstacle_id\n+            << \"] type[\" << obstacle_type_name\n+            << \"] obstacle_l_distance[\" << obstacle_l_distance\n+            << \"] crosswalk_id[\" << crosswalk_id << \"] USE_PREVIOUS_DECISION\";\n       }\n \n       if (stop && !is_on_road) {"
        }
    ],
    "ApolloAuto/apollo/5197": [
        {
            "sha": "aefce38b90fc2f5f6025fafdb1e4269dd2dbe518",
            "filename": "modules/dreamview/conf/hmi.conf",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/64c0fff2d2316eb4968cbf08dfafc7483d74da07/modules%2Fdreamview%2Fconf%2Fhmi.conf",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/64c0fff2d2316eb4968cbf08dfafc7483d74da07/modules%2Fdreamview%2Fconf%2Fhmi.conf",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fconf%2Fhmi.conf?ref=64c0fff2d2316eb4968cbf08dfafc7483d74da07",
            "patch": "@@ -548,4 +548,4 @@ audio_capturing_conf {\n   sample_rate: 16000\n   bits_per_sample: 16\n }\n-chassis_high_beam_action: AUTO_MODE\n+chassis_high_beam_action: NONE"
        }
    ],
    "ApolloAuto/apollo/5245": [
        {
            "sha": "23a0c82072f467e434170fd2df4ace68a24e09cf",
            "filename": "RELEASE.md",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b35e66c85c052b0eb54e4cb4421fed84cd05f62f/RELEASE.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b35e66c85c052b0eb54e4cb4421fed84cd05f62f/RELEASE.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/RELEASE.md?ref=b35e66c85c052b0eb54e4cb4421fed84cd05f62f",
            "patch": "@@ -9,12 +9,12 @@ Apollo 3.0 enables L4 product level solution that allows vehicles to drive in a\n * Apollo Sensor Unit (ASU)\n * New Gatekeeper - Ultrasonic Sensor\n * Perception module changes:\n-  * **CIPV(Closest In-Path Vehicle) detection and Tailgaiting**: The vehicle in front of the ego-car is detected and its trajectory is estimated for more efficient tailgating and lane keeping when lane detection is unreliable.\n+  * **CIPV(Closest In-Path Vehicle) detection and Tailgating**: The vehicle in front of the ego-car is detected and its trajectory is estimated for more efficient tailgating and lane keeping when lane detection is unreliable.\n   * **Asynchronous sensor fusion**: unlike the previous version, Perception in Apollo 3.0 is capable of consolidating all the information and data points by asynchronously fusing LiDAR, Radar and Camera data. Such conditions allow for more comprehensive data capture and reflect more practical sensor environments.\n   * **Online pose estimation**: This new feature estimates the pose of an ego-vehicle for every single frame. This feature helps to drive through bumps or slopes on the road with more accurate 3D scene understanding.\n   * **Ultrasonic sensors**: Perception in Apollo 3.0 now works with ultrasonic sensors. The output can be used for Automated Emergency Brake (AEB) and vertical/perpendicular parking.\n   * **Whole lane line**: Unlike previous lane line segments, this whole lane line feature will provide more accurate and long range detection of lane lines. \n-  * **Visual localization**: Camera's are currently being tested to aide and enhance localization\n+  * **Visual localization**: Cameras are currently being tested to aid and enhance localization\n   * **16 beam LiDAR support**\n \n # Release 2.5\n@@ -26,7 +26,7 @@ This release allows the vehicle to autonomously run on geo-fenced highways. Vehi\n * Add HD map data collection tool\n * Add vision based perception with obstacle and lane mark detections\n * Add relative map to support ACC and lane keeping for planning and control\n-* Make dockerfile available\n+* Make docker file available\n \n ## Autonomous Drive Capabilities\n Vehicles with this version can drive autonomously on highways at higher speed with limited HD map support. The highway needs to have clear white painted lane marks with minimum curvatures. The performance of vision based perception will degrade significantly at night or with strong light flares. **BE CAUTIOUS WHEN DRIVING AUTONOMOUSLY, ESPECIALLY AT NIGHT OR IN POOR VISION ENVIRONMENT. PLEASE TEST APOLLO 2.5 WITH THE SUPPORT FROM APOLLO ENGINEERING TEAM**.\n@@ -79,4 +79,4 @@ Initial release of Apollo implements autonomous GPS waypoint following.\n * Include debugging tools in `modules/tools/`\n \n ## Autonomous Driving Capabilities\n-Vehicles with this version do **NOT** perceive obstacles in close promixity. Neither can them drive on public roads or areas without GPS signals.\n+Vehicles with this version do **NOT** perceive obstacles in close promixity. Neither can then drive on public roads or areas without GPS signals."
        }
    ],
    "ApolloAuto/apollo/5247": [
        {
            "sha": "749893559281eacc88feb16cf65ffe8a7858bb5e",
            "filename": "modules/perception/obstacle/camera/filter/object_camera_filter.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/71314ae6045e0609eab9761cd71850398ac0b01a/modules%2Fperception%2Fobstacle%2Fcamera%2Ffilter%2Fobject_camera_filter.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/71314ae6045e0609eab9761cd71850398ac0b01a/modules%2Fperception%2Fobstacle%2Fcamera%2Ffilter%2Fobject_camera_filter.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fobstacle%2Fcamera%2Ffilter%2Fobject_camera_filter.cc?ref=71314ae6045e0609eab9761cd71850398ac0b01a",
            "patch": "@@ -29,7 +29,7 @@ bool ObjectCameraFilter::Filter(\n   if (!objects) return false;\n \n   // update lost_frame_count\n-  for (auto p : tracked_filters_) {\n+  for (auto &p : tracked_filters_) {\n     p.second.lost_frame_cnt_ += 1;\n   }\n "
        }
    ],
    "ApolloAuto/apollo/5263": [
        {
            "sha": "402dffd0f9e75db112ef51eb70195c0bb84c9802",
            "filename": "modules/perception/obstacle/camera/common/util.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/665beaf742865e7d97035eb6e39bb0028735421b/modules%2Fperception%2Fobstacle%2Fcamera%2Fcommon%2Futil.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/665beaf742865e7d97035eb6e39bb0028735421b/modules%2Fperception%2Fobstacle%2Fcamera%2Fcommon%2Futil.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fobstacle%2Fcamera%2Fcommon%2Futil.cc?ref=665beaf742865e7d97035eb6e39bb0028735421b",
            "patch": "@@ -49,7 +49,7 @@ std::vector<cv::Scalar> color_table = {\n bool LoadVisualObjectFromFile(\n     const std::string &file_name,\n     std::vector<std::shared_ptr<VisualObject>> *visual_objects) {\n-  std::fstream fs(file_name, std::fstream::out);\n+  std::fstream fs(file_name, std::fstream::in);\n \n   while (!fs.eof()) {\n     std::shared_ptr<VisualObject> obj(new VisualObject());"
        }
    ],
    "ApolloAuto/apollo/5331": [
        {
            "sha": "ba5c37d2a11b0a6a4a35357fd334d66632ec64e9",
            "filename": "modules/dreamview/backend/point_cloud/point_cloud_updater.cc",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/89b865473eb4f398faf64d4015867f3d6d5b4a00/modules%2Fdreamview%2Fbackend%2Fpoint_cloud%2Fpoint_cloud_updater.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/89b865473eb4f398faf64d4015867f3d6d5b4a00/modules%2Fdreamview%2Fbackend%2Fpoint_cloud%2Fpoint_cloud_updater.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fbackend%2Fpoint_cloud%2Fpoint_cloud_updater.cc?ref=89b865473eb4f398faf64d4015867f3d6d5b4a00",
            "patch": "@@ -128,12 +128,14 @@ void PointCloudUpdater::FilterPointCloud(\n   voxel_grid.setInputCloud(pcl_ptr);\n   voxel_grid.setLeafSize(FLAGS_voxel_filter_size, FLAGS_voxel_filter_size,\n                          FLAGS_voxel_filter_height);\n-  voxel_grid.filter(*pcl_ptr);\n-  AINFO << \"filtered point cloud data size: \" << pcl_ptr->size();\n+  pcl::PointCloud<pcl::PointXYZ>::Ptr pcl_filtered_ptr(\n+    new pcl::PointCloud<pcl::PointXYZ>);\n+  voxel_grid.filter(*pcl_filtered_ptr);\n+  AINFO << \"filtered point cloud data size: \" << pcl_filtered_ptr->size();\n \n   PointCloud point_cloud_pb;\n-  for (size_t idx = 0; idx < pcl_ptr->size(); ++idx) {\n-    pcl::PointXYZ &pt = pcl_ptr->points[idx];\n+  for (size_t idx = 0; idx < pcl_filtered_ptr->size(); ++idx) {\n+    pcl::PointXYZ &pt = pcl_filtered_ptr->points[idx];\n     if (!std::isnan(pt.x) && !std::isnan(pt.y) && !std::isnan(pt.z)) {\n       point_cloud_pb.add_num(pt.x);\n       point_cloud_pb.add_num(pt.y);"
        }
    ],
    "ApolloAuto/apollo/5332": [
        {
            "sha": "592ae1bf3b8373e8c0a116399b9c6df2ed007640",
            "filename": "docs/specs/perception_apollo_3.0.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5475d32e534dca6334d6308fa321ea857011a8f9/docs%2Fspecs%2Fperception_apollo_3.0.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5475d32e534dca6334d6308fa321ea857011a8f9/docs%2Fspecs%2Fperception_apollo_3.0.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2Fperception_apollo_3.0.md?ref=5475d32e534dca6334d6308fa321ea857011a8f9",
            "patch": "@@ -59,7 +59,7 @@ Tailgating is a maneuver to follow the vehicle or object in front of the autonom\n The snapshot of visualization of the output is shown in the figure below: \n ![Image](images/perception_visualization_apollo_3.0.png)\n \n-The figure above depicts visualization of the Perception output in Apollo 3.0. The top left image shows image-based output. The bottom-left image shows the 3D bounding box of objects. Therefore, the left image shows 3-D top-down view of lane lines and objects. The CIPV is marked with a red bounding box. The yellow lines depicts the trajectory of each vehicle\n+The figure above depicts visualization of the Perception output in Apollo 3.0. The top left image shows image-based output. The bottom-left image shows the 3D bounding box of objects. Therefore, the right image shows 3-D top-down view of lane lines and objects. The CIPV is marked with a red bounding box. The yellow lines depicts the trajectory of each vehicle\n \n ### Radar + Camera Output Fusion\n Given multiple sensors, their output should be combined in a synergic fashion. Apollo 3.0. introduces a sensor set with a radar and a camera. For this process, both sensors need to be calibrated. Each sensor will be calibrated using the same method introduced in Apollo 2.0. After calibration, the output will be represented in a 3-D world coordinate system and each output will be fused by their similarity in location, size, time and the utility of each sensor. After learning the utility function of each sensor, the camera contributes more on lateral distance and the radar contributes more on longitudinal distance measurement. Asynchronous sensor fusion algorithm can also be used as an option."
        }
    ],
    "ApolloAuto/apollo/5547": [
        {
            "sha": "e4f8f7059e7c1d8b6b10d3d4d86cc6ac4860993c",
            "filename": "modules/localization/msf/common/util/extract_ground_plane.h",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ca888e87b286ef2a1aab49f4b5b5bbff5be1d74c/modules%2Flocalization%2Fmsf%2Fcommon%2Futil%2Fextract_ground_plane.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ca888e87b286ef2a1aab49f4b5b5bbff5be1d74c/modules%2Flocalization%2Fmsf%2Fcommon%2Futil%2Fextract_ground_plane.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Fcommon%2Futil%2Fextract_ground_plane.h?ref=ca888e87b286ef2a1aab49f4b5b5bbff5be1d74c",
            "patch": "@@ -148,7 +148,8 @@ class FeatureXYPlane {\n     std::vector<int> outliers;\n     unsigned int inlier_idx = 0;\n     for (unsigned int i = 0; i < cloud_new->points.size(); ++i) {\n-      if (static_cast<int>(i) < inliers[inlier_idx]) {\n+      if (inlier_idx >= inliners.size() ||\n+          static_cast<int>(i) < inliers[inlier_idx]) {\n         outliers.push_back(i);\n       } else {\n         inlier_idx++;"
        }
    ],
    "ApolloAuto/apollo/5563": [
        {
            "sha": "19c45ce8ffb3fe96ab17b6034bcaed7602993f98",
            "filename": "modules/planning/navi/decider/navi_speed_decider.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4eaf66909af2f745d208c73ef04108594f3d0387/modules%2Fplanning%2Fnavi%2Fdecider%2Fnavi_speed_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4eaf66909af2f745d208c73ef04108594f3d0387/modules%2Fplanning%2Fnavi%2Fdecider%2Fnavi_speed_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fnavi%2Fdecider%2Fnavi_speed_decider.cc?ref=4eaf66909af2f745d208c73ef04108594f3d0387",
            "patch": "@@ -468,7 +468,7 @@ Status NaviSpeedDecider::AddCentricAccelerationConstraints(\n \n   // kappa preview\n   for (size_t i = 0; i < c_limits.size(); i++) {\n-    for (size_t j = j; j - i < (size_t)(kappa_preview_ / kTsGraphSStep) &&\n+    for (size_t j = i; j - i < (size_t)(kappa_preview_ / kTsGraphSStep) &&\n                        j < c_limits.size();\n          j++)\n       c_limits[i].v_preffered ="
        }
    ],
    "ApolloAuto/apollo/5623": [
        {
            "sha": "ce40abcafb5188e48fec14185bd1ffaeb9d79a1f",
            "filename": "apollo.sh",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/733d2f641cd6e7dcfdd4f32e2e5a685d5fabb0c2/apollo.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/733d2f641cd6e7dcfdd4f32e2e5a685d5fabb0c2/apollo.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/apollo.sh?ref=733d2f641cd6e7dcfdd4f32e2e5a685d5fabb0c2",
            "patch": "@@ -122,7 +122,7 @@ function generate_build_targets() {\n #=================================================\n \n function build() {\n-  if ${USE_GPU} ; then\n+  if [ \"${USE_GPU}\" = \"1\" ] ; then\n     echo -e \"${YELLOW}Running build under GPU mode. GPU is required to run the build.${NO_COLOR}\"\n   else\n     echo -e \"${YELLOW}Running build under CPU mode. No GPU is required to run the build.${NO_COLOR}\"\n@@ -755,6 +755,7 @@ function main() {\n       ;;\n     build)\n       DEFINES=\"${DEFINES} --define USE_GPU=true --cxxopt=-DUSE_GPU\"\n+      USE_GPU=\"1\"\n       apollo_build_dbg $@\n       ;;\n     build_cpu)\n@@ -786,10 +787,12 @@ function main() {\n       ;;\n     build_gpu)\n       DEFINES=\"${DEFINES} --define USE_GPU=true --cxxopt=-DUSE_GPU\"\n+      USE_GPU=\"1\"\n       apollo_build_dbg $@\n       ;;\n     build_opt_gpu)\n       DEFINES=\"${DEFINES} --define USE_GPU=true --cxxopt=-DUSE_GPU\"\n+      USE_GPU=\"1\"\n       apollo_build_opt $@\n       ;;\n     build_fe)"
        }
    ],
    "ApolloAuto/apollo/5679": [
        {
            "sha": "286f8858608907866bb3896074d30b5dd3fb8886",
            "filename": "modules/tools/calibration/data_collector.py",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/cdefbf30fadb6788a9b9591907af38c915cc03ca/modules%2Ftools%2Fcalibration%2Fdata_collector.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/cdefbf30fadb6788a9b9591907af38c915cc03ca/modules%2Ftools%2Fcalibration%2Fdata_collector.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fcalibration%2Fdata_collector.py?ref=cdefbf30fadb6788a9b9591907af38c915cc03ca",
            "patch": "@@ -48,6 +48,9 @@ def __init__(self):\n         self.canmsg_received = False\n         self.localization_received = False\n \n+        self.case = 'a'\n+        self.in_session = False\n+\n         self.outfile = \"\"\n \n     def run(self, cmd):"
        }
    ],
    "ApolloAuto/apollo/5696": [
        {
            "sha": "a22a418a8677a51879ec93c299b87d2dc833e3f8",
            "filename": "modules/tools/calibration/result2pb.py",
            "status": "modified",
            "additions": 37,
            "deletions": 33,
            "changes": 70,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/70dfb73a656b458a6046d417808aadf46412e2ce/modules%2Ftools%2Fcalibration%2Fresult2pb.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/70dfb73a656b458a6046d417808aadf46412e2ce/modules%2Ftools%2Fcalibration%2Fresult2pb.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fcalibration%2Fresult2pb.py?ref=70dfb73a656b458a6046d417808aadf46412e2ce",
            "patch": "@@ -27,56 +27,60 @@\n def load_calibration_raw_data(fn):\n     speed_table = {}\n     with open(fn, 'r') as f:\n-    for line in f:\n-        items = line.split(',')\n-        cmd = round(float(items[0]))\n-        speed = float(items[1])\n-        acc = round(float(items[2]), 2)\n-        if speed in speed_table:\n-            cmd_table = speed_table[speed]\n-            if cmd in cmd_table:\n-                cmd_table[cmd].append(acc)\n+        for line in f:\n+            items = line.split(',')\n+            cmd = round(float(items[0]))\n+            speed = float(items[1])\n+            acc = round(float(items[2]), 2)\n+            if speed in speed_table:\n+                cmd_table = speed_table[speed]\n+                if cmd in cmd_table:\n+                    cmd_table[cmd].append(acc)\n+                else:\n+                    cmd_table[cmd] = [acc]\n             else:\n+                cmd_table = {}\n                 cmd_table[cmd] = [acc]\n-        else:\n-            cmd_table = {}\n-            cmd_table[cmd] = [acc]\n-            speed_table[speed] = cmd_table\n-    for speed, cmd_table in speed_table.items():\n-        new_cmd_table = {}\n-        for cmd, acc_list in cmd_table.items():\n-            new_cmd_table[cmd] = round(np.mean(acc_list), 2)\n-        speed_table[speed] = new_cmd_table\n+                speed_table[speed] = cmd_table\n+                \n+    for speed in speed_table:\n+        cmd_table = speed_table[speed]\n+        for cmd in cmd_table:\n+            cmd_table[cmd] = round(np.mean(cmd_table[cmd]), 2)\n+    #After this the acc_list converted to an average float number.\n \n     speed_table2 = {}\n-    for speed, cmd_table in speed_table.items():\n+    for speed in speed_table:\n+        cmd_table = speed_table[speed]\n         acc_table = {}\n-        for cmd, acc in cmd_table.items():\n+        for cmd in cmd_table: \n+            acc = cmd_table[cmd]\n             if acc in acc_table:\n                 acc_table[acc].append(cmd)\n             else:\n                 acc_table[acc] = [cmd]\n         speed_table2[speed] = acc_table\n+\n     return speed_table2\n \n def load_calibration_raw_data_old(fn):\n     speed_table = {}\n     with open(fn, 'r') as f:\n-    for line in f:\n-        items = line.split(',')\n-        cmd = round(float(items[0]))\n-        speed = float(items[1])\n-        acc = round(float(items[2]), 2)\n-        if speed in speed_table:\n-            acc_table = speed_table[speed]\n-            if acc in acc_table:\n-                acc_table[acc].append(cmd)\n+        for line in f:\n+            items = line.split(',')\n+            cmd = round(float(items[0]))\n+            speed = float(items[1])\n+            acc = round(float(items[2]), 2)\n+            if speed in speed_table:\n+                acc_table = speed_table[speed]\n+                if acc in acc_table:\n+                    acc_table[acc].append(cmd)\n+                else:\n+                    acc_table[acc] = [cmd]\n             else:\n+                acc_table = {}\n                 acc_table[acc] = [cmd]\n-        else:\n-            acc_table = {}\n-            acc_table[acc] = [cmd]\n-            speed_table[speed] = acc_table\n+                speed_table[speed] = acc_table\n     return speed_table\n \n def get_calibration_table_pb(speed_table):"
        }
    ],
    "ApolloAuto/apollo/5896": [
        {
            "sha": "43d11326d3ed8bfca657eb960fa31d19f5e15636",
            "filename": "docs/specs/apollo_secure_upgrade_user_guide-CN.md",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9050719478ab0c70508e96d83eb71ca9f59a6d1a/docs%2Fspecs%2Fapollo_secure_upgrade_user_guide-CN.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9050719478ab0c70508e96d83eb71ca9f59a6d1a/docs%2Fspecs%2Fapollo_secure_upgrade_user_guide-CN.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2Fapollo_secure_upgrade_user_guide-CN.md?ref=9050719478ab0c70508e96d83eb71ca9f59a6d1a",
            "patch": "@@ -55,6 +55,10 @@ SDK\u5305\u542b4\u4e2a\u76ee\u5f55\uff1a\n init_secure_upgrade(root_config_path)\n input para:\n   root_config_path  root configuration file path\n+Output para:\n+  return code:\n+     true    security environment is initialized successfully\n+     false    security environment is initialized failed\n ```\n \n #### b) \u8bbe\u5907token\u751f\u6210"
        }
    ],
    "ApolloAuto/apollo/5908": [
        {
            "sha": "0a94b127b6ccdc7a5317d2bec6b79cfc8cb1df99",
            "filename": "modules/data/tools/recorder/data_recorder_manager.py",
            "status": "modified",
            "additions": 7,
            "deletions": 7,
            "changes": 14,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/21693ab5686e46b1eb0d3d3b045003c38c1b6543/modules%2Fdata%2Ftools%2Frecorder%2Fdata_recorder_manager.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/21693ab5686e46b1eb0d3d3b045003c38c1b6543/modules%2Fdata%2Ftools%2Frecorder%2Fdata_recorder_manager.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdata%2Ftools%2Frecorder%2Fdata_recorder_manager.py?ref=21693ab5686e46b1eb0d3d3b045003c38c1b6543",
            "patch": "@@ -92,14 +92,14 @@ def create_backup_id(self):\n         if not os.path.exists(backup_path):\n             try:\n                 os.mkdir(backup_path)\n-            except Exception as e:\n+            except OSError as e:\n                 logging.error(\"Create %s failed, %s\", backup_path, str(e))\n                 return -1\n         backup_path = backup_path + \"/\" + self.get_system_uptime()\n         if not os.path.exists(backup_path):\n             try:\n                 os.mkdir(backup_path)\n-            except Exception as e:\n+            except OSError as e:\n                 logging.error(\"Create backup id failed, %s\", str(e))\n                 return -1\n         self.backup_directory = backup_path\n@@ -121,7 +121,7 @@ def create_task_id(self):\n         for data_dir in self.conf_reader.data_type:\n             try:\n                 os.mkdir(self.output_directory + \"/\" + data_dir)\n-            except Exception as e:\n+            except OSError as e:\n                 logging.error(\"Make sub directory in task failed, %s\", str(e))\n                 return -1\n         recorder_meta = {\n@@ -309,11 +309,11 @@ def update_link(self):\n         try:\n             os.remove(output_link_path)\n             logging.info(\"Remove link file succeed\")\n-        except Exception as e:\n+        except OSError as e:\n             logging.error(\"Remove link file failed\" + str(e))\n         try:\n             os.symlink(os.path.abspath(self.output_directory), output_link_path)\n-        except Exception as e:\n+        except OSError as e:\n             logging.error(\"Update link file failed \" + str(e))\n \n     def get_system_uptime(self):\n@@ -434,7 +434,7 @@ def shutdown_hook(self, signum, frame):\n \n def print_version(ver):\n     \"\"\"Print the version of program.\"\"\"\n-    print(\"Program:data_recorder\\nversion: %s\") % (ver)\n+    print(\"Program:data_recorder\\nversion: %s\" % ver)\n     return 0\n \n \n@@ -481,7 +481,7 @@ def main():\n             parser.error(\n                 \"The config file you given does not exists, please check!\")\n         else:\n-            cp =config_parser.ConfigParser()\n+            cp = config_parser.ConfigParser()\n             global_conf = cp.load_config(\n                 \"modules/data/conf/recorder.global.yaml\")\n             task_conf = cp.load_config(options.conf_file)"
        }
    ],
    "ApolloAuto/apollo/5921": [
        {
            "sha": "e64009f411ad9718375faf188a820212f293ebf0",
            "filename": "modules/localization/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/8a2c36993b2022d09a37a90e6d67bc2cc3271885/modules%2Flocalization%2FREADME.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/8a2c36993b2022d09a37a90e6d67bc2cc3271885/modules%2Flocalization%2FREADME.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2FREADME.md?ref=8a2c36993b2022d09a37a90e6d67bc2cc3271885",
            "patch": "@@ -12,7 +12,7 @@\n   * GPS - The Global Positioning System.\n   * IMU - Inertial Measurement Unit.\n   * LiDAR - Light Detection And Ranging Sensor.\n-  For more information, refer to [multi-sensor fusion localizaiton](https://github.com/ApolloAuto/apollo/tree/master/modules/localization/msf/README.md).\n+  For more information, refer to [multi-sensor fusion localization](https://github.com/ApolloAuto/apollo/tree/master/modules/localization/msf/README.md).\n \n ## Output\n   * An object instance defined by Protobuf message `LocalizationEstimate`, which can be found in file `localization/proto/localization.proto`."
        }
    ],
    "ApolloAuto/apollo/5960": [
        {
            "sha": "c4b4291b7b456c5175d0f30c6288db9e5b2e0d21",
            "filename": "modules/planning/reference_line/reference_line_provider.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/fbaa3d95e1ff480997167bf02e88b3c188ad204f/modules%2Fplanning%2Freference_line%2Freference_line_provider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/fbaa3d95e1ff480997167bf02e88b3c188ad204f/modules%2Fplanning%2Freference_line%2Freference_line_provider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Freference_line%2Freference_line_provider.cc?ref=fbaa3d95e1ff480997167bf02e88b3c188ad204f",
            "patch": "@@ -297,7 +297,7 @@ bool ReferenceLineProvider::GetReferenceLinesFromRelativeMap(\n     AERROR << \"navigation path ids is empty\";\n     return false;\n   }\n-  // get curent adc lane info by vehicle state\n+  // get current adc lane info by vehicle state\n   common::VehicleState vehicle_state =\n       common::VehicleStateProvider::instance()->vehicle_state();\n   hdmap::LaneWaypoint adc_lane_way_point;"
        }
    ],
    "ApolloAuto/apollo/5961": [
        {
            "sha": "8f480f97616cb34dd516225732694d6cde13603f",
            "filename": "docs/specs/qp_spline_path_optimizer.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/01ae6e7bd6b5945b8ea8fb209777f87e32064aba/docs%2Fspecs%2Fqp_spline_path_optimizer.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/01ae6e7bd6b5945b8ea8fb209777f87e32064aba/docs%2Fspecs%2Fqp_spline_path_optimizer.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2Fqp_spline_path_optimizer.md?ref=01ae6e7bd6b5945b8ea8fb209777f87e32064aba",
            "patch": "@@ -8,7 +8,7 @@ Quadratic programming + Spline interpolation\n \n ### 1.1  Get path length\n \n-Path is defined in station-lateral coordination system. The **s** range from vehicle's current position to  default planing path length.\n+Path is defined in station-lateral coordination system. The **s** range from vehicle's current position to  default planning path length.\n \n ### 1.2   Get spline segments\n "
        }
    ],
    "ApolloAuto/apollo/5962": [
        {
            "sha": "a11f4737de257bf6c7529b193144ec622578d5ae",
            "filename": "modules/planning/constraint_checker/constraint_checker1d.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/22d8a70a7561a6a0024b38910beb0404a4a8e6b1/modules%2Fplanning%2Fconstraint_checker%2Fconstraint_checker1d.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/22d8a70a7561a6a0024b38910beb0404a4a8e6b1/modules%2Fplanning%2Fconstraint_checker%2Fconstraint_checker1d.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fconstraint_checker%2Fconstraint_checker1d.cc?ref=22d8a70a7561a6a0024b38910beb0404a4a8e6b1",
            "patch": "@@ -38,12 +38,12 @@ bool ConstraintChecker1d::IsValidLongitudinalTrajectory(\n     const Curve1d& lon_trajectory) {\n   double t = 0.0;\n   while (t < lon_trajectory.ParamLength()) {\n-    double v = lon_trajectory.Evaluate(1, t);  // evalute_v\n+    double v = lon_trajectory.Evaluate(1, t);  // evaluate_v\n     if (!fuzzy_within(v, FLAGS_speed_lower_bound, FLAGS_speed_upper_bound)) {\n       return false;\n     }\n \n-    double a = lon_trajectory.Evaluate(2, t);  // evaluat_a\n+    double a = lon_trajectory.Evaluate(2, t);  // evaluate_a\n     if (!fuzzy_within(a, FLAGS_longitudinal_acceleration_lower_bound,\n                       FLAGS_longitudinal_acceleration_upper_bound)) {\n       return false;"
        }
    ],
    "ApolloAuto/apollo/5963": [
        {
            "sha": "3eebf244ce8e32c33d131e38dc08565894563756",
            "filename": "docs/specs/qp_spline_st_speed_optimizer.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/91ca67aa22740f24fc8f4acbef5be5956dd6d714/docs%2Fspecs%2Fqp_spline_st_speed_optimizer.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/91ca67aa22740f24fc8f4acbef5be5956dd6d714/docs%2Fspecs%2Fqp_spline_st_speed_optimizer.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2Fqp_spline_st_speed_optimizer.md?ref=91ca67aa22740f24fc8f4acbef5be5956dd6d714",
            "patch": "@@ -68,7 +68,7 @@ $$\n \n ### 3.1 The init point constraints\n \n-Given the assumption that the the first point is ($t0$, $s0$), and $s0$ is on the planned path $f_i(t)$, $f'i(t)$, and $f_i(t)''$ (position, velocity, acceleration).  Apollo converts those constraint into QP equality constraints:\n+Given the assumption that the first point is ($t0$, $s0$), and $s0$ is on the planned path $f_i(t)$, $f'i(t)$, and $f_i(t)''$ (position, velocity, acceleration).  Apollo converts those constraint into QP equality constraints:\n <p>\n $$\n A_{eq}x = b_{eq}"
        }
    ],
    "ApolloAuto/apollo/5967": [
        {
            "sha": "e2f1a4d313421c7766a977805560daf7d7762ca0",
            "filename": "modules/tools/map_gen/add_signal.py",
            "status": "modified",
            "additions": 18,
            "deletions": 10,
            "changes": 28,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f18875c59487e8e2eeb0fcdba2baa61371b3175d/modules%2Ftools%2Fmap_gen%2Fadd_signal.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f18875c59487e8e2eeb0fcdba2baa61371b3175d/modules%2Ftools%2Fmap_gen%2Fadd_signal.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fmap_gen%2Fadd_signal.py?ref=f18875c59487e8e2eeb0fcdba2baa61371b3175d",
            "patch": "@@ -30,17 +30,27 @@\n fmap = sys.argv[1]\n fsignal = sys.argv[2]\n \n-map_data = open(fmap, 'r').read()\n-map = map_pb2.Map()\n-text_format.Parse(map_data, map)\n+try:\n+    with open(fmap, 'r') as map_data:\n+        map_data.read()\n+except Exception:\n+    raise\n+\n+    _map = map_pb2.Map()\n+    text_format.Parse(map_data, _map)\n+\n+try:\n+    with open(fsignal, 'r') as signal_data:\n+        signal_data.read()\n+except Exception:\n+    raise\n \n-signal_data = open(fsignal, 'r').read()\n signal = map_signal_pb2.Signal()\n text_format.Parse(signal_data, signal)\n \n lanes = {}\n lanes_map = {}\n-for lane in map.lane:\n+for lane in _map.lane:\n     lane_points = []\n     lanes_map[lane.id.id] = lane\n     for segment in lane.central_curve.segment:\n@@ -49,8 +59,6 @@\n     lane_string = LineString(lane_points)\n     lanes[lane.id.id] = lane_string\n \n-lines = {}\n-\n for stop_line in signal.stop_line:\n     stop_line_points = []\n     for segment in stop_line.segment:\n@@ -61,7 +69,7 @@\n         p = stop_line_string.intersection(lane_string)\n         if type(p) == Point:\n             s = lane_string.project(p)\n-            overlap = map.overlap.add()\n+            overlap = _map.overlap.add()\n             overlap.id.id = str(lane_id) + \"_\" + str(signal.id.id)\n             obj = overlap.object.add()\n             obj.id.id = signal.id.id\n@@ -75,7 +83,7 @@\n \n             signal.overlap_id.add().id = overlap.id.id\n             lanes_map[lane_id].overlap_id.add().id = overlap.id.id\n-map.signal.add().CopyFrom(signal)\n+_map.signal.add().CopyFrom(signal)\n \n with open(fmap + \"_\" + fsignal, 'w') as fmap:\n-    fmap.write(str(map))\n+    fmap.write(str(_map))"
        }
    ],
    "ApolloAuto/apollo/6023": [
        {
            "sha": "95e50e773b29dcaae9c5c12fb8619dae871cd9b2",
            "filename": "modules/perception/traffic_light/util/color_space.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3610907f9afaa59dd52db68e59cfdb08404f79dc/modules%2Fperception%2Ftraffic_light%2Futil%2Fcolor_space.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3610907f9afaa59dd52db68e59cfdb08404f79dc/modules%2Fperception%2Ftraffic_light%2Futil%2Fcolor_space.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Ftraffic_light%2Futil%2Fcolor_space.cc?ref=3610907f9afaa59dd52db68e59cfdb08404f79dc",
            "patch": "@@ -168,10 +168,10 @@ void YUV2RGB(const unsigned char y, const unsigned char u,\n \n void Yuyv2rgb(unsigned char* YUV, unsigned char* RGB, int NumPixels) {\n   for (int i = 0, int j = 0; i < (NumPixels << 1); i += 4, j += 6) {\n-    unsigned char u = (unsigned char)YUV[i + 0];\n-    unsigned char y0 = (unsigned char)YUV[i + 1];\n-    unsigned char v = (unsigned char)YUV[i + 2];\n-    unsigned char y1 = (unsigned char)YUV[i + 3];\n+    unsigned char y0 = (unsigned char)YUV[i + 0];\n+    unsigned char u = (unsigned char)YUV[i + 1];\n+    unsigned char y1 = (unsigned char)YUV[i + 2];\n+    unsigned char v = (unsigned char)YUV[i + 3];\n     unsigned char r, g, b;\n     YUV2RGB(y0, u, v, &r, &g, &b);\n     RGB[j + 0] = r;"
        }
    ],
    "ApolloAuto/apollo/6042": [
        {
            "sha": "e8ca29668e0b9e5c09f06fe5d58dff31dc50e4f6",
            "filename": "modules/perception/obstacle/camera/lane_post_process/cc_lane_post_processor/cc_lane_post_processor.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/acca33791735b2b32956fbc9e4561a8b345b06d6/modules%2Fperception%2Fobstacle%2Fcamera%2Flane_post_process%2Fcc_lane_post_processor%2Fcc_lane_post_processor.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/acca33791735b2b32956fbc9e4561a8b345b06d6/modules%2Fperception%2Fobstacle%2Fcamera%2Flane_post_process%2Fcc_lane_post_processor%2Fcc_lane_post_processor.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fobstacle%2Fcamera%2Flane_post_process%2Fcc_lane_post_processor%2Fcc_lane_post_processor.cc?ref=acca33791735b2b32956fbc9e4561a8b345b06d6",
            "patch": "@@ -579,7 +579,10 @@ bool CCLanePostProcessor::ProcessWithoutCC(\n           Eigen::Matrix<double, 3, 1> xy_p = trans_mat_ * img_point;\n           Eigen::Matrix<double, 2, 1> xy_point;\n           Eigen::Matrix<double, 2, 1> uv_point;\n-          if (std::abs(xy_p(2)) < 1e-6) continue;\n+          if (std::abs(xy_p(2)) < 1e-6) {\n+            ++x;\n+            continue;\n+          }\n           xy_point << xy_p(0) / xy_p(2), xy_p(1) / xy_p(2);\n           if (xy_point(0) < 0 || xy_point(0) > 300 || abs(xy_point(1)) > 30) {\n             ++x;"
        }
    ],
    "ApolloAuto/apollo/6055": [
        {
            "sha": "210c759a6564fd8299758299067f0f76182bf790",
            "filename": "docker/scripts/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b089b8f8ac6f983e80e36469f39b418120e7e6a8/docker%2Fscripts%2FREADME.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b089b8f8ac6f983e80e36469f39b418120e7e6a8/docker%2Fscripts%2FREADME.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2FREADME.md?ref=b089b8f8ac6f983e80e36469f39b418120e7e6a8",
            "patch": "@@ -4,7 +4,7 @@\n \n Please follow the\n [official guide to install the docker-ce](https://docs.docker.com/install/linux/docker-ce/ubuntu).\n-we also provide a bash script to install docker-ce\n+We also provide a bash script to install docker-ce\n \n ```bash\n bash docker/setup_host/install_docker.sh"
        }
    ],
    "ApolloAuto/apollo/6065": [
        {
            "sha": "496917034c8a5e1be41abf52986792ff700a9070",
            "filename": "modules/prediction/network/net_layer.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/dfb7b3f3847b7bd75e7e692180f54da8e5f4008c/modules%2Fprediction%2Fnetwork%2Fnet_layer.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/dfb7b3f3847b7bd75e7e692180f54da8e5f4008c/modules%2Fprediction%2Fnetwork%2Fnet_layer.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fnetwork%2Fnet_layer.cc?ref=dfb7b3f3847b7bd75e7e692180f54da8e5f4008c",
            "patch": "@@ -244,22 +244,22 @@ bool LSTM::Load(const LayerParameter& layer_pb) {\n   }\n   if (!lstm_pb.has_recurrent_weights_input() ||\n       !LoadTensor(lstm_pb.recurrent_weights_input(), &r_wi_)) {\n-    AERROR << \"Fail to Load reccurent input weights!\";\n+    AERROR << \"Fail to Load recurrent input weights!\";\n     return false;\n   }\n   if (!lstm_pb.has_recurrent_weights_forget() ||\n       !LoadTensor(lstm_pb.recurrent_weights_forget(), &r_wf_)) {\n-    AERROR << \"Fail to Load reccurent forget weights!\";\n+    AERROR << \"Fail to Load recurrent forget weights!\";\n     return false;\n   }\n   if (!lstm_pb.has_recurrent_weights_cell() ||\n       !LoadTensor(lstm_pb.recurrent_weights_cell(), &r_wc_)) {\n-    AERROR << \"Fail to Load reccurent cell weights!\";\n+    AERROR << \"Fail to Load recurrent cell weights!\";\n     return false;\n   }\n   if (!lstm_pb.has_recurrent_weights_output() ||\n       !LoadTensor(lstm_pb.recurrent_weights_output(), &r_wo_)) {\n-    AERROR << \"Fail to Load reccurent output weights!\";\n+    AERROR << \"Fail to Load recurrent output weights!\";\n     return false;\n   }\n   ResetState();"
        }
    ],
    "ApolloAuto/apollo/6066": [
        {
            "sha": "29e2b6dafc9e69986e7ac2a09f4cc72949eefb2b",
            "filename": "modules/dreamview/backend/handlers/websocket_handler.h",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c652736db1613d689e14793cc8f12e238518cc13/modules%2Fdreamview%2Fbackend%2Fhandlers%2Fwebsocket_handler.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c652736db1613d689e14793cc8f12e238518cc13/modules%2Fdreamview%2Fbackend%2Fhandlers%2Fwebsocket_handler.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fbackend%2Fhandlers%2Fwebsocket_handler.h?ref=c652736db1613d689e14793cc8f12e238518cc13",
            "patch": "@@ -84,7 +84,7 @@ class WebSocketHandler : public CivetWebSocketHandler {\n    * client.\n    *\n    * @details In the websocket protocol, data is transmitted using a sequence of\n-   * frames, and each frame received invokes this callback method. Since the the\n+   * frames, and each frame received invokes this callback method. Since the\n    * type of opcode (text, binary, etc) is given in the first frame, this method\n    * stores the opcode in a thread_local variable named current_opcode_. And\n    * data from each frame is accumulated to data_ until the final fragment is"
        }
    ],
    "ApolloAuto/apollo/6184": [
        {
            "sha": "f9128fb92de1048a7e8abe93a0eccf1dac074812",
            "filename": "modules/perception/production/data/perception/camera/models/traffic_light_detection/detection.pt",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/13974eeace38983e899da18d65b468312031e8e2/modules%2Fperception%2Fproduction%2Fdata%2Fperception%2Fcamera%2Fmodels%2Ftraffic_light_detection%2Fdetection.pt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/13974eeace38983e899da18d65b468312031e8e2/modules%2Fperception%2Fproduction%2Fdata%2Fperception%2Fcamera%2Fmodels%2Ftraffic_light_detection%2Fdetection.pt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fproduction%2Fdata%2Fperception%2Fcamera%2Fmodels%2Ftraffic_light_detection%2Fdetection.pt?ref=13974eeace38983e899da18d65b468312031e8e2",
            "patch": "@@ -1,4 +1,4 @@\n-min_crop_size: 270\n+min_crop_size: 400\n crop_method: 0\n mean_r: 122.7717\n mean_g: 115.9465"
        }
    ],
    "ApolloAuto/apollo/6190": [
        {
            "sha": "f55f607606fe06596448bc0c593a981139b1d0ee",
            "filename": "modules/perception/fusion/common/information_filter.cc",
            "status": "modified",
            "additions": 9,
            "deletions": 5,
            "changes": 14,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f1e97f4868e9e603c7f00454689fce5d7ca2c3f7/modules%2Fperception%2Ffusion%2Fcommon%2Finformation_filter.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f1e97f4868e9e603c7f00454689fce5d7ca2c3f7/modules%2Fperception%2Ffusion%2Fcommon%2Finformation_filter.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Ffusion%2Fcommon%2Finformation_filter.cc?ref=f1e97f4868e9e603c7f00454689fce5d7ca2c3f7",
            "patch": "@@ -139,23 +139,27 @@ bool InformationFilter::Correct(\n   }\n   cur_observation_ = cur_observation;\n   cur_observation_uncertainty_ = cur_observation_uncertainty;\n+  // global_uncertainty now stores information matrix\n   global_uncertainty_ = global_uncertainty_.inverse();\n+  // tmp_states_ is information vector\n   tmp_states_ = global_uncertainty_ * global_states_;\n+  // cur_observation_uncertainty_ is now the inverse of covariance matrix\n   cur_observation_uncertainty_ = cur_observation_uncertainty_.inverse();\n   if (last_observation_init_) {\n+    // propate to current time\n     last_observation_ = last_to_cur_transform_matrix_ * last_observation_;\n     last_observation_uncertainty_ =\n         last_to_cur_transform_matrix_ * last_observation_uncertainty_ *\n-            last_to_cur_transform_matrix_.transpose() +\n+        last_to_cur_transform_matrix_.transpose() +\n         last_to_cur_env_uncertainty_;\n-    last_observation_uncertainty_ =\n+    last_observation_uncertainty_ =  // transform to measurement space\n         c_matrix_ * last_observation_uncertainty_ * c_matrix_.transpose();\n-    global_uncertainty_ =\n-        c_matrix_.transpose() * global_uncertainty_ +\n+    global_uncertainty_ =  // update information matrix\n+        global_uncertainty_ +\n         (c_matrix_.transpose() * cur_observation_uncertainty_ * c_matrix_ -\n          c_matrix_.transpose() * last_observation_uncertainty_.inverse() *\n              c_matrix_);\n-    tmp_states_ +=\n+    tmp_states_ +=  // update information vector\n         (c_matrix_.transpose() * cur_observation_uncertainty_ *\n              cur_observation_ -\n          c_matrix_.transpose() * last_observation_uncertainty_.inverse() *"
        }
    ],
    "ApolloAuto/apollo/6206": [
        {
            "sha": "54c6f4aabebf27aa37832b1ae5abe04369cd454d",
            "filename": "modules/localization/lmd/lmd_localization.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2ae1090d260254773aba6c350b6b9a394e548a28/modules%2Flocalization%2Flmd%2Flmd_localization.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2ae1090d260254773aba6c350b6b9a394e548a28/modules%2Flocalization%2Flmd%2Flmd_localization.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Flmd%2Flmd_localization.cc?ref=2ae1090d260254773aba6c350b6b9a394e548a28",
            "patch": "@@ -137,15 +137,14 @@ Status LMDLocalization::Start() {\n \n   // initialize thread pool\n   ThreadPool::Init(kDefaultThreadPoolSize);\n-\n+  AdapterManager::Init(FLAGS_lmd_adapter_config_file);\n   // initialize adapter manager\n   AdapterManager::AddImuCallback(&LMDLocalization::OnImu, this);\n   AdapterManager::AddRawImuCallback(&LMDLocalization::OnRawImu, this);\n   AdapterManager::AddGpsCallback(&LMDLocalization::OnGps, this);\n   AdapterManager::AddChassisCallback(&LMDLocalization::OnChassis, this);\n   AdapterManager::AddPerceptionObstaclesCallback(\n       &LMDLocalization::OnPerceptionObstacles, this);\n-  AdapterManager::Init(FLAGS_lmd_adapter_config_file);\n \n   // start ROS timer, one-shot = false, auto-start = true\n   const double duration = 1.0 / FLAGS_localization_publish_freq;"
        }
    ],
    "ApolloAuto/apollo/6315": [
        {
            "sha": "065e51e4afe2c882fee9964c223315728627d412",
            "filename": "modules/tools/navi_generator/backend/util/file_operator.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c650d26f19642e3e31395016e633bd6514488b90/modules%2Ftools%2Fnavi_generator%2Fbackend%2Futil%2Ffile_operator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c650d26f19642e3e31395016e633bd6514488b90/modules%2Ftools%2Fnavi_generator%2Fbackend%2Futil%2Ffile_operator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fnavi_generator%2Fbackend%2Futil%2Ffile_operator.cc?ref=c650d26f19642e3e31395016e633bd6514488b90",
            "patch": "@@ -85,11 +85,11 @@ bool FileOperator::Import(const std::string& filename,\n     AERROR << \"Can't open the smoothed file: \" << filename;\n     return false;\n   }\n-  // TODO(zhanghua): Maybe these read char operation shuold be optimized.\n   unsigned char c;\n+  c = ifs.get();\n   while (!ifs.eof()) {\n-    c = ifs.get();\n     data->emplace_back(c);\n+    c = ifs.get();\n   }\n   ifs.close();\n   return true;"
        }
    ],
    "ApolloAuto/apollo/6411": [
        {
            "sha": "ae783584697a8891ea29e822a6ce95fe0cffc9d6",
            "filename": "cyber/tools/cyber_launch/cyber_launch",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/236c1a1a90eb8f258be83ef3ddd86c08953226f9/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/236c1a1a90eb8f258be83ef3ddd86c08953226f9/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch?ref=236c1a1a90eb8f258be83ef3ddd86c08953226f9",
            "patch": "@@ -26,6 +26,7 @@ import time\n import atexit\n import argparse\n import threading\n+import traceback\n \n import xml.etree.ElementTree as ET\n "
        }
    ],
    "ApolloAuto/apollo/6503": [
        {
            "sha": "d9b1bbc1cfaef3fa87ce7245ac202b3d0f2e609f",
            "filename": "cyber/tools/cyber_monitor/screen.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0a7cd3f219b43ad7a099287a7ce19707a25c0301/cyber%2Ftools%2Fcyber_monitor%2Fscreen.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0a7cd3f219b43ad7a099287a7ce19707a25c0301/cyber%2Ftools%2Fcyber_monitor%2Fscreen.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_monitor%2Fscreen.cc?ref=0a7cd3f219b43ad7a099287a7ce19707a25c0301",
            "patch": "@@ -164,15 +164,15 @@ void Screen::HighlightLine(int lineNo) {\n   if (IsInit() && lineNo < Height()) {\n     SetCurrentColor(WHITE_BLACK);\n     for (int x = 0; x < Width(); ++x) {\n-      int ch = mvinch(lineNo + highlight_direction_, x);\n+      chtype ch = mvinch(lineNo + highlight_direction_, x);\n       ch &= A_CHARTEXT;\n       if (ch == ' ') mvaddch(lineNo + highlight_direction_, x, ch);\n     }\n     ClearCurrentColor();\n \n     SetCurrentColor(BLACK_WHITE);\n     for (int x = 0; x < Width(); ++x) {\n-      int ch = mvinch(lineNo, x);\n+      chtype ch = mvinch(lineNo, x);\n       mvaddch(lineNo, x, ch & A_CHARTEXT);\n     }\n     ClearCurrentColor();"
        }
    ],
    "ApolloAuto/apollo/6614": [
        {
            "sha": "b9f81b7a37fb9394e55eb03c81dba7acf7f31895",
            "filename": "scripts/perception.sh",
            "status": "modified",
            "additions": 8,
            "deletions": 1,
            "changes": 9,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ab85d6ab5e4d4eff6519c3a04941d8db6c77c043/scripts%2Fperception.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ab85d6ab5e4d4eff6519c3a04941d8db6c77c043/scripts%2Fperception.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fperception.sh?ref=ab85d6ab5e4d4eff6519c3a04941d8db6c77c043",
            "patch": "@@ -22,4 +22,11 @@ DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n source \"${DIR}/apollo_base.sh\"\n # run function from apollo_base.sh\n # run command_name module_name\n-run perception \"$@\"\n+# run perception \"$@\"\n+cyber_launch stop /apollo/modules/perception/production/launch/perception_all.launch\n+cyber_launch stop /apollo/modules/tools/image_decompress/launch/image_decompress.launch\n+cyber_launch stop /apollo/modules/transform/launch/static_transform.launch\n+\n+cyber_launch start /apollo/modules/transform/launch/static_transform.launch &\n+cyber_launch start /apollo/modules/tools/image_decompress/launch/image_decompress.launch &\n+cyber_launch start /apollo/modules/perception/production/launch/perception_all.launch &"
        }
    ],
    "ApolloAuto/apollo/6736": [
        {
            "sha": "c4473445df2c26d73fbccc1a20d5382af44f1df6",
            "filename": "docker/build/installers/install_bosfs.sh",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/fbcf840f039e6260e7df52039248bd3eda50329a/docker%2Fbuild%2Finstallers%2Finstall_bosfs.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/fbcf840f039e6260e7df52039248bd3eda50329a/docker%2Fbuild%2Finstallers%2Finstall_bosfs.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fbuild%2Finstallers%2Finstall_bosfs.sh?ref=fbcf840f039e6260e7df52039248bd3eda50329a",
            "patch": "@@ -21,9 +21,9 @@ set -e\n \n cd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n \n-# Prepair.\n+# Prepare\n apt-get update -y\n-apt-get install -y libfuse-dev\n+apt-get install -y libfuse-dev autotools-dev automake uuid-dev\n wget http://sdk.bce.baidu.com/console-sdk/bosfs-1.0.0.8.tar.gz\n tar zxf bosfs-1.0.0.8.tar.gz\n "
        }
    ],
    "ApolloAuto/apollo/6788": [
        {
            "sha": "e006b4f5aadc2401f466b48aa33a86e1a066c834",
            "filename": "modules/perception/radar/app/radar_obstacle_perception.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/43cf7d0c5123105f33d787e8a84fd416fa1b3628/modules%2Fperception%2Fradar%2Fapp%2Fradar_obstacle_perception.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/43cf7d0c5123105f33d787e8a84fd416fa1b3628/modules%2Fperception%2Fradar%2Fapp%2Fradar_obstacle_perception.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fradar%2Fapp%2Fradar_obstacle_perception.cc?ref=43cf7d0c5123105f33d787e8a84fd416fa1b3628",
            "patch": "@@ -79,8 +79,9 @@ bool RadarObstaclePerception::Perceive(\n   ADEBUG << \"Detected frame objects number: \"\n            << detect_frame_ptr->objects.size();\n   PERCEPTION_PERF_BLOCK_END_WITH_INDICATOR(sensor_name, \"detector\");\n-  CHECK(roi_filter_->RoiFilter(options.roi_filter_options,\n-                               detect_frame_ptr)) << \"radar roi filter error\";\n+  if (!roi_filter_->RoiFilter(options.roi_filter_options, detect_frame_ptr)) {\n+    ADEBUG << \"All radar objects were filtered out\";\n+  }\n   ADEBUG << \"RoiFiltered frame objects number: \"\n            << detect_frame_ptr->objects.size();\n   PERCEPTION_PERF_BLOCK_END_WITH_INDICATOR(sensor_name, \"roi_filter\");"
        }
    ],
    "ApolloAuto/apollo/6826": [
        {
            "sha": "23f1a719126094a18b2ee6d96a37b650a8affbc0",
            "filename": "modules/planning/tasks/optimizers/path_decider/path_decider.cc",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0f4c77d3b960eb05ab98bc10a2ec4173b5100332/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_decider%2Fpath_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0f4c77d3b960eb05ab98bc10a2ec4173b5100332/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_decider%2Fpath_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_decider%2Fpath_decider.cc?ref=0f4c77d3b960eb05ab98bc10a2ec4173b5100332",
            "patch": "@@ -121,12 +121,17 @@ bool PathDecider::MakeStaticObstacleDecision(\n \n     const auto frenet_point = frenet_path.GetNearestPoint(sl_boundary);\n     const double curr_l = frenet_point.l();\n+    double min_nudge_l =\n+        half_width + FLAGS_static_decision_nudge_l_buffer / 2.0;\n+\n     if (curr_l - lateral_radius > sl_boundary.end_l() ||\n         curr_l + lateral_radius < sl_boundary.start_l()) {\n       // ignore\n       path_decision->AddLateralDecision(\"PathDecider/not-in-l\", obstacle->Id(),\n                                         object_decision);\n-    } else if (obstacle->IsLaneBlocking()) {\n+    } else if (obstacle->IsLaneBlocking() ||\n+               (curr_l - sl_boundary.end_l() < min_nudge_l &&\n+                curr_l - sl_boundary.start_l() > min_nudge_l)) {\n       // stop\n       *object_decision.mutable_stop() = GenerateObjectStopDecision(*obstacle);\n "
        }
    ],
    "ApolloAuto/apollo/7198": [
        {
            "sha": "3c03d1503b205a96a8096ca104f8dff4fedef7f5",
            "filename": "apollo.sh",
            "status": "modified",
            "additions": 7,
            "deletions": 10,
            "changes": 17,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/100e5201ba7a432a9d013b23c42520bbe793aff8/apollo.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/100e5201ba7a432a9d013b23c42520bbe793aff8/apollo.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/apollo.sh?ref=100e5201ba7a432a9d013b23c42520bbe793aff8",
            "patch": "@@ -417,21 +417,18 @@ function gen_coverage() {\n \n   COV_DIR=data/cov\n   rm -rf $COV_DIR\n-  files=$(find bazel-out/local-dbg/bin/modules/ -iname \"*.gcda\" -o -iname \"*.gcno\" | grep -v external)\n+  files=$(find bazel-out/local-dbg/bin/ -iname \"*.gcda\" -o -iname \"*.gcno\" | grep -v external | grep -v third_party)\n   for f in $files; do\n-    target=\"$COV_DIR/objs/modules/${f##*modules}\"\n-    mkdir -p \"$(dirname \"$target\")\"\n-    cp \"$f\" \"$target\"\n-  done\n-\n-  files=$(find bazel-out/local-opt/bin/modules/ -iname \"*.gcda\" -o -iname \"*.gcno\" | grep -v external)\n-  for f in $files; do\n-    target=\"$COV_DIR/objs/modules/${f##*modules}\"\n+    if [ \"$f\" != \"${f##*cyber}\" ]; then\n+      target=\"$COV_DIR/objs/cyber${f##*cyber}\"\n+    else\n+      target=\"$COV_DIR/objs/modules${f##*modules}\"\n+    fi\n     mkdir -p \"$(dirname \"$target\")\"\n     cp \"$f\" \"$target\"\n   done\n \n-  lcov --rc lcov_branch_coverage=1 --capture --directory \"$COV_DIR/objs\" --output-file \"$COV_DIR/conv.info\"\n+  lcov --rc lcov_branch_coverage=1 --base-directory \"/apollo/bazel-apollo\" --capture --directory \"$COV_DIR/objs\" --output-file \"$COV_DIR/conv.info\"\n   if [ $? -ne 0 ]; then\n     fail 'lcov failed!'\n   fi"
        }
    ],
    "ApolloAuto/apollo/7250": [
        {
            "sha": "efcf4cb33cfc7e64726d6049d691b9d79b36d89c",
            "filename": "modules/drivers/velodyne/parser/scripts/extrinsics_broadcaster.py",
            "status": "modified",
            "additions": 25,
            "deletions": 24,
            "changes": 49,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/694180244ea2e1052268d2fc581775f0c5103f0a/modules%2Fdrivers%2Fvelodyne%2Fparser%2Fscripts%2Fextrinsics_broadcaster.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/694180244ea2e1052268d2fc581775f0c5103f0a/modules%2Fdrivers%2Fvelodyne%2Fparser%2Fscripts%2Fextrinsics_broadcaster.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdrivers%2Fvelodyne%2Fparser%2Fscripts%2Fextrinsics_broadcaster.py?ref=694180244ea2e1052268d2fc581775f0c5103f0a",
            "patch": "@@ -20,38 +20,39 @@\n Broadcaster static transform\n \"\"\"\n \n+from subprocess import call\n import sys\n-import os\n import yaml\n \n-\n def main():\n     \"\"\"Main function.\n \n     Reading transform info from a yaml file and publish to tf2\n     \"\"\"\n-    if len(sys.argv) == 1:\n-        print \"error: no extrinsics yaml file given\"\n-        print \"usage: python extrinsics_broadcaster.py extrinsic_example.yaml\"\n+    if len(sys.argv) < 2:\n+        print('Usage: %s extrinsic_example.yaml' % sys.argv[0])\n         return\n \n-    file_path = open(sys.argv[1])\n-    transform_stamped = yaml.safe_load(file_path)\n-    command = 'rosrun tf2_ros static_transform_publisher '\\\n-        '%f %f %f %f %f %f %f %s %s' % (transform_stamped['transform']['translation']['x'],\n-                                        transform_stamped['transform']['translation']['y'],\n-                                        transform_stamped['transform']['translation']['z'],\n-                                        transform_stamped['transform']['rotation']['x'],\n-                                        transform_stamped['transform']['rotation']['y'],\n-                                        transform_stamped['transform']['rotation']['z'],\n-                                        transform_stamped['transform']['rotation']['w'],\n-                                        transform_stamped['header']['frame_id'],\n-                                        transform_stamped['child_frame_id'])\n-\n-    print command\n-    ret = os.system(command)\n-    print ret\n-\n-\n-if __name__ == \"__main__\":\n+    with open(sys.argv[1]) as fp:\n+        transform_stamped = yaml.safe_load(file_path)\n+        command = 'rosrun tf2_ros static_transform_publisher ' \\\n+                  '%f %f %f %f %f %f %f %s %s' % \\\n+                  (transform_stamped['transform']['translation']['x'],\n+                   transform_stamped['transform']['translation']['y'],\n+                   transform_stamped['transform']['translation']['z'],\n+                   transform_stamped['transform']['rotation']['x'],\n+                   transform_stamped['transform']['rotation']['y'],\n+                   transform_stamped['transform']['rotation']['z'],\n+                   transform_stamped['transform']['rotation']['w'],\n+                   transform_stamped['header']['frame_id'],\n+                   transform_stamped['child_frame_id'])\n+\n+    print(command)\n+\n+    try:\n+        return call(command, shell=True)\n+    except OSError as e:\n+        print(e)\n+\n+if __name__ == '__main__':\n     main()"
        }
    ],
    "ApolloAuto/apollo/7269": [
        {
            "sha": "f641abc150407e33859b05637b507700eaba50f6",
            "filename": "modules/planning/open_space/trajectory_smoother/planning_block.cu",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6ff9281ee470c2b2853f45bb772b8bd1863ae804/modules%2Fplanning%2Fopen_space%2Ftrajectory_smoother%2Fplanning_block.cu",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6ff9281ee470c2b2853f45bb772b8bd1863ae804/modules%2Fplanning%2Fopen_space%2Ftrajectory_smoother%2Fplanning_block.cu",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fopen_space%2Ftrajectory_smoother%2Fplanning_block.cu?ref=6ff9281ee470c2b2853f45bb772b8bd1863ae804",
            "patch": "@@ -25,7 +25,7 @@ bool InitialCuda() {\n   CUDA_CHECK(cudaGetDeviceProperties(&deviceProp, dev));\n   printf(\"Using device %d: %s\\n\", dev, deviceProp.name);\n   CUDA_CHECK(cudaSetDevice(dev));\n-  return false;\n+  return true;\n }\n \n __global__ void fill_lower_left_gpu(int *iRow, int *jCol,"
        }
    ],
    "ApolloAuto/apollo/7290": [
        {
            "sha": "9a84d06fc6c4a2c255106984bfc10c9ad3b219fd",
            "filename": "docker/build/installers/py27_requirements.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2bfadf8bc2569e728ebb02ff1f0c27ba0814ae72/docker%2Fbuild%2Finstallers%2Fpy27_requirements.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2bfadf8bc2569e728ebb02ff1f0c27ba0814ae72/docker%2Fbuild%2Finstallers%2Fpy27_requirements.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fbuild%2Finstallers%2Fpy27_requirements.txt?ref=2bfadf8bc2569e728ebb02ff1f0c27ba0814ae72",
            "patch": "@@ -19,7 +19,7 @@ simplejson\n \n # Python tools\n pymongo\n-pyproj\n+pyproj == 1.9.6\n shapely\n \n # Data format"
        }
    ],
    "ApolloAuto/apollo/7304": [
        {
            "sha": "09484871e3fce7ec4166b1d366ba50b2933bb36f",
            "filename": "modules/perception/common/i_lib/pc/i_struct_s.h",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ccf6864c0b3df90ce31067540b0e8d817dadcb36/modules%2Fperception%2Fcommon%2Fi_lib%2Fpc%2Fi_struct_s.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ccf6864c0b3df90ce31067540b0e8d817dadcb36/modules%2Fperception%2Fcommon%2Fi_lib%2Fpc%2Fi_struct_s.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fcommon%2Fi_lib%2Fpc%2Fi_struct_s.h?ref=ccf6864c0b3df90ce31067540b0e8d817dadcb36",
            "patch": "@@ -703,7 +703,7 @@ bool VoxelGridXY<T>::Set(const T *data, unsigned int nr_points,\n         static_cast<int>(nr_voxel_x_), static_cast<int>(nr_voxel_y_));\n \n     if (id >= 0) {\n-      voxels_[id].push_back(n);\n+      voxels_[id].indices_.push_back(n);\n     }\n   }\n "
        }
    ],
    "ApolloAuto/apollo/7512": [
        {
            "sha": "e858ccb331dc9575ba17cafaea596e5e042e158c",
            "filename": "cyber/tools/cyber_launch/cyber_launch",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/96a59fab83f0788aef78d760bd72689761cabbdd/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/96a59fab83f0788aef78d760bd72689761cabbdd/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch?ref=96a59fab83f0788aef78d760bd72689761cabbdd",
            "patch": "@@ -470,7 +470,7 @@ def stop_launch(launch_file):\n     sys.exit(0)\n \n \n-def signal_handler(sig):\n+def signal_handler(sig, frame):\n     logger.info('Keyboard interrupt received. Stop all processes.')\n     stop(sig)\n "
        }
    ],
    "ApolloAuto/apollo/7559": [
        {
            "sha": "ae79cf49fa06d8807428c0445f107c77d230921b",
            "filename": "modules/tools/vehicle_calibration/sensor_calibration/extract_data.py",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c76f1e42d5235d133c691c283af374547ab970e2/modules%2Ftools%2Fvehicle_calibration%2Fsensor_calibration%2Fextract_data.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c76f1e42d5235d133c691c283af374547ab970e2/modules%2Ftools%2Fvehicle_calibration%2Fsensor_calibration%2Fextract_data.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fvehicle_calibration%2Fsensor_calibration%2Fextract_data.py?ref=c76f1e42d5235d133c691c283af374547ab970e2",
            "patch": "@@ -40,6 +40,8 @@\n \n CYBER_PATH = os.environ['CYBER_PATH']\n \n+CYBER_RECORD_HEADER_LENGTH = 2048\n+\n def process_dir(path, operation):\n     \"\"\"\n     Create or remove directory\n@@ -119,6 +121,11 @@ def validate_record(record_file):\n     header = record_pb2.Header()\n     header.ParseFromString(header_msg)\n \n+    if len(header) != CYBER_RECORD_HEADER_LENGTH:\n+        print('Record file: %s. header length should be %d.' %\n+              (record_file, CYBER_RECORD_HEADER_LENGTH))\n+        return False\n+\n     if header.size == 0:\n         print('Record file: %s. size is 0.' % record_file)\n         return False"
        }
    ],
    "ApolloAuto/apollo/7597": [
        {
            "sha": "404c2d095cb7b733bc2fd12520e8f3520eadc239",
            "filename": "modules/planning/tasks/deciders/open_space_fallback_decider.cc",
            "status": "modified",
            "additions": 13,
            "deletions": 21,
            "changes": 34,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/267e094bc6d22e94cb21e5727e28d41f25f9fe81/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_fallback_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/267e094bc6d22e94cb21e5727e28d41f25f9fe81/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_fallback_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_fallback_decider.cc?ref=267e094bc6d22e94cb21e5727e28d41f25f9fe81",
            "patch": "@@ -33,50 +33,41 @@ OpenSpaceFallbackDecider::OpenSpaceFallbackDecider(const TaskConfig& config)\n \n Status OpenSpaceFallbackDecider::Process(Frame* frame) {\n   std::vector<std::vector<common::math::Box2d>> predicted_bounding_rectangles;\n-  double collision_distance;\n+  double obstacle_to_vichcle_distance = 0.0;\n \n   BuildPredictedEnvironment(frame->obstacles(), predicted_bounding_rectangles);\n \n   if (!IsCollisionFreeTrajectory(\n           frame->open_space_info().chosen_paritioned_trajectory(),\n-          predicted_bounding_rectangles, &collision_distance)) {\n+          predicted_bounding_rectangles, &obstacle_to_vichcle_distance)) {\n     // change gflag\n     frame_->mutable_open_space_info()->set_fallback_flag(true);\n \n     // generate fallback trajectory base on current partition trajectory\n     // vehicle speed is decreased to zero inside safety distance\n     *(frame_->mutable_open_space_info()->mutable_fallback_trajectory()) =\n         frame->open_space_info().chosen_paritioned_trajectory();\n-    auto fallback_trajectory_vec =\n-        frame_->mutable_open_space_info()->mutable_fallback_trajectory()->first;\n+    auto fallback_trajectory_pair =\n+        frame_->mutable_open_space_info()->mutable_fallback_trajectory();\n \n     double stop_distance = std::max(\n-        0.0, collision_distance - config_.open_space_fallback_decider_config()\n-                                      .open_space_fall_back_stop_safety_gap());\n+        0.0, obstacle_to_vichcle_distance -\n+            config_.open_space_fallback_decider_config().\n+                open_space_fall_back_stop_safety_gap());\n     if (stop_distance > 0.0) {\n       // the accelerate = v0^2 / (2*s), where s is slowing down distance\n-      double accelerate = (frame_->vehicle_state().linear_velocity() *\n-                           frame_->vehicle_state().linear_velocity()) /\n-                          2.0 / stop_distance;\n-      double current_v = frame_->vehicle_state().linear_velocity();\n+      // TODO(Runxin): a better fallback trajectory\n       size_t temp_horizon =\n           frame_->open_space_info().fallback_trajectory().first.NumOfPoints();\n       for (size_t i = 0; i < temp_horizon; ++i) {\n-        double next_v = std::max(\n-            0.0, current_v - accelerate * frame_->open_space_info()\n-                                              .fallback_trajectory()\n-                                              .first.TrajectoryPointAt(i)\n-                                              .relative_time());\n-        fallback_trajectory_vec[i].set_v(next_v);\n-        fallback_trajectory_vec[i].set_a(-accelerate);\n-        current_v = next_v;\n+        fallback_trajectory_pair->first[i].set_v(0.0);\n       }\n     } else {\n       // if the stop distance is not enough, stop at current location\n       size_t temp_horizon =\n           frame_->open_space_info().fallback_trajectory().first.NumOfPoints();\n       for (size_t i = 0; i < temp_horizon; ++i) {\n-        fallback_trajectory_vec[i].set_v(0.0);\n+        fallback_trajectory_pair->first[i].set_v(0.0);\n       }\n     }\n   } else {\n@@ -109,7 +100,7 @@ bool OpenSpaceFallbackDecider::IsCollisionFreeTrajectory(\n     const TrajGearPair& trajectory_gear_pair,\n     const std::vector<std::vector<common::math::Box2d>>&\n         predicted_bounding_rectangles,\n-    double* collision_distance) {\n+    double* obstacle_to_vichcle_distance) {\n   const auto& vehicle_config =\n       common::VehicleConfigHelper::Instance()->GetConfig();\n   double ego_length = vehicle_config.vehicle_param().length();\n@@ -137,7 +128,8 @@ bool OpenSpaceFallbackDecider::IsCollisionFreeTrajectory(\n           if (obstacle_box.DistanceTo(vehicle_vec) <\n               config_.open_space_fallback_decider_config()\n                   .open_space_fall_back_collision_distance()) {\n-            *collision_distance = obstacle_box.DistanceTo(vehicle_vec);\n+            *obstacle_to_vichcle_distance =\n+                obstacle_box.DistanceTo(vehicle_vec);\n             return false;\n           }\n         }"
        }
    ],
    "ApolloAuto/apollo/7669": [
        {
            "sha": "7286fc16512adbd8cfa7ecd8e063a3e906710d83",
            "filename": "cyber/tools/cyber_launch/cyber_launch",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b20fd8305fdb032eb8bb670c6157949ab7b9b7f9/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b20fd8305fdb032eb8bb670c6157949ab7b9b7f9/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch?ref=b20fd8305fdb032eb8bb670c6157949ab7b9b7f9",
            "patch": "@@ -103,7 +103,7 @@ def module_monitor(mod):\n     while True:\n         line = mod.popen.stdout.readline()\n         if line:\n-            logger.debug('%s: %s' % (mod.name, line.strip('\\n')))\n+            logger.debug('%s# %s' % (mod.name, line.strip('\\n')))\n             continue\n         time.sleep(0.01)\n "
        }
    ],
    "ApolloAuto/apollo/7671": [
        {
            "sha": "ad7fdcd1724d0080c37b4c8f65e7b8e5c70fd133",
            "filename": "modules/planning/tasks/deciders/open_space_roi_decider.cc",
            "status": "modified",
            "additions": 14,
            "deletions": 2,
            "changes": 16,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d8a49f8cf2d373f467a297267add71546102a365/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_roi_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d8a49f8cf2d373f467a297267add71546102a365/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_roi_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_roi_decider.cc?ref=d8a49f8cf2d373f467a297267add71546102a365",
            "patch": "@@ -83,6 +83,11 @@ bool OpenSpaceRoiDecider::VPresentationObstacle() {\n \n   if (config_.open_space_roi_decider_config().enable_perception_obstacles()) {\n     size_t perception_obstacles_num = obstacles_by_frame_->Items().size();\n+    for (const auto &ob : obstacles_by_frame_->Items()) {\n+      if (ob->IsVirtual()) {\n+        --perception_obstacles_num;\n+      }\n+    }\n \n     frame_->mutable_open_space_info()->set_obstacles_num(\n         perception_obstacles_num + parking_boundaries_num);\n@@ -107,13 +112,20 @@ bool OpenSpaceRoiDecider::VPresentationObstacle() {\n     const auto &origin_point = frame_->open_space_info().origin_point();\n     const auto &origin_heading = frame_->open_space_info().origin_heading();\n     for (const auto &obstacle : obstacles_by_frame_->Items()) {\n+      if (obstacle->IsVirtual()) {\n+        continue;\n+      }\n+\n       Box2d original_box = obstacle->PerceptionBoundingBox();\n       original_box.Shift(-1.0 * origin_point);\n-      original_box.RotateFromCenter(-1.0 * origin_heading);\n+      // TODO(Runxin): rotate from origin instead\n+      // original_box.RotateFromCenter(-1.0 * origin_heading);\n       std::vector<Vec2d> vertices_ccw = original_box.GetAllCorners();\n       std::vector<Vec2d> vertices_cw;\n       while (!vertices_ccw.empty()) {\n-        vertices_cw.emplace_back(vertices_ccw.back());\n+        auto current_corner_pt = vertices_ccw.back();\n+        current_corner_pt.SelfRotate(-1.0 * origin_heading);\n+        vertices_cw.emplace_back(current_corner_pt);\n         vertices_ccw.pop_back();\n       }\n       // As the perception obstacle is a closed convex set, the first vertice is"
        }
    ],
    "ApolloAuto/apollo/7760": [
        {
            "sha": "8679088cab5d004702a4afcaf922221bd9ec5455",
            "filename": "modules/planning/tasks/deciders/open_space_fallback_decider.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 6,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/69981fb8e53aab323466398587ad3a1e46304775/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_fallback_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/69981fb8e53aab323466398587ad3a1e46304775/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_fallback_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_fallback_decider.cc?ref=69981fb8e53aab323466398587ad3a1e46304775",
            "patch": "@@ -74,14 +74,10 @@ Status OpenSpaceFallbackDecider::Process(Frame* frame) {\n \n       if (ptr_fallback_trajectory_pair->first[i].relative_time() >\n           relative_stopping_time) {\n-        ptr_fallback_trajectory_pair->first[i].mutable_path_point()->set_x(\n-            previous_point.path_point().x());\n-        ptr_fallback_trajectory_pair->first[i].mutable_path_point()->set_y(\n-            previous_point.path_point().y());\n+        ptr_fallback_trajectory_pair->first[i].mutable_path_point()->CopyFrom(\n+            previous_point.path_point());\n         ptr_fallback_trajectory_pair->first[i].set_v(0.0);\n         ptr_fallback_trajectory_pair->first[i].set_a(0.0);\n-        ptr_fallback_trajectory_pair->first[i].mutable_path_point()->set_s(\n-            previous_point.path_point().s());\n       } else {\n         ptr_fallback_trajectory_pair->first[i].set_v(temp_v);\n         ptr_fallback_trajectory_pair->first[i].set_a(accelerate);"
        }
    ],
    "ApolloAuto/apollo/7860": [
        {
            "sha": "7bd38b969dd500938a4870c768fd2a8d52cd7e97",
            "filename": "modules/canbus/vehicle/ch/ch_controller.cc",
            "status": "modified",
            "additions": 0,
            "deletions": 6,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6dcf4674ee78ac4682489241857db1e810a2ed56/modules%2Fcanbus%2Fvehicle%2Fch%2Fch_controller.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6dcf4674ee78ac4682489241857db1e810a2ed56/modules%2Fcanbus%2Fvehicle%2Fch%2Fch_controller.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcanbus%2Fvehicle%2Fch%2Fch_controller.cc?ref=6dcf4674ee78ac4682489241857db1e810a2ed56",
            "patch": "@@ -398,12 +398,6 @@ void ChController::Steer(double angle, double angle_spd) {\n   const double real_angle =\n       // vehicle_params_.max_steer_angle() / M_PI * 180 * angle / 100.0;\n       vehicle_params_.max_steer_angle() * angle / 100.0;\n-  const double real_angle_spd =\n-      ProtocolData<::apollo::canbus::ChassisDetail>::BoundedValue(\n-          vehicle_params_.min_steer_angle_rate() / M_PI * 180,\n-          vehicle_params_.max_steer_angle_rate() / M_PI * 180,\n-          vehicle_params_.max_steer_angle_rate() / M_PI * 180 * angle_spd /\n-              100.0);\n   steer_command_112_->set_steer_angle_cmd(real_angle);\n }\n "
        }
    ],
    "ApolloAuto/apollo/7908": [
        {
            "sha": "ff5053ff911769fdfc553a2754c74fee1fb29686",
            "filename": "docs/specs/perception_apollo_3.0_cn.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ee86882789eb51f4c875d752a07409b4c4d35168/docs%2Fspecs%2Fperception_apollo_3.0_cn.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ee86882789eb51f4c875d752a07409b4c4d35168/docs%2Fspecs%2Fperception_apollo_3.0_cn.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2Fperception_apollo_3.0_cn.md?ref=ee86882789eb51f4c875d752a07409b4c4d35168",
            "patch": "@@ -59,7 +59,7 @@ CIPV\u662f\u5f53\u524d\u8f66\u9053\u4e2d\u6700\u63a5\u8fd1\u7684\u8f66\u8f86\u3002\u5bf9\u8c61\u75313D\u8fb9\u754c\u6846\u8868\u793a\uff0c\u5176\u4ece\n \u8f93\u51fa\u53ef\u89c6\u5316\u7684\u5feb\u7167\u5982\u56fe2\u6240\u793a\u3002 \n ![Image](images/perception_visualization_apollo_3.0.png)\n \n-**\u56fe 2: Apollo 3.0\u4e2d\u611f\u77e5\u8f93\u51fa\u7684\u53ef\u89c6\u5316\u3002\u5de6\u4e0a\u89d2\u662f\u57fa\u4e8e\u56fe\u50cf\u7684\u8f93\u51fa\u3002\u5de6\u4e0b\u89d2\u663e\u793a\u4e86\u5bf9\u8c61\u76843D\u8fb9\u754c\u6846\u3002\u5de6\u56fe\u663e\u793a\u4e86\u8f66\u9053\u7ebf\u548c\u7269\u4f53\u7684\u4e09\u7ef4\u4fef\u89c6\u56fe\u3002CIPV\u6807\u6709\u7ea2\u8272\u8fb9\u6846\u3002\u9ec4\u7ebf\u8868\u793a\u6bcf\u8f86\u8f66\u7684\u8f68\u8ff9**\n+**\u56fe 2: Apollo 3.0\u4e2d\u611f\u77e5\u8f93\u51fa\u7684\u53ef\u89c6\u5316\u3002\u5de6\u4e0a\u89d2\u662f\u57fa\u4e8e\u56fe\u50cf\u7684\u8f93\u51fa\u3002\u5de6\u4e0b\u89d2\u663e\u793a\u4e86\u5bf9\u8c61\u76843D\u8fb9\u754c\u6846\u3002\u53f3\u56fe\u663e\u793a\u4e86\u8f66\u9053\u7ebf\u548c\u7269\u4f53\u7684\u4e09\u7ef4\u4fef\u89c6\u56fe\u3002CIPV\u6807\u6709\u7ea2\u8272\u8fb9\u6846\u3002\u9ec4\u7ebf\u8868\u793a\u6bcf\u8f86\u8f66\u7684\u8f68\u8ff9**\n \n ### \u96f7\u8fbe + \u6444\u50cf\u5934\u878d\u5408\n \u7ed9\u5b9a\u591a\u4e2a\u4f20\u611f\u5668\uff0c\u5b83\u4eec\u7684\u8f93\u51fa\u5e94\u4ee5\u534f\u540c\u65b9\u5f0f\u7ec4\u5408\u3002Apollo 3.0\uff0c\u4ecb\u7ecd\u4e86\u4e00\u5957\u5e26\u96f7\u8fbe\u548c\u6444\u50cf\u5934\u7684\u4f20\u611f\u5668\u3002\u5bf9\u4e8e\u6b64\u8fc7\u7a0b\uff0c\u9700\u8981\u6821\u51c6\u4e24\u4e2a\u4f20\u611f\u5668\u3002\u6bcf\u4e2a\u4f20\u611f\u5668\u90fd\u5c06\u4f7f\u7528Apollo 2.0\u4e2d\u4ecb\u7ecd\u7684\u76f8\u540c\u65b9\u6cd5\u8fdb\u884c\u6821\u51c6\u3002\u6821\u51c6\u540e\uff0c\u8f93\u51fa\u5c06\u4ee53-D\u4e16\u754c\u5750\u6807\u8868\u793a\uff0c\u6bcf\u4e2a\u8f93\u51fa\u5c06\u901a\u8fc7\u5b83\u4eec\u5728\u4f4d\u7f6e\uff0c\u5927\u5c0f\uff0c\u65f6\u95f4\u548c\u6bcf\u4e2a\u4f20\u611f\u5668\u7684\u6548\u7528\u65b9\u9762\u7684\u76f8\u4f3c\u6027\u8fdb\u884c\u878d\u5408\u3002\u5728\u5b66\u4e60\u4e86\u6bcf\u4e2a\u4f20\u611f\u5668\u7684\u6548\u7528\u51fd\u6570\u540e\uff0c\u6444\u50cf\u673a\u5bf9\u6a2a\u5411\u8ddd\u79bb\u7684\u8d21\u732e\u66f4\u5927\uff0c\u96f7\u8fbe\u5bf9\u7eb5\u5411\u8ddd\u79bb\u6d4b\u91cf\u7684\u8d21\u732e\u66f4\u5927\u3002\u5f02\u6b65\u4f20\u611f\u5668\u878d\u5408\u7b97\u6cd5\u4e5f\u4f5c\u4e3a\u9009\u9879\u63d0\u4f9b\u3002"
        }
    ],
    "ApolloAuto/apollo/8397": [
        {
            "sha": "d51d3521370c9441f4d9ee67ddaa68bee5cbbe3c",
            "filename": "modules/planning/reference_line/reference_line_provider.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e91bd85da6d59b2f11668a1382f69a4b9984bc58/modules%2Fplanning%2Freference_line%2Freference_line_provider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e91bd85da6d59b2f11668a1382f69a4b9984bc58/modules%2Fplanning%2Freference_line%2Freference_line_provider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Freference_line%2Freference_line_provider.cc?ref=e91bd85da6d59b2f11668a1382f69a4b9984bc58",
            "patch": "@@ -392,6 +392,7 @@ bool ReferenceLineProvider::GetReferenceLinesFromRelativeMap(\n                   target_lane_pair.first)) {\n       // take the id of the first adjacent lane on the left of adc as\n       // the nearest_neighbor_lane_id\n+      lane_change_type = routing::LEFT;\n       nearest_neighbor_lane_id =\n           adc_lane_way_point.lane->lane().left_neighbor_forward_lane_id(0).id();\n     } else if (right_neighbor_lane_ids.end() !=\n@@ -401,6 +402,7 @@ bool ReferenceLineProvider::GetReferenceLinesFromRelativeMap(\n       // target lane on the right of adc\n       // take the id  of the first adjacent lane on the right of adc as\n       // the nearest_neighbor_lane_id\n+      lane_change_type = routing::RIGHT;\n       nearest_neighbor_lane_id = adc_lane_way_point.lane->lane()\n                                      .right_neighbor_forward_lane_id(0)\n                                      .id();"
        }
    ],
    "ApolloAuto/apollo/8402": [
        {
            "sha": "7ea2571608a5b2dcf668cb0f5b10498d7bd8c4f3",
            "filename": "modules/planning/navi/decider/navi_path_decider.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0a896918785253667c9a82bf95813baa388674b6/modules%2Fplanning%2Fnavi%2Fdecider%2Fnavi_path_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0a896918785253667c9a82bf95813baa388674b6/modules%2Fplanning%2Fnavi%2Fdecider%2Fnavi_path_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fnavi%2Fdecider%2Fnavi_path_decider.cc?ref=0a896918785253667c9a82bf95813baa388674b6",
            "patch": "@@ -238,9 +238,10 @@ bool NaviPathDecider::GetBasicPathData(\n   CHECK_NOTNULL(path_points);\n \n   double min_path_len = config_.min_path_length();\n-  // get min path plan lenth s = v0 * t + 1 / 2.0 * a * t^2\n+  // get min path plan length s = v0 * t + 1 / 2.0 * a * t^2\n   double path_len = start_plan_v_ * config_.min_look_forward_time() +\n-                    start_plan_a_ * pow(0.1, 2) / 2.0;\n+                    start_plan_a_ *\n+                    pow(config_.min_look_forward_time(), 2) / 2.0;\n   path_len = std::max(path_len, min_path_len);\n \n   const double reference_line_len = reference_line.Length();"
        }
    ],
    "ApolloAuto/apollo/8521": [
        {
            "sha": "77fa480a57a72bc2a3020ba0f14edfb046672ef9",
            "filename": "modules/common/configs/vehicle_config_helper.h",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5f207015087fa223f40bf4303de8f40e03819284/modules%2Fcommon%2Fconfigs%2Fvehicle_config_helper.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5f207015087fa223f40bf4303de8f40e03819284/modules%2Fcommon%2Fconfigs%2Fvehicle_config_helper.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Fconfigs%2Fvehicle_config_helper.h?ref=5f207015087fa223f40bf4303de8f40e03819284",
            "patch": "@@ -103,7 +103,7 @@ class VehicleConfigHelper {\n    * D. XO is VehicleParam.min_turn_radius(), X to AD is left_edge_to_center,\n    * X to AB is VehicleParam.front_edge_to_center(). Then\n    *     AO = sqrt((XO +  left_edge_to_center) ^2 + front_edge_to_center^2).\n-   * @return AO in the above figure, which is the maximum turn radius when the\n+   * @return AO in the above figure, which is the minimum turn radius when the\n    * vehicle turns with maximum steering angle\n    */\n "
        }
    ],
    "ApolloAuto/apollo/8571": [
        {
            "sha": "9839929811b1165bf6e2f0fba501e9bd7351fc3f",
            "filename": "modules/planning/conf/planning.conf",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/22c5fa84db529ec7d59df0bde9ffcd278bf31c94/modules%2Fplanning%2Fconf%2Fplanning.conf",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/22c5fa84db529ec7d59df0bde9ffcd278bf31c94/modules%2Fplanning%2Fconf%2Fplanning.conf",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fconf%2Fplanning.conf?ref=22c5fa84db529ec7d59df0bde9ffcd278bf31c94",
            "patch": "@@ -26,4 +26,4 @@\n --enable_nonscenario_side_pass\n --noenable_smoother_failsafe\n --noenable_parallel_trajectory_smoothing\n---use_s_curve_speed_smooth\n+--nouse_s_curve_speed_smooth"
        }
    ],
    "ApolloAuto/apollo/8596": [
        {
            "sha": "72fcded5983cd0a800c796aff6c68fc5a72ca6e4",
            "filename": "modules/perception/camera/lib/traffic_light/tracker/semantic_decision.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9472eb9cfcbfe68df298a5c91e1936c808a58d42/modules%2Fperception%2Fcamera%2Flib%2Ftraffic_light%2Ftracker%2Fsemantic_decision.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9472eb9cfcbfe68df298a5c91e1936c808a58d42/modules%2Fperception%2Fcamera%2Flib%2Ftraffic_light%2Ftracker%2Fsemantic_decision.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fcamera%2Flib%2Ftraffic_light%2Ftracker%2Fsemantic_decision.cc?ref=9472eb9cfcbfe68df298a5c91e1936c808a58d42",
            "patch": "@@ -97,9 +97,9 @@ base::TLColor SemanticReviser::ReviseBySemantic(\n     vote.at(static_cast<int>(color))++;\n   }\n \n-  if (vote.at(static_cast<size_t>(base::TLColor::TL_RED) == 0) &&\n-      vote.at(static_cast<size_t>(base::TLColor::TL_GREEN) == 0) &&\n-      vote.at(static_cast<size_t>(base::TLColor::TL_YELLOW)) == 0) {\n+  if ((vote.at(static_cast<size_t>(base::TLColor::TL_RED)) == 0) &&\n+      (vote.at(static_cast<size_t>(base::TLColor::TL_GREEN)) == 0) &&\n+      (vote.at(static_cast<size_t>(base::TLColor::TL_YELLOW)) == 0)) {\n     if (vote.at(static_cast<size_t>(base::TLColor::TL_BLACK)) > 0) {\n       return base::TLColor::TL_BLACK;\n     } else {"
        }
    ],
    "ApolloAuto/apollo/8664": [
        {
            "sha": "3993e1d8e6c61660cfb7ff68fcf2d1aca286d83a",
            "filename": "modules/localization/msf/local_integ/localization_integ_impl.cc",
            "status": "modified",
            "additions": 16,
            "deletions": 6,
            "changes": 22,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c5b31a921e916c8550acc2e93752795074f6ca10/modules%2Flocalization%2Fmsf%2Flocal_integ%2Flocalization_integ_impl.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c5b31a921e916c8550acc2e93752795074f6ca10/modules%2Flocalization%2Fmsf%2Flocal_integ%2Flocalization_integ_impl.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Flocal_integ%2Flocalization_integ_impl.cc?ref=c5b31a921e916c8550acc2e93752795074f6ca10",
            "patch": "@@ -166,20 +166,30 @@ void LocalizationIntegImpl::ImuProcessImpl(const ImuData& imu_data) {\n       integ_localization.pose().orientation();\n   Eigen::Quaternion<double> quaternion(orientation.qw(), orientation.qx(),\n                                        orientation.qy(), orientation.qz());\n-  Eigen::Vector3d vec_acceleration = static_cast<Eigen::Vector3d>(\n-      quaternion.toRotationMatrix() * orig_acceleration);\n+  Eigen::Vector3d vec_acceleration =\n+      static_cast<Eigen::Vector3d>(quaternion * orig_acceleration);\n+\n+  // Remove gravity.\n+  // Gravity on the Earth's surface varies by around 0.7%.\n+  // From 9.7639 m/s2 on the Nevado Huascaran mountain in Peru\n+  // to 9.8337 m/s2 at the surface of the Arctic Ocean\n+  // Here we simply subtract a standard gravity, by definition, 9.80665.\n+  vec_acceleration(2) -= 9.80665;\n \n   apollo::common::Point3D* linear_acceleration =\n       posepb_loc->mutable_linear_acceleration();\n   linear_acceleration->set_x(vec_acceleration(0));\n   linear_acceleration->set_y(vec_acceleration(1));\n-  linear_acceleration->set_z(vec_acceleration(2) - 9.8);\n+  linear_acceleration->set_z(vec_acceleration(2));\n+\n+  Eigen::Vector3d vec_acceleration_vrf =\n+      quaternion.inverse() * vec_acceleration;\n \n   apollo::common::Point3D* linear_acceleration_vrf =\n       posepb_loc->mutable_linear_acceleration_vrf();\n-  linear_acceleration_vrf->set_x(imu_data.fb[0]);\n-  linear_acceleration_vrf->set_y(imu_data.fb[1]);\n-  linear_acceleration_vrf->set_z(imu_data.fb[2]);\n+  linear_acceleration_vrf->set_x(vec_acceleration_vrf(0));\n+  linear_acceleration_vrf->set_y(vec_acceleration_vrf(1));\n+  linear_acceleration_vrf->set_z(vec_acceleration_vrf(2));\n \n   // set angular velocity\n   Eigen::Vector3d orig_angular_velocity(imu_data.wibb[0], imu_data.wibb[1],"
        }
    ],
    "ApolloAuto/apollo/8824": [
        {
            "sha": "856d84cbcc12b7d66214d260df72643e21eadc19",
            "filename": "modules/control/controller/lat_controller.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d36f3661e958e13e3f647c910257c8db32fb9788/modules%2Fcontrol%2Fcontroller%2Flat_controller.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d36f3661e958e13e3f647c910257c8db32fb9788/modules%2Fcontrol%2Fcontroller%2Flat_controller.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcontrol%2Fcontroller%2Flat_controller.cc?ref=d36f3661e958e13e3f647c910257c8db32fb9788",
            "patch": "@@ -373,6 +373,8 @@ Status LatController::ComputeControlCommand(\n   } else {\n     cf_ = control_conf_->lat_controller_conf().cf();\n     cr_ = control_conf_->lat_controller_conf().cr();\n+    matrix_a_(0, 1) = 1.0;\n+    matrix_a_coeff_(0, 2) = 0.0;\n   }\n   matrix_a_(1, 2) = (cf_ + cr_) / mass_;\n   matrix_a_(3, 2) = (lf_ * cf_ - lr_ * cr_) / iz_;\n@@ -596,6 +598,7 @@ void LatController::UpdateMatrix() {\n   } else {\n     v = std::max(VehicleStateProvider::Instance()->linear_velocity(),\n                  minimum_speed_protection_);\n+    matrix_a_(0, 2) = 0.0;\n   }\n   matrix_a_(1, 1) = matrix_a_coeff_(1, 1) / v;\n   matrix_a_(1, 3) = matrix_a_coeff_(1, 3) / v;"
        }
    ],
    "ApolloAuto/apollo/8832": [
        {
            "sha": "92938273085bc00cd43da8603ac463823fed81b8",
            "filename": "third_party/tf2/src/buffer_core.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4f9b29f6bf487549e4510f83a36680369d5829d7/third_party%2Ftf2%2Fsrc%2Fbuffer_core.cpp",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4f9b29f6bf487549e4510f83a36680369d5829d7/third_party%2Ftf2%2Fsrc%2Fbuffer_core.cpp",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/third_party%2Ftf2%2Fsrc%2Fbuffer_core.cpp?ref=4f9b29f6bf487549e4510f83a36680369d5829d7",
            "patch": "@@ -476,8 +476,8 @@ int BufferCore::walkToTopParent(\n   if (frame_chain) {\n     // Pruning: Compare the chains starting at the parent (end) until they\n     // differ\n-    int m = reverse_frame_chain.size() - 1;\n-    int n = frame_chain->size() - 1;\n+    unsigned int m = reverse_frame_chain.size() - 1;\n+    unsigned int n = frame_chain->size() - 1;\n     for (; m >= 0 && n >= 0; --m, --n) {\n       if ((*frame_chain)[n] != reverse_frame_chain[m]) break;\n     }"
        }
    ],
    "ApolloAuto/apollo/8879": [
        {
            "sha": "6f0874d25ac04ad6516fc59b677901f8d32abb91",
            "filename": "modules/planning/tasks/optimizers/open_space_trajectory_partition/open_space_trajectory_partition.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/152f66e516338b8b2104bf83c4ae19b604d19f40/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_partition%2Fopen_space_trajectory_partition.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/152f66e516338b8b2104bf83c4ae19b604d19f40/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_partition%2Fopen_space_trajectory_partition.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_partition%2Fopen_space_trajectory_partition.cc?ref=152f66e516338b8b2104bf83c4ae19b604d19f40",
            "patch": "@@ -56,11 +56,12 @@ OpenSpaceTrajectoryPartition::OpenSpaceTrajectoryPartition(\n   heading_offset_to_midpoint_ =\n       open_space_trajectory_partition_config_.heading_offset_to_midpoint();\n   lateral_offset_to_midpoint_ =\n-      open_space_trajectory_partition_config_.heading_offset_to_midpoint();\n+      open_space_trajectory_partition_config_.lateral_offset_to_midpoint();\n   longitudinal_offset_to_midpoint_ =\n-      open_space_trajectory_partition_config_.heading_offset_to_midpoint();\n+      open_space_trajectory_partition_config_.longitudinal_offset_to_midpoint();\n   vehicle_box_iou_threshold_to_midpoint_ =\n-      open_space_trajectory_partition_config_.heading_offset_to_midpoint();\n+      open_space_trajectory_partition_config_\n+          .vehicle_box_iou_threshold_to_midpoint();\n \n   vehicle_param_ =\n       common::VehicleConfigHelper::Instance()->GetConfig().vehicle_param();"
        }
    ],
    "ApolloAuto/apollo/8898": [
        {
            "sha": "4ce2dbdca715c04dc6aed933ed022042d0031a91",
            "filename": "modules/tools/configurator/ModuleConf.py",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/042994ee9a941467e26485d654918bb88a6b5969/modules%2Ftools%2Fconfigurator%2FModuleConf.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/042994ee9a941467e26485d654918bb88a6b5969/modules%2Ftools%2Fconfigurator%2FModuleConf.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fconfigurator%2FModuleConf.py?ref=042994ee9a941467e26485d654918bb88a6b5969",
            "patch": "@@ -19,7 +19,6 @@\n Message Handle\n \"\"\"\n \n-import ast\n import curses\n import importlib\n from curses import panel\n@@ -44,7 +43,7 @@ def __init__(self, name, proto_file, proto_class, conf_file, stdscr):\n \n     def parse_from_file(self):\n         mod = importlib.import_module(self.proto_file)\n-        self.proto = ast.literal_eval(\"mod.\" + self.proto_class)\n+        self.proto = eval(\"mod.\" + self.proto_class)\n \n         try:\n             with open(APOLLO_ROOT + self.conf_file, 'r') as prototxt:"
        }
    ],
    "ApolloAuto/apollo/9046": [
        {
            "sha": "ab291aed6e2ffaf332dfb43a35e6f220e855382c",
            "filename": "modules/perception/camera/lib/calibration_service/online_calibration_service/online_calibration_service.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/8fecbf916ba206e555692cb4bccc3554d011468b/modules%2Fperception%2Fcamera%2Flib%2Fcalibration_service%2Fonline_calibration_service%2Fonline_calibration_service.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/8fecbf916ba206e555692cb4bccc3554d011468b/modules%2Fperception%2Fcamera%2Flib%2Fcalibration_service%2Fonline_calibration_service%2Fonline_calibration_service.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fcamera%2Flib%2Fcalibration_service%2Fonline_calibration_service%2Fonline_calibration_service.cc?ref=8fecbf916ba206e555692cb4bccc3554d011468b",
            "patch": "@@ -177,6 +177,7 @@ void OnlineCalibrationService::Update(CameraFrame *frame) {\n   AINFO << \"pitch_angle: \" << iter->second.pitch_angle * 180.0 / M_PI\n         << \" degree.\";\n   // CHECK(BuildIndex());\n+  is_service_ready_ = true;\n }\n \n void OnlineCalibrationService::SetCameraHeightAndPitch("
        }
    ],
    "ApolloAuto/apollo/9092": [
        {
            "sha": "fb2cee124d0b3ea77fb6c62487567819f15b5eba",
            "filename": "modules/tools/calibration/result2pb.py",
            "status": "modified",
            "additions": 26,
            "deletions": 26,
            "changes": 52,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0645b58c96d47f8c3f5f9a9a5ca412b71ca66384/modules%2Ftools%2Fcalibration%2Fresult2pb.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0645b58c96d47f8c3f5f9a9a5ca412b71ca66384/modules%2Ftools%2Fcalibration%2Fresult2pb.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fcalibration%2Fresult2pb.py?ref=0645b58c96d47f8c3f5f9a9a5ca412b71ca66384",
            "patch": "@@ -27,21 +27,21 @@\n def load_calibration_raw_data(fn):\n     speed_table = {}\n     with open(fn, 'r') as f:\n-    for line in f:\n-        items = line.split(',')\n-        cmd = round(float(items[0]))\n-        speed = float(items[1])\n-        acc = round(float(items[2]), 2)\n-        if speed in speed_table:\n-            cmd_table = speed_table[speed]\n-            if cmd in cmd_table:\n-                cmd_table[cmd].append(acc)\n+        for line in f:\n+            items = line.split(',')\n+            cmd = round(float(items[0]))\n+            speed = float(items[1])\n+            acc = round(float(items[2]), 2)\n+            if speed in speed_table:\n+                cmd_table = speed_table[speed]\n+                if cmd in cmd_table:\n+                    cmd_table[cmd].append(acc)\n+                else:\n+                    cmd_table[cmd] = [acc]\n             else:\n+                cmd_table = {}\n                 cmd_table[cmd] = [acc]\n-        else:\n-            cmd_table = {}\n-            cmd_table[cmd] = [acc]\n-            speed_table[speed] = cmd_table\n+                speed_table[speed] = cmd_table\n     for speed, cmd_table in speed_table.items():\n         new_cmd_table = {}\n         for cmd, acc_list in cmd_table.items():\n@@ -62,21 +62,21 @@ def load_calibration_raw_data(fn):\n def load_calibration_raw_data_old(fn):\n     speed_table = {}\n     with open(fn, 'r') as f:\n-    for line in f:\n-        items = line.split(',')\n-        cmd = round(float(items[0]))\n-        speed = float(items[1])\n-        acc = round(float(items[2]), 2)\n-        if speed in speed_table:\n-            acc_table = speed_table[speed]\n-            if acc in acc_table:\n-                acc_table[acc].append(cmd)\n+        for line in f:\n+            items = line.split(',')\n+            cmd = round(float(items[0]))\n+            speed = float(items[1])\n+            acc = round(float(items[2]), 2)\n+            if speed in speed_table:\n+                acc_table = speed_table[speed]\n+                if acc in acc_table:\n+                    acc_table[acc].append(cmd)\n+                else:\n+                    acc_table[acc] = [cmd]\n             else:\n+                acc_table = {}\n                 acc_table[acc] = [cmd]\n-        else:\n-            acc_table = {}\n-            acc_table[acc] = [cmd]\n-            speed_table[speed] = acc_table\n+                speed_table[speed] = acc_table\n     return speed_table\n \n def get_calibration_table_pb(speed_table):"
        }
    ],
    "ApolloAuto/apollo/9103": [
        {
            "sha": "e8b14bfce17d66d2557087eac72276cc00e0de7b",
            "filename": "modules/planning/README_cn.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/8ea9065e14f8d72bef2bdefaa37d3c953a8dad40/modules%2Fplanning%2FREADME_cn.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/8ea9065e14f8d72bef2bdefaa37d3c953a8dad40/modules%2Fplanning%2FREADME_cn.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2FREADME_cn.md?ref=8ea9065e14f8d72bef2bdefaa37d3c953a8dad40",
            "patch": "@@ -68,4 +68,4 @@ Note:\n \u5982\u679c\u60a8\u5e0c\u671b\u5305\u62ec\u60a8\u81ea\u5df1\u7684\u9a7e\u9a76\u573a\u666f\uff0c\u8bf7\u53c2\u8003\u73b0\u6709\u65b9\u6848\u4f5c\u4e3a\u53c2\u8003\u3002\u6211\u4eec\u76ee\u524d\u6ca1\u6709\u7528\u4e8e\u7f16\u5199\u60a8\u81ea\u5df1\u7684\u89c4\u5212\u573a\u666f\u7684\u6a21\u677f\u3002\n ```\n \n-![](images/planning_architecture.png)\n+![](images/architecture.png)"
        }
    ],
    "ApolloAuto/apollo/9181": [
        {
            "sha": "9817dae6f49d815dfb006a2ec0a07cf7a8fdc7b2",
            "filename": "README.md",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9203fe9ce1eecd1f3faf836bd954c8d53780ea91/README.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9203fe9ce1eecd1f3faf836bd954c8d53780ea91/README.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/README.md?ref=9203fe9ce1eecd1f3faf836bd954c8d53780ea91",
            "patch": "@@ -33,16 +33,16 @@ For business and partnership, please visit [our website](http://apollo.auto).\n \r\n Apollo 5.0 is loaded with new modules and features, but needs to be calibrated and configured perfectly before you take it for a spin. Please review the prerequisites and installation steps in detail to ensure that you are well equipped to build and launch Apollo. You could also check out Apollo's architecture overview for a greater understanding on Apollo's core technology and platform. \r\n \r\n-**[Attention]** The Apollo team has decided to retire Git LFS which might impact your development. For details please refer to:\r\n+**[Attention]** The Apollo team has decided to retire Git LFS, which might impact your development. For details, please refer to:\r\n [migration guide](docs/howto/how_to_migrate_to_the_updated_apollo_master_from_old_versions.md).\r\n \r\n-[Want to contribute to our code?](CONTRIBUTING.md) follow this guide.\r\n+[Want to contribute to our code?](CONTRIBUTING.md) Follow this guide.\r\n \r\n ## Prerequisites\r\n \r\n #### Basic Requirements:\r\n \r\n-* Vehicle equipped with by-wire system, including but not limited to brake by-wire, steering by-wire, throttle by-wire and shift by-wire (Apollo is currently tested on Lincoln MKZ)\r\n+* The vehicle equipped with by-wire system, including but not limited to brake-by-wire, steering-by-wire, throttle-by-wire and shift-by-wire (Apollo is currently tested on Lincoln MKZ)\r\n \r\n * A machine with a 4-core processor and 8GB memory minimum (16GB for Apollo 3.5 and above)\r\n \r\n@@ -288,7 +288,7 @@ Apollo is provided under the [Apache-2.0 license](https://github.com/ApolloAuto/\n \r\n ## Disclaimer\r\n \r\n-Please refer the Disclaimer of Apollo in [Apollo's official website](http://apollo.auto/docs/disclaimer.html).\r\n+Please refer to the Disclaimer of Apollo in [Apollo's official website](http://apollo.auto/docs/disclaimer.html).\r\n \r\n ## Connect with us \r\n * [Have suggestions for our GitHub page?](https://github.com/ApolloAuto/apollo/issues)\r"
        }
    ],
    "ApolloAuto/apollo/9187": [
        {
            "sha": "a99e2753bd9107dcb6ddfc8fb844875b22fbe697",
            "filename": "modules/perception/base/point_cloud.h",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/195efaa628eaff60a1b894ce51d8a9fe6f422ccf/modules%2Fperception%2Fbase%2Fpoint_cloud.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/195efaa628eaff60a1b894ce51d8a9fe6f422ccf/modules%2Fperception%2Fbase%2Fpoint_cloud.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fbase%2Fpoint_cloud.h?ref=195efaa628eaff60a1b894ce51d8a9fe6f422ccf",
            "patch": "@@ -150,7 +150,7 @@ class PointCloud {\n     points_.resize(rhs.size() - indices.size());\n     std::vector<bool> mask(false, rhs.size());\n     for (size_t i = 0; i < indices.size(); ++i) {\n-      mask[i] = true;\n+      mask[indices[i]] = true;\n     }\n     for (size_t i = 0; i < rhs.size(); ++i) {\n       if (!mask[i]) {"
        }
    ],
    "ApolloAuto/apollo/9239": [
        {
            "sha": "afc66ce27588250c1443e09bcfb90de2f06c8715",
            "filename": "modules/perception/lidar/lib/tracker/multi_lidar_fusion/mlf_motion_filter.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/7edf4741658ed6275a6d1602d4ac43090d11a3af/modules%2Fperception%2Flidar%2Flib%2Ftracker%2Fmulti_lidar_fusion%2Fmlf_motion_filter.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/7edf4741658ed6275a6d1602d4ac43090d11a3af/modules%2Fperception%2Flidar%2Flib%2Ftracker%2Fmulti_lidar_fusion%2Fmlf_motion_filter.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Flidar%2Flib%2Ftracker%2Fmulti_lidar_fusion%2Fmlf_motion_filter.cc?ref=7edf4741658ed6275a6d1602d4ac43090d11a3af",
            "patch": "@@ -300,7 +300,7 @@ void MlfMotionFilter::OnlineCovarianceEstimation(\n           Eigen::Vector3d::Identity() * noise_maximum_ * noise_maximum_;\n     }\n     ++cur_obj_pair;\n-    object->belief_velocity_online_covariance.block<2, 2>(0, 0) =\n+    object->belief_velocity_online_covariance.block<2, 2>(0, 0) +=\n         velocity_resisual.head<2>() * velocity_resisual.head<2>().transpose();\n   }\n   object->belief_velocity_online_covariance /=\n@@ -323,7 +323,7 @@ void MlfMotionFilter::ConvergenceEstimationAndBoostUp(\n   // -1 means first object without measure velocity not considered\n   size_t window_size = 1 + track_data->history_objects_.size() - 1;\n \n-  // Boostup convergence when its confidence is samll than minimum\n+  // Boostup convergence when its confidence is small than minimum\n   ComputeConvergenceConfidence(track_data, new_object, true);\n   UpdateConverged(track_data, new_object);\n "
        }
    ],
    "ApolloAuto/apollo/9267": [
        {
            "sha": "c4d12592325605babf350ecae87bcb6eba7438bf",
            "filename": "README.md",
            "status": "modified",
            "additions": 7,
            "deletions": 7,
            "changes": 14,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3d2d84aa1207c309bdb037b24972e996f64c21c7/README.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3d2d84aa1207c309bdb037b24972e996f64c21c7/README.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/README.md?ref=3d2d84aa1207c309bdb037b24972e996f64c21c7",
            "patch": "@@ -31,7 +31,7 @@ For business and partnership, please visit [our website](http://apollo.auto).\n \r\n ## Getting Started\r\n \r\n-Apollo 5.0 is loaded with new modules and features, but needs to be calibrated and configured perfectly before you take it for a spin. Please review the prerequisites and installation steps in detail to ensure that you are well equipped to build and launch Apollo. You could also check out Apollo's architecture overview for a greater understanding on Apollo's core technology and platform. \r\n+Apollo 5.0 is loaded with new modules and features but needs to be calibrated and configured perfectly before you take it for a spin. Please review the prerequisites and installation steps in detail to ensure that you are well equipped to build and launch Apollo. You could also check out Apollo's architecture overview for a greater understanding of Apollo's core technology and platform. \r\n \r\n **[Attention]** The Apollo team has decided to retire Git LFS, which might impact your development. For details, please refer to:\r\n [migration guide](docs/howto/how_to_migrate_to_the_updated_apollo_master_from_old_versions.md).\r\n@@ -42,7 +42,7 @@ Apollo 5.0 is loaded with new modules and features, but needs to be calibrated a\n \r\n #### Basic Requirements:\r\n \r\n-* The vehicle equipped with by-wire system, including but not limited to brake-by-wire, steering-by-wire, throttle-by-wire and shift-by-wire (Apollo is currently tested on Lincoln MKZ)\r\n+* The vehicle equipped with the by-wire system, including but not limited to brake-by-wire, steering-by-wire, throttle-by-wire and shift-by-wire (Apollo is currently tested on Lincoln MKZ)\r\n \r\n * A machine with a 4-core processor and 8GB memory minimum (16GB for Apollo 3.5 and above)\r\n \r\n@@ -55,7 +55,7 @@ Apollo 5.0 is loaded with new modules and features, but needs to be calibrated a\n  **1.0 > whichever version you would like to test out**.\r\n  The reason behind this recommendation is that you need to confirm whether individual hardware components \r\n  and modules are functioning correctly and clear various version test cases,\r\n- before progressing to a higher more capable version for your safety and the safety of those around you.\r\n+ before progressing to a higher, more capable version for your safety and the safety of those around you.\r\n \r\n #### Individual Version Requirements:\r\n \r\n@@ -65,7 +65,7 @@ The following diagram highlights the scope and features of each Apollo release:\n \r\n [**Apollo 1.0:**](docs/quickstart/apollo_1_0_hardware_system_installation_guide.md) \r\n \r\n-Apollo 1.0 also referred to as the Automatic GPS Waypoint Following, works in an enclosed venue such as a test track or parking lot. This installation is necessary to ensure that Apollo works perfectly with your vehicle. The diagram below lists the various modules in Apollo 1.0.\r\n+Apollo 1.0, also referred to as the Automatic GPS Waypoint Following, works in an enclosed venue such as a test track or parking lot. This installation is necessary to ensure that Apollo works perfectly with your vehicle. The diagram below lists the various modules in Apollo 1.0.\r\n \r\n ![image alt text](docs/demo_guide/images/Apollo_1.png)\r\n \r\n@@ -113,7 +113,7 @@ Apollo 1.5 is meant for fixed lane cruising. With the addition of LiDAR, vehicle\n \r\n [**Apollo 2.0:**](docs/quickstart/apollo_2_0_hardware_system_installation_guide_v1.md#key-hardware-components)\r\n \r\n-Apollo 2.0 supports vehicles autonomously driving on simple urban roads. Vehicles are able to cruise on roads safely, avoid collisions with obstacles, stop at traffic lights and change lanes if needed to reach their destination.  Please note, the modules highlighted in Red are additions or upgrades for version 2.0.\r\n+Apollo 2.0 supports vehicles autonomously driving on simple urban roads. Vehicles are able to cruise on roads safely, avoid collisions with obstacles, stop at traffic lights, and change lanes if needed to reach their destination.  Please note, the modules highlighted in Red are additions or upgrades for version 2.0.\r\n \r\n ![image alt text](docs/demo_guide/images/Apollo_2.png)\r\n \r\n@@ -159,7 +159,7 @@ and we want to ensure Apollo 2.5 was integrated correctly with your vehicle befo\n \r\n [**Apollo 3.0:**](docs/quickstart/apollo_3_0_quick_start.md)\r\n \r\n-Apollo 3.0's main focus is to provide a platform for developers to build upon in a closed venue low-speed environment. Vehicles are able to maintain lane control, cruise and avoid collisions with vehicles ahead of them. \r\n+Apollo 3.0's primary focus is to provide a platform for developers to build upon in a closed venue low-speed environment. Vehicles are able to maintain lane control, cruise and avoid collisions with vehicles ahead of them. \r\n \r\n ![image alt text](docs/demo_guide/images/Apollo_3.0_diagram.png)\r\n \r\n@@ -179,7 +179,7 @@ Apollo 3.0's main focus is to provide a platform for developers to build upon in\n \r\n [**Apollo 3.5:**](docs/quickstart/apollo_3_5_quick_start.md)\r\n \r\n-Apollo 3.5 is capable of navigating through complex driving scenarios such as residential and downtown areas. The car now has 360-degree visibility, along with upgraded perception algorithms to handle the changing conditions of urban roads, making the car more secure and aware. Scenario-based planning can navigate through complex scenarios including unprotected turns and narrow streets often found in residential areas and roads with stop signs. \r\n+Apollo 3.5 is capable of navigating through complex driving scenarios such as residential and downtown areas. The car now has 360-degree visibility, along with upgraded perception algorithms to handle the changing conditions of urban roads, making the car more secure and aware. Scenario-based planning can navigate through complex scenarios, including unprotected turns and narrow streets often found in residential areas and roads with stop signs. \r\n \r\n ![image alt text](docs/demo_guide/images/Apollo_3_5_Architecture.png)\r\n \r"
        }
    ],
    "ApolloAuto/apollo/9283": [
        {
            "sha": "0b0623c85fa859e200e1bc76a38d6e06390cd75c",
            "filename": "modules/planning/open_space/coarse_trajectory_generator/grid_search.cc",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/09fdef6fb4578f2a6f44edd472e6d8d1e447d0c5/modules%2Fplanning%2Fopen_space%2Fcoarse_trajectory_generator%2Fgrid_search.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/09fdef6fb4578f2a6f44edd472e6d8d1e447d0c5/modules%2Fplanning%2Fopen_space%2Fcoarse_trajectory_generator%2Fgrid_search.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fopen_space%2Fcoarse_trajectory_generator%2Fgrid_search.cc?ref=09fdef6fb4578f2a6f44edd472e6d8d1e447d0c5",
            "patch": "@@ -35,15 +35,15 @@ double GridSearch::EuclidDistance(const double x1, const double y1,\n }\n \n bool GridSearch::CheckConstraints(std::shared_ptr<Node2d> node) {\n-  if (obstacles_linesegments_vec_.empty()) {\n-    return true;\n-  }\n-  double node_grid_x = node->GetGridX();\n-  double node_grid_y = node->GetGridY();\n+  const double node_grid_x = node->GetGridX();\n+  const double node_grid_y = node->GetGridY();\n   if (node_grid_x > max_grid_x_ || node_grid_x < 0 ||\n       node_grid_y > max_grid_y_ || node_grid_y < 0) {\n     return false;\n   }\n+  if (obstacles_linesegments_vec_.empty()) {\n+    return true;\n+  }\n   for (const auto& obstacle_linesegments : obstacles_linesegments_vec_) {\n     for (const common::math::LineSegment2d& linesegment :\n          obstacle_linesegments) {"
        }
    ],
    "ApolloAuto/apollo/9291": [
        {
            "sha": "33630077061d74e8b6ac1839b2bdb8b907a06405",
            "filename": "modules/map/pnc_map/pnc_map.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1e032b0df34bad87b5b01ed482095c4acbc9abdb/modules%2Fmap%2Fpnc_map%2Fpnc_map.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1e032b0df34bad87b5b01ed482095c4acbc9abdb/modules%2Fmap%2Fpnc_map%2Fpnc_map.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Fpnc_map%2Fpnc_map.cc?ref=1e032b0df34bad87b5b01ed482095c4acbc9abdb",
            "patch": "@@ -154,7 +154,7 @@ void PncMap::UpdateRoutingRange(int adc_index) {\n \n bool PncMap::UpdateVehicleState(const VehicleState &vehicle_state) {\n   if (!ValidateRouting(routing_)) {\n-    AERROR << \"The routing is invalid when updatting vehicle state.\";\n+    AERROR << \"The routing is invalid when updating vehicle state.\";\n     return false;\n   }\n   if (!adc_state_.has_x() ||"
        }
    ],
    "ApolloAuto/apollo/9310": [
        {
            "sha": "4e2cfe066453d7f483e5604f9bc52ed56fe977ac",
            "filename": "modules/perception/camera/lib/calibration_service/online_calibration_service/online_calibration_service.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 4,
            "changes": 7,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4643e48c051fb24a0f6f0359f2c107205a490636/modules%2Fperception%2Fcamera%2Flib%2Fcalibration_service%2Fonline_calibration_service%2Fonline_calibration_service.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4643e48c051fb24a0f6f0359f2c107205a490636/modules%2Fperception%2Fcamera%2Flib%2Fcalibration_service%2Fonline_calibration_service%2Fonline_calibration_service.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fcamera%2Flib%2Fcalibration_service%2Fonline_calibration_service%2Fonline_calibration_service.cc?ref=4643e48c051fb24a0f6f0359f2c107205a490636",
            "patch": "@@ -164,7 +164,8 @@ void OnlineCalibrationService::Update(CameraFrame *frame) {\n            iter != name_camera_status_map_.end(); iter++) {\n         // update pitch angle\n         iter->second.pitch_angle =\n-            iter->second.pitch_angle_diff + iter->second.pitch_angle;\n+            iter->second.pitch_angle_diff +\n+            name_camera_status_map_[master_sensor_name_].pitch_angle;\n         // update ground plane param\n         iter->second.ground_plane[1] = cos(iter->second.pitch_angle);\n         iter->second.ground_plane[2] = -sin(iter->second.pitch_angle);\n@@ -190,17 +191,15 @@ void OnlineCalibrationService::SetCameraHeightAndPitch(\n        iter != name_camera_status_map_.end(); ++iter) {\n     // get iters\n     auto iter_ground_height = name_camera_ground_height_map.find(iter->first);\n-    auto iter_pitch_angle = name_camera_pitch_angle_diff_map.find(iter->first);\n     auto iter_pitch_angle_diff =\n         name_camera_pitch_angle_diff_map.find(iter->first);\n     CHECK(iter_ground_height != name_camera_ground_height_map.end());\n-    CHECK(iter_pitch_angle != name_camera_pitch_angle_diff_map.end());\n     CHECK(iter_pitch_angle_diff != name_camera_pitch_angle_diff_map.end());\n     // set camera status\n     name_camera_status_map_[iter->first].camera_ground_height =\n         iter_ground_height->second;\n     name_camera_status_map_[iter->first].pitch_angle_diff =\n-        iter_pitch_angle->second;\n+        iter_pitch_angle_diff->second;\n     name_camera_status_map_[iter->first].pitch_angle =\n         pitch_angle_master_sensor + iter_pitch_angle_diff->second;\n     name_camera_status_map_[iter->first].ground_plane[1] ="
        }
    ],
    "ApolloAuto/apollo/9346": [
        {
            "sha": "6f33401ca054fde78388f461be9eabc41418aeb3",
            "filename": "modules/planning/scenarios/util/util.cc",
            "status": "modified",
            "additions": 9,
            "deletions": 5,
            "changes": 14,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e7ac220c445458a6e891ec038b401510a5efaaa2/modules%2Fplanning%2Fscenarios%2Futil%2Futil.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e7ac220c445458a6e891ec038b401510a5efaaa2/modules%2Fplanning%2Fscenarios%2Futil%2Futil.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fscenarios%2Futil%2Futil.cc?ref=e7ac220c445458a6e891ec038b401510a5efaaa2",
            "patch": "@@ -227,8 +227,8 @@ bool CheckPullOverPositionByDistance(\n ParkAndGoStatus CheckADCParkAndGoCruiseCompleted(\n     const ReferenceLineInfo& reference_line_info,\n     const ScenarioParkAndGoConfig& scenario_config) {\n-  const double kLBuffer = 0.1;\n-  const double kHeadingBuffer = 0.05;\n+  const double kLBuffer = 0.3;\n+  const double kHeadingBuffer = 0.1;\n   // check if vehicle in reference line\n   const auto& reference_line = reference_line_info.reference_line();\n   // get vehicle s,l info\n@@ -243,8 +243,12 @@ ParkAndGoStatus CheckADCParkAndGoCruiseCompleted(\n   const auto reference_point =\n       reference_line.GetReferencePoint(adc_position_sl.s());\n   const auto path_point = reference_point.ToPathPoint(adc_position_sl.s());\n-  if (std::fabs(adc_position_sl.l() < kLBuffer) &&\n+  ADEBUG << \"adc_position_sl.l():[\" << adc_position_sl.l() << \"]\";\n+  ADEBUG << \"adc_heading - path_point.theta():[\" << adc_heading << \"]\"\n+         << \"[\" << path_point.theta() << \"]\";\n+  if (std::fabs(adc_position_sl.l()) < kLBuffer &&\n       std::fabs(adc_heading - path_point.theta()) < kHeadingBuffer) {\n+    ADEBUG << \"cruise completed\";\n     return CRUISE_COMPLETE;\n   }\n   return CRUISING;\n@@ -259,11 +263,11 @@ bool CheckADCReadyToCruise(Frame* frame,\n       common::VehicleStateProvider::Instance()->heading();\n   const ReferenceLineInfo& reference_line_info =\n       frame->reference_line_info().front();\n-  bool no_near_front_obstacle = CheckADCSurroundObstacles(\n+  bool is_near_front_obstacle = CheckADCSurroundObstacles(\n       adc_position, adc_heading, frame, scenario_config);\n   bool heading_align_w_reference_line = CheckADCHeading(\n       adc_position, adc_heading, reference_line_info, scenario_config);\n-  if (no_near_front_obstacle && heading_align_w_reference_line) {\n+  if (!is_near_front_obstacle && heading_align_w_reference_line) {\n     return true;\n   }\n   return false;"
        }
    ],
    "ApolloAuto/apollo/9347": [
        {
            "sha": "a4a2b67026b9090a397221018cd2ce5eb23aaf6b",
            "filename": "modules/planning/conf/planning.conf",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3eea1a630a13baf6c65d63dcb505fda94ae1b201/modules%2Fplanning%2Fconf%2Fplanning.conf",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3eea1a630a13baf6c65d63dcb505fda94ae1b201/modules%2Fplanning%2Fconf%2Fplanning.conf",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fconf%2Fplanning.conf?ref=3eea1a630a13baf6c65d63dcb505fda94ae1b201",
            "patch": "@@ -26,7 +26,7 @@\n --enable_nonscenario_side_pass\n \n --noenable_smoother_failsafe\n---noenable_parallel_trajectory_smoothing\n+--enable_parallel_trajectory_smoothing\n --nouse_s_curve_speed_smooth\n --use_iterative_anchoring_smoother\n "
        }
    ],
    "ApolloAuto/apollo/9367": [
        {
            "sha": "fad2df4accf0fc056d66afc9acdb1acbe9bde0ce",
            "filename": "modules/map/pnc_map/pnc_map.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 4,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/97651b1b4840ddc7c97c27c52c1cba0edb31ad7c/modules%2Fmap%2Fpnc_map%2Fpnc_map.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/97651b1b4840ddc7c97c27c52c1cba0edb31ad7c/modules%2Fmap%2Fpnc_map%2Fpnc_map.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Fpnc_map%2Fpnc_map.cc?ref=97651b1b4840ddc7c97c27c52c1cba0edb31ad7c",
            "patch": "@@ -191,10 +191,7 @@ bool PncMap::UpdateVehicleState(const VehicleState &vehicle_state) {\n     return false;\n   }\n \n-  int last_index = GetWaypointIndex(routing_waypoint_index_.back().waypoint);\n-  if (next_routing_waypoint_index_ == routing_waypoint_index_.size() - 1 ||\n-      (!stop_for_destination_ &&\n-       last_index == routing_waypoint_index_.back().index)) {\n+  if (next_routing_waypoint_index_ == routing_waypoint_index_.size() - 1) {\n     stop_for_destination_ = true;\n   }\n   return true;"
        }
    ],
    "ApolloAuto/apollo/9375": [
        {
            "sha": "be9b6bc3804f171c73c6808ca213822cfb9c31f8",
            "filename": "modules/prediction/common/road_graph.cc",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5f1ce1458924c37916733cf827f38b3725162f65/modules%2Fprediction%2Fcommon%2Froad_graph.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5f1ce1458924c37916733cf827f38b3725162f65/modules%2Fprediction%2Fcommon%2Froad_graph.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fcommon%2Froad_graph.cc?ref=5f1ce1458924c37916733cf827f38b3725162f65",
            "patch": "@@ -333,10 +333,18 @@ RoadGraph::LaneWithSmallestAverageCurvature(\n   CHECK(!lane_infos.empty());\n   size_t sample_size = FLAGS_sample_size_for_average_lane_curvature;\n   std::shared_ptr<const hdmap::LaneInfo> selected_lane_info = lane_infos[0];\n+  if (selected_lane_info == nullptr) {\n+    AERROR << \"Lane Vector first element: selected_lane_info is nullptr.\";\n+    return nullptr;\n+  }\n   double smallest_curvature =\n       AverageCurvature(selected_lane_info->id().id(), sample_size);\n   for (size_t i = 1; i < lane_infos.size(); ++i) {\n     std::shared_ptr<const hdmap::LaneInfo> lane_info = lane_infos[i];\n+    if (lane_info == nullptr) {\n+      AWARN << \"Lane vector element: one lane_info is nullptr.\";\n+      continue;\n+    }\n     double curvature = AverageCurvature(lane_info->id().id(), sample_size);\n     if (curvature < smallest_curvature) {\n       smallest_curvature = curvature;"
        }
    ],
    "ApolloAuto/apollo/9378": [
        {
            "sha": "276bdb8cb782588eba54fc2d61375a7d939da05c",
            "filename": "modules/planning/tasks/deciders/open_space_decider/open_space_roi_decider.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ed0dc6636fb82d74f7295fe755d82f4fab7308e3/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_decider%2Fopen_space_roi_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ed0dc6636fb82d74f7295fe755d82f4fab7308e3/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_decider%2Fopen_space_roi_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Fopen_space_decider%2Fopen_space_roi_decider.cc?ref=ed0dc6636fb82d74f7295fe755d82f4fab7308e3",
            "patch": "@@ -158,8 +158,8 @@ void OpenSpaceRoiDecider::SetOriginFromADC(Frame *const frame) {\n   // get vertices from ADC box\n   std::vector<common::math::Vec2d> adc_corners;\n   adc_box.GetAllCorners(&adc_corners);\n-  auto left_top = adc_corners[0];\n-  auto right_top = adc_corners[3];\n+  auto left_top = adc_corners[3];\n+  auto right_top = adc_corners[0];\n   // rotate the points to have the lane to be horizontal to x axis positive\n   // direction and scale them base on the origin point\n   Vec2d heading_vec = right_top - left_top;"
        }
    ],
    "ApolloAuto/apollo/9463": [
        {
            "sha": "fe152d90e4533d8daf6ec691c742594b037e7007",
            "filename": "modules/planning/tasks/deciders/path_bounds_decider/path_bounds_decider.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e2e1bfe08102ef2b558383913496c68263603d6d/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_bounds_decider%2Fpath_bounds_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e2e1bfe08102ef2b558383913496c68263603d6d/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_bounds_decider%2Fpath_bounds_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_bounds_decider%2Fpath_bounds_decider.cc?ref=e2e1bfe08102ef2b558383913496c68263603d6d",
            "patch": "@@ -218,7 +218,7 @@ void PathBoundsDecider::InitPathBoundsDecider(\n   adc_frenet_s_ = adc_sl_info.first[0];\n   adc_frenet_l_ = adc_sl_info.second[0];\n   adc_frenet_sd_ = adc_sl_info.first[1];\n-  adc_frenet_ld_ = adc_sl_info.second[1];\n+  adc_frenet_ld_ = adc_sl_info.second[1] * adc_frenet_sd_;\n   double offset_to_map = 0.0;\n   reference_line.GetOffsetToMap(adc_frenet_s_, &offset_to_map);\n   adc_l_to_lane_center_ = adc_frenet_l_ + offset_to_map;"
        }
    ],
    "ApolloAuto/apollo/9467": [
        {
            "sha": "af7afe9c5c3dd1cf7168ef1895e7d8d3c776979c",
            "filename": "modules/planning/tasks/deciders/rule_based_stop_decider/rule_based_stop_decider.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c0a8fc9d0abbbf76244bf332f7f914e6d98043c3/modules%2Fplanning%2Ftasks%2Fdeciders%2Frule_based_stop_decider%2Frule_based_stop_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c0a8fc9d0abbbf76244bf332f7f914e6d98043c3/modules%2Fplanning%2Ftasks%2Fdeciders%2Frule_based_stop_decider%2Frule_based_stop_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Frule_based_stop_decider%2Frule_based_stop_decider.cc?ref=c0a8fc9d0abbbf76244bf332f7f914e6d98043c3",
            "patch": "@@ -212,8 +212,8 @@ bool RuleBasedStopDecider::CheckSidePassStop(\n           shift_vec + Vec2d(stop_pathpoint.x(), stop_pathpoint.y());\n       double stop_l_on_pathdata = 0.0;\n       const auto &nearby_path = reference_line_info.reference_line().map_path();\n-      stop_s_on_pathdata -= nearby_path.GetNearestPoint(\n-          stop_fence_pose, stop_s_on_pathdata, &stop_l_on_pathdata);\n+      nearby_path.GetNearestPoint(stop_fence_pose,\n+                                  stop_s_on_pathdata, &stop_l_on_pathdata);\n       return true;\n     }\n     last_path_point_type = std::get<1>(point_guide);"
        }
    ],
    "ApolloAuto/apollo/9483": [
        {
            "sha": "4bb8cc375c686ef107a27303623f1c7261253aa5",
            "filename": "modules/perception/fusion/lib/fusion_system/probabilistic_fusion/probabilistic_fusion.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d69cffa3172cf287f820327682e23d7e5ae57a14/modules%2Fperception%2Ffusion%2Flib%2Ffusion_system%2Fprobabilistic_fusion%2Fprobabilistic_fusion.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d69cffa3172cf287f820327682e23d7e5ae57a14/modules%2Fperception%2Ffusion%2Flib%2Ffusion_system%2Fprobabilistic_fusion%2Fprobabilistic_fusion.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Ffusion%2Flib%2Ffusion_system%2Fprobabilistic_fusion%2Fprobabilistic_fusion.cc?ref=d69cffa3172cf287f820327682e23d7e5ae57a14",
            "patch": "@@ -50,10 +50,10 @@ bool ProbabilisticFusion::Init(const FusionInitOptions& init_options) {\n     return false;\n   }\n \n-  std::string woork_root_config = GetAbsolutePath(\n+  std::string work_root_config = GetAbsolutePath(\n       lib::ConfigManager::Instance()->work_root(), options.root_dir);\n \n-  std::string config = GetAbsolutePath(woork_root_config, options.conf_file);\n+  std::string config = GetAbsolutePath(work_root_config, options.conf_file);\n   ProbabilisticFusionConfig params;\n \n   if (!cyber::common::GetProtoFromFile(config, &params)) {"
        }
    ],
    "ApolloAuto/apollo/9488": [
        {
            "sha": "15f8a1d67802ae1d2a153d7f6cbd1143247662b0",
            "filename": "modules/map/pnc_map/cuda_util.cu",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/899e164b63e59f1a75dd074c2ac83c7638c9d645/modules%2Fmap%2Fpnc_map%2Fcuda_util.cu",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/899e164b63e59f1a75dd074c2ac83c7638c9d645/modules%2Fmap%2Fpnc_map%2Fcuda_util.cu",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Fpnc_map%2Fcuda_util.cu?ref=899e164b63e59f1a75dd074c2ac83c7638c9d645",
            "patch": "@@ -19,7 +19,6 @@\n #include \"cyber/common/log.h\"\n \n #include <cuda_runtime_api.h>\n-#include <device_functions.h>\n \n namespace apollo {\n namespace pnc_map {"
        }
    ],
    "ApolloAuto/apollo/9492": [
        {
            "sha": "0de654ca4f48ea5e3030d99853cc36db46fb4639",
            "filename": "modules/prediction/evaluator/vehicle/cruise_mlp_evaluator.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/df57dc29926bed51708c60c34bf799fcb208f711/modules%2Fprediction%2Fevaluator%2Fvehicle%2Fcruise_mlp_evaluator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/df57dc29926bed51708c60c34bf799fcb208f711/modules%2Fprediction%2Fevaluator%2Fvehicle%2Fcruise_mlp_evaluator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fevaluator%2Fvehicle%2Fcruise_mlp_evaluator.cc?ref=df57dc29926bed51708c60c34bf799fcb208f711",
            "patch": "@@ -550,8 +550,10 @@ void CruiseMLPEvaluator::ModelInference(\n     torch::jit::script::Module torch_model_ptr,\n     LaneSequence* lane_sequence_ptr) {\n   auto torch_output_tuple = torch_model_ptr.forward(torch_inputs).toTuple();\n-  auto probability_tensor = torch_output_tuple->elements()[0].toTensor();\n-  auto finish_time_tensor = torch_output_tuple->elements()[1].toTensor();\n+  auto probability_tensor =\n+      torch_output_tuple->elements()[0].toTensor().to(torch::kCPU);\n+  auto finish_time_tensor =\n+      torch_output_tuple->elements()[1].toTensor().to(torch::kCPU);\n   lane_sequence_ptr->set_probability(Sigmoid(\n       static_cast<double>(probability_tensor.accessor<float, 2>()[0][0])));\n   lane_sequence_ptr->set_time_to_lane_center("
        }
    ],
    "ApolloAuto/apollo/9536": [
        {
            "sha": "110ef283c2719a4150fa8b1296400c2bc8068d6c",
            "filename": "scripts/apollo_base.sh",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ef53841e29e7f99a7fa765806596653c6e2c321d/scripts%2Fapollo_base.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ef53841e29e7f99a7fa765806596653c6e2c321d/scripts%2Fapollo_base.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fapollo_base.sh?ref=ef53841e29e7f99a7fa765806596653c6e2c321d",
            "patch": "@@ -111,11 +111,11 @@ function set_lib_path() {\n   export LD_LIBRARY_PATH=/usr/local/apollo/boost/lib:$LD_LIBRARY_PATH\n   export LD_LIBRARY_PATH=/usr/local/apollo/paddlepaddle_dep/mkldnn/lib/:$LD_LIBRARY_PATH\n   export PYTHONPATH=/usr/local/lib/python2.7/dist-packages:${PY_LIB_PATH}:${PY_TOOLS_PATH}:${PYTHONPATH}\n-  if [ -e /usr/local/cuda-8.0/ ];then\n-    export PATH=/usr/local/cuda-8.0/bin:$PATH\n-    export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH\n-    export C_INCLUDE_PATH=/usr/local/cuda-8.0/include:$C_INCLUDE_PATH\n-    export CPLUS_INCLUDE_PATH=/usr/local/cuda-8.0/include:$CPLUS_INCLUDE_PATH\n+  if [ -e /usr/local/cuda/ ];then\n+    export PATH=/usr/local/cuda/bin:$PATH\n+    export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n+    export C_INCLUDE_PATH=/usr/local/cuda/include:$C_INCLUDE_PATH\n+    export CPLUS_INCLUDE_PATH=/usr/local/cuda/include:$CPLUS_INCLUDE_PATH\n   fi\n }\n "
        }
    ],
    "ApolloAuto/apollo/9586": [
        {
            "sha": "f9299481c0dd9a172a53e19ca3c562fa5ff3fb17",
            "filename": "apollo.sh",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/512786750207c8dcad3c31e5ab5e06ce36120af5/apollo.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/512786750207c8dcad3c31e5ab5e06ce36120af5/apollo.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/apollo.sh?ref=512786750207c8dcad3c31e5ab5e06ce36120af5",
            "patch": "@@ -251,6 +251,11 @@ function cibuild() {\n     //modules/routing/...\n     //modules/transform/...\"\n \n+  # The data module is lightweight and rarely changed. If it fails, it's\n+  # most-likely an environment mess. So we try `bazel clean` and then initial\n+  # the building process.\n+  bazel build $JOB_ARG $DEFINES $@ \"//modules/data/...\" || bazel clean\n+\n   bazel build $JOB_ARG $DEFINES $@ $BUILD_TARGETS\n \n   if [ $? -eq 0 ]; then"
        }
    ],
    "ApolloAuto/apollo/9604": [
        {
            "sha": "1965df07a33300ad0f02510ec647f96f4adc5fe6",
            "filename": "modules/tools/record_play/rtk_player.py",
            "status": "modified",
            "additions": 6,
            "deletions": 6,
            "changes": 12,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9fc81360f95f304e7b6c13e0f9871cb4a7346566/modules%2Ftools%2Frecord_play%2Frtk_player.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9fc81360f95f304e7b6c13e0f9871cb4a7346566/modules%2Ftools%2Frecord_play%2Frtk_player.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Frecord_play%2Frtk_player.py?ref=9fc81360f95f304e7b6c13e0f9871cb4a7346566",
            "patch": "@@ -116,8 +116,8 @@ def chassis_callback(self, data):\n         New chassis Received\n         \"\"\"\n         self.chassis.CopyFrom(data)\n-        self.automode = (self.chassis.driving_mode ==\n-                         chassis_pb2.Chassis.COMPLETE_AUTO_DRIVE)\n+        self.automode = (self.chassis.driving_mode\n+                         == chassis_pb2.Chassis.COMPLETE_AUTO_DRIVE)\n         self.chassis_received = True\n \n     def padmsg_callback(self, data):\n@@ -182,8 +182,8 @@ def next_gear_switch_time(self, start, end):\n         for i in range(start, end):\n             # trajectory with gear switch\n             # include gear_neutral at the beginning of a trajectory\n-            if((self.data['gear'][i] == 1 or self.data['gear'][i] == 2)\n-                    and (self.data['gear'][i + 1] != self.data['gear'][i]) ):\n+            if((i < end - 1) and (self.data['gear'][i] == 1 or self.data['gear'][i] == 2) and\n+                    (self.data['gear'][i + 1] != self.data['gear'][i]) ):\n                 self.logger.debug(\"enter i in while loop: [ %s ]\" % i)\n                 self.logger.debug(\"self.data['gear'][i] != 1: %s\" % self.data['gear'][i])\n                 self.logger.debug(\"self.data['gear'][i] != 2: %s\" % self.data['gear'][i])\n@@ -301,8 +301,8 @@ def publish_planningmsg(self):\n         planningdata.estop.is_estop = self.estop\n \n         self.planning_pub.write(planningdata)\n-        self.logger.debug(\"Generated Planning Sequence: \" +\n-                          str(self.sequence_num - 1))\n+        self.logger.debug(\"Generated Planning Sequence: \"\n+                          + str(self.sequence_num - 1))\n \n     def shutdown(self):\n         \"\"\""
        }
    ],
    "ApolloAuto/apollo/9608": [
        {
            "sha": "efc38ebe5f106035f68ceba0916b5f061d219276",
            "filename": "modules/planning/conf/planning_config.pb.txt",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3e50145cdbdf3203ce8e0a412feb3c4aedb5327a/modules%2Fplanning%2Fconf%2Fplanning_config.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3e50145cdbdf3203ce8e0a412feb3c4aedb5327a/modules%2Fplanning%2Fconf%2Fplanning_config.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fconf%2Fplanning_config.pb.txt?ref=3e50145cdbdf3203ce8e0a412feb3c4aedb5327a",
            "patch": "@@ -314,3 +314,9 @@ default_task_config: {\n     enable_lane_change_urgency_check: false\n   }\n }\n+default_task_config: {\n+  task_type: PATH_REUSE_DECIDER\n+  path_reuse_decider_config {\n+    reuse_path: false\n+  }\n+}"
        }
    ],
    "ApolloAuto/apollo/9612": [
        {
            "sha": "3ab6c74966fb34de50d35c7f22397409f4c66df7",
            "filename": "modules/planning/tasks/optimizers/path_time_heuristic/gridded_path_time_graph.cc",
            "status": "modified",
            "additions": 12,
            "deletions": 8,
            "changes": 20,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/648cc784b80135b527171722ffe3067f72f8aa95/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_time_heuristic%2Fgridded_path_time_graph.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/648cc784b80135b527171722ffe3067f72f8aa95/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_time_heuristic%2Fgridded_path_time_graph.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_time_heuristic%2Fgridded_path_time_graph.cc?ref=648cc784b80135b527171722ffe3067f72f8aa95",
            "patch": "@@ -283,11 +283,14 @@ void GriddedPathTimeGraph::CalculateCostAt(\n       static_cast<uint32_t>(FLAGS_planning_upper_speed_limit *\n                             (1 + kSpeedRangeBuffer) * unit_t_ / unit_s_);\n   const uint32_t r_low = (max_s_diff < r ? r - max_s_diff : 0);\n-\n+  const uint32_t r_pre_size = r - r_low + 1;\n+  uint32_t r_pre = r;\n   const auto& pre_col = cost_table_[c - 1];\n+  double curr_speed_limit = speed_limit;\n \n   if (c == 2) {\n-    for (uint32_t r_pre = r_low; r_pre <= r; ++r_pre) {\n+    for (uint32_t i = 0; i < r_pre_size; ++i) {\n+      r_pre = r - i;\n       const double acc =\n           (r * unit_s_ - 2 * r_pre * unit_s_) / (unit_t_ * unit_t_);\n       if (acc < gridded_path_time_graph_config_.max_deceleration() ||\n@@ -299,9 +302,8 @@ void GriddedPathTimeGraph::CalculateCostAt(\n                                   pre_col[r_pre])) {\n         continue;\n       }\n-\n-      double curr_speed_limit =\n-          std::fmin(speed_limit, speed_limit_by_index_[r_pre]);\n+      curr_speed_limit =\n+          std::fmin(curr_speed_limit, speed_limit_by_index_[r_pre]);\n       const double cost =\n           cost_cr.obstacle_cost() + pre_col[r_pre].total_cost() +\n           CalculateEdgeCostForThirdCol(r, r_pre, curr_speed_limit);\n@@ -313,7 +315,9 @@ void GriddedPathTimeGraph::CalculateCostAt(\n     }\n     return;\n   }\n-  for (uint32_t r_pre = r_low; r_pre <= r; ++r_pre) {\n+\n+  for (uint32_t i = 0; i < r_pre_size; ++i) {\n+    r_pre = r - i;\n     if (std::isinf(pre_col[r_pre].total_cost()) ||\n         pre_col[r_pre].pre_point() == nullptr) {\n       continue;\n@@ -345,8 +349,8 @@ void GriddedPathTimeGraph::CalculateCostAt(\n     const STPoint& prepre_point = prepre_graph_point.point();\n     const STPoint& pre_point = pre_col[r_pre].point();\n     const STPoint& curr_point = cost_cr.point();\n-    double curr_speed_limit =\n-        std::fmin(speed_limit, speed_limit_by_index_[r_pre]);\n+    curr_speed_limit =\n+        std::fmin(curr_speed_limit, speed_limit_by_index_[r_pre]);\n     double cost = cost_cr.obstacle_cost() + pre_col[r_pre].total_cost() +\n                   CalculateEdgeCost(triple_pre_point, prepre_point, pre_point,\n                                     curr_point, curr_speed_limit);"
        }
    ],
    "ApolloAuto/apollo/9630": [
        {
            "sha": "7b9d76bbc2c22784b967e34188cb3bd44f6c39ee",
            "filename": "modules/monitor/hardware/gps/gps_monitor.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6e4a6d3273e4566a7c59045b93b7641a79252522/modules%2Fmonitor%2Fhardware%2Fgps%2Fgps_monitor.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6e4a6d3273e4566a7c59045b93b7641a79252522/modules%2Fmonitor%2Fhardware%2Fgps%2Fgps_monitor.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmonitor%2Fhardware%2Fgps%2Fgps_monitor.cc?ref=6e4a6d3273e4566a7c59045b93b7641a79252522",
            "patch": "@@ -107,7 +107,7 @@ void GpsMonitor::RunOnce(const double current_time) {\n       MonitorManager::LogBuffer().ERROR(status->detailed_msg());\n       break;\n     case MeasureState::CRITICAL_ERROR:\n-      status->set_status(HardwareStatus::GPS_UNSTABLE_ERROR);\n+      status->set_status(HardwareStatus::GPS_UNSTABLE_WARNING);\n       status->set_detailed_msg(\n           StrCat(\"CRITICAL_ERROR: \", msf_status.state_message()));\n       MonitorManager::LogBuffer().ERROR(status->detailed_msg());"
        }
    ],
    "ApolloAuto/apollo/9640": [
        {
            "sha": "3024a40347db4dce3176348b6cc702144a890d19",
            "filename": "modules/perception/production/conf/perception/camera/fusion_camera_detection_component.pb.txt",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/006f1ff6cc4fed6f1cd6d3f0716535c3e1c4902a/modules%2Fperception%2Fproduction%2Fconf%2Fperception%2Fcamera%2Ffusion_camera_detection_component.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/006f1ff6cc4fed6f1cd6d3f0716535c3e1c4902a/modules%2Fperception%2Fproduction%2Fconf%2Fperception%2Fcamera%2Ffusion_camera_detection_component.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fproduction%2Fconf%2Fperception%2Fcamera%2Ffusion_camera_detection_component.pb.txt?ref=006f1ff6cc4fed6f1cd6d3f0716535c3e1c4902a",
            "patch": "@@ -22,4 +22,6 @@ camera_debug_channel_name : \"/perception/camera_debug\"\n ts_diff : 0.1\n visual_debug_folder : \"/apollo/debug_output\"\n visual_camera : \"front_6mm\"\n-write_visual_img : false\n\\ No newline at end of file\n+write_visual_img : false\n+enable_cipv : false\n+debug_level : 0"
        }
    ],
    "ApolloAuto/apollo/9653": [
        {
            "sha": "8205e98b3a51bd1c5059d16c849b5911afcf164a",
            "filename": "modules/planning/scenarios/traffic_light/unprotected_right_turn/stage_stop.cc",
            "status": "modified",
            "additions": 17,
            "deletions": 6,
            "changes": 23,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/fc2ee2671769450b8e6171db3a07653433ad2c8f/modules%2Fplanning%2Fscenarios%2Ftraffic_light%2Funprotected_right_turn%2Fstage_stop.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/fc2ee2671769450b8e6171db3a07653433ad2c8f/modules%2Fplanning%2Fscenarios%2Ftraffic_light%2Funprotected_right_turn%2Fstage_stop.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fscenarios%2Ftraffic_light%2Funprotected_right_turn%2Fstage_stop.cc?ref=fc2ee2671769450b8e6171db3a07653433ad2c8f",
            "patch": "@@ -58,15 +58,17 @@ Stage::StageStatus TrafficLightUnprotectedRightTurnStageStop::Process(\n   }\n \n   const auto& reference_line_info = frame->reference_line_info().front();\n+  const double adc_front_edge_s = reference_line_info.AdcSlBoundary().end_s();\n \n   bool traffic_light_all_stop = true;\n   bool traffic_light_all_green = true;\n   bool traffic_light_no_right_turn_on_red = false;\n+  PathOverlap* current_traffic_light_overlap = nullptr;\n \n   for (const auto& traffic_light_overlap_id :\n        GetContext()->current_traffic_light_overlap_ids) {\n     // get overlap along reference line\n-    PathOverlap* current_traffic_light_overlap =\n+    current_traffic_light_overlap =\n         scenario::util::GetOverlapOnReferenceLine(reference_line_info,\n                                                   traffic_light_overlap_id,\n                                                   ReferenceLineInfo::SIGNAL);\n@@ -78,7 +80,6 @@ Stage::StageStatus TrafficLightUnprotectedRightTurnStageStop::Process(\n     reference_line_info.SetJunctionRightOfWay(\n         current_traffic_light_overlap->start_s, false);\n \n-    const double adc_front_edge_s = reference_line_info.AdcSlBoundary().end_s();\n     const double distance_adc_to_stop_line =\n         current_traffic_light_overlap->start_s - adc_front_edge_s;\n     auto signal_color = frame->GetSignal(traffic_light_overlap_id).color();\n@@ -108,10 +109,20 @@ Stage::StageStatus TrafficLightUnprotectedRightTurnStageStop::Process(\n   }\n \n   if (!traffic_light_no_right_turn_on_red) {\n-    // when right_turn_on_red is enabled\n-    if (scenario_config_.enable_right_turn_on_red()) {\n-      // check on wait-time\n-      if (traffic_light_all_stop && !traffic_light_all_green) {\n+    if (traffic_light_all_stop && !traffic_light_all_green) {\n+      // check distance pass stop line\n+      const double distance_adc_pass_stop_line =\n+          adc_front_edge_s - current_traffic_light_overlap->end_s;\n+      ADEBUG << \"distance_adc_pass_stop_line[\"\n+             << distance_adc_pass_stop_line << \"]\";\n+      if (distance_adc_pass_stop_line >\n+          scenario_config_.min_pass_s_distance()) {\n+        return FinishStage(false);\n+      }\n+\n+      if (scenario_config_.enable_right_turn_on_red()) {\n+        // when right_turn_on_red is enabled\n+        // check on wait-time\n         if (GetContext()->stop_start_time == 0.0) {\n           GetContext()->stop_start_time = Clock::NowInSeconds();\n         } else {"
        }
    ],
    "ApolloAuto/apollo/9658": [
        {
            "sha": "1b4004756fc81f168ae730b102bf86aea6f7b0db",
            "filename": "modules/dreamview/conf/hmi_modes/rtk.pb.txt",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0d821b359729f5517ce5223f1f3b81d4c7c957fa/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Frtk.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0d821b359729f5517ce5223f1f3b81d4c7c957fa/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Frtk.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Frtk.pb.txt?ref=0d821b359729f5517ce5223f1f3b81d4c7c957fa",
            "patch": "@@ -62,7 +62,7 @@ modules {\n     start_command: \"/apollo/scripts/record_bag.py --start\"\n     stop_command: \"/apollo/scripts/record_bag.py --stop\"\n     process_monitor_config {\n-      command_keywords: \"cyber_recorder\"\n+      command_keywords: \"cyber_recorder record\"\n     }\n   }\n }\n@@ -76,7 +76,7 @@ monitored_components {\n   key: \"Data Recorder\"\n   value: {\n     process {\n-      command_keywords: \"cyber_recorder\"\n+      command_keywords: \"cyber_recorder record\"\n     }\n     resource {\n       disk_spaces {"
        }
    ],
    "ApolloAuto/apollo/9685": [
        {
            "sha": "3d15fcbddf8eb1d5fed9af14763c95fdd9fe9a47",
            "filename": "cyber/time/time.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/291a11f87e1dd519c749cd04a29fcacc9af7a218/cyber%2Ftime%2Ftime.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/291a11f87e1dd519c749cd04a29fcacc9af7a218/cyber%2Ftime%2Ftime.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftime%2Ftime.cc?ref=291a11f87e1dd519c749cd04a29fcacc9af7a218",
            "patch": "@@ -91,10 +91,11 @@ std::string Time::ToString() const {\n   if (ret == nullptr) {\n     return std::to_string(static_cast<double>(nanoseconds_) / 1000000000.0);\n   }\n+\n   std::stringstream ss;\n #if __GNUC__ >= 5\n   ss << std::put_time(ret, \"%F %T\");\n-  ss << std::setw(9) << std::setfill('0') << \".\" << nanoseconds_ % 1000000000UL;\n+  ss << \".\" << std::setw(9) << std::setfill('0') << nanoseconds_ % 1000000000UL;\n #else\n   char date_time[128];\n   strftime(date_time, sizeof(date_time), \"%F %T\", ret);"
        }
    ],
    "ApolloAuto/apollo/9686": [
        {
            "sha": "1cea764fd038aab9dce9c59f7febfed0235b9de2",
            "filename": "cyber/transport/shm/condition_notifier.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/649f3cc8692f1b9983cbf5a1318a14bb0a48af41/cyber%2Ftransport%2Fshm%2Fcondition_notifier.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/649f3cc8692f1b9983cbf5a1318a14bb0a48af41/cyber%2Ftransport%2Fshm%2Fcondition_notifier.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftransport%2Fshm%2Fcondition_notifier.cc?ref=649f3cc8692f1b9983cbf5a1318a14bb0a48af41",
            "patch": "@@ -84,7 +84,9 @@ bool ConditionNotifier::Listen(int timeout_ms, ReadableInfo* info) {\n     uint64_t seq = indicator_->next_seq.load();\n     if (seq != next_seq_) {\n       auto idx = next_seq_ % kBufLength;\n-      if (indicator_->seqs[idx] == next_seq_) {\n+      auto actual_seq = indicator_->seqs[idx];\n+      if (actual_seq >= next_seq_) {\n+        next_seq_ = actual_seq;\n         *info = indicator_->infos[idx];\n         ++next_seq_;\n         return true;"
        }
    ],
    "ApolloAuto/apollo/9702": [
        {
            "sha": "6a3c632e79487f4cc57425efa4816b33c68c90a6",
            "filename": "modules/planning/tasks/deciders/path_bounds_decider/path_bounds_decider.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ebaaccefc087a82ad8a5c5912ddc36bd9cb165ac/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_bounds_decider%2Fpath_bounds_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ebaaccefc087a82ad8a5c5912ddc36bd9cb165ac/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_bounds_decider%2Fpath_bounds_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_bounds_decider%2Fpath_bounds_decider.cc?ref=ebaaccefc087a82ad8a5c5912ddc36bd9cb165ac",
            "patch": "@@ -1143,10 +1143,14 @@ void PathBoundsDecider::GetBoundaryFromLaneChangeForbiddenZone(\n         adc_frenet_l_ > curr_lane_left_width\n             ? curr_lane_left_width + GetBufferBetweenADCCenterAndEdge()\n             : std::get<1>((*path_bound)[i]);\n+    std::get<1>((*path_bound)[i]) = std::fmin(\n+        std::get<1>((*path_bound)[i]), adc_frenet_l_ - 0.1);\n     std::get<2>((*path_bound)[i]) =\n         adc_frenet_l_ < -curr_lane_right_width\n             ? -curr_lane_right_width - GetBufferBetweenADCCenterAndEdge()\n             : std::get<2>((*path_bound)[i]);\n+    std::get<2>((*path_bound)[i]) = std::fmax(\n+        std::get<2>((*path_bound)[i]), adc_frenet_l_ + 0.1);\n   }\n }\n "
        }
    ],
    "ApolloAuto/apollo/9714": [
        {
            "sha": "88979a9d162858af4eade5f0171131a85a04dd38",
            "filename": "modules/map/hdmap/hdmap_impl.cc",
            "status": "modified",
            "additions": 12,
            "deletions": 3,
            "changes": 15,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/dca7460712562087d97bcf611860d2375e46e921/modules%2Fmap%2Fhdmap%2Fhdmap_impl.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/dca7460712562087d97bcf611860d2375e46e921/modules%2Fmap%2Fhdmap%2Fhdmap_impl.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Fhdmap%2Fhdmap_impl.cc?ref=dca7460712562087d97bcf611860d2375e46e921",
            "patch": "@@ -633,7 +633,10 @@ int HDMapImpl::GetRoadBoundaries(\n     }\n     road_section_id_set.insert(unique_id);\n     const auto road_ptr = GetRoadById(road_id);\n-    CHECK_NOTNULL(road_ptr);\n+    if (road_ptr == nullptr) {\n+      AERROR << \"road id [\" << road_id.id() << \"] is not found.\";\n+      continue;\n+    }\n     if (road_ptr->has_junction_id()) {\n       const Id junction_id = road_ptr->junction_id();\n       if (junction_id_set.count(junction_id.id()) > 0) {\n@@ -642,7 +645,10 @@ int HDMapImpl::GetRoadBoundaries(\n       junction_id_set.insert(junction_id.id());\n       JunctionBoundaryPtr junction_boundary_ptr(new JunctionBoundary());\n       junction_boundary_ptr->junction_info = GetJunctionById(junction_id);\n-      CHECK_NOTNULL(junction_boundary_ptr->junction_info);\n+      if (junction_boundary_ptr->junction_info == nullptr) {\n+        AERROR << \"junction id [\" << junction_id.id() << \"] is not found.\";\n+        continue;\n+      }\n       junctions->push_back(junction_boundary_ptr);\n     } else {\n       RoadROIBoundaryPtr road_boundary_ptr(new RoadROIBoundary());\n@@ -1153,7 +1159,10 @@ int HDMapImpl::GetLocalMap(const apollo::common::PointENU& point,\n \n   for (auto& overlap_id : overlap_ids) {\n     auto overlap_ptr = GetOverlapById(overlap_id);\n-    CHECK_NOTNULL(overlap_ptr);\n+    if (overlap_ptr == nullptr) {\n+      AERROR << \"overlpa id [\" << overlap_id.id() << \"] is not found.\";\n+      continue;\n+    }\n \n     bool need_delete = false;\n     for (auto& overlap_object : overlap_ptr->overlap().object()) {"
        }
    ],
    "ApolloAuto/apollo/9732": [
        {
            "sha": "05a5c464b52d155fead84fc8a5ae04cf39eea160",
            "filename": "cyber/logger/async_logger.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a8c78e4ac4746413782187dead6177d97de53765/cyber%2Flogger%2Fasync_logger.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a8c78e4ac4746413782187dead6177d97de53765/cyber%2Flogger%2Fasync_logger.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Flogger%2Fasync_logger.cc?ref=a8c78e4ac4746413782187dead6177d97de53765",
            "patch": "@@ -43,10 +43,10 @@ AsyncLogger::AsyncLogger(google::base::Logger* wrapped, int max_buffer_bytes)\n \n AsyncLogger::~AsyncLogger() {\n   Stop();\n-  for (auto itr = moduleLoggerMap.begin(); itr != moduleLoggerMap.end();\n-       ++itr) {\n-    delete itr->second;\n+  for (auto& logger : moduleLoggerMap) {\n+    delete logger.second;\n   }\n+  moduleLoggerMap.clear();\n }\n \n void AsyncLogger::Start() {"
        }
    ],
    "ApolloAuto/apollo/9745": [
        {
            "sha": "b0b10698c5edda9a21b84f4e557f1239996b5ee6",
            "filename": "modules/perception/camera/lib/lane/common/common_functions.h",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4dff261c487d3f11d321994b44c0a4ff19fb597c/modules%2Fperception%2Fcamera%2Flib%2Flane%2Fcommon%2Fcommon_functions.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4dff261c487d3f11d321994b44c0a4ff19fb597c/modules%2Fperception%2Fcamera%2Flib%2Flane%2Fcommon%2Fcommon_functions.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fcamera%2Flib%2Flane%2Fcommon%2Fcommon_functions.h?ref=4dff261c487d3f11d321994b44c0a4ff19fb597c",
            "patch": "@@ -156,9 +156,12 @@ bool RansacFitting(const std::vector<Eigen::Matrix<Dtype, 2, 1>>& pos_vec,\n       continue;\n     }\n \n+    // Since Eigen::solver was crashing, simple inverse of 3x3 matrix is used\n+    // Note that Eigen::inverse of 3x3 and 4x4 is a closed form solution\n     Eigen::Matrix<Dtype, 3, 1> matB;\n     matB << pos_vec[index[0]](1), pos_vec[index[1]](1), pos_vec[index[2]](1);\n-    Eigen::Matrix<Dtype, 3, 1> c = mat.solve(matB);\n+    Eigen::Vector3f c =\n+        static_cast<Eigen::Matrix<Dtype, 3, 1>> (matA.inverse() * matB);\n     if (!(matA * c).isApprox(matB)) {\n       ADEBUG << \"No solution.\";\n       continue;"
        }
    ],
    "ApolloAuto/apollo/9763": [
        {
            "sha": "43488e5d289746efbd68c4a252b3e3e8db144cd9",
            "filename": "modules/planning/common/speed/st_boundary.cc",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6e9d98a676fca88f078685bd0162a65d7ac8848b/modules%2Fplanning%2Fcommon%2Fspeed%2Fst_boundary.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6e9d98a676fca88f078685bd0162a65d7ac8848b/modules%2Fplanning%2Fcommon%2Fspeed%2Fst_boundary.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Fspeed%2Fst_boundary.cc?ref=6e9d98a676fca88f078685bd0162a65d7ac8848b",
            "patch": "@@ -292,8 +292,9 @@ bool STBoundary::GetUnblockSRange(const double curr_time, double* s_upper,\n     AERROR << \"Fail to get index range.\";\n     return false;\n   }\n-  const double r = (curr_time - upper_points_[left].t()) /\n-                   (upper_points_.at(right).t() - upper_points_.at(left).t());\n+  const double r = (left == right ? 0.0\n+                   : (curr_time - upper_points_[left].t()) /\n+                     (upper_points_[right].t() - upper_points_[left].t()));\n \n   double upper_cross_s =\n       upper_points_[left].s() +\n@@ -330,8 +331,9 @@ bool STBoundary::GetBoundarySRange(const double curr_time, double* s_upper,\n     AERROR << \"Fail to get index range.\";\n     return false;\n   }\n-  const double r = (curr_time - upper_points_[left].t()) /\n-                   (upper_points_[right].t() - upper_points_[left].t());\n+  const double r = (left == right ? 0.0\n+                   : (curr_time - upper_points_[left].t()) /\n+                     (upper_points_[right].t() - upper_points_[left].t()));\n \n   *s_upper = upper_points_[left].s() +\n              r * (upper_points_[right].s() - upper_points_[left].s());"
        }
    ],
    "ApolloAuto/apollo/9820": [
        {
            "sha": "1e2045deef2b05e993fb55957b0452be6e9638e4",
            "filename": "cyber/tools/cyber_monitor/general_message.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e0fc59ea260b5d2b49a94c2af5b2d694135ac566/cyber%2Ftools%2Fcyber_monitor%2Fgeneral_message.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e0fc59ea260b5d2b49a94c2af5b2d694135ac566/cyber%2Ftools%2Fcyber_monitor%2Fgeneral_message.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_monitor%2Fgeneral_message.cc?ref=e0fc59ea260b5d2b49a94c2af5b2d694135ac566",
            "patch": "@@ -19,6 +19,7 @@\n #include \"./screen.h\"\n \n #include <iomanip>\n+#include <numeric>\n #include <sstream>\n #include <vector>\n \n@@ -143,7 +144,8 @@ void GeneralMessage::Render(const Screen* s, int key) {\n             if (itemIndex_ < 0) itemIndex_ = size - 1;\n             break;\n \n-          default: {}\n+          default: {\n+          }\n         }\n       }\n "
        }
    ],
    "ApolloAuto/apollo/9852": [
        {
            "sha": "02e604a9e299898e84813d965cb59c769c931bfc",
            "filename": "modules/planning/scenarios/scenario_manager.cc",
            "status": "modified",
            "additions": 6,
            "deletions": 8,
            "changes": 14,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/522bc2699e5161601df07437f0d522eaa78f17d8/modules%2Fplanning%2Fscenarios%2Fscenario_manager.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/522bc2699e5161601df07437f0d522eaa78f17d8/modules%2Fplanning%2Fscenarios%2Fscenario_manager.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fscenarios%2Fscenario_manager.cc?ref=522bc2699e5161601df07437f0d522eaa78f17d8",
            "patch": "@@ -310,20 +310,18 @@ ScenarioConfig::ScenarioType ScenarioManager::SelectPadMsgScenario(\n         return ScenarioConfig::PULL_OVER_EMERGENCY;\n       }\n       break;\n-    // TODO(all): to be added\n-    // case DrivingAction::STOP:\n-    //  if (FLAGS_) {\n-    //    return ScenarioConfig::STOP_EMERGENCY;\n-    //  }\n-    //  break;\n+    case DrivingAction::STOP:\n+      // TODO(all): to be added\n+      //  if (FLAGS_) {\n+      //    return ScenarioConfig::STOP_EMERGENCY;\n+      //  }\n+      break;\n     case DrivingAction::RESTART_CRUISE:\n       if (FLAGS_enable_scenario_park_and_go) {\n         return ScenarioConfig::PARK_AND_GO;\n       }\n       break;\n     default:\n-      AERROR << \"DrivingAction::\" << DrivingAction_Name(pad_msg_driving_action)\n-             << \" not implemented in pad message.\";\n       break;\n   }\n "
        }
    ],
    "ApolloAuto/apollo/9855": [
        {
            "sha": "16655ed6810873309a635d3cae990db84b62bdd9",
            "filename": "modules/planning/tasks/deciders/path_assessment_decider/path_assessment_decider.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c7bb7a046eb642bf81b613136850ee1fde9f4534/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_assessment_decider%2Fpath_assessment_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c7bb7a046eb642bf81b613136850ee1fde9f4534/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_assessment_decider%2Fpath_assessment_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_assessment_decider%2Fpath_assessment_decider.cc?ref=c7bb7a046eb642bf81b613136850ee1fde9f4534",
            "patch": "@@ -500,7 +500,7 @@ bool PathAssessmentDecider::IsCollidingWithStaticObstacles(\n   for (size_t i = 0; i < path_data.discretized_path().size(); ++i) {\n     if (path_data.frenet_frame_path().back().s() -\n             path_data.frenet_frame_path()[i].s() <\n-        kNumExtraTailBoundPoint * kPathBoundsDeciderResolution) {\n+        (kNumExtraTailBoundPoint + 1) * kPathBoundsDeciderResolution) {\n       break;\n     }\n     const auto& path_point = path_data.discretized_path()[i];"
        }
    ],
    "ApolloAuto/apollo/9896": [
        {
            "sha": "5d6e7e50a948f79ff579e88fc73ab70c4829f507",
            "filename": "cyber/logger/log_file_object.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1db40fca90fa53963d3dc3d91141ea69e24619f2/cyber%2Flogger%2Flog_file_object.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1db40fca90fa53963d3dc3d91141ea69e24619f2/cyber%2Flogger%2Flog_file_object.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Flogger%2Flog_file_object.cc?ref=1db40fca90fa53963d3dc3d91141ea69e24619f2",
            "patch": "@@ -148,10 +148,8 @@ bool LogFileObject::CreateLogfile(const string& time_pid_string) {\n   if (fd == -1) {\n     return false;\n   }\n-#ifdef HAVE_FCNTL\n   // Mark the file close-on-exec. We don't really care if this fails\n   fcntl(fd, F_SETFD, FD_CLOEXEC);\n-#endif\n \n   file_ = fdopen(fd, \"a\");  // Make a FILE*.\n   if (file_ == nullptr) {   // Man, we're screwed!\n@@ -264,6 +262,9 @@ void LogFileObject::Write(bool force_flush, time_t timestamp,\n     const string& file_header_string = file_header_stream.str();\n \n     const int header_len = static_cast<int>(file_header_string.size());\n+    if (file_ == nullptr) {\n+      return;\n+    }\n     fwrite(file_header_string.data(), 1, header_len, file_);\n     file_length_ += header_len;\n     bytes_since_flush_ += header_len;"
        }
    ],
    "ApolloAuto/apollo/9923": [
        {
            "sha": "b8f3f147ac78758362ea5efaeaa0e71d5d0cedf5",
            "filename": "modules/planning/tasks/optimizers/path_time_heuristic/gridded_path_time_graph.h",
            "status": "modified",
            "additions": 5,
            "deletions": 4,
            "changes": 9,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0e9a5e0296e2a659c64e5460e78ae95b4758ffd7/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_time_heuristic%2Fgridded_path_time_graph.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0e9a5e0296e2a659c64e5460e78ae95b4758ffd7/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_time_heuristic%2Fgridded_path_time_graph.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_time_heuristic%2Fgridded_path_time_graph.h?ref=0e9a5e0296e2a659c64e5460e78ae95b4758ffd7",
            "patch": "@@ -72,12 +72,13 @@ class GriddedPathTimeGraph {\n                            const double speed_limit);\n   double CalculateEdgeCostForSecondCol(const uint32_t row,\n                                        const double speed_limit);\n-  double CalculateEdgeCostForThirdCol(const uint32_t curr_r,\n-                                      const uint32_t pre_r,\n+  double CalculateEdgeCostForThirdCol(const uint32_t curr_row,\n+                                      const uint32_t pre_row,\n                                       const double speed_limit);\n \n-  void GetRowRange(const StGraphPoint& point, size_t* highest_row,\n-                   size_t* lowest_row);\n+  // get the row-range of next time step\n+  void GetRowRange(const StGraphPoint& point, size_t* next_highest_row,\n+                   size_t* next_lowest_row);\n \n  private:\n   const StGraphData& st_graph_data_;"
        }
    ],
    "ApolloAuto/apollo/9928": [
        {
            "sha": "c392ea425ff0b1c2dec9a3debe56d64667f35992",
            "filename": "modules/localization/msf/local_tool/map_creation/lossless_map_creator.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6996bc655e12d8ff7492c755d29fef75831719dc/modules%2Flocalization%2Fmsf%2Flocal_tool%2Fmap_creation%2Flossless_map_creator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6996bc655e12d8ff7492c755d29fef75831719dc/modules%2Flocalization%2Fmsf%2Flocal_tool%2Fmap_creation%2Flossless_map_creator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Flocal_tool%2Fmap_creation%2Flossless_map_creator.cc?ref=6996bc655e12d8ff7492c755d29fef75831719dc",
            "patch": "@@ -322,6 +322,7 @@ int main(int argc, char** argv) {\n               dynamic_cast<PyramidMapMatrix&>(map_node->GetMapCellMatrix());\n           map_matrix.SetIntensitySafe(intensity, row, col);\n           map_matrix.SetGroundAltitudeSafe(ground_altitude, row, col);\n+          map_node->SetIsChanged(true);\n         }\n       }\n     }"
        }
    ],
    "ApolloAuto/apollo/9939": [
        {
            "sha": "2d3a0ecf8e919d77f7cc35ab564f822c886a41ac",
            "filename": "scripts/msf_simple_map_creator.sh",
            "status": "modified",
            "additions": 13,
            "deletions": 7,
            "changes": 20,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/fd12f57f7847774d967fed9281a5cb9ea325fa13/scripts%2Fmsf_simple_map_creator.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/fd12f57f7847774d967fed9281a5cb9ea325fa13/scripts%2Fmsf_simple_map_creator.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fmsf_simple_map_creator.sh?ref=fd12f57f7847774d967fed9281a5cb9ea325fa13",
            "patch": "@@ -1,6 +1,6 @@\n #! /bin/bash\n if [ $# -lt 4 ]; then\n-    echo \"Usage: msf_simple_map_creator.sh [records folder] [extrinsic_file] [zone_id] [map folder]\"\n+    echo \"Usage: msf_simple_map_creator.sh [records folder] [extrinsic_file] [zone_id] [map folder] [lidar_type]\"\n     exit 1;\n fi\n \n@@ -13,7 +13,6 @@ GNSS_LOC_TOPIC=\"/apollo/localization/msf_gnss\"\n LIDAR_LOC_TOPIC=\"/apollo/localization/msf_lidar\"\n FUSION_LOC_TOPIC=\"/apollo/localization/pose\"\n ODOMETRY_LOC_TOPIC=\"/apollo/sensor/gnss/odometry\"\n-CLOUD_TOPIC=\"/apollo/sensor/lidar128/compensator/PointCloud2\"\n \n GNSS_LOC_FILE=\"gnss_loc.txt\"\n LIDAR_LOC_FILE=\"lidar_loc.txt\"\n@@ -24,12 +23,19 @@ IN_FOLDER=$1\n EXTRINSIC_FILE=$2\n ZONE_ID=$3\n OUT_MAP_FOLDER=$4\n+LIDAR_TYPE=${5:-128}\n+\n PARSED_DATA_FOLDER=\"$OUT_MAP_FOLDER/parsed_data\"\n+if [ $LIDAR_TYPE -eq 16 ]; then\n+  CLOUD_TOPIC=\"/apollo/sensor/velodyne16/compensator/PointCloud2\"\n+else\n+  CLOUD_TOPIC=\"/apollo/sensor/lidar128/compensator/PointCloud2\"\n+fi\n \n function data_exporter() {\n   local BAG_FILE=$1\n   local OUT_FOLDER=$2\n-  $APOLLO_BIN_PREFIX/modules/localization/msf/local_tool/data_extraction/cyber_record_parser \\\n+  /apollo/bazel-bin/modules/localization/msf/local_tool/data_extraction/cyber_record_parser \\\n     --bag_file $BAG_FILE \\\n     --out_folder $OUT_FOLDER \\\n     --cloud_topic $CLOUD_TOPIC \\\n@@ -44,15 +50,15 @@ function poses_interpolation() {\n   local REF_TIMESTAMPS_PATH=$2\n   local EXTRINSIC_PATH=$3\n   local OUTPUT_POSES_PATH=$4\n-  $APOLLO_BIN_PREFIX/modules/localization/msf/local_tool/map_creation/poses_interpolator \\\n+  /apollo/bazel-bin/modules/localization/msf/local_tool/map_creation/poses_interpolator \\\n    --input_poses_path $INPUT_POSES_PATH \\\n    --ref_timestamps_path $REF_TIMESTAMPS_PATH \\\n    --extrinsic_path $EXTRINSIC_PATH \\\n    --output_poses_path $OUTPUT_POSES_PATH\n }\n \n function create_lossless_map() {\n-  $APOLLO_BIN_PREFIX/modules/localization/msf/local_tool/map_creation/lossless_map_creator \\\n+  /apollo/bazel-bin/modules/localization/msf/local_tool/map_creation/lossless_map_creator \\\n       --use_plane_inliers_only true \\\n       --pcd_folders $1 \\\n       --pose_files $2 \\\n@@ -63,7 +69,7 @@ function create_lossless_map() {\n }\n \n function create_lossy_map() {\n-  $APOLLO_BIN_PREFIX/modules/localization/msf/local_tool/map_creation/lossless_map_to_lossy_map \\\n+  /apollo/bazel-bin/modules/localization/msf/local_tool/map_creation/lossless_map_to_lossy_map \\\n     --srcdir $OUT_MAP_FOLDER/lossless_map \\\n     --dstdir $OUT_MAP_FOLDER \\\n \n@@ -74,7 +80,7 @@ function create_lossy_map() {\n cd $IN_FOLDER\n mkdir -p $OUT_MAP_FOLDER\n mkdir -p $PARSED_DATA_FOLDER\n-for item in $(ls -l *record.* | awk '{print $9}')\n+for item in $(ls -l *.record* | awk '{print $9}')\n do\n   SEGMENTS=$(echo $item | awk -F'.' '{print NF}')\n   DIR_NAME=$(echo $item | cut -d . -f ${SEGMENTS})"
        }
    ],
    "ApolloAuto/apollo/9947": [
        {
            "sha": "2a746a981b14d4261f6e049abd79464e67c3c045",
            "filename": "docs/howto/how_to_debug_dreamview_start_problem.md",
            "status": "modified",
            "additions": 8,
            "deletions": 1,
            "changes": 9,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6e0952360911520da37c0193de31d45d4d4c8917/docs%2Fhowto%2Fhow_to_debug_dreamview_start_problem.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6e0952360911520da37c0193de31d45d4d4c8917/docs%2Fhowto%2Fhow_to_debug_dreamview_start_problem.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fhowto%2Fhow_to_debug_dreamview_start_problem.md?ref=6e0952360911520da37c0193de31d45d4d4c8917",
            "patch": "@@ -123,12 +123,19 @@ in_dev_docker:/apollo$ ./apollo.sh build_no_perception dbg\n ```\n 2. Compile pcl and copy the pcl library files to `/usr/local/lib`:\n \n+See [/apollo/WORKSPACE.in](https://github.com/ApolloAuto/apollo/blob/master/WORKSPACE.in) to identify your pcl library version:\n+- Prior to Apollo 5.0 (inclusive): pcl-1.7\n+- After Apollo 5.0: pcl-1.9\n+\n Inside docker:\n ```\n (to keep pcl in host, we save pcl under /apollo)\n cd /apollo \n git clone https://github.com/PointCloudLibrary/pcl.git\n-git checkout -b 1.7.2 pcl-1.7.2\n+\n+git checkout -b <your pcl-lib version> pcl-<your pcl-lib version>\n+Ex: git checkout -b 1.7.2 pcl-1.7.2\n+    git checkout -b 1.9.1 pcl-1.9.1\n ```\n then hack CMakeLists.txt with :\n ```"
        }
    ],
    "ApolloAuto/apollo/9950": [
        {
            "sha": "3fcc833a32ac424dc6488ab3c021c43a40022c86",
            "filename": "modules/perception/map/hdmap/hdmap_input.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/60ae911147d072aa4a52c773e7b4b5803a6f2dd9/modules%2Fperception%2Fmap%2Fhdmap%2Fhdmap_input.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/60ae911147d072aa4a52c773e7b4b5803a6f2dd9/modules%2Fperception%2Fmap%2Fhdmap%2Fhdmap_input.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fmap%2Fhdmap%2Fhdmap_input.cc?ref=60ae911147d072aa4a52c773e7b4b5803a6f2dd9",
            "patch": "@@ -183,7 +183,7 @@ void HDMapInput::MergeBoundaryJunction(\n               road_boundaries_ptr->at(polygons_index).left_boundary[index]);\n     }\n     ADEBUG << \"Left road_boundary downsample size = \"\n-           << road_polygons_ptr->at(polygons_index).size();\n+           << road_boundaries_ptr->at(polygons_index).left_boundary.size();\n     temp_cloud->clear();\n     const LineBoundary& right_boundary = boundary[i]->right_boundary;\n     const std::vector<apollo::common::PointENU>& right_line_points =\n@@ -209,7 +209,7 @@ void HDMapInput::MergeBoundaryJunction(\n                                          1 - index]);\n     }\n     ADEBUG << \"Right road_boundary downsample size = \"\n-           << road_polygons_ptr->at(polygons_index).size();\n+           << road_boundaries_ptr->at(polygons_index).right_boundary.size();\n     ++polygons_index;\n   }\n "
        }
    ],
    "ApolloAuto/apollo/9961": [
        {
            "sha": "46f3331de975b427f3d04c1e3828ae1cd35d5839",
            "filename": "modules/tools/routing/util.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/12416e2b352e772ee5f68bfacdbd44a45fa9f50d/modules%2Ftools%2Frouting%2Futil.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/12416e2b352e772ee5f68bfacdbd44a45fa9f50d/modules%2Ftools%2Frouting%2Futil.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Frouting%2Futil.py?ref=12416e2b352e772ee5f68bfacdbd44a45fa9f50d",
            "patch": "@@ -55,7 +55,7 @@ def get_mapdata(map_dir):\n def get_topodata(map_dir):\n     print('Please wait for loading routing topo data...')\n     topo_data_path = os.path.join(map_dir, 'routing_map.bin')\n-    print(\"File: %s\" % )\n+    print(\"File: %s\" % topo_data_path)\n     return proto_utils.get_pb_from_bin_file(topo_data_path, topo_graph_pb2.Graph())\n \n "
        }
    ],
    "ApolloAuto/apollo/9966": [
        {
            "sha": "295b9f750a79dbe403d477a9455a78bdedb7bd30",
            "filename": "modules/planning/scenarios/park/pull_over/stage_approach.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/82ad372f9c92bd41a131b11d1be98a3395194f62/modules%2Fplanning%2Fscenarios%2Fpark%2Fpull_over%2Fstage_approach.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/82ad372f9c92bd41a131b11d1be98a3395194f62/modules%2Fplanning%2Fscenarios%2Fpark%2Fpull_over%2Fstage_approach.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fscenarios%2Fpark%2Fpull_over%2Fstage_approach.cc?ref=82ad372f9c92bd41a131b11d1be98a3395194f62",
            "patch": "@@ -74,9 +74,9 @@ Stage::StageStatus PullOverStageApproach::Process(\n         break;\n       }\n \n-      for (size_t i = path_data.discretized_path().size() - 1; i >= 0; --i) {\n+      for (size_t i = path_data.discretized_path().size(); i >= 1; --i) {\n         if (path_data.frenet_frame_path().back().s() -\n-                path_data.frenet_frame_path()[i].s() <\n+                path_data.frenet_frame_path()[i - 1].s() <\n             kNumExtraTailBoundPoint * kPathBoundsDeciderResolution) {\n           continue;\n         }"
        }
    ],
    "ApolloAuto/apollo/9969": [
        {
            "sha": "f0b8b5a72f75550c4ef9080ed32349b7f3e8e882",
            "filename": "docker/build/installers/install_bosfs.sh",
            "status": "modified",
            "additions": 7,
            "deletions": 1,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6e72d432c70541b3cde5dc6c41db3e13f152fc20/docker%2Fbuild%2Finstallers%2Finstall_bosfs.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6e72d432c70541b3cde5dc6c41db3e13f152fc20/docker%2Fbuild%2Finstallers%2Finstall_bosfs.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fbuild%2Finstallers%2Finstall_bosfs.sh?ref=6e72d432c70541b3cde5dc6c41db3e13f152fc20",
            "patch": "@@ -23,7 +23,13 @@ cd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n \n # Prepare\n apt-get update -y\n-apt-get install -y libfuse-dev\n+apt-get install -y \\\n+    libcrypto++-dev \\\n+    libcurl4-openssl-dev \\\n+    libfuse-dev \\\n+    libssl-dev \\\n+    uuid-dev\n+\n PACKAGE=\"bosfs-1.0.0.9.tar.gz\"\n wget http://sdk.bce.baidu.com/console-sdk/${PACKAGE}\n tar zxf ${PACKAGE}"
        }
    ],
    "ApolloAuto/apollo/10005": [
        {
            "sha": "f9e85c148fbe9429f0fdcf0c0d79452e045d2880",
            "filename": "modules/perception/onboard/proto/trafficlights_perception_component.proto",
            "status": "modified",
            "additions": 26,
            "deletions": 19,
            "changes": 45,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5343b643feeb58419d5b4513fdb198228488ec9f/modules%2Fperception%2Fonboard%2Fproto%2Ftrafficlights_perception_component.proto",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5343b643feeb58419d5b4513fdb198228488ec9f/modules%2Fperception%2Fonboard%2Fproto%2Ftrafficlights_perception_component.proto",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fonboard%2Fproto%2Ftrafficlights_perception_component.proto?ref=5343b643feeb58419d5b4513fdb198228488ec9f",
            "patch": "@@ -3,23 +3,30 @@ syntax = \"proto2\";\n package apollo.perception.onboard;\n \n message TrafficLight {\n-    optional string tl_tf2_frame_id = 1 [default = \"world\"];\n-    optional string tl_tf2_child_frame_id = 2 [default = \"perception_localization_100hz\"];\n-    optional double tf2_timeout_second = 3 [default = 0.01];\n-    optional string camera_names = 4 [default = \"front_6mm,front_12mm\"];\n-    optional string camera_channel_names = 5 [default = \"/apollo/sensor/camera/front_6mm,/apollop/sensor/camera/front_12mm\"];\n-    optional double tl_image_timestamp_offset = 6 [default = 0.0];\n-    optional int32 max_process_image_fps = 7 [default = 8];\n-    optional double query_tf_interval_seconds = 8 [default = 0.3];\n-    optional double valid_hdmap_interval = 9 [default = 1.5];\n-    optional double image_sys_ts_diff_threshold = 10 [default = 0.5];\n-    optional double sync_interval_seconds = 11 [default = 0.5];\n-    optional string camera_traffic_light_perception_conf_dir = 12 [default = \"conf/perception/camera\"];\n-    optional string camera_traffic_light_perception_conf_file = 13 [default = \"trafficlight.pt\"];\n-    optional int32 default_image_border_size = 14 [default = 100];\n-    optional string traffic_light_output_channel_name = 15 [default = \"/apollo/perception/traffic_light\"];\n-    optional string simulation_channel_name = 16 [default = \"/apollo/perception/traffic_light_simulation\"];\n-    optional string v2x_trafficlights_input_channel_name = 17 [default = \"/apollo/v2x/traffic_light\"];\n-    optional double v2x_sync_interval_seconds = 18 [default = 0.1];\n-    optional int32 max_v2x_msg_buff_size = 19 [default = 50];\n+  optional string tl_tf2_frame_id = 1 [default = \"world\"];\n+  optional string tl_tf2_child_frame_id = 2 [default =\n+      \"perception_localization_100hz\"];\n+  optional double tf2_timeout_second = 3 [default = 0.01];\n+  optional string camera_names = 4 [default = \"front_6mm,front_12mm\"];\n+  optional string camera_channel_names = 5 [default =\n+      \"/apollo/sensor/camera/front_6mm,/apollo/sensor/camera/front_12mm\"];\n+  optional double tl_image_timestamp_offset = 6 [default = 0.0];\n+  optional int32 max_process_image_fps = 7 [default = 8];\n+  optional double query_tf_interval_seconds = 8 [default = 0.3];\n+  optional double valid_hdmap_interval = 9 [default = 1.5];\n+  optional double image_sys_ts_diff_threshold = 10 [default = 0.5];\n+  optional double sync_interval_seconds = 11 [default = 0.5];\n+  optional string camera_traffic_light_perception_conf_dir = 12 [default =\n+      \"conf/perception/camera\"];\n+  optional string camera_traffic_light_perception_conf_file = 13 [default =\n+      \"trafficlight.pt\"];\n+  optional int32 default_image_border_size = 14 [default = 100];\n+  optional string traffic_light_output_channel_name = 15 [default =\n+      \"/apollo/perception/traffic_light\"];\n+  optional string simulation_channel_name = 16 [default =\n+      \"/apollo/perception/traffic_light_simulation\"];\n+  optional string v2x_trafficlights_input_channel_name = 17 [default =\n+      \"/apollo/v2x/traffic_light\"];\n+  optional double v2x_sync_interval_seconds = 18 [default = 0.1];\n+  optional int32 max_v2x_msg_buff_size = 19 [default = 50];\n }"
        }
    ],
    "ApolloAuto/apollo/10008": [
        {
            "sha": "56d58a8a15f24a380865e729b630f394d0d1abb3",
            "filename": "docs/specs/D-kit/Auto_Driving--Sensor_calibration_cn.md",
            "status": "modified",
            "additions": 14,
            "deletions": 1,
            "changes": 15,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/253d96f68579ce4ac7b082197243bbcf791493c3/docs%2Fspecs%2FD-kit%2FAuto_Driving--Sensor_calibration_cn.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/253d96f68579ce4ac7b082197243bbcf791493c3/docs%2Fspecs%2FD-kit%2FAuto_Driving--Sensor_calibration_cn.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2FD-kit%2FAuto_Driving--Sensor_calibration_cn.md?ref=253d96f68579ce4ac7b082197243bbcf791493c3",
            "patch": "@@ -6,7 +6,7 @@\n  \n ## \u51c6\u5907\u5de5\u4f5c\n   \n- -  \u4e0b\u8f7d[multi-lidar-gnss\u6807\u5b9a\u5de5\u5177](https://apollocache.bloob.core.windows.net/apollo-cache/multi_lidar_gnss_calibrator_and_doc.zip)\u3001[\u4f20\u611f\u5668\u6807\u5b9a\u5de5\u5177](https://github.com/ApolloAuto/apollo/releases/download/v2.0.0/calibration.tar.gz)\u5e76\u5c06\u6587\u4ef6\u63d0\u53d6\u5230`modules /calibration`\u76ee\u5f55\u4e0b\uff0c\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a\n+ -  \u4e0b\u8f7d[multi-lidar-gnss\u6807\u5b9a\u5de5\u5177](https://apollocache.blob.core.windows.net/apollo-cache/multi_lidar_gnss_calibrator_and_doc.zip)\u3001[\u4f20\u611f\u5668\u6807\u5b9a\u5de5\u5177](https://github.com/ApolloAuto/apollo/releases/download/v2.0.0/calibration.tar.gz)\u5e76\u5c06\u6587\u4ef6\u63d0\u53d6\u5230`modules /calibration`\u76ee\u5f55\u4e0b\uff0c\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a\n \n ![\u56fe\u7247](../images/sensor_calibration/dir_tree.png)\n \n@@ -299,6 +299,19 @@ transform:\n | INS          | /apollo/sensor/gnss/odometry              | 100               |\n | INS          | /apollo/sensor/gnss/ins_stat              | 2                 |\n \n+### \u4fee\u6539\u6444\u50cf\u5934Topic\u7684\u9891\u7387\n+\u6444\u50cf\u5934\u6570\u636e\u9ed8\u8ba4\u7684\u53d1\u5e03\u9891\u7387\u4e3a30HZ\uff0c\u5728\u8fdb\u884c\u6807\u5b9a\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5c06\u9891\u7387\u4fee\u6539\u4e3a9HZ\u3002\u4fee\u6539\u65b9\u6cd5\u5982\u4e0b\uff1a\n+- \u5173\u95ed\u6444\u50cf\u5934\u6a21\u5757\n+- \u5206\u522b\u5c06`modules/calibration/data/ch/camera_params/start_leopard.launch`\u3001`modules/drivers/camera/launch/start_leopard.launch`\u4e24\u4e2a\u6587\u4ef6\u4e2d\u7684`<arg name=\"frame_rate\" default=\"30\"/>`\u4fee\u6539\u4e3a`<arg name=\"frame_rate\" default=\"9\"/>`\n+- \u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff0c\u91cd\u65b0\u7f16\u8bd1\u6444\u50cf\u5934\n+```\n+  bash apollo.sh build_usbcam\n+``` \n+- \u542f\u52a8\u6444\u50cf\u5934\u6a21\u5757\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u67e5\u770b\u6444\u50cf\u5934\u6570\u636e\u53d1\u5e03\u9891\u7387\u662f\u5426\u4fee\u6539\u6210\u529f\n+```\n+  rostopic hz /apollo/sensor/camera/traffic/image_short\n+  rostopic hz /apollo/sensor/camera/traffic/image_long\n+```\n \n ### \u6267\u884c\u6807\u5b9a\n \u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff0c\u8fdb\u884ccamera_camera\u7684\u6807\u5b9a\uff1a"
        }
    ],
    "ApolloAuto/apollo/10023": [
        {
            "sha": "3c6177f02cff868278c25031cb1ef6e64eff8f41",
            "filename": "modules/planning/tasks/deciders/path_bounds_decider/path_bounds_decider.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/31d7ca0328c2198433bd22cce22465c8cdb48e78/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_bounds_decider%2Fpath_bounds_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/31d7ca0328c2198433bd22cce22465c8cdb48e78/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_bounds_decider%2Fpath_bounds_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Fpath_bounds_decider%2Fpath_bounds_decider.cc?ref=31d7ca0328c2198433bd22cce22465c8cdb48e78",
            "patch": "@@ -673,8 +673,8 @@ bool PathBoundsDecider::SearchPullOverPosition(\n           std::get<0>(path_bound[idx]) - std::get<0>(path_bound.front()) >\n               pull_over_space_length) ||\n          (!search_backward && idx < static_cast<int>(path_bound.size()) &&\n-          std::get<0>(path_bound.back()) - std::get<0>(path_bound[idx])) >\n-             pull_over_space_length) {\n+          std::get<0>(path_bound.back()) - std::get<0>(path_bound[idx]) >\n+              pull_over_space_length)) {\n     int j = idx;\n     bool is_feasible_window = true;\n     while ((search_backward && j >= 0 &&"
        }
    ],
    "ApolloAuto/apollo/10040": [
        {
            "sha": "03f08f03a35c5caac7fd1df9cc9ab9846910c279",
            "filename": "modules/common/filters/digital_filter.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/fc15140120428cdccd5f6945e00f7758a3106b76/modules%2Fcommon%2Ffilters%2Fdigital_filter.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/fc15140120428cdccd5f6945e00f7758a3106b76/modules%2Fcommon%2Ffilters%2Fdigital_filter.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Ffilters%2Fdigital_filter.cc?ref=fc15140120428cdccd5f6945e00f7758a3106b76",
            "patch": "@@ -80,8 +80,8 @@ double DigitalFilter::Filter(const double x_insert) {\n }\n \n void DigitalFilter::reset_values() {\n-  x_values_.clear();\n-  y_values_.clear();\n+  std::fill(x_values_.begin(), x_values_.end(), 0.0);\n+  std::fill(y_values_.begin(), y_values_.end(), 0.0);\n }\n \n double DigitalFilter::UpdateLast(const double input) {"
        }
    ],
    "ApolloAuto/apollo/10063": [
        {
            "sha": "cb3dff6d2b9e5dac78c1de6de090751632e74b68",
            "filename": "modules/planning/math/smoothing_spline/spline_1d_solver.h",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6ec4602540a4fd47f56b5a00bc68114987c5a9e1/modules%2Fplanning%2Fmath%2Fsmoothing_spline%2Fspline_1d_solver.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6ec4602540a4fd47f56b5a00bc68114987c5a9e1/modules%2Fplanning%2Fmath%2Fsmoothing_spline%2Fspline_1d_solver.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fmath%2Fsmoothing_spline%2Fspline_1d_solver.h?ref=6ec4602540a4fd47f56b5a00bc68114987c5a9e1",
            "patch": "@@ -40,6 +40,8 @@ class Spline1dSolver {\n         constraint_(x_knots, order),\n         kernel_(x_knots, order) {}\n \n+  virtual ~Spline1dSolver() = default;\n+\n   virtual void Reset(const std::vector<double>& x_knots, const uint32_t order) {\n     spline_ = Spline1d(x_knots, order);\n     constraint_ = Spline1dConstraint(x_knots, order);"
        }
    ],
    "ApolloAuto/apollo/10092": [
        {
            "sha": "26e6e895733e6bd91b97c22383cbae51703fcdaf",
            "filename": "cyber/py_wrapper/cyber_node_wrap.cc",
            "status": "modified",
            "additions": 7,
            "deletions": 8,
            "changes": 15,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6d931e47e147d4d009b55c619bf4a4ad1735bf7d/cyber%2Fpy_wrapper%2Fcyber_node_wrap.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6d931e47e147d4d009b55c619bf4a4ad1735bf7d/cyber%2Fpy_wrapper%2Fcyber_node_wrap.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fpy_wrapper%2Fcyber_node_wrap.cc?ref=6d931e47e147d4d009b55c619bf4a4ad1735bf7d",
            "patch": "@@ -172,7 +172,6 @@ PyObject *cyber_PyReader_read(PyObject *self, PyObject *args) {\n   bool wait = (r == 1);\n \n   std::string reader_ret = reader->read(wait);\n-  // AERROR << \"c++:PyReader_read -> \" << reader_ret;\n   return PyString_FromStringAndSize(reader_ret.c_str(), reader_ret.size());\n }\n \n@@ -192,7 +191,7 @@ PyObject *cyber_PyReader_register_func(PyObject *self, PyObject *args) {\n       pyobj_reader, \"apollo_cyber_pyreader\");\n   callback_fun = (int (*)(const char *i))PyInt_AsLong(pyobj_regist_fun);\n   if (reader) {\n-    AERROR << \"reader regist fun\";\n+    AINFO << \"reader regist fun\";\n     reader->register_func(callback_fun);\n   }\n \n@@ -263,10 +262,10 @@ PyObject *cyber_PyClient_send_request(PyObject *self, PyObject *args) {\n   }\n \n   std::string data_str(data, len);\n-  AERROR << \"c++:PyClient_send_request data->[ \" << data_str << \"]\";\n+  ADEBUG << \"c++:PyClient_send_request data->[ \" << data_str << \"]\";\n   std::string response_str =\n       client->send_request((std::string const &)data_str);\n-  AERROR << \"c++:response data->[ \" << response_str << \"]\";\n+  ADEBUG << \"c++:response data->[ \" << response_str << \"]\";\n   return PyString_FromStringAndSize(response_str.c_str(), response_str.size());\n }\n \n@@ -330,7 +329,7 @@ PyObject *cyber_PyService_register_func(PyObject *self, PyObject *args) {\n       pyobj_service, \"apollo_cyber_pyservice\");\n   callback_fun = (int (*)(const char *i))PyInt_AsLong(pyobj_regist_fun);\n   if (service) {\n-    AERROR << \"service regist fun\";\n+    AINFO << \"service regist fun\";\n     service->register_func(callback_fun);\n   }\n \n@@ -353,7 +352,7 @@ PyObject *cyber_PyService_read(PyObject *self, PyObject *args) {\n   }\n \n   std::string reader_ret = service->read();\n-  AERROR << \"c++:PyService_read -> \" << reader_ret;\n+  ADEBUG << \"c++:PyService_read -> \" << reader_ret;\n   return PyString_FromStringAndSize(reader_ret.c_str(), reader_ret.size());\n }\n \n@@ -376,7 +375,7 @@ PyObject *cyber_PyService_write(PyObject *self, PyObject *args) {\n   }\n \n   std::string data_str(data, len);\n-  AERROR << \"c++:PyService_write data->[ \" << data_str << \"]\";\n+  ADEBUG << \"c++:PyService_write data->[ \" << data_str << \"]\";\n   int ret = service->write((std::string const &)data_str);\n   return PyInt_FromLong(ret);\n }\n@@ -801,7 +800,7 @@ PyObject *cyber_PyServiceUtils_get_service_attr(PyObject *self,\n PyObject *cyber_test0(PyObject *self, PyObject *args) {\n   int channel = 0;\n   int data_type = 0;\n-  AERROR << \"+++++++++++++++++++++begin\";\n+  AINFO << \"+++++++++++++++++++++begin\";\n   if (!PyArg_ParseTuple(args, \"ii\", &channel, &data_type)) {\n     Py_INCREF(Py_None);\n     return Py_None;"
        }
    ],
    "ApolloAuto/apollo/10103": [
        {
            "sha": "3cc6d23480dadf100465214dd43d0338288e7526",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/70b9bd997e054677418d4d474187abd4b72a62e4/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/70b9bd997e054677418d4d474187abd4b72a62e4/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=70b9bd997e054677418d4d474187abd4b72a62e4",
            "patch": "@@ -21,7 +21,7 @@ FAST_BUILD_MODE=\"no\"\n FAST_TEST_MODE=\"no\"\n VERSION=\"\"\n ARCH=$(uname -m)\n-VERSION_X86_64=\"dev-18.04-x86_64-20191030_1538\"\n+VERSION_X86_64=\"dev-18.04-x86_64-20191031_1400\"\n VERSION_AARCH64=\"dev-aarch64-20170927_1111\"\n VERSION_OPT=\"\"\n "
        }
    ],
    "ApolloAuto/apollo/10115": [
        {
            "sha": "1b5b447ce15ab26a1a997c3c6809bd5c5e398258",
            "filename": "modules/prediction/evaluator/vehicle/semantic_lstm_evaluator.cc",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d3b4025021337065eaa569a6ff4a191916bcd393/modules%2Fprediction%2Fevaluator%2Fvehicle%2Fsemantic_lstm_evaluator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d3b4025021337065eaa569a6ff4a191916bcd393/modules%2Fprediction%2Fevaluator%2Fvehicle%2Fsemantic_lstm_evaluator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fevaluator%2Fvehicle%2Fsemantic_lstm_evaluator.cc?ref=d3b4025021337065eaa569a6ff4a191916bcd393",
            "patch": "@@ -125,6 +125,13 @@ bool SemanticLSTMEvaluator::Evaluate(Obstacle* obstacle_ptr,\n   trajectory->set_probability(1.0);\n \n   for (int i = 0; i < 30; ++i) {\n+    double prev_x = pos_x;\n+    double prev_y = pos_y;\n+    if (i > 0) {\n+      const auto& last_point = trajectory->trajectory_point(i - 1).path_point();\n+      prev_x = last_point.x();\n+      prev_y = last_point.y();\n+    }\n     TrajectoryPoint* point = trajectory->add_trajectory_point();\n     double dx = static_cast<double>(torch_output[0][i][0]);\n     double dy = static_cast<double>(torch_output[0][i][1]);\n@@ -177,7 +184,9 @@ bool SemanticLSTMEvaluator::Evaluate(Obstacle* obstacle_ptr,\n     if (i == 0) {\n       point->set_v(latest_feature_ptr->speed());\n     } else {\n-      point->set_v(offset.Length() /\n+      double diff_x = point_x - prev_x;\n+      double diff_y = point_y - prev_y;\n+      point->set_v(std::hypot(diff_x, diff_y) /\n                    FLAGS_prediction_trajectory_time_resolution);\n     }\n   }"
        }
    ],
    "ApolloAuto/apollo/10134": [
        {
            "sha": "74e510da3c44687804ff4d52be78b42c952f8fdd",
            "filename": "modules/dreamview/backend/teleop/teleop.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b4dd5477db6f88bdb66f045a5cac804a3768b151/modules%2Fdreamview%2Fbackend%2Fteleop%2Fteleop.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b4dd5477db6f88bdb66f045a5cac804a3768b151/modules%2Fdreamview%2Fbackend%2Fteleop%2Fteleop.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fbackend%2Fteleop%2Fteleop.cc?ref=b4dd5477db6f88bdb66f045a5cac804a3768b151",
            "patch": "@@ -293,7 +293,7 @@ void TeleopService::SendVideoStreamCmd(bool start_stop) {\n   // we send a message to each encoder.\n   for (unsigned int i = 0; i < encoder_count; i++) {\n     char encoderName[20];\n-    snprintf(encoderName, 20, \"encoder%d\", i);\n+    snprintf(encoderName, 20, \"encoder%u\", i);\n     msg.set_service(encoderName);\n     common::util::FillHeader(\"dreamview\", &msg);\n     car_daemon_cmd_writer_->Write(msg);"
        }
    ],
    "ApolloAuto/apollo/10211": [
        {
            "sha": "59371d82fbb67a4fb64132544bf61309f7cefaf9",
            "filename": "modules/tools/fuel_proxy/submit_job.py",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/aad3cdb343202a25fdaf7e89e730aa31682ae704/modules%2Ftools%2Ffuel_proxy%2Fsubmit_job.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/aad3cdb343202a25fdaf7e89e730aa31682ae704/modules%2Ftools%2Ffuel_proxy%2Fsubmit_job.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Ffuel_proxy%2Fsubmit_job.py?ref=aad3cdb343202a25fdaf7e89e730aa31682ae704",
            "patch": "@@ -17,6 +17,9 @@\n ###############################################################################\n \n \"\"\" Submit Apollo fuel job. \"\"\"\n+import sys\n+# Disable python2 paths.\n+sys.path = [path for path in sys.path if 'python2' not in path]\n \n import json\n import os"
        }
    ],
    "ApolloAuto/apollo/10223": [
        {
            "sha": "9cdb7c4090f4516f31550f2e760664045cb1e6bb",
            "filename": "modules/planning/tasks/optimizers/path_time_heuristic/gridded_path_time_graph.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/65098a7f2fc7b5c22a9d8d93fd2113c342db9d8d/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_time_heuristic%2Fgridded_path_time_graph.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/65098a7f2fc7b5c22a9d8d93fd2113c342db9d8d/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_time_heuristic%2Fgridded_path_time_graph.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpath_time_heuristic%2Fgridded_path_time_graph.cc?ref=65098a7f2fc7b5c22a9d8d93fd2113c342db9d8d",
            "patch": "@@ -186,7 +186,8 @@ Status GriddedPathTimeGraph::InitCostTable() {\n     for (uint32_t j = 0; j < dense_dimension_s_; ++j, curr_s += dense_unit_s_) {\n       cost_table_i[j].Init(i, j, STPoint(curr_s, curr_t));\n     }\n-    curr_s = static_cast<double>(dense_dimension_s_ - 1) * dense_unit_s_;\n+    curr_s = static_cast<double>(dense_dimension_s_ - 1) * dense_unit_s_ +\n+             sparse_unit_s_;\n     for (uint32_t j = dense_dimension_s_; j < cost_table_i.size();\n          ++j, curr_s += sparse_unit_s_) {\n       cost_table_i[j].Init(i, j, STPoint(curr_s, curr_t));"
        }
    ],
    "ApolloAuto/apollo/10230": [
        {
            "sha": "086a9c126297a9bb9bf758b8c0d273fc385d9570",
            "filename": "modules/localization/msf/local_pyramid_map/base_map/base_map_config.cc",
            "status": "modified",
            "additions": 18,
            "deletions": 25,
            "changes": 43,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/58a842aa0eed14e7d04e95af474aa07636ce6326/modules%2Flocalization%2Fmsf%2Flocal_pyramid_map%2Fbase_map%2Fbase_map_config.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/58a842aa0eed14e7d04e95af474aa07636ce6326/modules%2Flocalization%2Fmsf%2Flocal_pyramid_map%2Fbase_map%2Fbase_map_config.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Flocal_pyramid_map%2Fbase_map%2Fbase_map_config.cc?ref=58a842aa0eed14e7d04e95af474aa07636ce6326",
            "patch": "@@ -16,7 +16,6 @@\n \n #include \"modules/localization/msf/local_pyramid_map/base_map/base_map_config.h\"\n \n-#include <algorithm>\n #include <exception>\n #include <iostream>\n \n@@ -46,12 +45,10 @@ bool BaseMapConfig::Save(const std::string &file_path) {\n   bool success = CreateXml(&config);\n   if (success) {\n     boost::property_tree::write_xml(file_path, config);\n-    std::cerr << \"Saved the map configuration to: \" << file_path << \".\"\n-              << std::endl;\n+    AINFO << \"Saved the map configuration to: \" << file_path;\n     return true;\n-  } else {\n-    return false;\n   }\n+  return false;\n }\n \n bool BaseMapConfig::Load(const std::string &file_path) {\n@@ -60,12 +57,10 @@ bool BaseMapConfig::Load(const std::string &file_path) {\n   bool success = LoadXml(config);\n \n   if (success) {\n-    std::cerr << \"Loaded the map configuration from: \" << file_path << \".\"\n-              << std::endl;\n+    AINFO << \"Loaded the map configuration from: \" << file_path;\n     return true;\n-  } else {\n-    return false;\n   }\n+  return false;\n }\n \n bool BaseMapConfig::CreateXml(boost::property_tree::ptree *config) const {\n@@ -171,27 +166,25 @@ bool BaseMapConfig::LoadXml(const boost::property_tree::ptree &config) {\n \n   auto datasets = config.get_child_optional(\"map.map_record.datasets\");\n   if (datasets) {\n-    std::for_each(datasets->begin(), datasets->end(),\n-                  [this](const boost::property_tree::ptree::value_type &v) {\n-                    map_datasets_.push_back(v.second.data());\n-                    AINFO << \"Dataset: \" << v.second.data();\n-                  });\n+    for (const boost::property_tree::ptree::value_type &v : *datasets) {\n+      map_datasets_.push_back(v.second.data());\n+      AINFO << \"Dataset: \" << v.second.data();\n+    }\n   }\n \n   // load md5 check info\n   auto nodes = config.get_child_optional(\"map.check_info.nodes\");\n   if (nodes) {\n-    std::for_each(nodes->begin(), nodes->end(),\n-                  [this](const boost::property_tree::ptree::value_type &v) {\n-                    const boost::property_tree::ptree &child = v.second;\n-                    auto path = child.get_optional<std::string>(\"path\");\n-                    auto md5 = child.get_optional<std::string>(\"md5\");\n-                    if (!path || !md5) {\n-                      std::cerr << \"Lack path or md5.\" << std::endl;\n-                      return;\n-                    }\n-                    node_md5_map_[*path] = *md5;\n-                  });\n+    for (const boost::property_tree::ptree::value_type &v : *nodes) {\n+      const boost::property_tree::ptree &child = v.second;\n+      auto path = child.get_optional<std::string>(\"path\");\n+      auto md5 = child.get_optional<std::string>(\"md5\");\n+      if (!path || !md5) {\n+        AERROR << \"Lack path or md5.\";\n+        return false;\n+      }\n+      node_md5_map_[*path] = *md5;\n+    }\n   }\n \n   return true;"
        }
    ],
    "ApolloAuto/apollo/10246": [
        {
            "sha": "69baa2d94b761ac37d83aa48c86db2fce85b25ce",
            "filename": "modules/prediction/evaluator/pedestrian/pedestrian_interaction_evaluator.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/7d678226f7e32c351e799648c8d8cce53785b998/modules%2Fprediction%2Fevaluator%2Fpedestrian%2Fpedestrian_interaction_evaluator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/7d678226f7e32c351e799648c8d8cce53785b998/modules%2Fprediction%2Fevaluator%2Fpedestrian%2Fpedestrian_interaction_evaluator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fevaluator%2Fpedestrian%2Fpedestrian_interaction_evaluator.cc?ref=7d678226f7e32c351e799648c8d8cce53785b998",
            "patch": "@@ -211,7 +211,7 @@ bool PedestrianInteractionEvaluator::Evaluate(\n     torch_position[0][0] = curr_rel_x;\n     torch_position[0][1] = curr_rel_y;\n     std::vector<torch::jit::IValue> position_embedding_inputs;\n-    position_embedding_inputs.push_back(std::move(torch_position));\n+    position_embedding_inputs.push_back(std::move(torch_position.to(device_)));\n     torch::Tensor position_embedding =\n         torch_position_embedding_.forward(position_embedding_inputs)\n             .toTensor()\n@@ -230,7 +230,7 @@ bool PedestrianInteractionEvaluator::Evaluate(\n       lstm_input[0][kEmbeddingSize + kHiddenSize + i] = ct[0][0][i];\n     }\n     std::vector<torch::jit::IValue> lstm_inputs;\n-    lstm_inputs.push_back(std::move(lstm_input));\n+    lstm_inputs.push_back(std::move(lstm_input.to(device_)));\n     auto lstm_out_tuple = torch_single_lstm_.forward(lstm_inputs).toTuple();\n     ht = lstm_out_tuple->elements()[0].toTensor();\n     ct = lstm_out_tuple->elements()[1].toTensor();"
        }
    ],
    "ApolloAuto/apollo/10251": [
        {
            "sha": "a42f738595f1200873896dccf779df0c9e1bcc40",
            "filename": "CONTRIBUTING.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2207fc59226e40032ee4fb5a6377f068bd77be49/CONTRIBUTING.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2207fc59226e40032ee4fb5a6377f068bd77be49/CONTRIBUTING.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/CONTRIBUTING.md?ref=2207fc59226e40032ee4fb5a6377f068bd77be49",
            "patch": "@@ -8,7 +8,7 @@ You are welcome to contribute to project Apollo. To contribute to apollo, you ha\n ### How do I start contributing\n \n * You can follow the standard [Github approach](https://help.github.com/articles/using-pull-requests/) to contribute code.\n-* There are [issues with label \"help wanted\"](https://github.com/ApolloAuto/apollo/labels/help%20wanted) that are best to help you get started.\n+* There are [issues with label \"help wanted\"](https://github.com/ApolloAuto/apollo/issues?utf8=%E2%9C%93&q=label%3A%22Type%3A+Help+wanted%22+) that are best to help you get started.\n * If you are currently working on an issue, leave a message to let people know that you are working on it.\n * Before sending in your pull request for\n [review](https://github.com/ApolloAuto/apollo/pulls),"
        }
    ],
    "ApolloAuto/apollo/10261": [
        {
            "sha": "c392ea425ff0b1c2dec9a3debe56d64667f35992",
            "filename": "modules/localization/msf/local_tool/map_creation/lossless_map_creator.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6996bc655e12d8ff7492c755d29fef75831719dc/modules%2Flocalization%2Fmsf%2Flocal_tool%2Fmap_creation%2Flossless_map_creator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6996bc655e12d8ff7492c755d29fef75831719dc/modules%2Flocalization%2Fmsf%2Flocal_tool%2Fmap_creation%2Flossless_map_creator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Flocal_tool%2Fmap_creation%2Flossless_map_creator.cc?ref=6996bc655e12d8ff7492c755d29fef75831719dc",
            "patch": "@@ -322,6 +322,7 @@ int main(int argc, char** argv) {\n               dynamic_cast<PyramidMapMatrix&>(map_node->GetMapCellMatrix());\n           map_matrix.SetIntensitySafe(intensity, row, col);\n           map_matrix.SetGroundAltitudeSafe(ground_altitude, row, col);\n+          map_node->SetIsChanged(true);\n         }\n       }\n     }"
        }
    ],
    "ApolloAuto/apollo/10276": [
        {
            "sha": "9b86d448fd4861ba2f86e6eaf8795594275433ff",
            "filename": "cyber/tools/cyber_monitor/general_message.cc",
            "status": "modified",
            "additions": 26,
            "deletions": 22,
            "changes": 48,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/166d52e4b644f3d5f520734abe13e767bdda05a9/cyber%2Ftools%2Fcyber_monitor%2Fgeneral_message.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/166d52e4b644f3d5f520734abe13e767bdda05a9/cyber%2Ftools%2Fcyber_monitor%2Fgeneral_message.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_monitor%2Fgeneral_message.cc?ref=166d52e4b644f3d5f520734abe13e767bdda05a9",
            "patch": "@@ -36,29 +36,33 @@ std::vector<int> SortProtobufMapByKeys(\n   if (0 == size) {\n     return output;\n   }\n-  const ::google::protobuf::Message& item =\n-      reflection.GetRepeatedMessage(message, field, 0);\n-  const ::google::protobuf::FieldDescriptor* item_fd =\n-      item.GetDescriptor()->FindFieldByName(\"key\");\n-  if (item_fd && field->is_map() &&\n-      ::google::protobuf::FieldDescriptor::Type::TYPE_STRING ==\n-          item_fd->type()) {\n-    std::vector<std::pair<std::string, int>> key_indices;\n-    key_indices.reserve(size);\n-    for (int i = 0; i < size; ++i) {\n-      const ::google::protobuf::Message& item =\n-          reflection.GetRepeatedMessage(message, field, i);\n-      const ::google::protobuf::FieldDescriptor* item_fd =\n-          item.GetDescriptor()->FindFieldByName(\"key\");\n-      const std::string key(item.GetReflection()->GetString(item, item_fd));\n-      key_indices.emplace_back(key, i);\n-    }\n-    std::sort(key_indices.begin(), key_indices.end());\n-    output.reserve(size);\n-    for (const std::pair<std::string, int>& key_index : key_indices) {\n-      output.push_back(key_index.second);\n+  if (field->cpp_type() == google::protobuf::FieldDescriptor::CPPTYPE_MESSAGE) {\n+    const ::google::protobuf::Message& item =\n+        reflection.GetRepeatedMessage(message, field, 0);\n+    const ::google::protobuf::FieldDescriptor* item_fd =\n+        item.GetDescriptor()->FindFieldByName(\"key\");\n+    if (item_fd && field->is_map() &&\n+        ::google::protobuf::FieldDescriptor::Type::TYPE_STRING ==\n+            item_fd->type()) {\n+      std::vector<std::pair<std::string, int>> key_indices;\n+      key_indices.reserve(size);\n+      for (int i = 0; i < size; ++i) {\n+        const ::google::protobuf::Message& item =\n+            reflection.GetRepeatedMessage(message, field, i);\n+        const ::google::protobuf::FieldDescriptor* item_fd =\n+            item.GetDescriptor()->FindFieldByName(\"key\");\n+        const std::string key(item.GetReflection()->GetString(item, item_fd));\n+        key_indices.emplace_back(key, i);\n+      }\n+      std::sort(key_indices.begin(), key_indices.end());\n+      output.reserve(size);\n+      for (const std::pair<std::string, int>& key_index : key_indices) {\n+        output.push_back(key_index.second);\n+      }\n     }\n-  } else {\n+  }\n+\n+  if (output.empty()) {\n     output.resize(size);\n     std::iota(output.begin(), output.end(), 0);\n   }"
        }
    ],
    "ApolloAuto/apollo/10283": [
        {
            "sha": "cd2569358a9562177797c84c328b170bbcd1fa5f",
            "filename": "modules/prediction/submodules/predictor_submodule.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/8670dff64bcc6d78d0c2d7e60e0958315565375d/modules%2Fprediction%2Fsubmodules%2Fpredictor_submodule.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/8670dff64bcc6d78d0c2d7e60e0958315565375d/modules%2Fprediction%2Fsubmodules%2Fpredictor_submodule.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fsubmodules%2Fpredictor_submodule.cc?ref=8670dff64bcc6d78d0c2d7e60e0958315565375d",
            "patch": "@@ -37,7 +37,7 @@ std::string PredictorSubmodule::Name() const {\n }\n \n bool PredictorSubmodule::Init() {\n-  if (!MessageProcess::InitEvaluators()) {\n+  if (!MessageProcess::InitPredictors()) {\n     return false;\n   }\n   predictor_writer_ ="
        }
    ],
    "ApolloAuto/apollo/10293": [
        {
            "sha": "95bb6dcc6868da840b43e9f5d3e145b8b75ea5fa",
            "filename": "modules/perception/lidar/lib/segmentation/cnnseg/BUILD",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/7130945b106cb84527b4414598daea77ece7682a/modules%2Fperception%2Flidar%2Flib%2Fsegmentation%2Fcnnseg%2FBUILD",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/7130945b106cb84527b4414598daea77ece7682a/modules%2Fperception%2Flidar%2Flib%2Fsegmentation%2Fcnnseg%2FBUILD",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Flidar%2Flib%2Fsegmentation%2Fcnnseg%2FBUILD?ref=7130945b106cb84527b4414598daea77ece7682a",
            "patch": "@@ -24,6 +24,8 @@ cc_library(\n         \"//modules/perception/inference/utils:inference_util_lib\",\n         \"//modules/perception/lib/config_manager\",\n         \"//modules/perception/lidar/lib/interface\",\n+        \"//modules/perception/lidar/lib/roi_filter/hdmap_roi_filter\",\n+        \"//modules/perception/lidar/lib/ground_detector/spatio_temporal_ground_detector\",\n         \"//modules/perception/lidar/lib/segmentation/cnnseg/proto:cnnseg_config_proto\",\n         \"//modules/perception/lidar/lib/segmentation/cnnseg/proto:cnnseg_param_proto\",\n         \"//modules/perception/lidar/lib/segmentation/cnnseg/proto:spp_engine_config_proto\","
        }
    ],
    "ApolloAuto/apollo/10300": [
        {
            "sha": "7c6e8b94033a0bd08154602a59a9cff94f7c231e",
            "filename": "modules/prediction/evaluator/evaluator_manager.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e3e435d53144c6e60c5f687993be67f71e0d05da/modules%2Fprediction%2Fevaluator%2Fevaluator_manager.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e3e435d53144c6e60c5f687993be67f71e0d05da/modules%2Fprediction%2Fevaluator%2Fevaluator_manager.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fevaluator%2Fevaluator_manager.cc?ref=e3e435d53144c6e60c5f687993be67f71e0d05da",
            "patch": "@@ -69,16 +69,16 @@ void GroupObstaclesByObstacleIds(ObstaclesContainer* const obstacles_container,\n     Obstacle* obstacle_ptr = obstacles_container->GetObstacle(obstacle_id);\n     if (obstacle_ptr == nullptr) {\n       AERROR << \"Null obstacle [\" << obstacle_id << \"] found\";\n-      return;\n+      continue;\n     }\n     if (obstacle_ptr->IsStill()) {\n       ADEBUG << \"Ignore still obstacle [\" << obstacle_id << \"]\";\n-      return;\n+      continue;\n     }\n     const Feature& feature = obstacle_ptr->latest_feature();\n     if (feature.priority().priority() == ObstaclePriority::IGNORE) {\n       ADEBUG << \"Skip ignored obstacle [\" << obstacle_id << \"]\";\n-      return;\n+      continue;\n     } else if (feature.priority().priority() == ObstaclePriority::CAUTION) {\n       caution_thread_idx = caution_thread_idx % FLAGS_max_caution_thread_num;\n       (*id_obstacle_map)[caution_thread_idx].push_back(obstacle_ptr);"
        }
    ],
    "ApolloAuto/apollo/10303": [
        {
            "sha": "d9e983961d05fc74913ce940ad436f2e21ba078b",
            "filename": "modules/planning/tasks/optimizers/piecewise_jerk_speed/piecewise_jerk_speed_nonlinear_optimizer.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2060694afc6e1acab499ef32ca32244540d88872/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpiecewise_jerk_speed%2Fpiecewise_jerk_speed_nonlinear_optimizer.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2060694afc6e1acab499ef32ca32244540d88872/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpiecewise_jerk_speed%2Fpiecewise_jerk_speed_nonlinear_optimizer.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpiecewise_jerk_speed%2Fpiecewise_jerk_speed_nonlinear_optimizer.cc?ref=2060694afc6e1acab499ef32ca32244540d88872",
            "patch": "@@ -234,17 +234,18 @@ Status PiecewiseJerkSpeedNonlinearOptimizer::SetUpStatesAndBounds(\n         case STBoundary::BoundaryType::STOP:\n         case STBoundary::BoundaryType::YIELD:\n           s_upper_bound = std::fmin(s_upper_bound, s_upper);\n-          s_soft_upper_bound = s_upper_bound;\n+          s_soft_upper_bound = std::fmin(s_soft_upper_bound, s_upper);\n           break;\n         case STBoundary::BoundaryType::FOLLOW:\n           // TODO(Hongyi): unify follow buffer on decision side\n           s_upper_bound =\n               std::fmin(s_upper_bound, s_upper - FLAGS_follow_min_distance);\n-          s_soft_upper_bound = s_upper_bound - 5.0;\n+          s_soft_upper_bound = std::fmin(\n+              s_soft_upper_bound, s_upper - FLAGS_follow_min_distance - 5.0);\n           break;\n         case STBoundary::BoundaryType::OVERTAKE:\n           s_lower_bound = std::fmax(s_lower_bound, s_lower);\n-          s_soft_lower_bound = s_lower_bound;\n+          s_soft_lower_bound = std::fmax(s_soft_lower_bound, s_lower);\n           break;\n         default:\n           break;"
        }
    ],
    "ApolloAuto/apollo/10318": [
        {
            "sha": "bd1179a76665e85906f04601b9715139f37cad8e",
            "filename": "third_party/tf2/src/buffer_core.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e44bd336ba9bfe9f31b4f20c064ce3357a02f9b1/third_party%2Ftf2%2Fsrc%2Fbuffer_core.cpp",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e44bd336ba9bfe9f31b4f20c064ce3357a02f9b1/third_party%2Ftf2%2Fsrc%2Fbuffer_core.cpp",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/third_party%2Ftf2%2Fsrc%2Fbuffer_core.cpp?ref=e44bd336ba9bfe9f31b4f20c064ce3357a02f9b1",
            "patch": "@@ -476,8 +476,8 @@ int BufferCore::walkToTopParent(\n   if (frame_chain) {\n     // Pruning: Compare the chains starting at the parent (end) until they\n     // differ\n-    unsigned int m = reverse_frame_chain.size() - 1;\n-    unsigned int n = frame_chain->size() - 1;\n+    int m = static_cast<int>(reverse_frame_chain.size()) - 1;\n+    int n = static_cast<int>(frame_chain->size()) - 1;\n     for (; m >= 0 && n >= 0; --m, --n) {\n       if ((*frame_chain)[n] != reverse_frame_chain[m]) break;\n     }"
        }
    ],
    "ApolloAuto/apollo/10322": [
        {
            "sha": "be82cecbc16d05dcf5f8a79ecf3cb50408e1097e",
            "filename": "modules/planning/tasks/deciders/st_bounds_decider/st_bounds_decider.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/7a69204e60686a37141be4d6e0f5565385f4ce80/modules%2Fplanning%2Ftasks%2Fdeciders%2Fst_bounds_decider%2Fst_bounds_decider.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/7a69204e60686a37141be4d6e0f5565385f4ce80/modules%2Fplanning%2Ftasks%2Fdeciders%2Fst_bounds_decider%2Fst_bounds_decider.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Fdeciders%2Fst_bounds_decider%2Fst_bounds_decider.cc?ref=7a69204e60686a37141be4d6e0f5565385f4ce80",
            "patch": "@@ -233,8 +233,9 @@ void STBoundsDecider::RankDecisions(\n         if (A_room < B_room) {\n           swap(available_choices->at(i + 1), available_choices->at(i));\n           has_swaps = true;\n-          continue;\n+          ADEBUG << \"Swapping to favor larger room.\";\n         }\n+        continue;\n       }\n \n       // Should select the one with overlap to guide-line\n@@ -246,8 +247,9 @@ void STBoundsDecider::RankDecisions(\n         if (!A_contains_guideline) {\n           swap(available_choices->at(i + 1), available_choices->at(i));\n           has_swaps = true;\n-          continue;\n+          ADEBUG << \"Swapping to favor overlapping with guide-line.\";\n         }\n+        continue;\n       }\n     }\n   }"
        }
    ],
    "ApolloAuto/apollo/10339": [
        {
            "sha": "f135bcd7a5c5e8c05f86694f4fe42ba99df502e1",
            "filename": "modules/control/conf/control_conf.pb.txt",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/752733c9c400ddf7627d41da71687454a239991c/modules%2Fcontrol%2Fconf%2Fcontrol_conf.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/752733c9c400ddf7627d41da71687454a239991c/modules%2Fcontrol%2Fconf%2Fcontrol_conf.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcontrol%2Fconf%2Fcontrol_conf.pb.txt?ref=752733c9c400ddf7627d41da71687454a239991c",
            "patch": "@@ -107,15 +107,15 @@ lat_controller_conf {\n   }\n   steer_mrac_conf {\n     mrac_model_order: 1\n-    reference_time_constant: 0.01\n+    reference_time_constant: 0.07\n     reference_natural_frequency: 10\n     reference_damping_ratio: 0.9\n-    adaption_state_gain: 1.0\n-    adaption_desired_gain: 1.0\n-    adaption_nonlinear_gain: 1.0\n+    adaption_state_gain: 0.003\n+    adaption_desired_gain: 0.003\n+    adaption_nonlinear_gain: 0.003\n     adaption_matrix_p: 1.0\n     mrac_saturation_level: 1.0\n-    anti_windup_compensation_gain: 0.0\n+    anti_windup_compensation_gain: 0.003\n   }\n }\n lon_controller_conf {"
        }
    ],
    "ApolloAuto/apollo/10379": [
        {
            "sha": "d0e42b0929d13db2f937f15f9167d0444f3bd829",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b480b4080728e61bb864718012dbd603fc1cd3bd/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b480b4080728e61bb864718012dbd603fc1cd3bd/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=b480b4080728e61bb864718012dbd603fc1cd3bd",
            "patch": "@@ -376,11 +376,11 @@ function main(){\n         -v /dev/null:/dev/raw1394 \\\n         $IMG \\\n         /bin/bash\n-    set +x\n     if [ $? -ne 0 ];then\n         error \"Failed to start docker container \\\"${APOLLO_DEV}\\\" based on image: $IMG\"\n         exit 1\n     fi\n+    set +x\n \n     if [ \"${USER}\" != \"root\" ]; then\n         docker exec $APOLLO_DEV bash -c '/apollo/scripts/docker_adduser.sh'"
        }
    ],
    "ApolloAuto/apollo/10434": [
        {
            "sha": "bb3584dc9ab4eba36be82e472539fc58d09e9d10",
            "filename": "scripts/apollo_base.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/dce9b40554f6c96a0b2b269de84bd1b21503cd33/scripts%2Fapollo_base.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/dce9b40554f6c96a0b2b269de84bd1b21503cd33/scripts%2Fapollo_base.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fapollo_base.sh?ref=dce9b40554f6c96a0b2b269de84bd1b21503cd33",
            "patch": "@@ -88,7 +88,7 @@ function set_lib_path() {\n   if [ -d \"${LIB_USER}\" ]; then\n     export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${LIB_USER}\n   else\n-    warn \"${LIB_USER} doesn't exist\"\n+    warning \"${LIB_USER} doesn't exist\"\n   fi\n \n   if [ \"$RELEASE_DOCKER\" == 1 ]; then"
        }
    ],
    "ApolloAuto/apollo/10446": [
        {
            "sha": "94df2053bd53783bb629b818534f6de1f753130d",
            "filename": "modules/prediction/container/obstacles/obstacles_container.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/32d391db7f198adaef867b28f688290c14726fab/modules%2Fprediction%2Fcontainer%2Fobstacles%2Fobstacles_container.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/32d391db7f198adaef867b28f688290c14726fab/modules%2Fprediction%2Fcontainer%2Fobstacles%2Fobstacles_container.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fcontainer%2Fobstacles%2Fobstacles_container.cc?ref=32d391db7f198adaef867b28f688290c14726fab",
            "patch": "@@ -46,8 +46,9 @@ ObstaclesContainer::ObstaclesContainer(const SubmoduleOutput& submodule_output)\n     ptr_obstacles_.Put(obstacle.id(), std::move(ptr_obstacle));\n   }\n \n-  const Obstacle& ego_vehicle = submodule_output.GetEgoVehicle();\n-  std::unique_ptr<Obstacle> ptr_ego_vehicle(new Obstacle(ego_vehicle));\n+  Obstacle ego_vehicle = submodule_output.GetEgoVehicle();\n+  std::unique_ptr<Obstacle> ptr_ego_vehicle(\n+      new Obstacle(std::move(ego_vehicle)));\n   ptr_obstacles_.Put(ego_vehicle.id(), std::move(ptr_ego_vehicle));\n \n   curr_frame_movable_obstacle_ids_ ="
        }
    ],
    "ApolloAuto/apollo/10450": [
        {
            "sha": "d34f464842be374f079124aa8669d4a5a0e669c7",
            "filename": "modules/planning/on_lane_planning.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/19d0d11265830693289976ae83088b1a85ce27b1/modules%2Fplanning%2Fon_lane_planning.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/19d0d11265830693289976ae83088b1a85ce27b1/modules%2Fplanning%2Fon_lane_planning.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fon_lane_planning.cc?ref=19d0d11265830693289976ae83088b1a85ce27b1",
            "patch": "@@ -461,6 +461,7 @@ Status OnLanePlanning::Plan(\n       EgoInfo::Instance()->front_clear_distance());\n \n   if (frame_->open_space_info().is_on_open_space_trajectory()) {\n+    frame_->mutable_open_space_info()->sync_debug_instance();\n     const auto& publishable_trajectory =\n         frame_->open_space_info().publishable_trajectory_data().first;\n     const auto& publishable_trajectory_gear ="
        }
    ],
    "ApolloAuto/apollo/10461": [
        {
            "sha": "eda2533c3156d82abe137f633b0507b391e2f7e6",
            "filename": "modules/planning/common/reference_line_info.cc",
            "status": "modified",
            "additions": 0,
            "deletions": 2,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0c1df51a9e82343182a7e27d9642309c776f1cee/modules%2Fplanning%2Fcommon%2Freference_line_info.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0c1df51a9e82343182a7e27d9642309c776f1cee/modules%2Fplanning%2Fcommon%2Freference_line_info.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Freference_line_info.cc?ref=0c1df51a9e82343182a7e27d9642309c776f1cee",
            "patch": "@@ -808,8 +808,6 @@ void ReferenceLineInfo::ExportEngageAdvice(EngageAdvice* engage_advice) const {\n     if (common::math::AngleDiff(vehicle_state_.heading(), ref_point.heading()) >\n         kMaxAngleDiff) {\n       if (prev_advice->advice() != EngageAdvice::DISALLOW_ENGAGE) {\n-        prev_advice->set_advice(EngageAdvice::DISALLOW_ENGAGE);\n-      } else {\n         prev_advice->set_advice(EngageAdvice::PREPARE_DISENGAGE);\n       }\n       prev_advice->set_reason(\"Vehicle heading is not aligned\");"
        }
    ],
    "ApolloAuto/apollo/10482": [
        {
            "sha": "8f6328177ff53c90a7b17d3b6b1173a98e2b5706",
            "filename": "modules/planning/on_lane_planning.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e44735de5a43cf8960fdb5ddb824946e91867659/modules%2Fplanning%2Fon_lane_planning.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e44735de5a43cf8960fdb5ddb824946e91867659/modules%2Fplanning%2Fon_lane_planning.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fon_lane_planning.cc?ref=e44735de5a43cf8960fdb5ddb824946e91867659",
            "patch": "@@ -520,10 +520,10 @@ Status OnLanePlanning::Plan(\n               std::back_inserter(current_frame_planned_path));\n     frame_->set_current_frame_planned_path(current_frame_planned_path);\n \n+    ptr_debug->MergeFrom(best_ref_info->debug());\n     if (FLAGS_export_chart) {\n       ExportOnLaneChart(best_ref_info->debug(), ptr_debug);\n     } else {\n-      ptr_debug->MergeFrom(best_ref_info->debug());\n       ExportReferenceLineDebug(ptr_debug);\n       // Export additional ST-chart for failed lane-change speed planning\n       const auto* failed_ref_info = frame_->FindFailedReferenceLineInfo();"
        }
    ],
    "ApolloAuto/apollo/10493": [
        {
            "sha": "1c4d3936b85a64d5b325a19e00e527082e085b0e",
            "filename": "modules/planning/common/speed/st_boundary.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1c5fe13f0a0e89880e66e2a22407e38dd183cda3/modules%2Fplanning%2Fcommon%2Fspeed%2Fst_boundary.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1c5fe13f0a0e89880e66e2a22407e38dd183cda3/modules%2Fplanning%2Fcommon%2Fspeed%2Fst_boundary.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Fspeed%2Fst_boundary.cc?ref=1c5fe13f0a0e89880e66e2a22407e38dd183cda3",
            "patch": "@@ -199,6 +199,7 @@ bool STBoundary::GetUnblockSRange(const double curr_time, double* s_upper,\n   } else {\n     ADEBUG << \"boundary_type is not supported. boundary_type: \"\n            << static_cast<int>(boundary_type_);\n+    return false;\n   }\n   return true;\n }"
        }
    ],
    "ApolloAuto/apollo/10498": [
        {
            "sha": "8a0725caa0d567b32c2c9fd05fc3da57ca5ad69c",
            "filename": "modules/prediction/predictor/sequence/sequence_predictor.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/972fe5f2b7be7e515da0df801ebccaf425a22f68/modules%2Fprediction%2Fpredictor%2Fsequence%2Fsequence_predictor.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/972fe5f2b7be7e515da0df801ebccaf425a22f68/modules%2Fprediction%2Fpredictor%2Fsequence%2Fsequence_predictor.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fpredictor%2Fsequence%2Fsequence_predictor.cc?ref=972fe5f2b7be7e515da0df801ebccaf425a22f68",
            "patch": "@@ -212,8 +212,7 @@ double SequencePredictor::GetLaneChangeDistanceWithADC(\n   }\n \n   Eigen::Vector2d adc_position;\n-  if (ego_vehicle_ptr != nullptr ||\n-      ego_vehicle_ptr->history_size() == 0) {\n+  if (ego_vehicle_ptr != nullptr && ego_vehicle_ptr->history_size() > 0) {\n     const auto& position = ego_vehicle_ptr->latest_feature().position();\n     adc_position[0] = position.x();\n     adc_position[1] = position.y();"
        }
    ],
    "ApolloAuto/apollo/10527": [
        {
            "sha": "a5bf8a3a869ba7809a0cce2ccbd4d8d260a932f6",
            "filename": "modules/planning/common/speed_profile_generator.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 4,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/06a9e56ac501bcf0ecc04e33fd54a484a1d3ebe2/modules%2Fplanning%2Fcommon%2Fspeed_profile_generator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/06a9e56ac501bcf0ecc04e33fd54a484a1d3ebe2/modules%2Fplanning%2Fcommon%2Fspeed_profile_generator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Fspeed_profile_generator.cc?ref=06a9e56ac501bcf0ecc04e33fd54a484a1d3ebe2",
            "patch": "@@ -67,11 +67,9 @@ SpeedData SpeedProfileGenerator::GenerateFallbackSpeed(\n                                                    init_s);\n \n   std::vector<double> end_state_ref(num_of_knots, stop_distance);\n-  piecewise_jerk_problem.set_x_ref(1000.0, end_state_ref);\n+  piecewise_jerk_problem.set_x_ref(1.0, end_state_ref);\n \n-  // TODO(Hongyi): tune the params and move to a config\n-  piecewise_jerk_problem.set_weight_ddx(1.0);\n-  piecewise_jerk_problem.set_weight_dddx(0.01);\n+  piecewise_jerk_problem.set_scale_factor({1.0, 10.0, 100.0});\n \n   piecewise_jerk_problem.set_x_bounds(0.0, std::fmax(stop_distance, 100.0));\n   piecewise_jerk_problem.set_dx_bounds("
        }
    ],
    "ApolloAuto/apollo/10532": [
        {
            "sha": "254925ef16da2841b781e191ad9a2a4831db9651",
            "filename": "modules/common/latency_recorder/latency_recorder.cc",
            "status": "modified",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d1d86ffa7a0e63b54cb0f95986349612a2c80d33/modules%2Fcommon%2Flatency_recorder%2Flatency_recorder.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d1d86ffa7a0e63b54cb0f95986349612a2c80d33/modules%2Fcommon%2Flatency_recorder%2Flatency_recorder.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Flatency_recorder%2Flatency_recorder.cc?ref=d1d86ffa7a0e63b54cb0f95986349612a2c80d33",
            "patch": "@@ -16,6 +16,7 @@\n \n #include \"modules/common/latency_recorder/latency_recorder.h\"\n \n+#include \"cyber/common/global_data.h\"\n #include \"modules/common/adapters/adapter_gflags.h\"\n #include \"modules/common/util/message_util.h\"\n \n@@ -33,6 +34,16 @@ void LatencyRecorder::AppendLatencyRecord(const uint64_t message_id,\n   // TODO(michael): ALERT for now for trouble shooting,\n   // CHECK_LT(begin_time, end_time) in the future to enforce the validation\n   if (begin_time >= end_time) {\n+    // In Simulation mode, there might be large number of cases where\n+    // begin_times equal to end_times, reduce the error frequency in this mode\n+    static const int kErrorReduceBase = 1000;\n+    if (!cyber::common::GlobalData::Instance()->IsRealityMode()) {\n+      AERROR_EVERY(kErrorReduceBase)\n+          << \"latency begin_time: \" << begin_time\n+          << \" greater than or equal to end_time: \" << end_time << \", \"\n+          << kErrorReduceBase << \" times\";\n+      return;\n+    }\n     AERROR << \"latency begin_time: \" << begin_time\n            << \" greater than or equal to end_time: \" << end_time;\n     return;"
        }
    ],
    "ApolloAuto/apollo/10597": [
        {
            "sha": "b26e075e15167e7e56f5b1634d2cdbae81eb23e2",
            "filename": "cyber/component/component_test.cc",
            "status": "modified",
            "additions": 7,
            "deletions": 5,
            "changes": 12,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e788eea01cc0db68ffe5b3732c8da20adc672763/cyber%2Fcomponent%2Fcomponent_test.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e788eea01cc0db68ffe5b3732c8da20adc672763/cyber%2Fcomponent%2Fcomponent_test.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fcomponent%2Fcomponent_test.cc?ref=e788eea01cc0db68ffe5b3732c8da20adc672763",
            "patch": "@@ -67,7 +67,7 @@ class Component_C : public Component<M0> {\n   bool Proc(const std::shared_ptr<M0> &) { return ret_proc; }\n };\n \n-TEST(TimerComponent, init) {\n+TEST(CommonComponent, init) {\n   ret_proc = true;\n   ret_init = true;\n   apollo::cyber::proto::ComponentConfig compcfg;\n@@ -102,7 +102,7 @@ TEST(TimerComponent, init) {\n   EXPECT_TRUE(comA->Process(msg_str1, msg_str2, msg_str3, msg_str4));\n }\n \n-TEST(TimerComponentFail, init) {\n+TEST(CommonComponentFail, init) {\n   ret_proc = false;\n   ret_init = false;\n   apollo::cyber::proto::ComponentConfig compcfg;\n@@ -121,14 +121,16 @@ TEST(TimerComponentFail, init) {\n \n   compcfg.set_name(\"perception2_f\");\n   apollo::cyber::proto::ReaderOption *read_opt2 = compcfg.add_readers();\n-  read_opt2->set_channel(\"/driver/channel\");\n+  read_opt2->set_channel(\"/driver/channel1\");\n   auto comB = std::make_shared<Component_B<RawMessage, RawMessage>>();\n   EXPECT_FALSE(comB->Initialize(compcfg));\n   EXPECT_FALSE(comB->Process(msg_str1, msg_str2));\n \n-  compcfg.set_name(\"perception3_F\");\n+  compcfg.set_name(\"perception3_f\");\n   apollo::cyber::proto::ReaderOption *read_opt3 = compcfg.add_readers();\n-  read_opt3->set_channel(\"/driver/channel\");\n+  read_opt3->set_channel(\"/driver/channel2\");\n+  apollo::cyber::proto::ReaderOption *read_opt4 = compcfg.add_readers();\n+  read_opt4->set_channel(\"/driver/channel3\");\n   auto comA = std::make_shared<\n       Component_A<RawMessage, RawMessage, RawMessage, RawMessage>>();\n   EXPECT_FALSE(comA->Initialize(compcfg));"
        }
    ],
    "ApolloAuto/apollo/10601": [
        {
            "sha": "1191134a3f28aeb092c4f5b2276cd72b325bb99f",
            "filename": "docs/specs/Navigation/Propak_6_IMU-IGM-A1_Installation_Guide.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a990581e25abd3bafcc22f7270321811129ce2f4/docs%2Fspecs%2FNavigation%2FPropak_6_IMU-IGM-A1_Installation_Guide.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a990581e25abd3bafcc22f7270321811129ce2f4/docs%2Fspecs%2FNavigation%2FPropak_6_IMU-IGM-A1_Installation_Guide.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2FNavigation%2FPropak_6_IMU-IGM-A1_Installation_Guide.md?ref=a990581e25abd3bafcc22f7270321811129ce2f4",
            "patch": "@@ -8,7 +8,7 @@ The IMU-IGM-A1 is an IMU that pairs with a SPAN-enabled GNSS receiver such as th\n \n The GPS Receiver/Antenna used with the GPS-IMU component is the **NovAtel GPS-703-GGG-HV**.\n \n-![gps_receiver](/Users/hanyang07/apollo/docs/quickstart/images/gps_receiver.png)\n+![gps_receiver](images/gps_receiver.png)\n \n \n ### Installing the GPS Receiver and Antenna"
        }
    ],
    "ApolloAuto/apollo/10641": [
        {
            "sha": "046c9c552f95306aad192f00419cef73655144f2",
            "filename": "cyber/tools/cyber_launch/cyber_launch",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0c6ec48864a0a3f86f06091eabd9dda142b7ed84/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0c6ec48864a0a3f86f06091eabd9dda142b7ed84/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch?ref=0c6ec48864a0a3f86f06091eabd9dda142b7ed84",
            "patch": "@@ -106,7 +106,7 @@ def module_monitor(mod):\n     while True:\n         line = mod.popen.stdout.readline()\n         if line:\n-            logger.debug('%s# %s' % (mod.name, line.strip('\\n')))\n+            logger.debug('%s# %s' % (mod.name, line.decode('utf8').strip('\\n')))\n             continue\n         time.sleep(0.01)\n "
        }
    ],
    "ApolloAuto/apollo/10704": [
        {
            "sha": "8bc9617ed6a51901763bb0ac8b93fc1fd4fa6064",
            "filename": "scripts/docker_adduser.sh",
            "status": "modified",
            "additions": 0,
            "deletions": 3,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1b9b8b7450eead962b03e0cfc5a8dd8f83524a61/scripts%2Fdocker_adduser.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1b9b8b7450eead962b03e0cfc5a8dd8f83524a61/scripts%2Fdocker_adduser.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fdocker_adduser.sh?ref=1b9b8b7450eead962b03e0cfc5a8dd8f83524a61",
            "patch": "@@ -30,9 +30,6 @@ if [ -e \"/apollo/scripts/apollo_base.sh\" ]; then\n   source /apollo/scripts/apollo_base.sh\n fi\n \n-alias python='/usr/bin/python3'\n-alias pip='/usr/bin/pip3'\n-\n ulimit -c unlimited\n ' >> \"/home/${DOCKER_USER}/.bashrc\"\n "
        }
    ],
    "ApolloAuto/apollo/10752": [
        {
            "sha": "74f5ec21762dbbe38e4660d67ef5d91b1e70e30b",
            "filename": "cyber/tools/cyber_node/cyber_node",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3dc5d22714f9ccccfcfe8d1facfa5d42b4c0101b/cyber%2Ftools%2Fcyber_node%2Fcyber_node",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3dc5d22714f9ccccfcfe8d1facfa5d42b4c0101b/cyber%2Ftools%2Fcyber_node%2Fcyber_node",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_node%2Fcyber_node?ref=3dc5d22714f9ccccfcfe8d1facfa5d42b4c0101b",
            "patch": "@@ -34,9 +34,9 @@ def print_node_info(node_name, sleep_s=2):\n     except:\n         print(\"RoleAttributes ParseFromString failed. size is \", len(roleattr_rawdata))\n         return\n-    print(\"nodename\\t\", msg.node_name)\n-    print(\"processid\\t\", msg.process_id)\n-    print(\"hostname\\t\", msg.host_name)\n+    print(\"nodename\\t%s\" %  msg.node_name)\n+    print(\"processid\\t%d\" % msg.process_id)\n+    print(\"hostname\\t%s\" % msg.host_name)\n \n     print(\"[Reading Channels]:\")\n     reader_channels = sorted(cyber.NodeUtils.get_readersofnode(node_name, 0))"
        }
    ],
    "ApolloAuto/apollo/10766": [
        {
            "sha": "c8fc2f98b24a2e5f89c2572a8fdccf56ee1d1733",
            "filename": "modules/planning/tasks/optimizers/open_space_trajectory_generation/open_space_trajectory_optimizer.cc",
            "status": "modified",
            "additions": 19,
            "deletions": 0,
            "changes": 19,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/de623f7847f292d00930e76d0f4875d92584be11/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_generation%2Fopen_space_trajectory_optimizer.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/de623f7847f292d00930e76d0f4875d92584be11/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_generation%2Fopen_space_trajectory_optimizer.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_generation%2Fopen_space_trajectory_optimizer.cc?ref=de623f7847f292d00930e76d0f4875d92584be11",
            "patch": "@@ -188,6 +188,10 @@ Status OpenSpaceTrajectoryOptimizer::Plan(\n                         \"distance approach smoothing problem failed to solve\");\n         }\n       } else {\n+        const double start_system_timestamp =\n+            std::chrono::duration<double>(\n+                std::chrono::system_clock::now().time_since_epoch())\n+                .count();\n         if (!GenerateDistanceApproachTraj(\n                 xWS_vec[i], uWS_vec[i], XYbounds, obstacles_edges_num,\n                 obstacles_A, obstacles_b, obstacles_vertices_vec, last_time_u,\n@@ -202,6 +206,21 @@ Status OpenSpaceTrajectoryOptimizer::Plan(\n           return Status(ErrorCode::PLANNING_ERROR,\n                         \"distance approach smoothing problem failed to solve\");\n         }\n+        const auto end_system_timestamp =\n+            std::chrono::duration<double>(\n+                std::chrono::system_clock::now().time_since_epoch())\n+                .count();\n+        const auto time_diff_ms =\n+            (end_system_timestamp - start_system_timestamp) * 1000;\n+        ADEBUG << \"total planning time spend: \" << time_diff_ms << \" ms.\";\n+        ADEBUG << i << \"th trajectory size is \" << xWS_vec[i].cols();\n+        ADEBUG << \"average time spend: \" << time_diff_ms / xWS_vec[i].cols()\n+               << \" ms per point.\";\n+        ADEBUG << \"average time spend after smooth: \"\n+               << time_diff_ms / state_result_ds_vec[i].cols()\n+               << \" ms per point.\";\n+        ADEBUG << i << \"th smoothed trajectory size is \"\n+               << state_result_ds_vec[i].cols();\n       }\n     }\n "
        }
    ],
    "ApolloAuto/apollo/10768": [
        {
            "sha": "236c52c79bd5fbc463950988b9fc364b991d9c20",
            "filename": "modules/planning/scenarios/park/pull_over/stage_retry_parking.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f9b2abe7d678416d60ac58f956ad8e576c2ef237/modules%2Fplanning%2Fscenarios%2Fpark%2Fpull_over%2Fstage_retry_parking.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f9b2abe7d678416d60ac58f956ad8e576c2ef237/modules%2Fplanning%2Fscenarios%2Fpark%2Fpull_over%2Fstage_retry_parking.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fscenarios%2Fpark%2Fpull_over%2Fstage_retry_parking.cc?ref=f9b2abe7d678416d60ac58f956ad8e576c2ef237",
            "patch": "@@ -61,6 +61,7 @@ Stage::StageStatus PullOverStageRetryParking::Process(\n                               ->mutable_debug()\n                               ->mutable_planning_data()\n                               ->mutable_pull_over();\n+  pull_over_debug->mutable_position()->CopyFrom(pull_over_status.position());\n   pull_over_debug->set_theta(pull_over_status.theta());\n   pull_over_debug->set_length_front(pull_over_status.length_front());\n   pull_over_debug->set_length_back(pull_over_status.length_back());\n@@ -71,6 +72,7 @@ Stage::StageStatus PullOverStageRetryParking::Process(\n   if (CheckADCPullOverOpenSpace()) {\n     return FinishStage();\n   }\n+\n   return StageStatus::RUNNING;\n }\n "
        }
    ],
    "ApolloAuto/apollo/10773": [
        {
            "sha": "82fa8dfbb602322c7ee26e4adeb3237b35d281b4",
            "filename": "docs/specs/D-kit/Camera_Based_Auto_Driving--Sensor_Calibration_cn.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e453e927764609539b7df32058e1c408f2601a24/docs%2Fspecs%2FD-kit%2FCamera_Based_Auto_Driving--Sensor_Calibration_cn.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e453e927764609539b7df32058e1c408f2601a24/docs%2Fspecs%2FD-kit%2FCamera_Based_Auto_Driving--Sensor_Calibration_cn.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2FD-kit%2FCamera_Based_Auto_Driving--Sensor_Calibration_cn.md?ref=e453e927764609539b7df32058e1c408f2601a24",
            "patch": "@@ -55,7 +55,7 @@ Camera\u5750\u6807\u7cfb\u539f\u70b9\u5728\u4e0b\u56fe\u6240\u793a\u5e73\u9762\u7684\u4e2d\u5fc3\u70b9\uff1a\n     y: 0.5\n     z: -0.5\n ```\n- - translation:\u7528\u6237\u9700\u8981\u624b\u52a8\u6d4b\u91cf\u4ee5IMU\u5750\u6807\u7cfb\u4e3a\u57fa\u5750\u6807\u7cfb\uff0c\u4ee5Velodyne16\u5750\u6807\u7cfb\u4e3a\u76ee\u6807\u5750\u6807\u7cfb\u7684\u4f4d\u79fb\u53d8\u6362\uff0c\u4e00\u4e2aIMU-Velodyne16\u7684\u4f4d\u79fb\u53d8\u6362\u7684\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a\n+ - translation:\u7528\u6237\u9700\u8981\u624b\u52a8\u6d4b\u91cf\u4ee5Velodyne16\u5750\u6807\u7cfb\u4e3a\u57fa\u5750\u6807\u7cfb\uff0c\u4ee5Camera\u5750\u6807\u7cfb\u4e3a\u76ee\u6807\u5750\u6807\u7cfb\u7684\u4f4d\u79fb\u53d8\u6362\uff0c\u4e00\u4e2aVelodyne16-Camera\u7684\u4f4d\u79fb\u53d8\u6362\u7684\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a\n ```\n   translation:\n     x: 0.67\n@@ -132,7 +132,7 @@ budaoshi@in_dev_docker:/apollo/modules/tools/sensor_calibration$ python extract_\n \n \u4fee\u6539\u6570\u636e\u62bd\u53d6\u5de5\u5177\u751f\u6210\u7684init_params/extrinsics.yaml\u6587\u4ef6\u3002\u628a\u524d\u9762\u6b65\u9aa4\u624b\u52a8\u6d4b\u91cf\u7684Camera-Lidar\u6807\u5b9a\u521d\u59cb\u5916\u53c2\u4fe1\u606f\u586b\u5165\uff0c\u4ec5\u9700\u8981\u586b\u5199`translation`\u5b57\u6bb5\u3002\n \n-#### 6. \u4fee\u6539\u521d\u59cb\u5916\u53c2\u6587\u4ef6intrinsics.yaml\n+#### 6. \u4fee\u6539\u521d\u59cb\u5316\u5185\u53c2\u6587\u4ef6intrinsics.yaml\n \n \u4fee\u6539\u6570\u636e\u62bd\u53d6\u5de5\u5177\u751f\u6210\u7684init_params/intrinsics.yaml\u6587\u4ef6\u3002\u628a\u5185\u53c2\u6807\u5b9a\u7684Camera\u5185\u53c2\u4fe1\u606f\u586b\u5165\uff0c\u4ec5\u9700\u8981\u586b\u5199`R`\u3001`K`\u3001`D`\u5b57\u6bb5\u3002\n "
        }
    ],
    "ApolloAuto/apollo/10789": [
        {
            "sha": "b38d79d07c32da3f7c93492e2e743636ff7f9bd3",
            "filename": "modules/planning/tasks/optimizers/open_space_trajectory_generation/open_space_trajectory_optimizer.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0243dc4b480cdeb0613ea0f50ef80e3c5366e317/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_generation%2Fopen_space_trajectory_optimizer.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0243dc4b480cdeb0613ea0f50ef80e3c5366e317/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_generation%2Fopen_space_trajectory_optimizer.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_generation%2Fopen_space_trajectory_optimizer.cc?ref=0243dc4b480cdeb0613ea0f50ef80e3c5366e317",
            "patch": "@@ -185,8 +185,9 @@ Status OpenSpaceTrajectoryOptimizer::Plan(\n                 &time_result_ds_vec[i])) {\n           ADEBUG << \"Smoother fail at \" << i << \"th trajectory\";\n           ADEBUG << i << \"th trajectory size is \" << xWS_vec[i].cols();\n-          return Status(ErrorCode::PLANNING_ERROR,\n-                        \"distance approach smoothing problem failed to solve\");\n+          return Status(\n+              ErrorCode::PLANNING_ERROR,\n+              \"iterative anchoring smoothing problem failed to solve\");\n         }\n       } else {\n         const double start_system_timestamp ="
        }
    ],
    "ApolloAuto/apollo/10827": [
        {
            "sha": "24160ad9c229cbf2ba187aa61ea26ec732c5c400",
            "filename": "scripts/time_sync.sh",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/81465ea03d2f6e56e2282a06c760415af3b6797b/scripts%2Ftime_sync.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/81465ea03d2f6e56e2282a06c760415af3b6797b/scripts%2Ftime_sync.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Ftime_sync.sh?ref=81465ea03d2f6e56e2282a06c760415af3b6797b",
            "patch": "@@ -16,9 +16,7 @@\n # limitations under the License.\n ###############################################################################\n \n-sudo apt-get install -y ntpdate\n-\n-grep -q ntpdate /etc/crontab\n+[ -x \"$(command -v ntpdate)\" ] || sudo apt-get install -y ntpdate\n \n REGIN=\"us\"\n \n@@ -32,6 +30,7 @@ fi\n \n echo \"Regin is set as: ${REGIN}, make sure this regin is consistent with list on pool.npt.org\"\n \n+grep -q ntpdate /etc/crontab\n if [ $? -eq 1 ]; then\n     echo \"*/1 * * * * root ntpdate -v -u ${REGIN}.pool.ntp.org\" | sudo tee -a /etc/crontab\n fi"
        }
    ],
    "ApolloAuto/apollo/10877": [
        {
            "sha": "e35a0b633f48fa3d9a2e0d75a9a14464ec8637f6",
            "filename": "cyber/timer/timing_wheel.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1b0f5f5d958f02ab302d2ab05d26470222048081/cyber%2Ftimer%2Ftiming_wheel.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1b0f5f5d958f02ab302d2ab05d26470222048081/cyber%2Ftimer%2Ftiming_wheel.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftimer%2Ftiming_wheel.cc?ref=1b0f5f5d958f02ab302d2ab05d26470222048081",
            "patch": "@@ -79,7 +79,7 @@ void TimingWheel::AddTask(const std::shared_ptr<TimerTask>& task,\n     task->remainder_interval_ms = real_work_wheel_index;\n     auto assistant_ticks = work_wheel_index / WORK_WHEEL_SIZE;\n     if (assistant_ticks == 1 &&\n-        real_work_wheel_index != current_work_wheel_index_) {\n+        real_work_wheel_index < current_work_wheel_index_) {\n       work_wheel_[real_work_wheel_index].AddTask(task);\n       ADEBUG << \"add task to work wheel. index :\" << real_work_wheel_index;\n     } else {"
        }
    ],
    "ApolloAuto/apollo/10896": [
        {
            "sha": "9ee0296ecfbed0e6bd33b2bca36255c445bb1056",
            "filename": "modules/planning/pipeline/feature_generator.cc",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0de5c43ad7a5b241a52509e5e5828490893637a4/modules%2Fplanning%2Fpipeline%2Ffeature_generator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0de5c43ad7a5b241a52509e5e5828490893637a4/modules%2Fplanning%2Fpipeline%2Ffeature_generator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fpipeline%2Ffeature_generator.cc?ref=0de5c43ad7a5b241a52509e5e5828490893637a4",
            "patch": "@@ -492,19 +492,22 @@ void FeatureGenerator::GenerateRoutingFeature(\n   // local routing land_ids behind ADS\n   int i = routing_index;\n   double length = 0.0;\n-  while (i-- > 0 && length < kLocalRoutingLength) {\n+  while (i >= 0 && length < kLocalRoutingLength) {\n       local_routing_lane_ids.insert(local_routing_lane_ids.begin(),\n                                     routing_lane_segment_[i].first);\n       length += routing_lane_segment_[i].second;\n+      i--;\n   }\n   // local routing lane_ids ahead of ADC\n   i = routing_index;\n   length = 0.0;\n-  while (i++ < static_cast<int>(routing_lane_segment_.size()) &&\n+  while (i < static_cast<int>(routing_lane_segment_.size()) &&\n       length < kLocalRoutingLength) {\n     local_routing_lane_ids.push_back(routing_lane_segment_[i].first);\n     length += routing_lane_segment_[i].second;\n+    i++;\n   }\n+\n   for (const auto& lane_id : local_routing_lane_ids) {\n     routing->add_local_routing_lane_id(lane_id);\n   }"
        }
    ],
    "ApolloAuto/apollo/10925": [
        {
            "sha": "8d111acdec2a8505776da9791533cb65c94d5fbf",
            "filename": "modules/planning/tasks/optimizers/piecewise_jerk_path/piecewise_jerk_path_optimizer.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/42176d7c9d1c45004794b85d2da3c17b51b02d02/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpiecewise_jerk_path%2Fpiecewise_jerk_path_optimizer.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/42176d7c9d1c45004794b85d2da3c17b51b02d02/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpiecewise_jerk_path%2Fpiecewise_jerk_path_optimizer.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fpiecewise_jerk_path%2Fpiecewise_jerk_path_optimizer.cc?ref=42176d7c9d1c45004794b85d2da3c17b51b02d02",
            "patch": "@@ -147,13 +147,12 @@ common::Status PiecewiseJerkPathOptimizer::Process(\n       // final_path_data might carry info from upper stream\n       PathData path_data = *final_path_data;\n       path_data.SetReferenceLine(&reference_line);\n-      path_data.SetFrenetPath(std::move(frenet_frame_path));\n       if (FLAGS_use_front_axe_center_in_path_planning) {\n         auto discretized_path = DiscretizedPath(\n             ConvertPathPointRefFromFrontAxeToRearAxe(path_data));\n-        path_data = *final_path_data;\n-        path_data.SetReferenceLine(&reference_line);\n         path_data.SetDiscretizedPath(discretized_path);\n+      } else {\n+        path_data.SetFrenetPath(std::move(frenet_frame_path));\n       }\n       path_data.set_path_label(path_boundary.label());\n       path_data.set_blocking_obstacle_id(path_boundary.blocking_obstacle_id());"
        }
    ],
    "ApolloAuto/apollo/10935": [
        {
            "sha": "fcda28761dd403ae9e1ad25ab7b7756580b8ca3e",
            "filename": "cyber/timer/timing_wheel.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/132e047abb998c240b10a8dfd500be77613af745/cyber%2Ftimer%2Ftiming_wheel.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/132e047abb998c240b10a8dfd500be77613af745/cyber%2Ftimer%2Ftiming_wheel.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftimer%2Ftiming_wheel.cc?ref=132e047abb998c240b10a8dfd500be77613af745",
            "patch": "@@ -71,9 +71,10 @@ void TimingWheel::AddTask(const std::shared_ptr<TimerTask>& task,\n   if (!running_) {\n     Start();\n   }\n-\n   auto work_wheel_index = current_work_wheel_index +\n-                          task->next_fire_duration_ms / TIMER_RESOLUTION_MS;\n+                          static_cast<uint64_t>(std::ceil(\n+                              static_cast<double>(task->next_fire_duration_ms) /\n+                              TIMER_RESOLUTION_MS));\n   if (work_wheel_index >= WORK_WHEEL_SIZE) {\n     auto real_work_wheel_index = GetWorkWheelIndex(work_wheel_index);\n     task->remainder_interval_ms = real_work_wheel_index;"
        }
    ],
    "ApolloAuto/apollo/10942": [
        {
            "sha": "830896cbb50ad2c70492b84debcde2b5ed06b1ea",
            "filename": "modules/planning/pipeline/feature_generator.cc",
            "status": "modified",
            "additions": 22,
            "deletions": 8,
            "changes": 30,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/99829825082c1e7303675c8aef81861e76cecf36/modules%2Fplanning%2Fpipeline%2Ffeature_generator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/99829825082c1e7303675c8aef81861e76cecf36/modules%2Fplanning%2Fpipeline%2Ffeature_generator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fpipeline%2Ffeature_generator.cc?ref=99829825082c1e7303675c8aef81861e76cecf36",
            "patch": "@@ -97,8 +97,7 @@ void FeatureGenerator::Close() {\n         << total_learning_data_frame_num_;\n }\n \n-void FeatureGenerator::OnLocalization(\n-    const apollo::localization::LocalizationEstimate& le) {\n+void FeatureGenerator::OnLocalization(const LocalizationEstimate& le) {\n   localization_for_label_.push_back(le);\n \n   const int localization_msg_start_cnt =\n@@ -467,8 +466,7 @@ void FeatureGenerator::GenerateRoutingFeature(\n }\n \n void FeatureGenerator::GenerateADCTrajectoryPoints(\n-    const std::list<apollo::localization::LocalizationEstimate>&\n-        localization_for_label,\n+    const std::list<LocalizationEstimate>& localization_for_label,\n     LearningDataFrame* learning_data_frame) {\n   constexpr double kSearchRadius = 1.0;\n \n@@ -485,20 +483,29 @@ void FeatureGenerator::GenerateADCTrajectoryPoints(\n   std::string yield_sign_id;\n   double yield_sign_distance = 0.0;\n \n-  int trajectory_point_index = 0;\n   int i = -1;\n   const int localization_sample_interval_for_trajectory_point =\n       FLAGS_localization_freq / FLAGS_planning_freq;\n+\n+  // use a vector to help reverse traverse list of mutable field\n+  std::vector<LocalizationEstimate> localization_points;\n   for (const auto& le : localization_for_label) {\n     ++i;\n     if ((i % localization_sample_interval_for_trajectory_point) != 0) {\n       continue;\n     }\n-    auto adc_trajectory_point = learning_data_frame->add_adc_trajectory_point();\n-    adc_trajectory_point->set_timestamp_sec(le.measurement_time());\n+    localization_points.insert(localization_points.begin(), le);\n+  }\n+\n+  int trajectory_point_index = 0;\n+  for (const auto& localization_point : localization_points) {\n+     auto adc_trajectory_point =\n+         learning_data_frame->add_adc_trajectory_point();\n+     adc_trajectory_point->set_timestamp_sec(\n+         localization_point.measurement_time());\n \n     auto trajectory_point = adc_trajectory_point->mutable_trajectory_point();\n-    auto& pose = le.pose();\n+    auto& pose = localization_point.pose();\n     trajectory_point->mutable_path_point()->set_x(pose.position().x());\n     trajectory_point->mutable_path_point()->set_y(pose.position().y());\n     trajectory_point->mutable_path_point()->set_z(pose.position().z());\n@@ -657,6 +664,13 @@ void FeatureGenerator::GenerateADCTrajectoryPoints(\n \n     ++trajectory_point_index;\n   }\n+\n+  // planning_tag\n+  if (learning_data_frame->adc_trajectory_point_size() >0) {\n+    learning_data_frame->mutable_planning_tag()->set_lane_turn(\n+        learning_data_frame->adc_trajectory_point(0).planning_tag()\n+                                                    .lane_turn());\n+  }\n   // AINFO << \"number of ADC trajectory points in one frame: \"\n   //       << trajectory_point_index;\n }"
        }
    ],
    "ApolloAuto/apollo/10948": [
        {
            "sha": "955aef2350c435a8aaf9827095090ba941fc7a57",
            "filename": "cyber/scheduler/policy/scheduler_choreography.cc",
            "status": "modified",
            "additions": 7,
            "deletions": 6,
            "changes": 13,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d9d10f362373992d0e9f906efa7751ec50638a8e/cyber%2Fscheduler%2Fpolicy%2Fscheduler_choreography.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d9d10f362373992d0e9f906efa7751ec50638a8e/cyber%2Fscheduler%2Fpolicy%2Fscheduler_choreography.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fscheduler%2Fpolicy%2Fscheduler_choreography.cc?ref=d9d10f362373992d0e9f906efa7751ec50638a8e",
            "patch": "@@ -203,7 +203,7 @@ bool SchedulerChoreography::RemoveCRoutine(uint64_t crid) {\n   std::lock_guard<std::mutex> lg(wrapper->Mutex());\n \n   std::shared_ptr<CRoutine> cr = nullptr;\n-  int pid;\n+  uint32_t pid;\n   {\n     WriteLockGuard<AtomicRWLock> lk(id_cr_lock_);\n     auto p = id_cr_.find(crid);\n@@ -218,11 +218,11 @@ bool SchedulerChoreography::RemoveCRoutine(uint64_t crid) {\n   }\n \n   // rm cr from pool if rt not in choreo context\n-  if (pid == -1) {\n-    return ClassicContext::RemoveCRoutine(cr);\n-  } else {\n+  if (pid < proc_num_) {\n     return static_cast<ChoreographyContext*>(pctxs_[pid].get())\n         ->RemoveCRoutine(crid);\n+  } else {\n+    return ClassicContext::RemoveCRoutine(cr);\n   }\n }\n \n@@ -232,13 +232,15 @@ bool SchedulerChoreography::NotifyProcessor(uint64_t crid) {\n   }\n \n   std::shared_ptr<CRoutine> cr;\n+  uint32_t pid;\n   // find cr from id_cr && Update cr Flag\n   // policies will handle ready-state CRoutines\n   {\n     ReadLockGuard<AtomicRWLock> lk(id_cr_lock_);\n     auto it = id_cr_.find(crid);\n     if (it != id_cr_.end()) {\n       cr = it->second;\n+      pid = cr->processor_id();\n       if (cr->state() == RoutineState::DATA_WAIT ||\n           cr->state() == RoutineState::IO_WAIT) {\n         cr->SetUpdateFlag();\n@@ -248,8 +250,7 @@ bool SchedulerChoreography::NotifyProcessor(uint64_t crid) {\n     }\n   }\n \n-  if (cr->processor_id() != -1) {\n-    auto pid = cr->processor_id();\n+  if (pid < proc_num_) {\n     static_cast<ChoreographyContext*>(pctxs_[pid].get())->Notify();\n   } else {\n     ClassicContext::Notify(cr->group_name());"
        }
    ],
    "ApolloAuto/apollo/10971": [
        {
            "sha": "7e230e911e04b46ceb69f60f18db92f7a3db2c13",
            "filename": "modules/map/hdmap/hdmap_common.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5d4b3d75031a5e844a3575105637c929fd4a9fd2/modules%2Fmap%2Fhdmap%2Fhdmap_common.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5d4b3d75031a5e844a3575105637c929fd4a9fd2/modules%2Fmap%2Fhdmap%2Fhdmap_common.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fmap%2Fhdmap%2Fhdmap_common.cc?ref=5d4b3d75031a5e844a3575105637c929fd4a9fd2",
            "patch": "@@ -170,7 +170,7 @@ void LaneInfo::Init() {\n     if (lane_.type() == Lane::CITY_DRIVING) {\n       for (const auto &p : sampled_left_width_) {\n         if (p.second < FLAGS_half_vehicle_width) {\n-          AERROR\n+          ADEBUG\n               << \"lane[id = \" << lane_.id().DebugString()\n               << \"]. sampled_left_width_[\" << p.second\n               << \"] is too small. It should be larger than half vehicle width[\"\n@@ -179,7 +179,7 @@ void LaneInfo::Init() {\n       }\n       for (const auto &p : sampled_right_width_) {\n         if (p.second < FLAGS_half_vehicle_width) {\n-          AERROR\n+          ADEBUG\n               << \"lane[id = \" << lane_.id().DebugString()\n               << \"]. sampled_right_width_[\" << p.second\n               << \"] is too small. It should be larger than half vehicle width[\""
        }
    ],
    "ApolloAuto/apollo/11073": [
        {
            "sha": "baac5db4de01a036988a7752d32a3d6cbdf99c44",
            "filename": "docs/howto/how_to_add_a_new_can_card.md",
            "status": "modified",
            "additions": 13,
            "deletions": 1,
            "changes": 14,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/048f05bee21cd32044c8003dddf8a2e5975e0835/docs%2Fhowto%2Fhow_to_add_a_new_can_card.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/048f05bee21cd32044c8003dddf8a2e5975e0835/docs%2Fhowto%2Fhow_to_add_a_new_can_card.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fhowto%2Fhow_to_add_a_new_can_card.md?ref=048f05bee21cd32044c8003dddf8a2e5975e0835",
            "patch": "@@ -119,7 +119,7 @@ void CanClientFactory::RegisterCanClients() {\n ### Step 3\n \n Next, you would need to update the config File\n-Add the EXAMPLE_CAN into `/modules/canbus/proto/can_card_parameter.proto`\n+Add the EXAMPLE_CAN into `/modules/drivers/canbus/proto/can_card_parameter.proto`\n \n ```proto\n message CANCardParameter {\n@@ -142,3 +142,15 @@ can_card_parameter {\n }\n ... ...\n ```\n+\n+If you use radar, like Conti radar in apollo, its' canbus configuration file should alse be modified. Update `/modules/drivers/radar/conti_radar/conf/conti_radar_conf.pb.txt`\n+\n+```txt\n+... ...\n+can_card_parameter {\n+  brand:EXAMPLE_CAN\n+  type: PCI_CARD // suppose the new can card is PCI_CARD\n+  channel_id: CHANNEL_ID_ZERO // suppose the new can card has CHANNEL_ID_ZERO\n+}\n+... ...\n+```"
        }
    ],
    "ApolloAuto/apollo/11076": [
        {
            "sha": "8946835982f7c9bbaee52745307203bc8612c965",
            "filename": "modules/planning/common/planning_gflags.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/aaeb4a14ebca8cb5e70d0d156cffbfcb26d6b501/modules%2Fplanning%2Fcommon%2Fplanning_gflags.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/aaeb4a14ebca8cb5e70d0d156cffbfcb26d6b501/modules%2Fplanning%2Fcommon%2Fplanning_gflags.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Fplanning_gflags.cc?ref=aaeb4a14ebca8cb5e70d0d156cffbfcb26d6b501",
            "patch": "@@ -94,10 +94,10 @@ DEFINE_bool(enable_scenario_pull_over, false,\n             \"enable pull-over scenario in planning\");\n \n DEFINE_bool(enable_scenario_emergency_pull_over, true,\n-            \"enable emregency-pull-over scenario in planning\");\n+            \"enable emergency-pull-over scenario in planning\");\n \n DEFINE_bool(enable_scenario_emergency_stop, true,\n-            \"enable emregency-stop scenario in planning\");\n+            \"enable emergency-stop scenario in planning\");\n \n DEFINE_bool(enable_scenario_side_pass_multiple_parked_obstacles, true,\n             \"enable ADC to side-pass multiple parked obstacles without\""
        }
    ],
    "ApolloAuto/apollo/11085": [
        {
            "sha": "15aefd5e668810fc4d30e65748f16410d32aa464",
            "filename": "modules/control/controller/mpc_controller.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c4b3b32e35f99928507612862c9613cd60c1886e/modules%2Fcontrol%2Fcontroller%2Fmpc_controller.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c4b3b32e35f99928507612862c9613cd60c1886e/modules%2Fcontrol%2Fcontroller%2Fmpc_controller.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcontrol%2Fcontroller%2Fmpc_controller.cc?ref=c4b3b32e35f99928507612862c9613cd60c1886e",
            "patch": "@@ -290,11 +290,11 @@ void MPCController::LoadMPCGainScheduler(\n       << \"Fail to load heading error gain scheduler for MPC controller\";\n \n   feedforwardterm_interpolation_.reset(new Interpolation1D);\n-  ACHECK(feedforwardterm_interpolation_->Init(xy2))\n+  ACHECK(feedforwardterm_interpolation_->Init(xy3))\n       << \"Fail to load feed forward term gain scheduler for MPC controller\";\n \n   steer_weight_interpolation_.reset(new Interpolation1D);\n-  ACHECK(steer_weight_interpolation_->Init(xy2))\n+  ACHECK(steer_weight_interpolation_->Init(xy4))\n       << \"Fail to load steer weight gain scheduler for MPC controller\";\n }\n "
        }
    ],
    "ApolloAuto/apollo/11093": [
        {
            "sha": "7434a57e0ec7c883d93349ddfd20e27d066fd5ea",
            "filename": "modules/common/time/time.h",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f0368af8a6720244a1cd937078a056a5acb02a67/modules%2Fcommon%2Ftime%2Ftime.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f0368af8a6720244a1cd937078a056a5acb02a67/modules%2Fcommon%2Ftime%2Ftime.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Ftime%2Ftime.h?ref=f0368af8a6720244a1cd937078a056a5acb02a67",
            "patch": "@@ -63,7 +63,7 @@ class Clock {\n                 \"microsecond.\");\n \n   // The clock mode can either be a system clock time, a user mocked time (for\n-  // test only) or read from ROS.\n+  // test only) or read from CyberRT.\n   enum ClockMode {\n     SYSTEM = 0,\n     MOCK = 1,"
        }
    ],
    "ApolloAuto/apollo/11101": [
        {
            "sha": "5a7084f5d02bf3aebbecf7ebff992d60a62b442a",
            "filename": "modules/planning/pipeline/evaluator.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/16e8b0f98207fb5b6c00cf6ec279c61b0be0486f/modules%2Fplanning%2Fpipeline%2Fevaluator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/16e8b0f98207fb5b6c00cf6ec279c61b0be0486f/modules%2Fplanning%2Fpipeline%2Fevaluator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fpipeline%2Fevaluator.cc?ref=16e8b0f98207fb5b6c00cf6ec279c61b0be0486f",
            "patch": "@@ -395,7 +395,8 @@ void Evaluator::EvaluateObstaclePredictionTrajectory(\n                                ->add_trajectory_point();\n         obstacle_prediction_trajectory_point->set_timestamp_sec(\n             tp.timestamp_sec());\n-        obstacle_prediction_trajectory_point->CopyFrom(tp.trajectory_point());\n+        obstacle_prediction_trajectory_point->mutable_trajectory_point()\n+                                            ->CopyFrom(tp.trajectory_point());\n       }\n     }\n   }"
        }
    ],
    "ApolloAuto/apollo/11130": [
        {
            "sha": "4384e37c0795f3bc28f83264135cc6cbd76b001e",
            "filename": "modules/third_party_perception/tools/conversion_smartereye.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0e22eea03c8f2e43273dedd2a22e18bfca3b3af1/modules%2Fthird_party_perception%2Ftools%2Fconversion_smartereye.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0e22eea03c8f2e43273dedd2a22e18bfca3b3af1/modules%2Fthird_party_perception%2Ftools%2Fconversion_smartereye.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fthird_party_perception%2Ftools%2Fconversion_smartereye.cc?ref=0e22eea03c8f2e43273dedd2a22e18bfca3b3af1",
            "patch": "@@ -135,11 +135,11 @@ apollo::perception::PerceptionObstacles SmartereyeToPerceptionObstacles(\n     int sma_id = data_obstacle.trackid() + FLAGS_smartereye_id_offset;\n \n     double sma_x = data_obstacle.avgdistancez();\n-    double sma_y = -data_obstacle.real3dcenterx();\n+    double sma_y = data_obstacle.real3dcenterx();\n     double sma_z = (data_obstacle.real3dupy() +\n         data_obstacle.real3dlowy()) / 2.0;\n     // relative speed\n-    double sma_vel_x = data_obstacle.fuzzyrelativedistancez();\n+    double sma_vel_x = data_obstacle.fuzzyrelativespeedz();\n     int sma_type = data_obstacle.obstacletype();\n \n     double sma_w = data_obstacle.real3drightx() - data_obstacle.real3dleftx();"
        }
    ],
    "ApolloAuto/apollo/11156": [
        {
            "sha": "f368888588730fc058f116d32651608cc6553cf2",
            "filename": "modules/planning/pipeline/evaluator.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a121dea53009e88c6cb6d8a5bc355224a0e3b9e0/modules%2Fplanning%2Fpipeline%2Fevaluator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a121dea53009e88c6cb6d8a5bc355224a0e3b9e0/modules%2Fplanning%2Fpipeline%2Fevaluator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fpipeline%2Fevaluator.cc?ref=a121dea53009e88c6cb6d8a5bc355224a0e3b9e0",
            "patch": "@@ -137,7 +137,7 @@ void Evaluator::EvaluateTrajectoryByTime(\n     std::reverse(updated_trajectory.begin(), updated_trajectory.end());\n   }\n   DiscretizedTrajectory discretized_trajectory;\n-  double last_relative_time = std::numeric_limits<double>::min();\n+  double last_relative_time = std::numeric_limits<double>::lowest();\n   for (const auto& tp : updated_trajectory) {\n     // check for abnormal perception data\n     if (tp.relative_time() > last_relative_time) {"
        }
    ],
    "ApolloAuto/apollo/11172": [
        {
            "sha": "50a3abf59178a9501bd8b7f15998d241f8426055",
            "filename": "modules/planning/pipeline/feature_generator.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 5,
            "changes": 9,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a72b494458e855321c373d0c0e8e1b05bf51ce91/modules%2Fplanning%2Fpipeline%2Ffeature_generator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a72b494458e855321c373d0c0e8e1b05bf51ce91/modules%2Fplanning%2Fpipeline%2Ffeature_generator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fpipeline%2Ffeature_generator.cc?ref=a72b494458e855321c373d0c0e8e1b05bf51ce91",
            "patch": "@@ -134,7 +134,7 @@ void FeatureGenerator::OnLocalization(const LocalizationEstimate& le) {\n       le.header().timestamp_sec() - last_localization_message_timestamp_sec;\n   if (time_diff < 1.0 / FLAGS_planning_freq) {\n     return;\n-  } else if (time_diff >= 1.0 / FLAGS_planning_freq * 2) {\n+  } else if (time_diff >= (1.0 * 2 / FLAGS_planning_freq)) {\n     std::ostringstream msg;\n     msg << \"missing localization too long: time_stamp[\"\n         << le.header().timestamp_sec()\n@@ -145,9 +145,6 @@ void FeatureGenerator::OnLocalization(const LocalizationEstimate& le) {\n   last_localization_message_timestamp_sec = le.header().timestamp_sec();\n   localizations_.push_back(le);\n \n-  // generate one frame data\n-  GenerateLearningDataFrame();\n-\n   while (!localizations_.empty()) {\n     if (localizations_.back().header().timestamp_sec() -\n         localizations_.front().header().timestamp_sec()\n@@ -157,6 +154,9 @@ void FeatureGenerator::OnLocalization(const LocalizationEstimate& le) {\n     localizations_.pop_front();\n   }\n \n+  // generate one frame data\n+  GenerateLearningDataFrame();\n+\n   // write frames into a file\n   if (learning_data_.learning_data_size() >=\n       FLAGS_learning_data_frame_num_per_file) {\n@@ -590,7 +590,6 @@ void FeatureGenerator::GenerateTrafficLightDetectionFeature(\n void FeatureGenerator::GenerateADCTrajectoryPoints(\n     const std::list<LocalizationEstimate>& localizations,\n     LearningDataFrame* learning_data_frame) {\n-\n   std::vector<LocalizationEstimate> localization_samples;\n   for (const auto& le : localizations) {\n     localization_samples.insert(localization_samples.begin(), le);"
        }
    ],
    "ApolloAuto/apollo/11197": [
        {
            "sha": "6935a93ca3057ccba1acf42c4fba8956a374c651",
            "filename": "modules/common/data/vehicle_param.pb.txt",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a1b3bc42d18e3bd623bc09413f51434134c9a80c/modules%2Fcommon%2Fdata%2Fvehicle_param.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a1b3bc42d18e3bd623bc09413f51434134c9a80c/modules%2Fcommon%2Fdata%2Fvehicle_param.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Fdata%2Fvehicle_param.pb.txt?ref=a1b3bc42d18e3bd623bc09413f51434134c9a80c",
            "patch": "@@ -1,6 +1,8 @@\n vehicle_param {\n   brand: LINCOLN_MKZ\n-\n+  vehicle_id {\n+      other_unique_id: \"mkz7\"\n+  }\n   front_edge_to_center: 3.89\n   back_edge_to_center: 1.043\n   left_edge_to_center: 1.055\n@@ -18,10 +20,8 @@ vehicle_param {\n   wheel_base: 2.8448\n   wheel_rolling_radius: 0.335\n   max_abs_speed_when_stopped: 0.2\n-\n-  brake_deadzone: 15.5\n-  throttle_deadzone: 18.0\n-\n+  brake_deadzone: 14.5\n+  throttle_deadzone: 15.4\n   steering_latency_param\n   {\n       dead_time: 0.1"
        }
    ],
    "ApolloAuto/apollo/11211": [
        {
            "sha": "51fdce319bd4917336192fae495b2b0e215f4105",
            "filename": "modules/planning/tasks/optimizers/open_space_trajectory_partition/open_space_trajectory_partition.cc",
            "status": "modified",
            "additions": 0,
            "deletions": 3,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1e83d49ffa9e294118d7e70f6ba04eb4c07399a8/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_partition%2Fopen_space_trajectory_partition.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1e83d49ffa9e294118d7e70f6ba04eb4c07399a8/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_partition%2Fopen_space_trajectory_partition.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Ftasks%2Foptimizers%2Fopen_space_trajectory_partition%2Fopen_space_trajectory_partition.cc?ref=1e83d49ffa9e294118d7e70f6ba04eb4c07399a8",
            "patch": "@@ -441,9 +441,6 @@ void OpenSpaceTrajectoryPartition::PartitionTrajectory(\n             : canbus::Chassis::GEAR_REVERSE;\n \n     if (cur_gear != *gear) {\n-      LoadTrajectoryPoint(trajectory_point, *gear, &last_pos_vec, &distance_s,\n-                          trajectory);\n-\n       partitioned_trajectories->emplace_back();\n       current_trajectory_gear = &(partitioned_trajectories->back());\n       current_trajectory_gear->second = cur_gear;"
        }
    ],
    "ApolloAuto/apollo/11229": [
        {
            "sha": "776d1a69ddf6d38c3ab5f9a1bb45662cf0d927a3",
            "filename": "scripts/record_bag.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ae305f8402f2074ecdb969cfaed31c10a1532307/scripts%2Frecord_bag.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ae305f8402f2074ecdb969cfaed31c10a1532307/scripts%2Frecord_bag.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Frecord_bag.sh?ref=ae305f8402f2074ecdb969cfaed31c10a1532307",
            "patch": "@@ -30,7 +30,7 @@ function start() {\n   LOG=\"/tmp/apollo_record.out\"\n   NUM_PROCESSES=\"$(pgrep -c -f \"rosbag record\")\"\n   if [ \"${NUM_PROCESSES}\" -eq 0 ]; then\n-    nohup rosbag record --split --duration=1m -b 2048  \\\n+    nohup cyber_recorder record -a -i 60 -m 2048\\\n         /apollo/sensor/camera/obstacle/front_6mm \\\n         /apollo/sensor/conti_radar \\\n         /apollo/sensor/delphi_esr \\"
        }
    ],
    "ApolloAuto/apollo/11241": [
        {
            "sha": "b15063c60aac32920b3128e18a33e00f5463ffc3",
            "filename": "modules/localization/msf/local_tool/local_visualization/online_visual/BUILD",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/8c400c94bd9a86f854868dc071fbbfa3320fb5fd/modules%2Flocalization%2Fmsf%2Flocal_tool%2Flocal_visualization%2Fonline_visual%2FBUILD",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/8c400c94bd9a86f854868dc071fbbfa3320fb5fd/modules%2Flocalization%2Fmsf%2Flocal_tool%2Flocal_visualization%2Fonline_visual%2FBUILD",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Flocal_tool%2Flocal_visualization%2Fonline_visual%2FBUILD?ref=8c400c94bd9a86f854868dc071fbbfa3320fb5fd",
            "patch": "@@ -3,7 +3,7 @@ load(\"//tools:cpplint.bzl\", \"cpplint\")\n package(default_visibility = [\"//visibility:public\"])\n \n cc_library(\n-    name = \"online_visualizer_compenont_lib\",\n+    name = \"online_visualizer_component_lib\",\n     srcs = [\"online_visualizer_component.cc\"],\n     hdrs = [\"online_visualizer_component.h\"],\n     copts = [\n@@ -34,7 +34,7 @@ cc_binary(\n     name = \"online_visualizer_compenont.so\",\n     linkopts = [\"-shared\"],\n     linkstatic = False,\n-    deps = [\":online_visualizer_compenont_lib\"],\n+    deps = [\":online_visualizer_component_lib\"],\n )\n \n cpplint()"
        }
    ],
    "ApolloAuto/apollo/11309": [
        {
            "sha": "85abb50bbac0ae89755163c1564b2edfa2233df6",
            "filename": "modules/storytelling/dag/storytelling.dag",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/fc6711c5d89fa739044db8b568ca35d48c8a83aa/modules%2Fstorytelling%2Fdag%2Fstorytelling.dag",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/fc6711c5d89fa739044db8b568ca35d48c8a83aa/modules%2Fstorytelling%2Fdag%2Fstorytelling.dag",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fstorytelling%2Fdag%2Fstorytelling.dag?ref=fc6711c5d89fa739044db8b568ca35d48c8a83aa",
            "patch": "@@ -4,7 +4,7 @@ module_config {\n         class_name : \"Storytelling\"\n         config {\n             name: \"storytelling\"\n-            config_file_path: \"apollo/modules/storytelling/conf/storytelling_conf.pb.txt\"\n+            config_file_path: \"/apollo/modules/storytelling/conf/storytelling_conf.pb.txt\"\n             flag_file_path: \"/apollo/modules/common/data/global_flagfile.txt\"\n             interval: 100\n         }"
        }
    ],
    "ApolloAuto/apollo/11318": [
        {
            "sha": "a939e68d46d2f0dde27071579f7ede63ef142f5c",
            "filename": "modules/planning/scenarios/scenario_manager.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5cfca80cfbfcf137d8df5bb43190ef80e6b5ffaf/modules%2Fplanning%2Fscenarios%2Fscenario_manager.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5cfca80cfbfcf137d8df5bb43190ef80e6b5ffaf/modules%2Fplanning%2Fscenarios%2Fscenario_manager.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fscenarios%2Fscenario_manager.cc?ref=5cfca80cfbfcf137d8df5bb43190ef80e6b5ffaf",
            "patch": "@@ -486,11 +486,11 @@ ScenarioConfig::ScenarioType ScenarioManager::SelectTrafficLightScenario(\n   static constexpr double kTrafficLightGroupingMaxDist = 2.0;  // unit: m\n   const std::vector<PathOverlap>& traffic_light_overlaps =\n       reference_line_info.reference_line().map_path().signal_overlaps();\n-  for (const auto& traffic_light_overlap : traffic_light_overlaps) {\n+  for (const auto& overlap : traffic_light_overlaps) {\n     const double dist =\n-        traffic_light_overlap.start_s - traffic_light_overlap.start_s;\n+        overlap.start_s - traffic_light_overlap.start_s;\n     if (fabs(dist) <= kTrafficLightGroupingMaxDist) {\n-      next_traffic_lights.push_back(traffic_light_overlap);\n+      next_traffic_lights.push_back(overlap);\n     }\n   }\n "
        }
    ],
    "ApolloAuto/apollo/11322": [
        {
            "sha": "7578c44c301b73d504bd6f20784a1fde7c5cb899",
            "filename": "scripts/docker_start_user.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f6f1ed27a3757805c4834bf4c333b5e7b7ca7417/scripts%2Fdocker_start_user.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f6f1ed27a3757805c4834bf4c333b5e7b7ca7417/scripts%2Fdocker_start_user.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fdocker_start_user.sh?ref=f6f1ed27a3757805c4834bf4c333b5e7b7ca7417",
            "patch": "@@ -94,7 +94,7 @@ function setup_user_bashrc() {\n     # TODO(storypku): perform copy operations in `installers/install_user.sh`\n     # for user `apollo` when docker build image\n     # TODO-BEGIN\n-    cp -r /etc/skel/* \"${user_home}\"\n+    cp -rf /etc/skel/.* \"${user_home}\"\n     # Set user files ownership to current user, such as .bashrc, .profile, etc.\n     echo \"${BASHRC_TEXT}\" >> ${user_home}/.bashrc\n     echo \"${LCOVRC_TEXT}\" > ${user_home}/.lcovrc"
        }
    ],
    "ApolloAuto/apollo/11323": [
        {
            "sha": "df9b7b661dc0e38461ef00b33d89d25f54d92cf1",
            "filename": "scripts/docker_start_user.sh",
            "status": "modified",
            "additions": 7,
            "deletions": 12,
            "changes": 19,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/62399307527006ce1efcbc9c00ef59610b8ac1d7/scripts%2Fdocker_start_user.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/62399307527006ce1efcbc9c00ef59610b8ac1d7/scripts%2Fdocker_start_user.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fdocker_start_user.sh?ref=62399307527006ce1efcbc9c00ef59610b8ac1d7",
            "patch": "@@ -35,7 +35,7 @@ function user_name_by_uid() {\n \n # TODO(storypku):\n # Save these rc files to /opt/apollo/misc when docker build image\n-# and copied to user's `$HOME` directory from there.\n+# and copied to user's `$HOME` directory when docker_start_user.sh\n # Ref: https://serverfault.com/questions/72476/clean-way-to-write-complex-multi-line-string-to-a-variable\n IFS='' read -r -d '' BASHRC_TEXT << EOF\n export PATH=\"\\$PATH:/apollo/scripts:/usr/local/miniconda/bin\"\n@@ -88,18 +88,14 @@ function _create_user_account_if_none_exist() {\n }\n \n function setup_user_bashrc() {\n-    local user_name=\"$1\"\n-    local group_name=\"$2\"\n-    local user_home=\"/home/$1\"\n-    # TODO(storypku): perform copy operations in `installers/install_user.sh`\n-    # for user `apollo` when docker build image\n-    # TODO-BEGIN\n-    cp -rf /etc/skel/.* \"${user_home}\"\n+    local uid=\"$1\"\n+    local gid=\"$2\"\n+    local user_home=\"/home/$3\"\n+    cp -rf /etc/skel/.{profile,bash*} \"${user_home}\"\n     # Set user files ownership to current user, such as .bashrc, .profile, etc.\n     echo \"${BASHRC_TEXT}\" >> ${user_home}/.bashrc\n     echo \"${LCOVRC_TEXT}\" > ${user_home}/.lcovrc\n-    # TODO-END\n-    chown -R ${user_name}:${group_name} \"${user_home}\"\n+    chown -R ${uid}:${gid} \"${user_home}\"\n }\n \n function setup_user_account() {\n@@ -109,7 +105,7 @@ function setup_user_account() {\n     local gid=\"$4\"\n     # USER apollo has already been created by `installers/install_user.sh`\n     _create_user_account_if_none_exist \"$@\"\n-    setup_user_bashrc \"${user_name}\" \"${group_name}\"\n+    setup_user_bashrc \"${uid}\" \"${gid}\" \"${user_name}\"\n }\n \n function grant_device_permissions() {\n@@ -138,7 +134,6 @@ function main() {\n     if [ \"${user_name}\" != \"${group_name}\" ]; then\n         echo \"Warning: user_name(${user_name}) != group_name(${group_name}) found.\"\n     fi\n-\n     setup_user_account \"$@\"\n     grant_device_permissions\n }"
        }
    ],
    "ApolloAuto/apollo/11338": [
        {
            "sha": "ba679f8dcbee0a4fde75303e928b05c8eda7e070",
            "filename": "modules/planning/conf/scenario/learning_model_sample_config.pb.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/cdbf49a637506bee6faac71a7c46ed939be629ec/modules%2Fplanning%2Fconf%2Fscenario%2Flearning_model_sample_config.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/cdbf49a637506bee6faac71a7c46ed939be629ec/modules%2Fplanning%2Fconf%2Fscenario%2Flearning_model_sample_config.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fconf%2Fscenario%2Flearning_model_sample_config.pb.txt?ref=cdbf49a637506bee6faac71a7c46ed939be629ec",
            "patch": "@@ -12,7 +12,7 @@ stage_config: {\n   task_config: {\n     task_type: LEARNING_MODEL_INFERENCE_TASK\n     learning_model_inference_task_config {\n-      model_file: \"/apollo/modules/planning/data/semantic_map/test_model.pt\"\n+      model_file: \"/apollo/modules/planning/data/model/test_model.pt\"\n       use_cuda: true\n     }\n   }"
        }
    ],
    "ApolloAuto/apollo/11480": [
        {
            "sha": "76319ca0fbc9bda406beb2da15ff11fd47a83c6c",
            "filename": "modules/planning/learning_based/model_inference/model_inference_test.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/7adcac1021171e6e7808deedd18779e6e85c31fd/modules%2Fplanning%2Flearning_based%2Fmodel_inference%2Fmodel_inference_test.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/7adcac1021171e6e7808deedd18779e6e85c31fd/modules%2Fplanning%2Flearning_based%2Fmodel_inference%2Fmodel_inference_test.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Flearning_based%2Fmodel_inference%2Fmodel_inference_test.cc?ref=7adcac1021171e6e7808deedd18779e6e85c31fd",
            "patch": "@@ -79,10 +79,10 @@ TEST_F(ModelInferenceTest, trajectory_imitation) {\n \n   std::unique_ptr<ModelInference> trajectory_imitation_inference =\n       std::unique_ptr<ModelInference>(new TrajectoryImitationInference(config));\n-\n-  trajectory_imitation_inference->LoadModel();\n-  ACHECK(trajectory_imitation_inference->Inference(&test_data_frame))\n-      << \"Failed to inference trajectory_imitation_model\";\n+  // TODO(PLANNING): this test needs to be fix\n+  // trajectory_imitation_inference->LoadModel();\n+  // ACHECK(trajectory_imitation_inference->Inference(&test_data_frame))\n+  //     << \"Failed to inference trajectory_imitation_model\";\n }\n \n }  // namespace planning"
        }
    ],
    "ApolloAuto/apollo/11512": [
        {
            "sha": "c0dba5b7786d4cd93d0655692f745af4ad1f81d0",
            "filename": "modules/routing/core/black_list_range_generator.cc",
            "status": "modified",
            "additions": 13,
            "deletions": 4,
            "changes": 17,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a381850d929dbf37d09eb0a51e0f54b9dce610cf/modules%2Frouting%2Fcore%2Fblack_list_range_generator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a381850d929dbf37d09eb0a51e0f54b9dce610cf/modules%2Frouting%2Fcore%2Fblack_list_range_generator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Frouting%2Fcore%2Fblack_list_range_generator.cc?ref=a381850d929dbf37d09eb0a51e0f54b9dce610cf",
            "patch": "@@ -129,21 +129,30 @@ void BlackListRangeGenerator::AddBlackMapFromTerminal(\n     double end_s, TopoRangeManager* const range_manager) const {\n   double start_length = src_node->Length();\n   double end_length = dest_node->Length();\n-  if (start_s < 0.0 || start_s > start_length) {\n+\n+  static constexpr double kEpsilon = 1e-2;\n+  const double start_s_adjusted =\n+      (start_s > start_length && start_s - start_length <= kEpsilon) ?\n+          start_length : start_s;\n+  const double end_s_adjusted =\n+      (end_s > end_length && end_s - end_length <= kEpsilon) ?\n+          end_length : end_s;\n+\n+  if (start_s_adjusted < 0.0 || start_s_adjusted > start_length) {\n     AERROR << \"Illegal start_s: \" << start_s << \", length: \" << start_length;\n     return;\n   }\n-  if (end_s < 0.0 || end_s > end_length) {\n+  if (end_s_adjusted < 0.0 || end_s_adjusted > end_length) {\n     AERROR << \"Illegal end_s: \" << end_s << \", length: \" << end_length;\n     return;\n   }\n \n-  double start_cut_s = MoveSBackward(start_s, 0.0);\n+  double start_cut_s = MoveSBackward(start_s_adjusted, 0.0);\n   range_manager->Add(src_node, start_cut_s, start_cut_s);\n   AddBlackMapFromOutParallel(src_node, start_cut_s / start_length,\n                              range_manager);\n \n-  double end_cut_s = MoveSForward(end_s, end_length);\n+  double end_cut_s = MoveSForward(end_s_adjusted, end_length);\n   range_manager->Add(dest_node, end_cut_s, end_cut_s);\n   AddBlackMapFromInParallel(dest_node, end_cut_s / end_length, range_manager);\n   range_manager->SortAndMerge();"
        }
    ],
    "ApolloAuto/apollo/11513": [
        {
            "sha": "362d03f8af27a6b002b4a9e5767418eea9491032",
            "filename": "modules/planning/common/indexed_queue.h",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/fc340a940f876e7b8fff27dc0202b5e62bad06e4/modules%2Fplanning%2Fcommon%2Findexed_queue.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/fc340a940f876e7b8fff27dc0202b5e62bad06e4/modules%2Fplanning%2Fcommon%2Findexed_queue.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Findexed_queue.h?ref=fc340a940f876e7b8fff27dc0202b5e62bad06e4",
            "patch": "@@ -62,7 +62,6 @@ class IndexedQueue {\n   }\n \n   void Clear() {\n-    capacity_ = 0;\n     while (!queue_.empty()) {\n       queue_.pop();\n     }"
        }
    ],
    "ApolloAuto/apollo/11514": [
        {
            "sha": "3b29f4cbe1e6fcd85e6949386ca73ce9cac8355d",
            "filename": "modules/canbus/vehicle/vehicle_controller.cc",
            "status": "modified",
            "additions": 9,
            "deletions": 9,
            "changes": 18,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/6778c83a366a9222aadee8a67c1689dfc6593140/modules%2Fcanbus%2Fvehicle%2Fvehicle_controller.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/6778c83a366a9222aadee8a67c1689dfc6593140/modules%2Fcanbus%2Fvehicle%2Fvehicle_controller.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcanbus%2Fvehicle%2Fvehicle_controller.cc?ref=6778c83a366a9222aadee8a67c1689dfc6593140",
            "patch": "@@ -43,7 +43,7 @@ ErrorCode VehicleController::SetDrivingMode(\n   }\n \n   // vehicle in emergency mode only response to manual mode to reset.\n-  if (driving_mode_ == Chassis::EMERGENCY_MODE &&\n+  if (this->driving_mode() == Chassis::EMERGENCY_MODE &&\n       driving_mode != Chassis::COMPLETE_MANUAL) {\n     AINFO\n         << \"Vehicle in EMERGENCY_MODE, only response to COMPLETE_MANUAL mode.\";\n@@ -52,7 +52,7 @@ ErrorCode VehicleController::SetDrivingMode(\n   }\n \n   // if current mode is same as previous, no need to set.\n-  if (driving_mode_ == driving_mode) {\n+  if (this->driving_mode() == driving_mode) {\n     return ErrorCode::OK;\n   }\n \n@@ -120,8 +120,8 @@ ErrorCode VehicleController::Update(const ControlCommand &control_command) {\n     SetDrivingMode(mode);\n   }\n \n-  if (driving_mode_ == Chassis::COMPLETE_AUTO_DRIVE ||\n-      driving_mode_ == Chassis::AUTO_SPEED_ONLY) {\n+  if (driving_mode() == Chassis::COMPLETE_AUTO_DRIVE ||\n+      driving_mode() == Chassis::AUTO_SPEED_ONLY) {\n     Gear(control_command.gear_location());\n     Throttle(control_command.throttle());\n     Acceleration(control_command.acceleration());\n@@ -130,8 +130,8 @@ ErrorCode VehicleController::Update(const ControlCommand &control_command) {\n     SetLimits();\n   }\n \n-  if (driving_mode_ == Chassis::COMPLETE_AUTO_DRIVE ||\n-      driving_mode_ == Chassis::AUTO_STEER_ONLY) {\n+  if (driving_mode() == Chassis::COMPLETE_AUTO_DRIVE ||\n+      driving_mode() == Chassis::AUTO_STEER_ONLY) {\n     const double steering_rate_threshold = 1.0;\n     if (control_command.steering_rate() > steering_rate_threshold) {\n       Steer(control_command.steering_target(), control_command.steering_rate());\n@@ -140,9 +140,9 @@ ErrorCode VehicleController::Update(const ControlCommand &control_command) {\n     }\n   }\n \n-  if ((driving_mode_ == Chassis::COMPLETE_AUTO_DRIVE ||\n-       driving_mode_ == Chassis::AUTO_SPEED_ONLY ||\n-       driving_mode_ == Chassis::AUTO_STEER_ONLY) &&\n+  if ((driving_mode() == Chassis::COMPLETE_AUTO_DRIVE ||\n+       driving_mode() == Chassis::AUTO_SPEED_ONLY ||\n+       driving_mode() == Chassis::AUTO_STEER_ONLY) &&\n       control_command.has_signal()) {\n     SetHorn(control_command);\n     SetTurningSignal(control_command);"
        }
    ],
    "ApolloAuto/apollo/11578": [
        {
            "sha": "a823d3aa249e8999333ed470745c0233b361a691",
            "filename": "modules/perception/lidar/lib/pointcloud_preprocessor/pointcloud_preprocessor.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/df059b9e939bca48c9aac1f80a8a50594701f245/modules%2Fperception%2Flidar%2Flib%2Fpointcloud_preprocessor%2Fpointcloud_preprocessor.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/df059b9e939bca48c9aac1f80a8a50594701f245/modules%2Fperception%2Flidar%2Flib%2Fpointcloud_preprocessor%2Fpointcloud_preprocessor.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Flidar%2Flib%2Fpointcloud_preprocessor%2Fpointcloud_preprocessor.cc?ref=df059b9e939bca48c9aac1f80a8a50594701f245",
            "patch": "@@ -56,7 +56,7 @@ bool PointCloudPreprocessor::Init(\n   box_backward_x_ = static_cast<float>(-vehicle_param.left_edge_to_center());\n   box_forward_y_ = static_cast<float>(vehicle_param.front_edge_to_center());\n   box_backward_y_ = static_cast<float>(-vehicle_param.back_edge_to_center());*/\n-  filter_high_z_points_ = static_cast<float>(config.filter_high_z_points());\n+  filter_high_z_points_ = config.filter_high_z_points();\n   z_threshold_ = config.z_threshold();\n   return true;\n }"
        }
    ],
    "ApolloAuto/apollo/11615": [
        {
            "sha": "cb859765c18493d56aea2bc0627729330692bb1a",
            "filename": "docs/quickstart/apollo_5_5_quick_start.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c938338fd9a1cb8c9edc048034eb224f305f4122/docs%2Fquickstart%2Fapollo_5_5_quick_start.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c938338fd9a1cb8c9edc048034eb224f305f4122/docs%2Fquickstart%2Fapollo_5_5_quick_start.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fquickstart%2Fapollo_5_5_quick_start.md?ref=c938338fd9a1cb8c9edc048034eb224f305f4122",
            "patch": "@@ -2,7 +2,7 @@\n \n The following guide serves as a user manual for launching the Apollo upgraded software and hardware stack on vehicle.\n \n-The the latest Apollo upgrade, Quick Start Guide focuses on the new features. For general Apollo concepts, please refer to\n+The latest Apollo upgrade, Quick Start Guide focuses on the new features. For general Apollo concepts, please refer to\n [Apollo 3.5 Quick Start](https://github.com/ApolloAuto/apollo/blob/master/docs/quickstart/apollo_3_5_quick_start.md)\n \n ## Contents"
        }
    ],
    "ApolloAuto/apollo/11657": [
        {
            "sha": "6ef8b58d947ff5cb3214bb7c61e1625f3144e871",
            "filename": "scripts/apollo_config.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9efdb37da55f17f6b8f969bb667adae885287f9c/scripts%2Fapollo_config.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9efdb37da55f17f6b8f969bb667adae885287f9c/scripts%2Fapollo_config.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fapollo_config.sh?ref=9efdb37da55f17f6b8f969bb667adae885287f9c",
            "patch": "@@ -19,7 +19,7 @@ function config_noninteractive() {\n     # determine_gpu_use\n     # FIXME(all): Disable gpu mode for aarch64 until we are ready.\n     if [ \"$(uname -m)\" = \"aarch64\" ]; then\n-        echo \"build --config=gpu\" >> \"${bzl_cfg_file}\"\n+        echo \"build --config=cpu\" >> \"${bzl_cfg_file}\"\n     else\n         if [ \"${USE_GPU}\" -eq 1 ]; then\n             echo \"build --config=gpu\" >> \"${bzl_cfg_file}\""
        }
    ],
    "ApolloAuto/apollo/11663": [
        {
            "sha": "da13d3125f03f44d27cc1d540100bc01842661c2",
            "filename": "modules/drivers/canbus/can_client/hermes_can/hermes_can_client_test.cc",
            "status": "modified",
            "additions": 19,
            "deletions": 18,
            "changes": 37,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e583505ad748c0f5ac2184408691e3585557fb22/modules%2Fdrivers%2Fcanbus%2Fcan_client%2Fhermes_can%2Fhermes_can_client_test.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e583505ad748c0f5ac2184408691e3585557fb22/modules%2Fdrivers%2Fcanbus%2Fcan_client%2Fhermes_can%2Fhermes_can_client_test.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdrivers%2Fcanbus%2Fcan_client%2Fhermes_can%2Fhermes_can_client_test.cc?ref=e583505ad748c0f5ac2184408691e3585557fb22",
            "patch": "@@ -29,38 +29,39 @@ TEST(HermesCanClient, init) {\n   CANCardParameter param;\n   param.set_brand(CANCardParameter::HERMES_CAN);\n   param.set_channel_id(CANCardParameter::CHANNEL_ID_ZERO);\n-  HermesCanClient hermes_can;\n-  EXPECT_TRUE(hermes_can.Init(param));\n-  //    EXPECT_EQ(hermes_can.Start(), ErrorCode::CAN_CLIENT_ERROR_BASE);\n-  //      EXPECT_EQ(hermes_can.Start(), ErrorCode::OK);\n+  std::unique_ptr<HermesCanClient> hermes_can =\n+      std::unique_ptr<HermesCanClient>(new HermesCanClient());\n+  EXPECT_TRUE(hermes_can.get()->Init(param));\n+  EXPECT_EQ(hermes_can.get()->Start(), ErrorCode::CAN_CLIENT_ERROR_BASE);\n+  // EXPECT_EQ(hermes_can.get()->Start(), ErrorCode::OK);\n }\n \n-/*\n TEST(HermesCanClient, send) {\n   CANCardParameter param;\n   param.set_brand(CANCardParameter::HERMES_CAN);\n-  param.set_channel_id(CANCardParameter::CHANNEL_ID_ZERO);\n-  HermesCanClient hermes_can;\n-  EXPECT_TRUE(hermes_can.Init(param));\n+  param.set_channel_id(CANCardParameter::CHANNEL_ID_ONE);\n+  std::unique_ptr<HermesCanClient> hermes_can =\n+      std::unique_ptr<HermesCanClient>(new HermesCanClient());\n+  EXPECT_TRUE(hermes_can.get()->Init(param));\n \n   // CanFrame can_frame[1];\n   std::vector<CanFrame> frames;\n   int32_t num = 0;\n \n-  CanFrame frame;\n-  frame.id = 0x60;\n-  frame.len = 8;\n-  frame.data[0] = 0;\n-  EXPECT_EQ(hermes_can.Send(frames, &num),\n+  // CanFrame frame;\n+  // frame.id = 0x60;\n+  // frame.len = 8;\n+  // frame.data[0] = 0;\n+  EXPECT_EQ(hermes_can.get()->Send(frames, &num),\n             ErrorCode::CAN_CLIENT_ERROR_SEND_FAILED);\n \n-  frames.push_back(frame);\n-  num = 1;\n-  EXPECT_EQ(hermes_can.Start(), ErrorCode::OK);\n-  EXPECT_EQ(hermes_can.Send(frames, &num), ErrorCode::OK);\n+  // frames.push_back(frame);\n+  // num = 1;\n+  // EXPECT_EQ(hermes_can.get()->Start(), ErrorCode::OK);\n+  // EXPECT_EQ(hermes_can.get()->Send(frames, &num), ErrorCode::OK);\n   frames.clear();\n }\n-\n+/*\n TEST(HermesCanClient, receiver) {\n   CANCardParameter param;\n   param.set_brand(CANCardParameter::HERMES_CAN);"
        }
    ],
    "ApolloAuto/apollo/11670": [
        {
            "sha": "9ea8f9d32276f033741db1c2e45daede65b0f9ff",
            "filename": "modules/prediction/common/road_graph.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/bfe42e631ab6027021c761425e8b9013e76ac711/modules%2Fprediction%2Fcommon%2Froad_graph.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/bfe42e631ab6027021c761425e8b9013e76ac711/modules%2Fprediction%2Fcommon%2Froad_graph.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fprediction%2Fcommon%2Froad_graph.cc?ref=bfe42e631ab6027021c761425e8b9013e76ac711",
            "patch": "@@ -251,7 +251,7 @@ void RoadGraph::ConstructLaneSequence(\n   // End condition: if search reached the maximum search distance,\n   // or if there is no more successor lane_segment.\n   if (search_forward_direction) {\n-    if (lane_segment.end_s() < lane_info_ptr->total_length() ||\n+    if (lane_segments->back().end_s() < lane_info_ptr->total_length() ||\n         lane_info_ptr->lane().successor_id().empty()) {\n       LaneSequence* sequence = lane_graph_ptr->add_lane_sequence();\n       for (const auto& it : *lane_segments) {\n@@ -261,7 +261,7 @@ void RoadGraph::ConstructLaneSequence(\n       return;\n     }\n   } else {\n-    if (lane_segment.start_s() > 0.0 ||\n+    if (lane_segments->front().start_s() > 0.0 ||\n         lane_info_ptr->lane().predecessor_id().empty()) {\n       LaneSequence* sequence = lane_graph_ptr->add_lane_sequence();\n       for (const auto& it : *lane_segments) {"
        }
    ],
    "ApolloAuto/apollo/11682": [
        {
            "sha": "9689c1c4966a8f8da59af12433799c0091e5cab6",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9eb18d40260ee6586343b01286b4b1642397a3a0/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9eb18d40260ee6586343b01286b4b1642397a3a0/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=9eb18d40260ee6586343b01286b4b1642397a3a0",
            "patch": "@@ -30,7 +30,7 @@ LOCAL_IMAGE=\"no\"\n FAST_BUILD_MODE=\"no\"\n FAST_TEST_MODE=\"no\"\n VERSION=\"\"\n-VERSION_X86_64=\"dev-x86_64-18.04-20200702_1651\"\n+VERSION_X86_64=\"dev-x86_64-18.04-20200706_2051\"\n VERSION_AARCH64=\"dev-aarch64-20170927_1111\"\n VERSION_OPT=\"\"\n NO_PULL_IMAGE=\"\""
        }
    ],
    "ApolloAuto/apollo/11752": [
        {
            "sha": "010466aa7c6db96525a4b11659a606fc6b9d96c4",
            "filename": "modules/canbus/proto/BUILD",
            "status": "modified",
            "additions": 21,
            "deletions": 21,
            "changes": 42,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/513d04242f62056cde7a5863be68e32961d82b84/modules%2Fcanbus%2Fproto%2FBUILD",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/513d04242f62056cde7a5863be68e32961d82b84/modules%2Fcanbus%2Fproto%2FBUILD",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcanbus%2Fproto%2FBUILD?ref=513d04242f62056cde7a5863be68e32961d82b84",
            "patch": "@@ -5,6 +5,24 @@ load(\"//tools:python_rules.bzl\", \"py_proto_library\")\n \n package(default_visibility = [\"//visibility:public\"])\n \n+cc_proto_library(\n+    name = \"devkit_cc_proto\",\n+    deps = [\n+        \":devkit_proto\",\n+    ],\n+)\n+\n+proto_library(\n+    name = \"devkit_proto\",\n+    srcs = [\"devkit.proto\"],\n+)\n+\n+py_proto_library(\n+    name = \"devkit_py_pb2\",\n+    deps = [\n+        \":devkit_proto\",\n+    ],\n+)\n cc_proto_library(\n     name = \"chassis_cc_proto\",\n     deps = [\n@@ -54,25 +72,6 @@ py_proto_library(\n         \":ch_proto\",\n     ],\n )\n-cc_proto_library(\n-    name = \"devkit_cc_proto\",\n-    deps = [\n-        \":devkit_proto\",\n-    ],\n-)\n-\n-proto_library(\n-    name = \"devkit_proto\",\n-    srcs = [\"devkit.proto\"],\n-)\n-\n-python_proto_library(\n-    name = \"devkit_py_pb2\",\n-    deps = [\n-        \":devkit_proto\",\n-    ],\n-)\n-\n cc_proto_library(\n     name = \"zhongyun_cc_proto\",\n     deps = [\n@@ -226,13 +225,13 @@ proto_library(\n     deps = [\n         \"//modules/common/configs/proto:vehicle_config_proto\",\n         \":chassis_proto\",\n+        \":ch_proto\",\n         \":devkit_proto\",\n         \":ge3_proto\",\n         \":lexus_proto\",\n         \":transit_proto\",\n         \":wey_proto\",\n         \":zhongyun_proto\",\n-        \":ch_proto\",\n     ],\n )\n \n@@ -242,12 +241,13 @@ py_proto_library(\n         \":chassis_detail_proto\",\n         \"//modules/common/configs/proto:vehicle_config_py_pb2\",\n         \":chassis_py_pb2\",\n+        \":ch_py_pb2\",\n+        \":devkit_py_pb2\",\n         \":ge3_py_pb2\",\n         \":lexus_py_pb2\",\n         \":transit_py_pb2\",\n         \":wey_py_pb2\",\n         \":zhongyun_py_pb2\",\n-        \":ch_py_pb2\",\n     ],\n )\n "
        }
    ],
    "ApolloAuto/apollo/11755": [
        {
            "sha": "e1a6ba623364579d608e5577ff783009452a66ec",
            "filename": "modules/drivers/audio/README",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f24c4a66b6b8e10b948234239dcc89370c214787/modules%2Fdrivers%2Faudio%2FREADME",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f24c4a66b6b8e10b948234239dcc89370c214787/modules%2Fdrivers%2Faudio%2FREADME",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdrivers%2Faudio%2FREADME?ref=f24c4a66b6b8e10b948234239dcc89370c214787",
            "patch": "@@ -1 +1 @@\n-This serves as the audio dirver folder\n+This serves as the audio driver folder"
        }
    ],
    "ApolloAuto/apollo/11770": [
        {
            "sha": "e903726077cf57c8187fa143c0d37d214a14b41b",
            "filename": "modules/localization/rtk/BUILD",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d58c94774d76bce1c74b837f416aa5703413285a/modules%2Flocalization%2Frtk%2FBUILD",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d58c94774d76bce1c74b837f416aa5703413285a/modules%2Flocalization%2Frtk%2FBUILD",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Frtk%2FBUILD?ref=d58c94774d76bce1c74b837f416aa5703413285a",
            "patch": "@@ -1,4 +1,4 @@\n-load(\"@rules_cc//cc:defs.bzl\", \"cc_library\", \"cc_test\")\n+load(\"@rules_cc//cc:defs.bzl\", \"cc_binary\", \"cc_library\", \"cc_test\")\n load(\"//tools:cpplint.bzl\", \"cpplint\")\n \n package(default_visibility = [\"//visibility:public\"])\n@@ -34,9 +34,9 @@ cc_library(\n     ],\n )\n \n-cc_library(\n+cc_binary(\n     name = \"librtk_localization_component.so\",\n-    linkopts = [\"-shared\"],\n+    linkshared = True,\n     linkstatic = False,\n     deps = [\":rtk_localization_component_lib\"],\n )"
        }
    ],
    "ApolloAuto/apollo/11823": [
        {
            "sha": "2358f6048fbec6376e6e364a43a3a2ffa08e48f6",
            "filename": "cyber/timer/timing_wheel.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2e56512bdc1b1e3250843b3c7f32a6e0cedb31f9/cyber%2Ftimer%2Ftiming_wheel.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2e56512bdc1b1e3250843b3c7f32a6e0cedb31f9/cyber%2Ftimer%2Ftiming_wheel.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftimer%2Ftiming_wheel.cc?ref=2e56512bdc1b1e3250843b3c7f32a6e0cedb31f9",
            "patch": "@@ -51,7 +51,7 @@ void TimingWheel::Tick() {\n         ADEBUG << \"index: \" << current_work_wheel_index_\n                << \" timer id: \" << task->timer_id_;\n         auto callback = task->callback;\n-        cyber::Async([this, callback] {\n+        cyber::Async([this, &callback] {\n           if (this->running_) {\n             callback();\n           }"
        }
    ],
    "ApolloAuto/apollo/11834": [
        {
            "sha": "ce4b57a7176ee3d4f97f26248db1259c0b5f6fb1",
            "filename": "docs/specs/D-kit/Waypoint_Following/Start_Waypoint_Following_cn.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9dbc61414ced8068124b5b521939bc8efd6a6c5b/docs%2Fspecs%2FD-kit%2FWaypoint_Following%2FStart_Waypoint_Following_cn.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9dbc61414ced8068124b5b521939bc8efd6a6c5b/docs%2Fspecs%2FD-kit%2FWaypoint_Following%2FStart_Waypoint_Following_cn.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2FD-kit%2FWaypoint_Following%2FStart_Waypoint_Following_cn.md?ref=9dbc61414ced8068124b5b521939bc8efd6a6c5b",
            "patch": "@@ -171,7 +171,7 @@ enable_sender_log: true\n \n - \u5f00\u59cb\u56de\u653e\n \n-    bash rtk_play.sh start\n+    bash rtk_player.sh start\n \n **\u8fd9\u4e2a\u547d\u4ee4\u6572\u5b8c\u56de\u8f66\u540e\uff0c\u8f66\u8fd8\u4e0d\u4f1a\u8fdb\u5165\u81ea\u52a8\u9a7e\u9a76**\uff0c\u8fd9\u4e00\u6b65\u53ea\u662f\u628a\u5faa\u8ff9\u6570\u636e\u653e\u51fa\u6765\uff0c\u5982\u679c\u8f66\u8f86\u6ca1\u6709\u524d\u8fdb\uff0c\u5219\u4f1a\u4e0d\u65ad`replan`\uff0c\u6b64\u65f6\u547d\u4ee4\u884c\u4e2d\u4f1a\u6709log\u4e0d\u505c\u5237\u5c4f\uff0c\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5faa\u8ff9\u65f6\uff0c\u5148\u68c0\u67e5`dreamview`\u662f\u5426\u6709\u6e05\u6670\u65e0\u6bdb\u523a\u7684\u84dd\u8272\u89c4\u5212\u8f68\u8ff9\uff0c\u8bf7\u786e\u8ba4\u8f68\u8ff9\u662f\u5426\u4e0e\u671f\u671b\u7684\u5927\u81f4\u76f8\u7b26\uff0c\u5982\u679c\u76f8\u5dee\u5f88\u5927\uff0c\u6bd4\u5982\u672c\u6765\u5f55\u5236\u7684\u662f\u76f4\u884c\uff0c\u800c\u84dd\u8272\u8f68\u8ff9\u663e\u793a\u7684\u5927\u5e45\u5ea6\u8f6c\u5f2f\uff0c\u6b64\u65f6\u8981\u5c0f\u5fc3\u6d4b\u8bd5\uff0c\u8c28\u9632\u5371\u9669\u3002\n "
        }
    ],
    "ApolloAuto/apollo/11835": [
        {
            "sha": "8353009744dcccd8526421206a3ac06034aed384",
            "filename": "cyber/timer/timing_wheel.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c28dc32ad54cdaca6d38c8417bf31838279e9ec9/cyber%2Ftimer%2Ftiming_wheel.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c28dc32ad54cdaca6d38c8417bf31838279e9ec9/cyber%2Ftimer%2Ftiming_wheel.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftimer%2Ftiming_wheel.cc?ref=c28dc32ad54cdaca6d38c8417bf31838279e9ec9",
            "patch": "@@ -50,10 +50,11 @@ void TimingWheel::Tick() {\n       if (task) {\n         ADEBUG << \"index: \" << current_work_wheel_index_\n                << \" timer id: \" << task->timer_id_;\n-        auto callback = task->callback;\n-        cyber::Async([this, &callback] {\n+        auto* callback =\n+            reinterpret_cast<std::function<void()>*>(&(task->callback));\n+        cyber::Async([this, callback] {\n           if (this->running_) {\n-            callback();\n+            (*callback)();\n           }\n         });\n       }"
        }
    ],
    "ApolloAuto/apollo/11852": [
        {
            "sha": "d4aeda8be7dc5d47262d2579fe797880c0586eb4",
            "filename": "scripts/docker_start_user.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d3619c86f41c9ccbf1dfd169df23e70c8d0b529b/scripts%2Fdocker_start_user.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d3619c86f41c9ccbf1dfd169df23e70c8d0b529b/scripts%2Fdocker_start_user.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fdocker_start_user.sh?ref=d3619c86f41c9ccbf1dfd169df23e70c8d0b529b",
            "patch": "@@ -55,7 +55,7 @@ function setup_user_account_if_not_exist() {\n     local uid=\"$2\"\n     local group_name=\"$3\"\n     local gid=\"$4\"\n-    if grep -q \"${user_name}\" /etc/passwd; then\n+    if grep -q \"^${user_name}:\" /etc/passwd; then\n         echo \"User ${user_name} already exist. Skip setting user account.\"\n         return\n     fi"
        }
    ],
    "ApolloAuto/apollo/11862": [
        {
            "sha": "19ea5389b29357001793b0e1beb44d3476c8ad4c",
            "filename": "docker/build/installers/install_vtk.sh",
            "status": "modified",
            "additions": 7,
            "deletions": 2,
            "changes": 9,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/808d8d034ad3a42f2dc939b7e77cc49707df60d0/docker%2Fbuild%2Finstallers%2Finstall_vtk.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/808d8d034ad3a42f2dc939b7e77cc49707df60d0/docker%2Fbuild%2Finstallers%2Finstall_vtk.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fbuild%2Finstallers%2Finstall_vtk.sh?ref=808d8d034ad3a42f2dc939b7e77cc49707df60d0",
            "patch": "@@ -26,6 +26,8 @@ if ldconfig -p | grep -q libvtkCommonCore ; then\n     exit 0\n fi\n \n+TARGET_ARCH=\"$(uname -m)\"\n+\n # Note(storypku):\n #   Although vtk are shipped with Ubuntu distribution, we decide to build VTK\n #   from source here to avoid massive amount of system dependency.\n@@ -48,8 +50,11 @@ pushd VTK-${VERSION}\n         -DBUILD_SHARED_LIBS=ON \\\n         -DCMAKE_INSTALL_PREFIX=\"${SYSROOT_DIR}\" \\\n         -DCMAKE_BUILD_TYPE=Release\n-\n-    make -j${THREAD_NUM}\n+    thread_num=\"$(nproc)\"\n+    if [ \"${TARGET_ARCH}\" = \"aarch64\" ]; then\n+        thread_num=$(( thread_num / 2 ))\n+    fi\n+    make -j${thread_num}\n     make install\n popd\n "
        }
    ],
    "ApolloAuto/apollo/11914": [
        {
            "sha": "6ef809caca21a4244767f98d05a4c730ef8338b6",
            "filename": "modules/planning/common/trajectory_evaluator.cc",
            "status": "modified",
            "additions": 5,
            "deletions": 15,
            "changes": 20,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4b04622037387860f3cbc31cd6dfbb5a01c86554/modules%2Fplanning%2Fcommon%2Ftrajectory_evaluator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4b04622037387860f3cbc31cd6dfbb5a01c86554/modules%2Fplanning%2Fcommon%2Ftrajectory_evaluator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Ftrajectory_evaluator.cc?ref=4b04622037387860f3cbc31cd6dfbb5a01c86554",
            "patch": "@@ -78,20 +78,10 @@ void TrajectoryEvaluator::EvaluateTrajectoryByTime(\n     last_relative_time = tp.relative_time();\n   }\n \n-  int low_bound = 0;\n-  int high_bound = 0;\n-  if (updated_trajectory.size() == 1) {\n-    const double single_point_relative_time =\n-        updated_trajectory.front().relative_time();\n-    if (single_point_relative_time > 0) {\n-      high_bound = floor(single_point_relative_time / delta_time);\n-    } else {\n-      low_bound = ceil(single_point_relative_time / delta_time);\n-    }\n-  } else {\n-    low_bound = ceil(updated_trajectory.front().relative_time() / delta_time);\n-    high_bound = floor(updated_trajectory.back().relative_time() / delta_time);\n-  }\n+  const int low_bound =\n+      ceil(updated_trajectory.front().relative_time() / delta_time);\n+  const int high_bound =\n+      floor(updated_trajectory.back().relative_time() / delta_time);\n   ADEBUG << \"frame_num[\" << frame_num << \"] obstacle_id[\" << obstacle_id\n          << \"] low[\" << low_bound << \"] high[\" << high_bound << \"]\";\n   for (int i = low_bound; i <= high_bound; ++i) {\n@@ -280,7 +270,7 @@ void TrajectoryEvaluator::EvaluateObstacleTrajectory(\n \n     std::vector<TrajectoryPointFeature> evaluated_trajectory;\n     if (fabs(trajectory.front().first - start_point_timestamp_sec) <=\n-        delta_time) {\n+        delta_time || trajectory.size() == 1) {\n       ADEBUG << \"too short obstacle_trajectory. frame_num[\"\n              << learning_data_frame->frame_num() << \"] obstacle_id[\"\n              << obstacle_id << \"] size[\" << trajectory.size()"
        }
    ],
    "ApolloAuto/apollo/11917": [
        {
            "sha": "18a0c0267b91166a69104fd1c37656a4c17e2f2b",
            "filename": "modules/localization/msf/local_integ/localization_integ_process.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ac882766cfc44619cafe3375dffc9e6c785869cd/modules%2Flocalization%2Fmsf%2Flocal_integ%2Flocalization_integ_process.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ac882766cfc44619cafe3375dffc9e6c785869cd/modules%2Flocalization%2Fmsf%2Flocal_integ%2Flocalization_integ_process.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Flocal_integ%2Flocalization_integ_process.cc?ref=ac882766cfc44619cafe3375dffc9e6c785869cd",
            "patch": "@@ -105,7 +105,7 @@ void LocalizationIntegProcess::RawImuProcess(const ImuData &imu_msg) {\n   double cur_system_time = Clock::NowInSeconds();\n   static double pre_system_time = cur_system_time;\n \n-  double delta_system_time = cur_system_time - pre_imu_time;\n+  double delta_system_time = cur_system_time - pre_system_time;\n   if (delta_system_time > 0.1) {\n     AERROR << std::setprecision(16)\n            << \"the imu message loss more than 10 according to system time, \"\n@@ -147,6 +147,7 @@ void LocalizationIntegProcess::RawImuProcess(const ImuData &imu_msg) {\n   }\n \n   pre_imu_time = cur_imu_time;\n+  pre_system_time = cur_system_time;\n }\n \n void LocalizationIntegProcess::GetValidFromOK() {"
        }
    ],
    "ApolloAuto/apollo/11940": [
        {
            "sha": "2297f82410488ae7ec406792afd09060ff040367",
            "filename": "modules/planning/learning_based/img_feature_renderer/birdview_img_feature_renderer.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/933a321ed4285260ff0980aef569a78bb4ed754e/modules%2Fplanning%2Flearning_based%2Fimg_feature_renderer%2Fbirdview_img_feature_renderer.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/933a321ed4285260ff0980aef569a78bb4ed754e/modules%2Fplanning%2Flearning_based%2Fimg_feature_renderer%2Fbirdview_img_feature_renderer.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Flearning_based%2Fimg_feature_renderer%2Fbirdview_img_feature_renderer.cc?ref=933a321ed4285260ff0980aef569a78bb4ed754e",
            "patch": "@@ -288,7 +288,7 @@ bool BirdviewImgFeatureRenderer::RenderEgoCurrentBox(\n     color = gray_scale;\n   }\n   const auto& param = ego_vehicle_config_.vehicle_param();\n-  const std::vector<cv::Point2i> box_corner_points =\n+  std::vector<cv::Point2i> box_corner_points =\n       GetAffinedBoxImgIdx(0.0, 0.0, M_PI_2,\n                           {\n                               std::make_pair(param.front_edge_to_center(),\n@@ -368,7 +368,7 @@ bool BirdviewImgFeatureRenderer::RenderObsPastBox(\n       gradual_change_color =\n           color * (1 - relative_time / config_.max_obs_past_horizon());\n       const auto& path_point = traj_point.trajectory_point().path_point();\n-      const std::vector<cv::Point2i> box_corner_points = GetAffinedBoxImgIdx(\n+      std::vector<cv::Point2i> box_corner_points = GetAffinedBoxImgIdx(\n           path_point.x(), path_point.y(), M_PI_2 + path_point.theta(),\n           {\n               std::make_pair(obstacle_box_length / 2, obstacle_box_width / 2),\n@@ -415,7 +415,7 @@ bool BirdviewImgFeatureRenderer::RenderObsFutureBox(\n               past_traj_points_size - 1);\n       const auto& path_point =\n           last_past_traj_point.trajectory_point().path_point();\n-      const std::vector<cv::Point2i> box_corner_points = GetAffinedBoxImgIdx(\n+      std::vector<cv::Point2i> box_corner_points = GetAffinedBoxImgIdx(\n           path_point.x(), path_point.y(), M_PI_2 + path_point.theta(),\n           {\n               std::make_pair(obstacle_box_length / 2, obstacle_box_width / 2),\n@@ -461,7 +461,7 @@ bool BirdviewImgFeatureRenderer::RenderObsFutureBox(\n       gradual_change_color =\n           color * relative_time / config_.max_obs_past_horizon();\n       const auto& path_point = traj_point.trajectory_point().path_point();\n-      const std::vector<cv::Point2i> box_corner_points = GetAffinedBoxImgIdx(\n+      std::vector<cv::Point2i> box_corner_points = GetAffinedBoxImgIdx(\n           path_point.x(), path_point.y(), M_PI_2 + path_point.theta(),\n           {\n               std::make_pair(obstacle_box_length / 2, obstacle_box_width / 2),"
        }
    ],
    "ApolloAuto/apollo/11999": [
        {
            "sha": "13978cad80998fb8679726d1fabd5919da365f42",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3c94cb3f9409e2d32f4336c2361b53139f0c6cd8/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3c94cb3f9409e2d32f4336c2361b53139f0c6cd8/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=3c94cb3f9409e2d32f4336c2361b53139f0c6cd8",
            "patch": "@@ -118,10 +118,10 @@ function set_registry_mirrors() {\n }\n \n function init() {\n-    source ${APOLLO_ROOT_DIR}/scripts/apollo_base.sh\n     if [ \"$(readlink -f /apollo)\" != \"${APOLLO_ROOT_DIR}\" ]; then\n         sudo ln -snf ${APOLLO_ROOT_DIR} /apollo\n     fi\n+    source ${APOLLO_ROOT_DIR}/scripts/apollo_base.sh\n \n     if [ -e /proc/sys/kernel ]; then\n         echo \"/apollo/data/core/core_%e.%p\" | sudo tee /proc/sys/kernel/core_pattern > /dev/null"
        }
    ],
    "ApolloAuto/apollo/12020": [
        {
            "sha": "fed6d55114d26a6453e1f77a63f17d8e3a9fd89d",
            "filename": "modules/common/util/perf_util.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/dd20dddfceb2a331f2474b7d153ae984e962e9c2/modules%2Fcommon%2Futil%2Fperf_util.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/dd20dddfceb2a331f2474b7d153ae984e962e9c2/modules%2Fcommon%2Futil%2Fperf_util.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Futil%2Fperf_util.cc?ref=dd20dddfceb2a331f2474b7d153ae984e962e9c2",
            "patch": "@@ -40,6 +40,9 @@ namespace util {\n std::string function_signature(const std::string& func_name,\n                                const std::string& indicator) {\n   auto simplified_name = func_name_simplified(func_name);\n+  if (indicator.empty()) {\n+    return simplified_name;\n+  }\n   return absl::StrCat(indicator, \"_\", simplified_name);\n }\n "
        }
    ],
    "ApolloAuto/apollo/12022": [
        {
            "sha": "15878d43b1a6c2d3fc87997c3a256078c5116570",
            "filename": "modules/planning/common/message_process.cc",
            "status": "modified",
            "additions": 15,
            "deletions": 3,
            "changes": 18,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c11dd4f7a731b55cbdc82a815975355bffe7ec06/modules%2Fplanning%2Fcommon%2Fmessage_process.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c11dd4f7a731b55cbdc82a815975355bffe7ec06/modules%2Fplanning%2Fcommon%2Fmessage_process.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Fmessage_process.cc?ref=c11dd4f7a731b55cbdc82a815975355bffe7ec06",
            "patch": "@@ -656,8 +656,8 @@ bool MessageProcess::GenerateLocalRoutingPassages(\n \n   /* debug\n   for (size_t i = 0; i < road_lengths.size(); ++i) {\n-    AERROR << i << \": \" << road_lengths[i].first << \"; \" <<\n-  road_lengths[i].second;\n+    AERROR << i << \": \" << road_lengths[i].first << \"; \"\n+           << road_lengths[i].second;\n   }\n   */\n \n@@ -719,10 +719,16 @@ bool MessageProcess::GenerateLocalRoutingPassages(\n     for (int j = 0; j < road.passage(i).segment_size(); ++j) {\n       const auto& segment = road.passage(i).segment(j);\n       road_s += (segment.end_s() - segment.start_s());\n-      if (road_s > local_routing_start_road_s) {\n+      if (road_s >= local_routing_start_road_s) {\n+        ADEBUG << \"INIT: passage[\" << i << \"] seg[\" << j\n+               << \"] road_s[\" << road_s << \"] id[\" << segment.id()\n+               << \"] length[\" << segment.end_s() - segment.start_s() << \"]\";\n         local_routing_passage.push_back(\n             std::make_pair(segment.id(), segment.end_s() - segment.start_s()));\n       }\n+      if (road_s > local_routing_end_road_s) {\n+        break;\n+      }\n     }\n     local_routing_passages->push_back(local_routing_passage);\n   }\n@@ -736,6 +742,7 @@ bool MessageProcess::GenerateLocalRoutingPassages(\n     const size_t local_routing_passages_size = local_routing_passages->size();\n     for (int j = 1; j < routing_response_.road(i).passage_size(); ++j) {\n       for (size_t p = 0; p < local_routing_passages_size; ++p) {\n+        ADEBUG << \"GROW: passage[\" << j << \"]\";\n         local_routing_passages->push_back((*local_routing_passages)[p]);\n       }\n     }\n@@ -756,6 +763,9 @@ bool MessageProcess::GenerateLocalRoutingPassages(\n         }\n \n         for (auto& routing_passage : *local_routing_passages) {\n+          ADEBUG << \"ADD road[\" << j << \"] passage[\" << k\n+                 << \"] id[\" << lane_segment.id() << \"] length[\"\n+                 << lane_segment.end_s() - lane_segment.start_s();\n           routing_passage.push_back(\n               std::make_pair(lane_segment.id(),\n                              lane_segment.end_s() - lane_segment.start_s()));\n@@ -814,6 +824,8 @@ void MessageProcess::GenerateRoutingFeature(\n       routing->add_local_routing_lane_id(lane_segment.first);\n     }\n   }\n+  ADEBUG << \"local_routing: frame_num[\" << learning_data_frame->frame_num()\n+         << \"] size[\" << routing->local_routing_lane_id_size() << \"]\";\n }\n \n void MessageProcess::GenerateTrafficLightDetectionFeature("
        }
    ],
    "ApolloAuto/apollo/12047": [
        {
            "sha": "5e5ff8456b4c3b7528d3da99795a231e77db13fe",
            "filename": "modules/drivers/canbus/can_client/socket/socket_can_client_raw.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/75229a16674ce34e5102d965b6b55ac552418e99/modules%2Fdrivers%2Fcanbus%2Fcan_client%2Fsocket%2Fsocket_can_client_raw.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/75229a16674ce34e5102d965b6b55ac552418e99/modules%2Fdrivers%2Fcanbus%2Fcan_client%2Fsocket%2Fsocket_can_client_raw.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdrivers%2Fcanbus%2Fcan_client%2Fsocket%2Fsocket_can_client_raw.cc?ref=75229a16674ce34e5102d965b6b55ac552418e99",
            "patch": "@@ -79,8 +79,8 @@ ErrorCode SocketCanClientRaw::Start() {\n \n   // 1. for non virtual busses, set receive message_id filter, ie white list\n   if (interface_ != CANCardParameter::VIRTUAL) {\n-    struct can_filter filter[2048];\n-    for (int i = 0; i < 2048; ++i) {\n+    struct can_filter filter[512];\n+    for (int i = 0; i < 512; ++i) {\n       filter[i].can_id = 0x000 + i;\n       filter[i].can_mask = CAN_SFF_MASK;\n     }"
        }
    ],
    "ApolloAuto/apollo/12084": [
        {
            "sha": "45ca90be21d5dbee3bc87995f8c3fd858692048e",
            "filename": "modules/control/control_component.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9a8b56a896f57d389df7fc365b27c8ef7ce3d03f/modules%2Fcontrol%2Fcontrol_component.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9a8b56a896f57d389df7fc365b27c8ef7ce3d03f/modules%2Fcontrol%2Fcontrol_component.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcontrol%2Fcontrol_component.cc?ref=9a8b56a896f57d389df7fc365b27c8ef7ce3d03f",
            "patch": "@@ -398,7 +398,8 @@ bool ControlComponent::Proc() {\n   const double time_diff_ms = absl::ToDoubleMilliseconds(end_time - start_time);\n   control_command.mutable_latency_stats()->set_total_time_ms(time_diff_ms);\n   control_command.mutable_latency_stats()->set_total_time_exceeded(\n-      time_diff_ms > control_conf_.control_period());\n+      time_diff_ms > absl::ToDoubleMilliseconds(\n+                         absl::Seconds(control_conf_.control_period())));\n   ADEBUG << \"control cycle time is: \" << time_diff_ms << \" ms.\";\n   status.Save(control_command.mutable_header()->mutable_status());\n "
        }
    ],
    "ApolloAuto/apollo/12110": [
        {
            "sha": "f32c2c302695bbacac4bd724528615abfd57de9a",
            "filename": "modules/common/data/global_flagfile.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/81c479c6e887f9a2c7b659ba58d935d205127d1d/modules%2Fcommon%2Fdata%2Fglobal_flagfile.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/81c479c6e887f9a2c7b659ba58d935d205127d1d/modules%2Fcommon%2Fdata%2Fglobal_flagfile.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcommon%2Fdata%2Fglobal_flagfile.txt?ref=81c479c6e887f9a2c7b659ba58d935d205127d1d",
            "patch": "@@ -11,7 +11,7 @@\n \n --use_navigation_mode=false\n \n---map_dir=/apollo/modules/map/data/sunnyvale\n+--map_dir=/apollo/modules/map/data/sunnyvale_loop\n \n --use_sim_time=false\n "
        }
    ],
    "ApolloAuto/apollo/12118": [
        {
            "sha": "3d850c033c032f3eef8dafad022cc318b5c19839",
            "filename": "modules/perception/production/dag/dag_streaming_perception_lgsvl.dag",
            "status": "modified",
            "additions": 7,
            "deletions": 7,
            "changes": 14,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3fdf9b202f4e65bb1fcd86f958a12affd8946269/modules%2Fperception%2Fproduction%2Fdag%2Fdag_streaming_perception_lgsvl.dag",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3fdf9b202f4e65bb1fcd86f958a12affd8946269/modules%2Fperception%2Fproduction%2Fdag%2Fdag_streaming_perception_lgsvl.dag",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fproduction%2Fdag%2Fdag_streaming_perception_lgsvl.dag?ref=3fdf9b202f4e65bb1fcd86f958a12affd8946269",
            "patch": "@@ -2,10 +2,10 @@ module_config {\n   module_library : \"/apollo/bazel-bin/modules/perception/onboard/component/libperception_component_lidar.so\"\n \n  components {\n-    class_name : \"SegmentationComponent\"\n+    class_name : \"DetectionComponent\"\n     config {\n-      name: \"Velodyne128Segmentation\"\n-      config_file_path: \"/apollo/modules/perception/production/conf/perception/lidar/velodyne128_segmentation_conf_lgsvl.pb.txt\"\n+      name: \"Velodyne128Detection\"\n+      config_file_path: \"/apollo/modules/perception/production/conf/perception/lidar/velodyne128_detection_conf.pb.txt\"\n       flag_file_path: \"/apollo/modules/perception/production/conf/perception/perception_common.flag\"\n       readers {\n           channel: \"/apollo/sensor/lidar128/compensator/PointCloud2\"\n@@ -14,10 +14,10 @@ module_config {\n   }\n \n  components {\n-    class_name : \"SegmentationComponent\"\n+    class_name : \"DetectionComponent\"\n     config {\n-      name: \"Velodyne16Segmentation\"\n-      config_file_path: \"/apollo/modules/perception/production/conf/perception/lidar/velodyne16_segmentation_conf.pb.txt\"\n+      name: \"Velodyne16Detection\"\n+      config_file_path: \"/apollo/modules/perception/production/conf/perception/lidar/velodyne16_detection_conf.pb.txt\"\n       readers {\n           channel: \"/apollo/sensor/lidar16/compensator/PointCloud2\"\n         }\n@@ -30,7 +30,7 @@ module_config {\n       name: \"RecognitionComponent\"\n       config_file_path: \"/apollo/modules/perception/production/conf/perception/lidar/recognition_conf.pb.txt\"\n       readers {\n-          channel: \"/perception/inner/SegmentationObjects\"\n+          channel: \"/perception/inner/DetectionObjects\"\n         }\n     }\n   }"
        }
    ],
    "ApolloAuto/apollo/12120": [
        {
            "sha": "a1e66e35a12574caa1134ef839b79e023dd4b7a8",
            "filename": ".teamcity/run_ci.sh",
            "status": "modified",
            "additions": 15,
            "deletions": 4,
            "changes": 19,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/83de3b58306e1ffbc07ca8c71e6d4f0d09969bc1/.teamcity%2Frun_ci.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/83de3b58306e1ffbc07ca8c71e6d4f0d09969bc1/.teamcity%2Frun_ci.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/.teamcity%2Frun_ci.sh?ref=83de3b58306e1ffbc07ca8c71e6d4f0d09969bc1",
            "patch": "@@ -165,7 +165,14 @@ function docker_pull() {\n     fi\n }\n \n-function restart_map_volume_if_needed() {\n+function docker_start_volume() {\n+    local container=\"$1\"\n+    local image=\"$2\"\n+    docker_pull \"${image}\"\n+    docker run -id --rm --name \"${container}\" \"${image}\"\n+}\n+\n+function start_map_volume() {\n     local map_name=\"$1\"\n     local map_version=\"$2\"\n     local map_volume=\"apollo_map_volume-${map_name}_${USER}\"\n@@ -179,6 +186,7 @@ function restart_map_volume_if_needed() {\n             map_image=\"${DOCKER_REPO}:map_volume-${map_name}-${map_version}\"\n         fi\n         info \"Load map ${map_name} from image: ${map_image}\"\n+        docker_start_volume \"${map_volume}\" \"${map_image}\"\n         MAP_VOLUME_CONF=\"${MAP_VOLUME_CONF} --volumes-from ${map_volume}\"\n     fi\n }\n@@ -187,11 +195,11 @@ function mount_map_volumes() {\n     info \"Starting mounting map volumes ...\"\n     if [ \"$FAST_MODE\" = \"no\" ]; then\n         for map_name in ${DEFAULT_MAPS[@]}; do\n-            restart_map_volume_if_needed ${map_name} \"${VOLUME_VERSION}\"\n+            start_map_volume ${map_name} \"${VOLUME_VERSION}\"\n         done\n     else\n         for map_name in ${DEFAULT_TEST_MAPS[@]}; do\n-            restart_map_volume_if_needed \"${map_name}\" \"${VOLUME_VERSION}\"\n+            start_map_volume \"${map_name}\" \"${VOLUME_VERSION}\"\n         done\n     fi\n }\n@@ -203,17 +211,20 @@ function mount_other_volumes() {\n         # YOLO3D\n         local yolo3d_volume=\"apollo_yolo3d_volume_${USER}\"\n         local yolo3d_image=\"${DOCKER_REPO}:yolo3d_volume-${TARGET_ARCH}-latest\"\n+        docker_start_volume \"${yolo3d_volume}\" \"${yolo3d_image}\"\n         volume_conf=\"${volume_conf} --volumes-from ${yolo3d_volume}\"\n     fi\n \n     # LOCALIZATION\n     local localization_volume=\"apollo_localization_volume_${USER}\"\n     local localization_image=\"${DOCKER_REPO}:localization_volume-${TARGET_ARCH}-latest\"\n+    docker_start_volume \"${localization_volume}\" \"${localization_image}\"\n     volume_conf=\"${volume_conf} --volumes-from ${localization_volume}\"\n \n     if [ \"${TARGET_ARCH}\" = \"x86_64\" ]; then\n         local local_3rdparty_volume=\"apollo_local_third_party_volume_${USER}\"\n         local local_3rdparty_image=\"${DOCKER_REPO}:local_third_party_volume-${TARGET_ARCH}-latest\"\n+        docker_start_volume \"${local_3rdparty_volume}\" \"${local_3rdparty_image}\"\n         volume_conf=\"${volume_conf} --volumes-from ${local_3rdparty_volume}\"\n     fi\n \n@@ -241,7 +252,7 @@ function main() {\n     mount_other_volumes\n     set -x\n \n-    ${DOCKER_RUN} -it --rm   \\\n+    ${DOCKER_RUN} -i --rm   \\\n         --privileged    \\\n         -e NVIDIA_VISIBLE_DEVICES=all \\\n         -e NVIDIA_DRIVER_CAPABILITIES=compute,video,graphics,utility \\"
        }
    ],
    "ApolloAuto/apollo/12137": [
        {
            "sha": "ba28cda50ce8a0ed18ffb9d0ee1a3256dbb8c0c4",
            "filename": "scripts/plot_trace.sh",
            "status": "modified",
            "additions": 3,
            "deletions": 6,
            "changes": 9,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f019310110a82300a4893a61670e5716d4f08a32/scripts%2Fplot_trace.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f019310110a82300a4893a61670e5716d4f08a32/scripts%2Fplot_trace.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fplot_trace.sh?ref=f019310110a82300a4893a61670e5716d4f08a32",
            "patch": "@@ -16,10 +16,7 @@\n # limitations under the License.\n ###############################################################################\n \n+TOP_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/..\" && pwd -P)\"\n+source \"${TOP_DIR}/scripts/apollo_base.sh\"\n \n-DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n-\n-cd \"${DIR}/..\"\n-source \"${DIR}/apollo_base.sh\"\n-\n-python ./modules/tools/plot_trace/plot_trace.py $@\n+${TOP_DIR}/bazel-bin/modules/tools/plot_trace/plot_trace \"$@\""
        }
    ],
    "ApolloAuto/apollo/12154": [
        {
            "sha": "5715cf5fd7187902b742e4f000ab40f064980b24",
            "filename": "modules/planning/common/message_process.cc",
            "status": "modified",
            "additions": 0,
            "deletions": 4,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ebadd344918d659a273933db081b67d1f6bc5869/modules%2Fplanning%2Fcommon%2Fmessage_process.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ebadd344918d659a273933db081b67d1f6bc5869/modules%2Fplanning%2Fcommon%2Fmessage_process.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fcommon%2Fmessage_process.cc?ref=ebadd344918d659a273933db081b67d1f6bc5869",
            "patch": "@@ -136,10 +136,6 @@ void MessageProcess::OnLocalization(const LocalizationEstimate& le) {\n   if (time_diff < 1.0 / FLAGS_planning_loop_rate) {\n     // for RL_TEST, skip this check so that first frame can proceed\n     if (planning_config_.learning_mode() != PlanningConfig::RL_TEST) {\n-      AERROR << \"time_diff [\" << time_diff\n-             << \"] between current and last received\"\n-                \" localization msg smaller than planning component interval [\"\n-             << 1.0 / FLAGS_planning_loop_rate << \"]\";\n       return;\n     }\n   }"
        }
    ],
    "ApolloAuto/apollo/12158": [
        {
            "sha": "83e046a8fa4ed58579c50b2f70edb2be618a5543",
            "filename": "modules/dreamview/conf/hmi_modes/mkz_standard_debug.pb.txt",
            "status": "modified",
            "additions": 0,
            "deletions": 6,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/890a9e7353924dc5fd23c766c4deb48e2b8340a6/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Fmkz_standard_debug.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/890a9e7353924dc5fd23c766c4deb48e2b8340a6/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Fmkz_standard_debug.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Fmkz_standard_debug.pb.txt?ref=890a9e7353924dc5fd23c766c4deb48e2b8340a6",
            "patch": "@@ -89,12 +89,6 @@ cyber_modules {\n     dag_files: \"/apollo/modules/drivers/velodyne/dag/velodyne.dag\"\n   }\n }\n-cyber_modules {\n-  key: \"Third Party Perception\"\n-  value: {\n-    dag_files: \"/apollo/modules/third_party_perception/dag/third_party_perception.dag\"\n-  }\n-}\n cyber_modules {\n   key: \"Microphone\"\n   value: {"
        }
    ],
    "ApolloAuto/apollo/12181": [
        {
            "sha": "8850b20ea103249e91106c36f845dcb1c362947f",
            "filename": "modules/tools/perception/empty_prediction.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1632f857e23855fb66763d01ae98aefb36afd670/modules%2Ftools%2Fperception%2Fempty_prediction.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1632f857e23855fb66763d01ae98aefb36afd670/modules%2Ftools%2Fperception%2Fempty_prediction.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fperception%2Fempty_prediction.py?ref=1632f857e23855fb66763d01ae98aefb36afd670",
            "patch": "@@ -27,7 +27,7 @@\n import numpy\n import simplejson\n from cyber.python.cyber_py3 import cyber\n-from cyber.pyhton.cyber_py3 import cyber_time\n+from cyber.python.cyber_py3 import cyber_time\n \n from modules.prediction.proto.prediction_obstacle_pb2 import PredictionObstacles\n "
        }
    ],
    "ApolloAuto/apollo/12199": [
        {
            "sha": "0107e9a81661c4e14f1d0eff282b20bc5b0e209d",
            "filename": "modules/audio/inference/siren_detection.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e23a00b2df2d50a1ac29f2017391fe472a387dcb/modules%2Faudio%2Finference%2Fsiren_detection.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e23a00b2df2d50a1ac29f2017391fe472a387dcb/modules%2Faudio%2Finference%2Fsiren_detection.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Faudio%2Finference%2Fsiren_detection.cc?ref=e23a00b2df2d50a1ac29f2017391fe472a387dcb",
            "patch": "@@ -55,7 +55,8 @@ bool SirenDetection::Evaluate(const std::vector<std::vector<double>>& signals) {\n     }\n   }\n \n-  torch::Tensor torch_input = torch::from_blob(data, {4, 1, 72000});\n+  torch::Tensor torch_input = torch::from_blob(audio_tensor.data_ptr<float>(),\n+                                               {4, 1, 72000});\n   std::vector<torch::jit::IValue> torch_inputs;\n   torch_inputs.push_back(torch_input.to(device_));\n "
        }
    ],
    "ApolloAuto/apollo/12207": [
        {
            "sha": "358ad30e487a6db0d4041c05f4400924735c4abd",
            "filename": "docker/build/installers/install_drivers_deps.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/47ac3b36686b927c0a438f963bd14f74e7060784/docker%2Fbuild%2Finstallers%2Finstall_drivers_deps.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/47ac3b36686b927c0a438f963bd14f74e7060784/docker%2Fbuild%2Finstallers%2Finstall_drivers_deps.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fbuild%2Finstallers%2Finstall_drivers_deps.sh?ref=47ac3b36686b927c0a438f963bd14f74e7060784",
            "patch": "@@ -21,7 +21,7 @@ set -e\n MY_MODE=\"$1\"\n \n CURR_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd -P)\"\n-. ${CURR_DIR}/installer_base\n+. ${CURR_DIR}/installer_base.sh\n \n bash ${CURR_DIR}/install_opencv.sh\n bash ${CURR_DIR}/install_adv_plat.sh \"${MY_MODE}\""
        }
    ],
    "ApolloAuto/apollo/12254": [
        {
            "sha": "e012061e57381bf87ea364a062be34d1d375408d",
            "filename": "docker/build/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9215d4cad0b74cb7d57e75ad8620026ca65e0b2a/docker%2Fbuild%2FREADME.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9215d4cad0b74cb7d57e75ad8620026ca65e0b2a/docker%2Fbuild%2FREADME.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fbuild%2FREADME.md?ref=9215d4cad0b74cb7d57e75ad8620026ca65e0b2a",
            "patch": "@@ -1,7 +1,7 @@\n # Apollo Docker Image Build Process\n \n ## Introduction\n-As you may already know, Apollo was run inside Docker container, and there are two flavors of Apollo docker images,  `CyberRT` (`Cyber` for short) and `Dev` . `Cyber` images were for developers who want to play with the `CyberRT` framework, while `Dev` images were for all others. \n+As you may already know, Apollo was run inside Docker container, and there are two flavors of Apollo docker images,  `CyberRT` (`Cyber` for short) and `Dev` . `Cyber` images were for developers who want to play with the `CyberRT` framework only, while `Dev` images were used to build the whole Apollo project.\n \n Currently, Apollo comes with support for two CPU architectures, namely, `x86_64` and `aarch64`.  (Please note that till the time this document was updated, the `dev.aarch64` image  was not complete. Hope we can make it ready in the next few months.)\n "
        }
    ],
    "ApolloAuto/apollo/12271": [
        {
            "sha": "47be21467df0d7da5fbe3129db9ef7bf17da6592",
            "filename": "modules/localization/msf/msf_localization.cc",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1156a82bce2d1c62cd2119127830e0bd56674804/modules%2Flocalization%2Fmsf%2Fmsf_localization.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1156a82bce2d1c62cd2119127830e0bd56674804/modules%2Flocalization%2Fmsf%2Fmsf_localization.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fmsf%2Fmsf_localization.cc?ref=1156a82bce2d1c62cd2119127830e0bd56674804",
            "patch": "@@ -305,6 +305,9 @@ void MSFLocalization::OnGnssHeading(\n }\n \n void MSFLocalization::OnGps() {\n+  if (!raw_imu_msg_) {\n+    return;\n+  }\n   std::unique_lock<std::mutex> lock(mutex_imu_msg_);\n   OnRawImu(raw_imu_msg_);\n }"
        }
    ],
    "ApolloAuto/apollo/12272": [
        {
            "sha": "00fb8ae3d54a2cefe9a72559b348cf3f4470ed53",
            "filename": "modules/audio/proto/BUILD",
            "status": "modified",
            "additions": 33,
            "deletions": 17,
            "changes": 50,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/bdb474b8a3f4f550303b323b82b26dcc50919a1f/modules%2Faudio%2Fproto%2FBUILD",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/bdb474b8a3f4f550303b323b82b26dcc50919a1f/modules%2Faudio%2Fproto%2FBUILD",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Faudio%2Fproto%2FBUILD?ref=bdb474b8a3f4f550303b323b82b26dcc50919a1f",
            "patch": "@@ -25,12 +25,45 @@ proto_library(\n py_proto_library(\n     name = \"audio_py_pb2\",\n     deps = [\n+        \":audio_common_py_pb2\",\n         \":audio_proto\",\n         \"//modules/common/proto:geometry_py_pb2\",\n         \"//modules/common/proto:header_py_pb2\",\n     ],\n )\n \n+cc_proto_library(\n+    name = \"audio_event_cc_proto\",\n+    deps = [\n+        \":audio_event_proto\",\n+    ],\n+)\n+\n+proto_library(\n+    name = \"audio_event_proto\",\n+    srcs = [\"audio_event.proto\"],\n+    deps = [\n+        \":audio_common_proto\",\n+        \"//modules/common/proto:header_proto\",\n+    ],\n+)\n+\n+py_proto_library(\n+    name = \"audio_event_py_pb2\",\n+    deps = [\n+        \":audio_common_py_pb2\",\n+        \":audio_event_proto\",\n+        \"//modules/common/proto:header_py_pb2\",\n+    ],\n+)\n+\n+cc_proto_library(\n+    name = \"audio_common_cc_proto\",\n+    deps = [\n+        \":audio_common_proto\",\n+    ],\n+)\n+\n proto_library(\n     name = \"audio_common_proto\",\n     srcs = [\"audio_common.proto\"],\n@@ -61,20 +94,3 @@ py_proto_library(\n         \":audio_conf_proto\",\n     ],\n )\n-\n-proto_library(\n-    name = \"audio_event_proto\",\n-    srcs = [\"audio_event.proto\"],\n-    deps = [\n-        \":audio_common_proto\",\n-        \"//modules/common/proto:header_proto\",\n-    ],\n-)\n-\n-py_proto_library(\n-    name = \"audio_event_py_pb2\",\n-    deps = [\n-        \":audio_event_proto\",\n-        \"//modules/common/proto:header_py_pb2\",\n-    ],\n-)"
        }
    ],
    "ApolloAuto/apollo/12280": [
        {
            "sha": "b5ebe92c35a9b7ef626d73b04f26cc9affa43243",
            "filename": "cyber/tools/cyber_channel/cyber_channel.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4e287e6727c118ebb781b69d2e109db79e19a078/cyber%2Ftools%2Fcyber_channel%2Fcyber_channel.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4e287e6727c118ebb781b69d2e109db79e19a078/cyber%2Ftools%2Fcyber_channel%2Fcyber_channel.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_channel%2Fcyber_channel.py?ref=4e287e6727c118ebb781b69d2e109db79e19a078",
            "patch": "@@ -343,7 +343,7 @@ def callback(self, raw_data):\n         # print type(raw_data) # str\n         # print raw_data # str\n \n-        msgtype = cyber.ChannelUtils.get_msgtype(self.channel_name, 0)\n+        msgtype = cyber.ChannelUtils.get_msgtype(self.channel_name, 0).decode('utf-8')\n         print(cyber.ChannelUtils.get_debugstring_rawmsgdata(msgtype, raw_data))\n \n "
        }
    ],
    "ApolloAuto/apollo/12320": [
        {
            "sha": "d01087b054f4b3c1c648acbdca47cf4a51f64bd7",
            "filename": "modules/audio/tools/audio_offline_processing.cc",
            "status": "modified",
            "additions": 14,
            "deletions": 14,
            "changes": 28,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/9e29dd48ada1de14ff6711879c1906decf9b7d2c/modules%2Faudio%2Ftools%2Faudio_offline_processing.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/9e29dd48ada1de14ff6711879c1906decf9b7d2c/modules%2Faudio%2Ftools%2Faudio_offline_processing.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Faudio%2Ftools%2Faudio_offline_processing.cc?ref=9e29dd48ada1de14ff6711879c1906decf9b7d2c",
            "patch": "@@ -91,22 +91,22 @@ void ProcessSingleRecordFile(const AudioConf& audio_conf,\n         writer.WriteMessage<AudioEvent>(message.channel_name, audio_event,\n                                         message.time);\n         AINFO << \"Save an audio even message.\";\n-      } else if (message.channel_name ==\n+      }\n+    } else if (message.channel_name ==\n                  audio_conf.topic_conf().localization_topic_name()) {\n-        LocalizationEstimate localization;\n-        if (localization.ParseFromString(message.content)) {\n-          writer.WriteMessage<LocalizationEstimate>(\n-              message.channel_name, localization, message.time);\n-          AINFO << \"Save a localization message.\";\n-        }\n-      } else if (message.channel_name ==\n+      LocalizationEstimate localization;\n+      if (localization.ParseFromString(message.content)) {\n+        writer.WriteMessage<LocalizationEstimate>(\n+            message.channel_name, localization, message.time);\n+        AINFO << \"Save a localization message.\";\n+      }\n+    } else if (message.channel_name ==\n                  audio_conf.topic_conf().perception_topic_name()) {\n-        PerceptionObstacles perception_obstacles;\n-        if (perception_obstacles.ParseFromString(message.content)) {\n-          writer.WriteMessage<PerceptionObstacles>(\n-              message.channel_name, perception_obstacles, message.time);\n-          AINFO << \"Save a perception message.\";\n-        }\n+      PerceptionObstacles perception_obstacles;\n+      if (perception_obstacles.ParseFromString(message.content)) {\n+        writer.WriteMessage<PerceptionObstacles>(\n+            message.channel_name, perception_obstacles, message.time);\n+        AINFO << \"Save a perception message.\";\n       }\n     }\n   }"
        }
    ],
    "ApolloAuto/apollo/12334": [
        {
            "sha": "49ebdd3d5c3075980e26fb59a27604378ab1ba67",
            "filename": "apollo.sh",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3e2c23b88a35cf915c9a864131e478d025c441ab/apollo.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3e2c23b88a35cf915c9a864131e478d025c441ab/apollo.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/apollo.sh?ref=3e2c23b88a35cf915c9a864131e478d025c441ab",
            "patch": "@@ -96,8 +96,8 @@ function build_dreamview_frontend() {\n }\n \n function build_test_and_lint() {\n-    env ${APOLLO_ENV} bash \"${build_sh}\" --config=cpu\n-    env ${APOLLO_ENV} bash \"${test_sh}\" --config=unit_test --config=cpu\n+    env ${APOLLO_ENV} bash \"${build_sh}\"\n+    env ${APOLLO_ENV} bash \"${test_sh}\" --config=unit_test\n     env ${APOLLO_ENV} bash \"${APOLLO_ROOT_DIR}/scripts/apollo_lint.sh\" cpp\n     success \"Build and Test and Lint finished.\"\n }"
        }
    ],
    "ApolloAuto/apollo/12354": [
        {
            "sha": "a398accf6fc051c650efc406af781bca433cfb8f",
            "filename": "modules/drivers/velodyne/fusion/pri_sec_fusion_component.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1f12f83c3847f53868a48e67b0c1ee982caed9fe/modules%2Fdrivers%2Fvelodyne%2Ffusion%2Fpri_sec_fusion_component.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1f12f83c3847f53868a48e67b0c1ee982caed9fe/modules%2Fdrivers%2Fvelodyne%2Ffusion%2Fpri_sec_fusion_component.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdrivers%2Fvelodyne%2Ffusion%2Fpri_sec_fusion_component.cc?ref=1f12f83c3847f53868a48e67b0c1ee982caed9fe",
            "patch": "@@ -43,7 +43,7 @@ bool PriSecFusionComponent::Init() {\n \n bool PriSecFusionComponent::Proc(\n     const std::shared_ptr<PointCloud>& point_cloud) {\n-  auto target = point_cloud;\n+  auto target = std::make_shared<PointCloud>(*point_cloud);\n   auto fusion_readers = readers_;\n   auto start_time = Time::Now().ToSecond();\n   while ((Time::Now().ToSecond() - start_time) < conf_.wait_time_s() &&"
        }
    ],
    "ApolloAuto/apollo/12388": [
        {
            "sha": "21868fca8030f347b5c0daf6f06c2e7a31c5cb87",
            "filename": "apollo.sh",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2ef1c84bb4f2d2a4ea956ccf40a0600f4c3a1cca/apollo.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2ef1c84bb4f2d2a4ea956ccf40a0600f4c3a1cca/apollo.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/apollo.sh?ref=2ef1c84bb4f2d2a4ea956ccf40a0600f4c3a1cca",
            "patch": "@@ -822,7 +822,7 @@ function main() {\n       cibuild_extended $@\n       ;;\n     build_opt)\n-      DEFINES=\"${DEFINES} --cxxopt=-DCPU_ONLY --copt=-fpic\"\n+      DEFINES=\"${DEFINES} --cxxopt=-DCPU_ONLY --copt=-fPIC\"\n       apollo_build_opt $@\n       ;;\n     build_gpu)\n@@ -831,12 +831,12 @@ function main() {\n       ;;\n     build_opt_gpu)\n       set_use_gpu\n-      DEFINES=\"${DEFINES} --copt=-fpic\"\n+      DEFINES=\"${DEFINES} --copt=-fPIC\"\n       apollo_build_opt $@\n       ;;\n     build_teleop)\n       set_use_gpu\n-      DEFINES=\"${DEFINES} --copt=-fpic --define WITH_TELEOP=1 --cxxopt=-DTELEOP\"\n+      DEFINES=\"${DEFINES} --copt=-fPIC --define WITH_TELEOP=1 --cxxopt=-DTELEOP\"\n       apollo_build_opt $@\n       ;;\n     build_fe)"
        }
    ],
    "ApolloAuto/apollo/12405": [
        {
            "sha": "8a80c9c70a75bf412abe3af855104b65dd5619ab",
            "filename": "third_party/gpus/cuda_configure.bzl",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/91095e20b6b16515ae61a22303e74971213787f6/third_party%2Fgpus%2Fcuda_configure.bzl",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/91095e20b6b16515ae61a22303e74971213787f6/third_party%2Fgpus%2Fcuda_configure.bzl",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/third_party%2Fgpus%2Fcuda_configure.bzl?ref=91095e20b6b16515ae61a22303e74971213787f6",
            "patch": "@@ -812,7 +812,7 @@ def _create_local_cuda_repository(repository_ctx):\n         \"cuda:cuda_config.py\",\n     ]}\n     tpl_paths[\"cuda:BUILD\"] = _tpl_path(repository_ctx, \"cuda:BUILD\")\n-    find_cuda_config_script = repository_ctx.path(Label(\"@//third_party/gpus:find_cuda_config.py.gz.base64\"))\n+    find_cuda_config_script = repository_ctx.path(Label(\"//third_party/gpus:find_cuda_config.py.gz.base64\"))\n \n     cuda_config = _get_cuda_config(repository_ctx, find_cuda_config_script)\n \n@@ -909,7 +909,7 @@ def _create_local_cuda_repository(repository_ctx):\n         ],\n     ))\n \n-    check_cuda_libs_script = repository_ctx.path(Label(\"@//third_party/gpus:check_cuda_libs.py\"))\n+    check_cuda_libs_script = repository_ctx.path(Label(\"//third_party/gpus:check_cuda_libs.py\"))\n     cuda_libs = _find_libs(repository_ctx, check_cuda_libs_script, cuda_config)\n     cuda_lib_srcs = []\n     cuda_lib_outs = []"
        }
    ],
    "ApolloAuto/apollo/12451": [
        {
            "sha": "7d94f1bf47967037b306a83dfea0d9319102d83e",
            "filename": "cyber/common/global_data.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1084d5853e3c5960f1c16248d259081fb5eff44a/cyber%2Fcommon%2Fglobal_data.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1084d5853e3c5960f1c16248d259081fb5eff44a/cyber%2Fcommon%2Fglobal_data.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fcommon%2Fglobal_data.cc?ref=1084d5853e3c5960f1c16248d259081fb5eff44a",
            "patch": "@@ -41,7 +41,7 @@ namespace {\n const std::string& kEmptyString = \"\";\n std::string program_path() {\n   char path[PATH_MAX];\n-  auto len = readlink(\"/proc/self/exe\", path, sizeof(path));\n+  auto len = readlink(\"/proc/self/exe\", path, sizeof(path) - 1);\n   if (len == -1) {\n     return kEmptyString;\n   }"
        }
    ],
    "ApolloAuto/apollo/12518": [
        {
            "sha": "f40d7c1a0c4dfd89112f09c4f8fbcbcc567f0b23",
            "filename": "scripts/apollo_lint.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c981810d74b58921e4fc715ad8495340d9a53fb6/scripts%2Fapollo_lint.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c981810d74b58921e4fc715ad8495340d9a53fb6/scripts%2Fapollo_lint.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fapollo_lint.sh?ref=c981810d74b58921e4fc715ad8495340d9a53fb6",
            "patch": "@@ -153,7 +153,7 @@ function parse_cmdline_args() {\n \n function main() {\n   parse_cmdline_args \"$@\"\n-  if [[ \"${CPP_LINT_FLAG}\" ]]; then\n+  if [[ \"${CPP_LINT_FLAG}\" -eq 1 ]]; then\n     run_cpp_lint\n   fi\n   if [[ \"${PYTHON_LINT_FLAG}\" -eq 1 ]]; then"
        }
    ],
    "ApolloAuto/apollo/12521": [
        {
            "sha": "a0a71be1fde597f526b31ddc8dc0f099d7681564",
            "filename": "scripts/apollo_test.sh",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5022473d11694a08304a8fe5c01c611017c8a3de/scripts%2Fapollo_test.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5022473d11694a08304a8fe5c01c611017c8a3de/scripts%2Fapollo_test.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fapollo_test.sh?ref=5022473d11694a08304a8fe5c01c611017c8a3de",
            "patch": "@@ -56,14 +56,14 @@ function _determine_perception_disabled() {\n \n function _determine_planning_disabled() {\n   if [ \"${USE_GPU}\" -eq 0 ]; then\n-    # Nothing disabled in planning for now\n-    DISABLED_TARGETS=\"${DISABLED_TARGETS}\"\n+    DISABLED_TARGETS=\"${DISABLED_TARGETS} except //modules/planning/open_space/trajectory_smoother:planning_block\"\n   fi\n }\n \n function _determine_map_disabled() {\n   if [ \"${USE_GPU}\" -eq 0 ]; then\n-    DISABLED_TARGETS=\"${DISABLED_TARGETS} except //modules/map/pnc_map:cuda_util_test\"\n+    DISABLED_TARGETS=\"${DISABLED_TARGETS} except //modules/map/pnc_map:cuda_pnc_util \\\n+                      except //modules/map/pnc_map:cuda_util_test\"\n   fi\n }\n \n@@ -229,6 +229,7 @@ function run_bazel_test() {\n \n   local disabled_targets\n   disabled_targets=\"$(determine_disabled_targets ${SHORTHAND_TARGETS})\"\n+  disabled_targets=\"$(echo ${disabled_targets} | xargs)\"\n \n   # Note(storypku): Workaround for \"/usr/bin/bazel: Argument list too long\"\n   # bazel test ${CMDLINE_OPTIONS} ${job_args} $(bazel query ${test_targets} ${disabled_targets})"
        }
    ],
    "ApolloAuto/apollo/12584": [
        {
            "sha": "bda44901d71d336e9eb782164dbddd21a7250572",
            "filename": "WORKSPACE",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/62858ad27d509ccf7017b4b00d78b3141fdf0470/WORKSPACE",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/62858ad27d509ccf7017b4b00d78b3141fdf0470/WORKSPACE",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/WORKSPACE?ref=62858ad27d509ccf7017b4b00d78b3141fdf0470",
            "patch": "@@ -9,7 +9,7 @@ http_archive(\n     name = \"bazel_skylib\",\n     sha256 = \"1c531376ac7e5a180e0237938a2536de0c54d93f5c278634818e0efc952dd56c\",\n     urls = [\n-        \"https://apollo-platform-system.cdn.bcebos.com/archive/6.0/bazel_skylib-1.0.3.tar.gz\",\n+        \"https://apollo-platform-system.cdn.bcebos.com/archive/6.0/bazel-skylib-1.0.3.tar.gz\",\n         \"https://github.com/bazelbuild/bazel-skylib/releases/download/1.0.3/bazel-skylib-1.0.3.tar.gz\",\n     ],\n )"
        }
    ],
    "ApolloAuto/apollo/12590": [
        {
            "sha": "fc3081f54cc15f18707e01b3602905a5dcf62717",
            "filename": "modules/calibration/data/dev_kit/planning_conf/planning.conf",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a76d815921f7e1a49439b29148d3c43f32f0e0b9/modules%2Fcalibration%2Fdata%2Fdev_kit%2Fplanning_conf%2Fplanning.conf",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a76d815921f7e1a49439b29148d3c43f32f0e0b9/modules%2Fcalibration%2Fdata%2Fdev_kit%2Fplanning_conf%2Fplanning.conf",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcalibration%2Fdata%2Fdev_kit%2Fplanning_conf%2Fplanning.conf?ref=a76d815921f7e1a49439b29148d3c43f32f0e0b9",
            "patch": "@@ -7,7 +7,7 @@\n --max_stop_distance_obstacle=10.0\n --min_stop_distance_obstacle=4.0\n --destination_check_distance=1.0\n---lon_collision_buffer=0.3\n+--lon_collision_buffer=0.4\n --enable_scenario_park_and_go=false\n --ignore_overlapped_obstacle=true\n --prioritize_change_lane\n@@ -44,8 +44,8 @@\n \n --lane_change_prepare_length=60.0\n --enable_smarter_lane_change=true\n---nonstatic_obstacle_nudge_l_buffer=0.4\n---lane_change_obstacle_nudge_l_buffer=0.3\n+--nonstatic_obstacle_nudge_l_buffer=0.6\n+--lane_change_obstacle_nudge_l_buffer=0.5\n \n --use_st_drivable_boundary=true\n "
        }
    ],
    "ApolloAuto/apollo/12595": [
        {
            "sha": "87c47fced55edbac8c3ff2a3ae83e29595b66f41",
            "filename": "modules/control/controller/mpc_controller.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/7641b33c1ab84498f3cb11f41b73b4faae9b9db7/modules%2Fcontrol%2Fcontroller%2Fmpc_controller.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/7641b33c1ab84498f3cb11f41b73b4faae9b9db7/modules%2Fcontrol%2Fcontroller%2Fmpc_controller.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcontrol%2Fcontroller%2Fmpc_controller.cc?ref=7641b33c1ab84498f3cb11f41b73b4faae9b9db7",
            "patch": "@@ -203,7 +203,6 @@ Status MPCController::Init(std::shared_ptr<DependencyInjector> injector,\n   matrix_bd_ = matrix_b_ * ts_;\n \n   matrix_c_ = Matrix::Zero(basic_state_size_, 1);\n-  matrix_c_(5, 0) = 1.0;\n   matrix_cd_ = Matrix::Zero(basic_state_size_, 1);\n \n   matrix_state_ = Matrix::Zero(basic_state_size_, 1);\n@@ -581,7 +580,7 @@ void MPCController::UpdateMatrix(SimpleMPCDebug *debug) {\n \n   matrix_c_(1, 0) = (lr_ * cr_ - lf_ * cf_) / mass_ / v - v;\n   matrix_c_(3, 0) = -(lf_ * lf_ * cf_ + lr_ * lr_ * cr_) / iz_ / v;\n-  matrix_cd_ = matrix_c_ * debug->heading_error_rate() * ts_;\n+  matrix_cd_ = matrix_c_ * debug->ref_heading_rate() * ts_;\n }\n \n void MPCController::FeedforwardUpdate(SimpleMPCDebug *debug) {"
        }
    ],
    "ApolloAuto/apollo/12636": [
        {
            "sha": "3c1a0331a6dcfbe83629dc0e8f4c7e37ad359b00",
            "filename": "RELEASE.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d58f852fc57af58c18c0a8892226c0e24aacb18c/RELEASE.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d58f852fc57af58c18c0a8892226c0e24aacb18c/RELEASE.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/RELEASE.md?ref=d58f852fc57af58c18c0a8892226c0e24aacb18c",
            "patch": "@@ -16,9 +16,9 @@ Apollo 6.0 incorporates new deep learning models to enhance the capabilities for\n     * Complete control parameter auto-tune service\n * Driverless Research\n     * Remote control interface with DreamView integration\n-    * Audio bssed emergency vehicle detection system\n+    * Audio based emergency vehicle detection system\n \n-**[Note]** All models and methodogies included in Apollo 6.0 are for research purposes only. Productized and commercial uses of these models are **NOT** encouraged, and it is at your own risk. Please be cautious to try Apollo 6.0 with enough safety protection mechanmism. Your feedback is highly appreciated for us to continuously improve the models.\n+**[Note]** All models and methodologies included in Apollo 6.0 are for research purposes only. Productized and commercial uses of these models are **NOT** encouraged, and it is at your own risk. Please be cautious to try Apollo 6.0 with enough safety protection mechanism. Your feedback is highly appreciated for us to continuously improve the models.\n \n # Release 5.5\n "
        }
    ],
    "ApolloAuto/apollo/12656": [
        {
            "sha": "03a05cafca5fd0ee8c6077818fb6a3bef0af8623",
            "filename": "modules/perception/production/conf/perception/perception_common.flag",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/8b2d77cd1d5dee9dbc3cd16cdbac3b83dede4425/modules%2Fperception%2Fproduction%2Fconf%2Fperception%2Fperception_common.flag",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/8b2d77cd1d5dee9dbc3cd16cdbac3b83dede4425/modules%2Fperception%2Fproduction%2Fconf%2Fperception%2Fperception_common.flag",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fproduction%2Fconf%2Fperception%2Fperception_common.flag?ref=8b2d77cd1d5dee9dbc3cd16cdbac3b83dede4425",
            "patch": "@@ -104,17 +104,19 @@\n # default: -1.5\n --ground_removal_height=-1.5\n \n-# enable down-sample point cloud by beams\n+# enable down-sampling point cloud by beams. Set false to use full cloud for\n+# more accurate detection, but some obstacles in front of ego vehicle might\n+# not be detected if you use 128c Lidar.\n # type: bool\n-# default: false\n---enable_downsample_beams=false\n+# default: true\n+--enable_downsample_beams=true\n \n # factor for down-sampling point cloud beams\n # type: int\n # default: 4\n --downsample_beams_factor=4\n \n-# enable down-sample point cloud by voxelization\n+# enable down-sampling point cloud by voxelization\n # type: bool\n # default: false\n --enable_downsample_pointcloud=false"
        }
    ],
    "ApolloAuto/apollo/12734": [
        {
            "sha": "9dae9a349340d2ef275805290ab797c094f4efb5",
            "filename": "docs/specs/Apollo_Fuel/apply_fuel_account_cn.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0c94fb2ceea64785113a262681266d8caa44ddc4/docs%2Fspecs%2FApollo_Fuel%2Fapply_fuel_account_cn.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0c94fb2ceea64785113a262681266d8caa44ddc4/docs%2Fspecs%2FApollo_Fuel%2Fapply_fuel_account_cn.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2FApollo_Fuel%2Fapply_fuel_account_cn.md?ref=0c94fb2ceea64785113a262681266d8caa44ddc4",
            "patch": "@@ -10,7 +10,7 @@\n \n ## 1.2. \u6ce8\u518c\u767e\u5ea6\u4e91BOS\n \n-\u6309[\u767e\u5ea6\u4e91\u5bf9\u8c61\u5b58\u50a8BOS\u6ce8\u518c\u4e0e\u57fa\u672c\u4f7f\u7528\u5411\u5bfc](apply_bos_account_cn.md)\u6ce8\u518c\u767e\u5ea6\u4e91BOS\n+\u6309[\u767e\u5ea6\u4e91\u5bf9\u8c61\u5b58\u50a8BOS\u6ce8\u518c\u4e0e\u57fa\u672c\u4f7f\u7528\u5411\u5bfc](Apply_BOS_Account_cn.md)\u6ce8\u518c\u767e\u5ea6\u4e91BOS\n \n ## 1.3. \u5f00\u901a\u4e91\u670d\u52a1\u8d26\u53f7\n \u6253\u5f00[Dreamland\u7f51\u5740](http://bce.apollo.auto/)\u9009\u62e9\u7528\u767e\u5ea6\u8d26\u53f7\u767b\u5f55\uff0c\u767b\u5f55\u540e\u70b9\u51fb\u5de6\u4fa7\u83dc\u5355\u680f\u300c\u7528\u6237\u5e2e\u52a9\u300d\u91cc\u7684\u300cFuel\u4f7f\u7528\u6307\u5357\u300d\u83dc\u5355\u9879\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5e76\u6309\u7167\u6587\u6863\u5f00\u901a\u4e91\u670d\u52a1\u8d26\u53f7\u3002"
        }
    ],
    "ApolloAuto/apollo/12781": [
        {
            "sha": "8a82fecb6afb3f3e7c7763069a1c041616999272",
            "filename": "docs/specs/bridge_header_protocol.md",
            "status": "renamed",
            "additions": 26,
            "deletions": 13,
            "changes": 39,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/08ac2c582860a9020c3b26550ec9c487a04c3ab1/docs%2Fspecs%2Fbridge_header_protocol.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/08ac2c582860a9020c3b26550ec9c487a04c3ab1/docs%2Fspecs%2Fbridge_header_protocol.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2Fbridge_header_protocol.md?ref=08ac2c582860a9020c3b26550ec9c487a04c3ab1",
            "patch": "@@ -1,32 +1,45 @@\n # Bridge Header Protocol\n-This document provides the details about bridge header protocol.\n+\n+This document describes the details about bridge header protocol.\n \n ## Introduction\n-Bridge is responsible for forwarding the proto message specified in Apollo to the external module in UDP mode, and receiving the proto message from the external module.\n-Due to the limitation of the UDP packet (the maximum packet size is 65535 bytes), the proto message exceeds this limit after serialization.\n-It is possible, so the serialized packets need to be fragmented, and each slice is called a frame.\n-The receiver receives all the frames and then combines and deserializes them.\n-In order to conveniently distinguish each frame of data, to facilitate subsequent combination and deserialization,\n-it is necessary to add frame header information at the head of each frame of data, as shown in the following figure:\n+\n+Bridge is responsible for forwarding the proto message specified in Apollo to\n+the external module in UDP mode, and receiving the proto message from the\n+external module. Due to the limitation of the UDP packet (the maximum packet\n+size is 65535 bytes), the proto message exceeds this limit after serialization.\n+It is possible, so the serialized packets need to be fragmented, and each slice\n+is called a frame. The receiver receives all the frames and then combines and\n+deserializes them. In order to conveniently distinguish each frame of data, to\n+facilitate subsequent combination and deserialization, it is necessary to add\n+frame header information at the head of each frame of data, as shown in the\n+following figure:\n+\n ```\n     +-----+------------+------------+-------+-----------+\n     |Flag |Header Size |Header Item |... ...|Header Item|\n     +-----+------------+------------+-------+-----------+\n ```\n-As shown in the figure above, the Header divides three segments: Flag, Size, and Items, where the segment is separated by '\\n'.\n-Flag: The sign of this agreement, currently a string \"ApolloBridgeHeader\";\n-Size: the length of the entire Items section (unit: byte)\n-Items: The specific content of the header, where each item has three components, each of which is divided by ':'. The specific schematic is shown in the figure below.\n+\n+As shown in the figure above, the Header consists of three segments: Flag, Size,\n+and Items, where the segment is separated by '\\n'. Flag: The sign of this\n+agreement, currently a string \"ApolloBridgeHeader\"; Size: the length of the\n+entire Items section (unit: byte) Items: The specific content of the header,\n+where each item has three components, each of which is divided by ':'. The\n+specific schematic is shown in the figure below.\n+\n ```\n     +----------+----------+-------------+\n     |Item Type |Item Size | Item Content|\n     +----------+----------+-------------+\n ```\n+\n The Item Type is defined as follows:\n-```\n+\n+```c++\n Enum HType {\n Header_Ver, // header version number, type: uint32_t\n-Msg_Name,   //proto name, such as Chassis, type: std::string\n+Msg_Name,   // proto name, such as Chassis, type: std::string\n Msg_ID,     // sequence num of proto, guaranteed unique value in the same proto, type: uint32_t\n Msg_Size,   // the size of the proto serialized, type: size_t\n Msg_Frames, // how many frames are proto serialized, type: uint32_t",
            "previous_filename": "docs/specs/bridge_header_protocal.md"
        }
    ],
    "ApolloAuto/apollo/12839": [
        {
            "sha": "3c46e75636ee92b9d4be2f8f93770800b8e7bd95",
            "filename": "scripts/apollo_ci.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/681d68554a1f0e72e76a13b47f268d71a065a293/scripts%2Fapollo_ci.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/681d68554a1f0e72e76a13b47f268d71a065a293/scripts%2Fapollo_ci.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/scripts%2Fapollo_ci.sh?ref=681d68554a1f0e72e76a13b47f268d71a065a293",
            "patch": "@@ -38,7 +38,7 @@ function run_ci_test() {\n }\n \n function run_ci_lint() {\n-  env USE_ESD_CAN=${USE_ESD_CAN} bash \"${APOLLO_LINT_SH}\" cpp\n+  env USE_ESD_CAN=${USE_ESD_CAN} bash \"${APOLLO_LINT_SH}\" --cpp\n }\n \n function main() {"
        }
    ],
    "ApolloAuto/apollo/12853": [
        {
            "sha": "5acd9723f78ddb4b6ec55722a1897ef62519dcec",
            "filename": "modules/perception/onboard/transform_wrapper/transform_wrapper.cc",
            "status": "modified",
            "additions": 30,
            "deletions": 2,
            "changes": 32,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c7c72a5de9e5eaac609cc3895a2d607c8235a818/modules%2Fperception%2Fonboard%2Ftransform_wrapper%2Ftransform_wrapper.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c7c72a5de9e5eaac609cc3895a2d607c8235a818/modules%2Fperception%2Fonboard%2Ftransform_wrapper%2Ftransform_wrapper.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fonboard%2Ftransform_wrapper%2Ftransform_wrapper.cc?ref=c7c72a5de9e5eaac609cc3895a2d607c8235a818",
            "patch": "@@ -15,6 +15,8 @@\n  *****************************************************************************/\n #include \"modules/perception/onboard/transform_wrapper/transform_wrapper.h\"\n \n+#include <limits>\n+\n #include \"cyber/common/log.h\"\n #include \"modules/common/util/string_util.h\"\n #include \"modules/perception/common/sensor_manager/sensor_manager.h\"\n@@ -58,6 +60,32 @@ void TransformCache::AddTransform(const StampedTransform& transform) {\n   transforms_.push_back(transform);\n }\n \n+Eigen::Quaterniond Slerp(const Eigen::Quaterniond& source, const double& t,\n+                         const Eigen::Quaterniond& other) {\n+  const double one = 1.0 - std::numeric_limits<double>::epsilon();\n+  double d = source.x() * other.x() + source.y() * other.y() +\n+             source.z() * other.z() + source.w() * other.w();\n+  double abs_d = std::abs(d);\n+\n+  double scale0;\n+  double scale1;\n+\n+  if (abs_d >= one) {\n+    scale0 = 1.0 - t;\n+    scale1 = t;\n+  } else {\n+    // theta is the angle between the 2 quaternions\n+    double theta = std::acos(abs_d);\n+    double sin_theta = std::sin(theta);\n+\n+    scale0 = std::sin((1.0 - t) * theta) / sin_theta;\n+    scale1 = std::sin((t * theta)) / sin_theta;\n+  }\n+  if (d < 0) scale1 = -scale1;\n+\n+  return Eigen::Quaterniond(scale0 * source.coeffs() + scale1 * other.coeffs());\n+}\n+\n bool TransformCache::QueryTransform(double timestamp,\n                                     StampedTransform* transform,\n                                     double max_duration) {\n@@ -86,8 +114,8 @@ bool TransformCache::QueryTransform(double timestamp,\n         (timestamp - transforms_[size - 2].timestamp) /\n         (transforms_[size - 1].timestamp - transforms_[size - 2].timestamp);\n \n-    transform->rotation = transforms_[size - 2].rotation.slerp(\n-        ratio, transforms_[size - 1].rotation);\n+    transform->rotation = Slerp(transforms_[size - 2].rotation, ratio,\n+                                transforms_[size - 1].rotation);\n \n     transform->translation.x() =\n         transforms_[size - 2].translation.x() * (1 - ratio) +"
        }
    ],
    "ApolloAuto/apollo/12868": [
        {
            "sha": "6780be83ffd4e2d0923cab09370a255ed84d47a3",
            "filename": "modules/canbus/vehicle/vehicle_controller.cc",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/cabd8dbdc50729806123364b49894b9aa430a4dd/modules%2Fcanbus%2Fvehicle%2Fvehicle_controller.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/cabd8dbdc50729806123364b49894b9aa430a4dd/modules%2Fcanbus%2Fvehicle%2Fvehicle_controller.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcanbus%2Fvehicle%2Fvehicle_controller.cc?ref=cabd8dbdc50729806123364b49894b9aa430a4dd",
            "patch": "@@ -117,7 +117,11 @@ ErrorCode VehicleController::Update(const ControlCommand &control_command) {\n         break;\n       }\n     }\n-    SetDrivingMode(mode);\n+    auto error_code = SetDrivingMode(mode);\n+    if (error_code != ErrorCode::OK) {\n+      AERROR << \"Failed to set driving mode.\";\n+      return error_code;\n+    }\n   }\n \n   if (driving_mode() == Chassis::COMPLETE_AUTO_DRIVE ||"
        }
    ],
    "ApolloAuto/apollo/12903": [
        {
            "sha": "dd11cd2e4a5b13625972c2059e87e5ae4295ccaf",
            "filename": "modules/perception/onboard/transform_wrapper/transform_wrapper.cc",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/008950578ef91e7ad95d89db15b540a9aae45a49/modules%2Fperception%2Fonboard%2Ftransform_wrapper%2Ftransform_wrapper.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/008950578ef91e7ad95d89db15b540a9aae45a49/modules%2Fperception%2Fonboard%2Ftransform_wrapper%2Ftransform_wrapper.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Fonboard%2Ftransform_wrapper%2Ftransform_wrapper.cc?ref=008950578ef91e7ad95d89db15b540a9aae45a49",
            "patch": "@@ -83,7 +83,10 @@ Eigen::Quaterniond Slerp(const Eigen::Quaterniond& source, const double& t,\n   }\n   if (d < 0) scale1 = -scale1;\n \n-  return Eigen::Quaterniond(scale0 * source.coeffs() + scale1 * other.coeffs());\n+  return Eigen::Quaterniond(scale0 * source.w() + scale1 * other.w(),\n+                            scale0 * source.x() + scale1 * other.x(),\n+                            scale0 * source.y() + scale1 * other.y(),\n+                            scale0 * source.z() + scale1 * other.z());\n }\n \n bool TransformCache::QueryTransform(double timestamp,"
        }
    ],
    "ApolloAuto/apollo/12936": [
        {
            "sha": "7cfde881637da3572f2f1755a8a88f54ee0fd92e",
            "filename": "docs/D-kit/Waypoint_Following/vehicle_calibration_online_cn.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/441777992b1c2f9df52c8e0f174880f78cf4785d/docs%2FD-kit%2FWaypoint_Following%2Fvehicle_calibration_online_cn.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/441777992b1c2f9df52c8e0f174880f78cf4785d/docs%2FD-kit%2FWaypoint_Following%2Fvehicle_calibration_online_cn.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2FD-kit%2FWaypoint_Following%2Fvehicle_calibration_online_cn.md?ref=441777992b1c2f9df52c8e0f174880f78cf4785d",
            "patch": "@@ -88,8 +88,8 @@\n \n \u786e\u8ba4\u597d\u4e0a\u8ff0\u6807\u5b9a\u6761\u4ef6\u540e\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u4f7f\u7528\u9ed8\u8ba4\u6807\u5b9a\u914d\u7f6e\u53ef\u4ee5\u8986\u76d6\u5c0f\u8f66\u5927\u90e8\u5206\u8e0f\u677f\u63a7\u5236\u8303\u56f4\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u5219\u9700\u8981\u5c06`apollo/modules/calibration/data/dev_kit/dreamview_conf/data_collection_table.pb.txt` \u4e2d`Go Straight`\u90e8\u5206\u914d\u7f6e\u8fdb\u884c\u4fee\u6539\uff0c\u5176\u5b83\u90e8\u5206\u914d\u7f6e\u4ee3\u7801\u65e0\u9700\u4fee\u6539\uff0c\u65e0\u9700\u5220\u9664\uff0c\u901a\u8fc7\u542f\u52a8dreamview\u540e\u91cd\u65b0\u9009\u62e9\u8f66\u8f86\u540e\u914d\u7f6e\u751f\u6548\uff0c\u5177\u4f53\u4fee\u6539\u4ee3\u7801\u5982\u4e0b\uff1a\n \n-    frame_threshold: 20 //\u8bbe\u7f6e\u6570\u636e\u5e27\u5468\u671f\uff0c\u5f53\u524d\u4e3a20ms\n-    total_frames: 4000  //\u8bbe\u7f6e\u6bcf\u4e00\u4e2a\u6807\u5b9acase\u6570\u636e\u5e27\u603b\u91cf\uff0c\u5f53\u524d\u8bbe\u7f6e\u4e3a4000\u5e27\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8c03\u6574\uff0c\u6570\u636e\u91cf\u8d8a\u5927\u91c7\u96c6\u6807\u5b9a\u6570\u636e\u65f6\u95f4\u8d8a\u957f\n+    frame_threshold: 20 // \u5e27\u6709\u6548\u9608\u503c\uff0c\u8fde\u7eed\u6ee1\u8db3\u6807\u5b9a\u6761\u4ef6\u7684\u5e27\u6570\u5927\u4e8e\u7b49\u4e8e\u8be5\u9608\u503c\u65f6\u624d\u4f1a\u88ab\u8bb0\u5f55\n+    total_frames: 4000  // \u8bbe\u7f6e\u6bcf\u4e00\u4e2a\u6807\u5b9acase\u6570\u636e\u5e27\u603b\u91cf\uff0c\u5f53\u524d\u8bbe\u7f6e\u4e3a4000\u5e27\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8c03\u6574\uff0c\u6570\u636e\u91cf\u8d8a\u5927\u91c7\u96c6\u6807\u5b9a\u6570\u636e\u65f6\u95f4\u8d8a\u957f\n     scenario {\n       key: \"Go Straight\"\n       value {"
        }
    ],
    "ApolloAuto/apollo/12953": [
        {
            "sha": "669865dfe0ddc9307d4f6f7cf275e9c3d6974608",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2db7c82a3f5aec0bc4b93489db852003bb5653e2/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2db7c82a3f5aec0bc4b93489db852003bb5653e2/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=2db7c82a3f5aec0bc4b93489db852003bb5653e2",
            "patch": "@@ -360,7 +360,7 @@ function remove_existing_dev_container() {\n \n function docker_pull() {\n     local img=\"$1\"\n-    if [ \"${USE_LOCAL_IMAGE}\" = \"yes\" ];then\n+    if [[ \"${USE_LOCAL_IMAGE}\" -gt 0 ]]; then\n         if docker images --format \"{{.Repository}}:{{.Tag}}\" | grep -q \"${img}\" ; then\n             info \"Local image ${img} found and will be used.\"\n             return"
        }
    ],
    "ApolloAuto/apollo/12962": [
        {
            "sha": "0a528e62bb801804cea9227ea04320d646aa2e04",
            "filename": "cyber/class_loader/utility/class_loader_utility.h",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1092cbd6a582df34282e08f33fbff7265579f4ad/cyber%2Fclass_loader%2Futility%2Fclass_loader_utility.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1092cbd6a582df34282e08f33fbff7265579f4ad/cyber%2Fclass_loader%2Futility%2Fclass_loader_utility.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fclass_loader%2Futility%2Fclass_loader_utility.h?ref=1092cbd6a582df34282e08f33fbff7265579f4ad",
            "patch": "@@ -80,15 +80,15 @@ void RegisterClass(const std::string& class_name,\n   AINFO << \"registerclass:\" << class_name << \",\" << base_class_name << \",\"\n         << GetCurLoadingLibraryName();\n \n-  utility::AbstractClassFactory<Base>* new_class_factrory_obj =\n+  utility::AbstractClassFactory<Base>* new_class_factory_obj =\n       new utility::ClassFactory<Derived, Base>(class_name, base_class_name);\n-  new_class_factrory_obj->AddOwnedClassLoader(GetCurActiveClassLoader());\n-  new_class_factrory_obj->SetRelativeLibraryPath(GetCurLoadingLibraryName());\n+  new_class_factory_obj->AddOwnedClassLoader(GetCurActiveClassLoader());\n+  new_class_factory_obj->SetRelativeLibraryPath(GetCurLoadingLibraryName());\n \n   GetClassFactoryMapMapMutex().lock();\n   ClassClassFactoryMap& factory_map =\n       GetClassFactoryMapByBaseClass(typeid(Base).name());\n-  factory_map[class_name] = new_class_factrory_obj;\n+  factory_map[class_name] = new_class_factory_obj;\n   GetClassFactoryMapMapMutex().unlock();\n }\n "
        }
    ],
    "ApolloAuto/apollo/13088": [
        {
            "sha": "cf69387d3000351780757ea2fd118d82d6b39f3a",
            "filename": "modules/calibration/data/dev_kit_advanced_sne-r/localization_conf/localization.conf",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0378e389b640e135c5f739c5deb9a76fce1dc37c/modules%2Fcalibration%2Fdata%2Fdev_kit_advanced_sne-r%2Flocalization_conf%2Flocalization.conf",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0378e389b640e135c5f739c5deb9a76fce1dc37c/modules%2Fcalibration%2Fdata%2Fdev_kit_advanced_sne-r%2Flocalization_conf%2Flocalization.conf",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcalibration%2Fdata%2Fdev_kit_advanced_sne-r%2Flocalization_conf%2Flocalization.conf?ref=0378e389b640e135c5f739c5deb9a76fce1dc37c",
            "patch": "@@ -131,8 +131,8 @@\n \n # The lidar extrinsics file\n # type: string\n-# default: /apollo/modules/localization/msf/params/velodyne_params/velodyne128_novatel_extrinsics.yaml\n---lidar_extrinsics_file=/apollo/modules/localization/msf/params/velodyne_params/velodyne128_novatel_extrinsics.yaml\n+# default: /apollo/modules/localization/msf/params/velodyne_params/velodyne16_novatel_extrinsics.yaml\n+--lidar_extrinsics_file=/apollo/modules/localization/msf/params/velodyne_params/velodyne16_novatel_extrinsics.yaml\n \n # imu coordinate, true->flu, false->rfu\n # type: bool"
        }
    ],
    "ApolloAuto/apollo/13138": [
        {
            "sha": "adc6c157584223848ad5bfd89de7ef7bdf60271b",
            "filename": "cyber/service_discovery/specific_manager/channel_manager.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/fe28e80ddf655a4e25c0c7bc284b5b53b3532de4/cyber%2Fservice_discovery%2Fspecific_manager%2Fchannel_manager.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/fe28e80ddf655a4e25c0c7bc284b5b53b3532de4/cyber%2Fservice_discovery%2Fspecific_manager%2Fchannel_manager.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fservice_discovery%2Fspecific_manager%2Fchannel_manager.cc?ref=fe28e80ddf655a4e25c0c7bc284b5b53b3532de4",
            "patch": "@@ -77,7 +77,7 @@ void ChannelManager::GetMsgType(const std::string& channel_name,\n   uint64_t key = common::GlobalData::RegisterChannel(channel_name);\n   RolePtr writer = nullptr;\n   if (!channel_writers_.Search(key, &writer)) {\n-    AERROR << \"cannot serarch writer of channel: \" << channel_name\n+    AERROR << \"cannot find writer of channel: \" << channel_name\n            << \" key: \" << key;\n     return;\n   }"
        }
    ],
    "ApolloAuto/apollo/13147": [
        {
            "sha": "480d5251e59190ba1f96b17c15c2e6077c478d4c",
            "filename": "modules/dreamview/frontend/src/renderer/routing_editor.js",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/00016c0396e9b0110faf9def9b6c886ba9df836e/modules%2Fdreamview%2Ffrontend%2Fsrc%2Frenderer%2Frouting_editor.js",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/00016c0396e9b0110faf9def9b6c886ba9df836e/modules%2Fdreamview%2Ffrontend%2Fsrc%2Frenderer%2Frouting_editor.js",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Ffrontend%2Fsrc%2Frenderer%2Frouting_editor.js?ref=00016c0396e9b0110faf9def9b6c886ba9df836e",
            "patch": "@@ -128,7 +128,7 @@ export default class RoutingEditor {\n   }\n \n   addDefaultRouting(routingName) {\n-    if (this.routePoints.length <= minDefaultRoutingPointsNum) {\n+    if (this.routePoints.length < minDefaultRoutingPointsNum) {\n       alert(`Please provide at least ${minDefaultRoutingPointsNum} end point.`);\n       return false;\n     }"
        }
    ],
    "ApolloAuto/apollo/13193": [
        {
            "sha": "2a64bee6a8f3c5923d4bab9f1c673adf7c74ff71",
            "filename": "modules/tools/record_play/rtk_recorder.py",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/65ff6db78c8667e50ee99136cf9192915a67d82b/modules%2Ftools%2Frecord_play%2Frtk_recorder.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/65ff6db78c8667e50ee99136cf9192915a67d82b/modules%2Ftools%2Frecord_play%2Frtk_recorder.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Frecord_play%2Frtk_recorder.py?ref=65ff6db78c8667e50ee99136cf9192915a67d82b",
            "patch": "@@ -30,6 +30,7 @@\n from gflags import FLAGS\n \n from modules.tools.common.logger import Logger\n+import modules.tools.common.proto_utils as proto_utils\n from modules.canbus.proto import chassis_pb2\n from modules.common.configs.proto import vehicle_config_pb2\n from modules.localization.proto import localization_pb2\n@@ -133,8 +134,8 @@ def localization_callback(self, data):\n         carmax_steer_angle = self.vehicle_param.max_steer_angle\n         carsteer_ratio = self.vehicle_param.steer_ratio\n         carwheel_base = self.vehicle_param.wheel_base\n-        curvature = math.tan(math.radians(carsteer / 100 * \\\n-                            math.degrees(carmax_steer_angle)) / carsteer_ratio) / carwheel_base\n+        curvature = math.tan(math.radians(carsteer / 100\n+                                          * math.degrees(carmax_steer_angle)) / carsteer_ratio) / carwheel_base\n         if abs(carspeed) >= speed_epsilon:\n             carcurvature_change_rate = (curvature - self.carcurvature) / (\n                 carspeed * 0.01)"
        }
    ],
    "ApolloAuto/apollo/13239": [
        {
            "sha": "33a1eff58954a7ef9d227cd3dd838b0a392cec7b",
            "filename": "modules/localization/ndt/map_creation/ndt_map_creator.cc",
            "status": "modified",
            "additions": 14,
            "deletions": 10,
            "changes": 24,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0c1f51042ebd698395143c2a5a0f5715581e7f4d/modules%2Flocalization%2Fndt%2Fmap_creation%2Fndt_map_creator.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0c1f51042ebd698395143c2a5a0f5715581e7f4d/modules%2Flocalization%2Fndt%2Fmap_creation%2Fndt_map_creator.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Flocalization%2Fndt%2Fmap_creation%2Fndt_map_creator.cc?ref=0c1f51042ebd698395143c2a5a0f5715581e7f4d",
            "patch": "@@ -20,6 +20,7 @@\n #include <boost/filesystem.hpp>\n #include <boost/program_options.hpp>\n #include <boost/random.hpp>\n+\n #include \"absl/strings/str_cat.h\"\n \n #include \"modules/localization/msf/common/io/velodyne_utility.h\"\n@@ -89,20 +90,23 @@ int main(int argc, char** argv) {\n   }\n \n   float single_resolution_map = boost_args[\"resolution\"].as<float>();\n-  if (fabs(single_resolution_map - 0.03125) > 1e-8 &&\n-      fabs(single_resolution_map - 0.0625) > 1e-8 &&\n-      fabs(single_resolution_map - 0.125) < 1e-8 &&\n-      fabs(single_resolution_map - 0.25) < 1e-8 &&\n-      fabs(single_resolution_map - 0.5) < 1e-8 &&\n-      fabs(single_resolution_map - 1.0) < 1e-8 &&\n-      fabs(single_resolution_map - 2.0) < 1e-8 &&\n-      fabs(single_resolution_map - 4.0) < 1e-8 &&\n-      fabs(single_resolution_map - 8.0) < 1e-8 &&\n-      fabs(single_resolution_map - 16.0) < 1e-8) {\n+  constexpr double epsilon = 1e-8;\n+  if (std::fabs(single_resolution_map - 0.03125) > epsilon &&\n+      std::fabs(single_resolution_map - 0.0625) > epsilon &&\n+      std::fabs(single_resolution_map - 0.125) > epsilon &&\n+      std::fabs(single_resolution_map - 0.25) > epsilon &&\n+      std::fabs(single_resolution_map - 0.5) > epsilon &&\n+      std::fabs(single_resolution_map - 1.0) > epsilon &&\n+      std::fabs(single_resolution_map - 2.0) > epsilon &&\n+      std::fabs(single_resolution_map - 4.0) > epsilon &&\n+      std::fabs(single_resolution_map - 8.0) > epsilon &&\n+      std::fabs(single_resolution_map - 16.0) > epsilon) {\n     std::cerr << \"map resolution can only be: 0.03125, \"\n               << \"0.0625, 0.125, 0.25, 0.5, 1.0, 2.0, \"\n               << \"4.0, 8.0 or 16.0.\" << std::endl;\n+    return -1;\n   }\n+\n   float single_resolution_map_z = boost_args[\"resolution_z\"].as<float>();\n   std::cout << \"single_resolution_map_z: \" << single_resolution_map_z\n             << std::endl;"
        }
    ],
    "ApolloAuto/apollo/13242": [
        {
            "sha": "cd8d36d1fdfb036178e67a9791d27417257d9c6c",
            "filename": "tools/python_rules.bzl",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b2531fe068f41a0cc1e8c194e75a8213f54d7677/tools%2Fpython_rules.bzl",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b2531fe068f41a0cc1e8c194e75a8213f54d7677/tools%2Fpython_rules.bzl",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/tools%2Fpython_rules.bzl?ref=b2531fe068f41a0cc1e8c194e75a8213f54d7677",
            "patch": "@@ -4,6 +4,7 @@ Tailored from @com_github_grpc_grpc:bazel/python_rules.bzl\n \n load(\"@rules_python//python:defs.bzl\", \"py_library\")\n load(\"@rules_proto//proto:defs.bzl\", \"ProtoInfo\")\n+load(\"@bazel_skylib//lib:paths.bzl\", \"paths\")\n load(\n     \"@com_github_grpc_grpc//bazel:protobuf.bzl\",\n     \"declare_out_files\",\n@@ -26,8 +27,8 @@ def _generate_py_impl(context):\n \n     out_dir = get_out_dir(protos, context)\n     real_out_dir = out_dir.path\n-    if context.build_file_path.startswith(\"external\"):\n-        real_out_dir = real_out_dir + \"/external/apollo/\"\n+    if context.build_file_path.startswith(\"apollo/\"):\n+        real_out_dir = paths.join(real_out_dir, \"external/apollo\")\n \n     arguments = ([\n         \"--python_out={}\".format(real_out_dir),"
        }
    ],
    "ApolloAuto/apollo/13250": [
        {
            "sha": "4aebbc47715fcc575252ec2688cf72d2fe696493",
            "filename": "cyber/tools/cyber_launch/cyber_launch.py",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/260c29a72b716c09d738c5fe1840f8fb5a4ea525/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/260c29a72b716c09d738c5fe1840f8fb5a4ea525/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftools%2Fcyber_launch%2Fcyber_launch.py?ref=260c29a72b716c09d738c5fe1840f8fb5a4ea525",
            "patch": "@@ -254,15 +254,15 @@ def check_cleanup(self):\n             try:\n                 if not pw.is_alive():\n                     if pw.exception_handler == \"respawn\":\n-                        logger.warn(\n+                        logger.warning(\n                             'child process [%s][%d] exit, respawn!' % (pw.name, pw.pid))\n                         result = pw.start()\n                         if result != 0:\n                             logger.error(\n                                 'respawn process [%s] failed, stop all!' % (pw.name))\n                             stop()\n                     elif pw.exception_handler == \"exit\":\n-                        logger.warn(\n+                        logger.warning(\n                             'child process [%s][%d] exit, stop all' % (pw.name, pw.pid))\n                         stop()\n                     dead_cnt += 1\n@@ -298,7 +298,7 @@ def stop(self, signal):\n \n         for p in self.procs:\n             if p.is_alive():\n-                logger.warn('Waiting for [%s][%s] exit.' % (p.name, p.pid))\n+                logger.warning('Waiting for [%s][%s] exit.' % (p.name, p.pid))\n                 p.wait()\n                 logger.info(\n                     'Process [%s] has been stopped. dag_file: %s' % (p.name, p.dag_list))"
        }
    ],
    "ApolloAuto/apollo/13256": [
        {
            "sha": "e895aca641ac5846468b71c56b3d41e52a374fd4",
            "filename": "cyber/python/cyber_py3/cyber.py",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4a544c583d331c7936ea9ce4cf069b86585d1a11/cyber%2Fpython%2Fcyber_py3%2Fcyber.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4a544c583d331c7936ea9ce4cf069b86585d1a11/cyber%2Fpython%2Fcyber_py3%2Fcyber.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fpython%2Fcyber_py3%2Fcyber.py?ref=4a544c583d331c7936ea9ce4cf069b86585d1a11",
            "patch": "@@ -290,7 +290,9 @@ def create_client(self, name, request_data_type, response_data_type):\n         return Client(c, response_data_type)\n \n     def service_callback(self, name):\n-        v = self.services[name]\n+        # Temporary workaround for cyber_py3 examples: service & client\n+        v = self.services[name.decode(\"utf-8\")]\n+\n         msg_str = _CYBER.PyService_read(v[0])\n         if (len(msg_str) > 0):\n             proto = v[3]()"
        }
    ],
    "ApolloAuto/apollo/13263": [
        {
            "sha": "6412ddf463648da6764e28f656d98decf7f7cfaf",
            "filename": "modules/perception/lidar/lib/detection/lidar_point_pillars/postprocess_cuda.cu",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/78b432e2557ed2b1978de4775a2ca839c412397f/modules%2Fperception%2Flidar%2Flib%2Fdetection%2Flidar_point_pillars%2Fpostprocess_cuda.cu",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/78b432e2557ed2b1978de4775a2ca839c412397f/modules%2Fperception%2Flidar%2Flib%2Fdetection%2Flidar_point_pillars%2Fpostprocess_cuda.cu",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Flidar%2Flib%2Fdetection%2Flidar_point_pillars%2Fpostprocess_cuda.cu?ref=78b432e2557ed2b1978de4775a2ca839c412397f",
            "patch": "@@ -134,7 +134,7 @@ __global__ void filter_kernel(\n \n       xmin = fminf(xmin, offset_corners[i * 2 + 0]);\n       ymin = fminf(ymin, offset_corners[i * 2 + 1]);\n-      xmax = fmaxf(xmin, offset_corners[i * 2 + 0]);\n+      xmax = fmaxf(xmax, offset_corners[i * 2 + 0]);\n       ymax = fmaxf(ymax, offset_corners[i * 2 + 1]);\n     }\n     // box_for_nms(num_box, 4)"
        }
    ],
    "ApolloAuto/apollo/13314": [
        {
            "sha": "fb51ced4714ef595f0e0465fb90cc9876ee97d96",
            "filename": "modules/tools/gen_vehicle_protocol/gen_proto_file.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/af713d694b0b0853476fc66d270f12ab817a01be/modules%2Ftools%2Fgen_vehicle_protocol%2Fgen_proto_file.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/af713d694b0b0853476fc66d270f12ab817a01be/modules%2Ftools%2Fgen_vehicle_protocol%2Fgen_proto_file.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fgen_vehicle_protocol%2Fgen_proto_file.py?ref=af713d694b0b0853476fc66d270f12ab817a01be",
            "patch": "@@ -109,7 +109,7 @@ def gen_proto_file(config_file, work_dir):\n     if not os.path.exists(work_dir):\n         os.makedirs(work_dir)\n     with open(config_file, 'r') as fp:\n-        content = yaml.load(fp)\n+        content = yaml.safe_load(fp)\n         protocols = content[\"protocols\"]\n         car_type = content[\"car_type\"]\n         with open(\"%s/%s.proto\" % (work_dir, car_type.lower()), 'w') as pb_fp:"
        }
    ],
    "ApolloAuto/apollo/13328": [
        {
            "sha": "e44acc2f9671174ded80e49ca73abb61a1b87fbd",
            "filename": "modules/tools/vehicle_calibration/data_collector.py",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/dc51602af27e5cdb00a26577368f3db9ce8c135b/modules%2Ftools%2Fvehicle_calibration%2Fdata_collector.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/dc51602af27e5cdb00a26577368f3db9ce8c135b/modules%2Ftools%2Fvehicle_calibration%2Fdata_collector.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fvehicle_calibration%2Fdata_collector.py?ref=dc51602af27e5cdb00a26577368f3db9ce8c135b",
            "patch": "@@ -99,6 +99,7 @@ def run(self, cmd):\n         self.controlcmd.gear_location = chassis_pb2.Chassis.GEAR_DRIVE\n \n         self.canmsg_received = False\n+        self.case = 'a'\n \n         while self.in_session:\n             now = cyber_time.Time.now().to_sec()"
        }
    ],
    "ApolloAuto/apollo/13386": [
        {
            "sha": "dbe7ab1e5f419a90bf869ff780e8721e6757946a",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a643dfd79e6917b27a59fecd5f80cc675f70871a/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a643dfd79e6917b27a59fecd5f80cc675f70871a/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=a643dfd79e6917b27a59fecd5f80cc675f70871a",
            "patch": "@@ -140,7 +140,7 @@ function stop_all_apollo_containers_for_user() {\n             info \"Now stop container ${container} ...\"\n             if docker stop \"${container}\" >/dev/null; then\n                 if [[ \"${force}\" == \"-f\" || \"${force}\" == \"--force\" ]]; then\n-                    docker rm -f \"${container}\" >/dev/null\n+                    docker rm -f \"${container}\" 2>/dev/null\n                 fi\n                 info \"Done.\"\n             else"
        }
    ],
    "ApolloAuto/apollo/13405": [
        {
            "sha": "557f90de9aeae72dbcf5f28b45c84a0b067f3aba",
            "filename": "modules/dreamview/conf/hmi_modes/mkz_standard_debug_hesai.pb.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2fa9ca4c046801d1a2d39f8a33dccc58c7aea74c/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Fmkz_standard_debug_hesai.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2fa9ca4c046801d1a2d39f8a33dccc58c7aea74c/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Fmkz_standard_debug_hesai.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Fmkz_standard_debug_hesai.pb.txt?ref=2fa9ca4c046801d1a2d39f8a33dccc58c7aea74c",
            "patch": "@@ -37,7 +37,7 @@ cyber_modules {\n cyber_modules {\n   key: \"Localization\"\n   value: {\n-    dag_files: \"/apollo/modules/localization/dag/dag_streaming_rtk_localization.dag\"\n+    dag_files: \"/apollo/modules/localization/dag/dag_streaming_msf_localization.dag\"\n   }\n }\n cyber_modules {"
        }
    ],
    "ApolloAuto/apollo/13410": [
        {
            "sha": "305fcea3a2bfac84ea026e0584e6196bbbb85719",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2797651b86b9fb86dd6ff59b2f1be09b3cf22db6/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2797651b86b9fb86dd6ff59b2f1be09b3cf22db6/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=2797651b86b9fb86dd6ff59b2f1be09b3cf22db6",
            "patch": "@@ -27,7 +27,7 @@ DEV_INSIDE=\"in-dev-docker\"\n SUPPORTED_ARCHS=(x86_64 aarch64)\n TARGET_ARCH=\"$(uname -m)\"\n \n-VERSION_X86_64=\"dev-x86_64-18.04-20210129_0240\"\n+VERSION_X86_64=\"dev-x86_64-18.04-20210204_2153\"\n TESTING_VERSION_X86_64=\"dev-x86_64-18.04-testing-20210112_0008\"\n \n VERSION_AARCH64=\"dev-aarch64-18.04-20201218_0030\""
        }
    ],
    "ApolloAuto/apollo/13435": [
        {
            "sha": "9745774dbfaa01777c84efaa6bd6daa5bcc0396d",
            "filename": "docker/build/installers/install_opencv.sh",
            "status": "modified",
            "additions": 55,
            "deletions": 55,
            "changes": 110,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/c5e9ee12f4b230c9c41c10c60f3045dfbd534cc1/docker%2Fbuild%2Finstallers%2Finstall_opencv.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/c5e9ee12f4b230c9c41c10c60f3045dfbd534cc1/docker%2Fbuild%2Finstallers%2Finstall_opencv.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fbuild%2Finstallers%2Finstall_opencv.sh?ref=c5e9ee12f4b230c9c41c10c60f3045dfbd534cc1",
            "patch": "@@ -31,7 +31,7 @@ if [ -z \"${WORKHORSE}\" ]; then\n     WORKHORSE=\"cpu\"\n fi\n \n-# Note(all): It seems that opencv_contrib is not used in Apollo\n+# Note(all): opencv_contrib is not required in cpu mode\n BUILD_CONTRIB=\"no\"\n \n # 1) Install OpenCV via apt\n@@ -68,14 +68,6 @@ DOWNLOAD_LINK=\"https://github.com/opencv/opencv/archive/${VERSION}.tar.gz\"\n download_if_not_cached \"${PKG_OCV}\" \"${CHECKSUM}\" \"${DOWNLOAD_LINK}\"\n tar xzf ${PKG_OCV}\n \n-if [ \"${BUILD_CONTRIB}\" = \"yes\" ]; then\n-    PKG_CONTRIB=\"opencv_contrib-${VERSION}.tar.gz\"\n-    CHECKSUM=\"a69772f553b32427e09ffbfd0c8d5e5e47f7dab8b3ffc02851ffd7f912b76840\"\n-    DOWNLOAD_LINK=\"https://github.com/opencv/opencv_contrib/archive/${VERSION}.tar.gz\"\n-    download_if_not_cached \"${PKG_CONTRIB}\" \"${CHECKSUM}\" \"${DOWNLOAD_LINK}\"\n-    tar xzf ${PKG_CONTRIB}\n-fi\n-\n # https://stackoverflow.com/questions/12427928/configure-and-build-opencv-to-custom-ffmpeg-install\n export LD_LIBRARY_PATH=${SYSROOT_DIR}/lib\n export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:${SYSROOT_DIR}/lib/pkgconfig\n@@ -88,12 +80,21 @@ GPU_OPTIONS=\n if [ \"${WORKHORSE}\" = \"gpu\" ]; then\n     GPU_OPTIONS=\"-DWITH_CUDA=ON -DWITH_CUFFT=ON -DWITH_CUBLAS=ON -DWITH_CUDNN=ON\"\n     GPU_OPTIONS=\"${GPU_OPTIONS} -DCUDA_PROPAGATE_HOST_FLAGS=OFF\"\n-    GPU_OPTIONS=\"${GPU_OPTIONS} -DCUDA_ARCH_BIN=\\\"${SUPPORTED_NVIDIA_SMS}\\\"\"\n+    GPU_OPTIONS=\"${GPU_OPTIONS} -DCUDA_ARCH_BIN=${SUPPORTED_NVIDIA_SMS// /,}\"\n     # GPU_OPTIONS=\"${GPU_OPTIONS} -DWITH_NVCUVID=ON\"\n+    BUILD_CONTRIB=\"yes\"\n else\n     GPU_OPTIONS=\"-DWITH_CUDA=OFF\"\n fi\n \n+if [ \"${BUILD_CONTRIB}\" = \"yes\" ]; then\n+    PKG_CONTRIB=\"opencv_contrib-${VERSION}.tar.gz\"\n+    CHECKSUM=\"a69772f553b32427e09ffbfd0c8d5e5e47f7dab8b3ffc02851ffd7f912b76840\"\n+    DOWNLOAD_LINK=\"https://github.com/opencv/opencv_contrib/archive/${VERSION}.tar.gz\"\n+    download_if_not_cached \"${PKG_CONTRIB}\" \"${CHECKSUM}\" \"${DOWNLOAD_LINK}\"\n+    tar xzf ${PKG_CONTRIB}\n+fi\n+\n TARGET_ARCH=\"$(uname -m)\"\n \n EXTRA_OPTIONS=\n@@ -102,60 +103,59 @@ if [ \"${TARGET_ARCH}\" = \"x86_64\" ]; then\n fi\n \n if [ \"${BUILD_CONTRIB}\" = \"yes\" ]; then\n-    EXTRA_OPTIONS=\"${EXTRA_OPTIONS} -DOPENCV_EXTRA_MODULES_PATH=\\\"../../opencv_contrib-${VERSION}/modules\\\"\"\n+    EXTRA_OPTIONS=\"${EXTRA_OPTIONS} -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${VERSION}/modules\"\n+else \n+    EXTRA_OPTIONS=\"${EXTRA_OPTIONS} -DBUILD_opencv_world=OFF\"\n fi\n \n # -DBUILD_LIST=core,highgui,improc\n pushd \"opencv-${VERSION}\"\n-mkdir build && cd build\n-cmake .. \\\n-    -DCMAKE_INSTALL_PREFIX=\"${SYSROOT_DIR}\" \\\n-    -DCMAKE_BUILD_TYPE=Release \\\n-    -DBUILD_SHARED_LIBS=ON \\\n-    -DENABLE_PRECOMPILED_HEADERS=OFF \\\n-    -DOPENCV_GENERATE_PKGCONFIG=ON \\\n-    -DBUILD_EXAMPLES=OFF \\\n-    -DBUILD_DOCS=OFF \\\n-    -DBUILD_TESTS=OFF \\\n-    -DBUILD_PERF_TESTS=OFF \\\n-    -DBUILD_JAVA=OFF \\\n-    -DBUILD_PROTOBUF=OFF \\\n-    -DPROTOBUF_UPDATE_FILES=ON \\\n-    -DINSTALL_C_EXAMPLES=OFF \\\n-    -DWITH_GTK=OFF \\\n-    -DWITH_IPP=OFF \\\n-    -DWITH_ITT=OFF \\\n-    -DWITH_TBB=OFF \\\n-    -DWITH_EIGEN=ON \\\n-    -DWITH_FFMPEG=ON \\\n-    -DWITH_LIBV4L=ON \\\n-    -DWITH_OPENMP=ON \\\n-    -DWITH_OPENNI=ON \\\n-    -DWITH_OPENCL=ON \\\n-    -DWITH_WEBP=ON \\\n-    -DOpenGL_GL_PREFERENCE=GLVND \\\n-    -DBUILD_opencv_python2=OFF \\\n-    -DBUILD_opencv_python3=ON \\\n-    -DBUILD_NEW_PYTHON_SUPPORT=ON \\\n-    -DPYTHON_DEFAULT_EXECUTABLE=\"$(which python3)\" \\\n-    -DOPENCV_PYTHON3_INSTALL_PATH=\"/usr/local/lib/python$(py3_version)/dist-packages\" \\\n-    -DOPENCV_ENABLE_NONFREE=ON \\\n-    -DCV_TRACE=OFF \\\n-    ${GPU_OPTIONS} \\\n-    ${EXTRA_OPTIONS}\n-\n-make -j$(nproc)\n-make install\n+    [[ ! -e build ]] && mkdir build \n+    pushd build\n+        cmake .. \\\n+            -DCMAKE_INSTALL_PREFIX=\"${SYSROOT_DIR}\" \\\n+            -DCMAKE_BUILD_TYPE=Release \\\n+            -DBUILD_SHARED_LIBS=ON \\\n+            -DENABLE_PRECOMPILED_HEADERS=OFF \\\n+            -DOPENCV_GENERATE_PKGCONFIG=ON \\\n+            -DBUILD_EXAMPLES=OFF \\\n+            -DBUILD_DOCS=OFF \\\n+            -DBUILD_TESTS=OFF \\\n+            -DBUILD_PERF_TESTS=OFF \\\n+            -DBUILD_JAVA=OFF \\\n+            -DBUILD_PROTOBUF=OFF \\\n+            -DPROTOBUF_UPDATE_FILES=ON \\\n+            -DINSTALL_C_EXAMPLES=OFF \\\n+            -DWITH_GTK=OFF \\\n+            -DWITH_IPP=OFF \\\n+            -DWITH_ITT=OFF \\\n+            -DWITH_TBB=OFF \\\n+            -DWITH_EIGEN=ON \\\n+            -DWITH_FFMPEG=ON \\\n+            -DWITH_LIBV4L=ON \\\n+            -DWITH_OPENMP=ON \\\n+            -DWITH_OPENNI=ON \\\n+            -DWITH_OPENCL=ON \\\n+            -DWITH_WEBP=ON \\\n+            -DOpenGL_GL_PREFERENCE=GLVND \\\n+            -DBUILD_opencv_python2=OFF \\\n+            -DBUILD_opencv_python3=ON \\\n+            -DBUILD_NEW_PYTHON_SUPPORT=ON \\\n+            -DPYTHON_DEFAULT_EXECUTABLE=\"$(which python3)\" \\\n+            -DOPENCV_PYTHON3_INSTALL_PATH=\"/usr/local/lib/python$(py3_version)/dist-packages\" \\\n+            -DOPENCV_ENABLE_NONFREE=ON \\\n+            -DCV_TRACE=OFF \\\n+            ${GPU_OPTIONS} \\\n+            ${EXTRA_OPTIONS}\n+        make -j$(nproc)\n+        make install\n+    popd\n popd\n \n ldconfig\n ok \"Successfully installed OpenCV ${VERSION}.\"\n \n-rm -rf \"${PKG_OCV}\" \"opencv-${VERSION}\"\n-\n-if [ \"${BUILD_CONTRIB}\" = \"yes\" ]; then\n-    rm -rf \"${PKG_CONTRIB}\" \"opencv_contrib-${VERSION}\"\n-fi\n+rm -rf opencv*\n \n if [[ -n \"${CLEAN_DEPS}\" ]]; then\n     apt_get_remove \\"
        }
    ],
    "ApolloAuto/apollo/13436": [
        {
            "sha": "31b3ccf4bef466d630650e13c9c17fb8c5935d3f",
            "filename": "docker/build/build_docker.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/28b761aba48dad5c5354c21073ae48b16a404ab4/docker%2Fbuild%2Fbuild_docker.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/28b761aba48dad5c5354c21073ae48b16a404ab4/docker%2Fbuild%2Fbuild_docker.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fbuild%2Fbuild_docker.sh?ref=28b761aba48dad5c5354c21073ae48b16a404ab4",
            "patch": "@@ -186,7 +186,7 @@ function print_usage() {\n     echo \"${TAB}-h,--help   Show this message and exit\"\n     echo \"E.g.,\"\n     echo \"${TAB}${prog} -f cyber.x86_64.dockerfile -m build -g cn\"\n-    echo \"${TAB}${prog} -f dev.aarch64.dockerfile -m download -b testing\"\n+    echo \"${TAB}${prog} -f dev.aarch64.dockerfile -m download -d testing\"\n }\n \n function check_opt_arg() {"
        }
    ],
    "ApolloAuto/apollo/13481": [
        {
            "sha": "5454475e48ed112b5dae27df2a39ab9b02899f63",
            "filename": "modules/dreamview/backend/hmi/hmi_worker.cc",
            "status": "modified",
            "additions": 8,
            "deletions": 6,
            "changes": 14,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/692a4931cae58ff4c230551ea8523b829bc414c7/modules%2Fdreamview%2Fbackend%2Fhmi%2Fhmi_worker.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/692a4931cae58ff4c230551ea8523b829bc414c7/modules%2Fdreamview%2Fbackend%2Fhmi%2Fhmi_worker.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fbackend%2Fhmi%2Fhmi_worker.cc?ref=692a4931cae58ff4c230551ea8523b829bc414c7",
            "patch": "@@ -619,14 +619,16 @@ void HMIWorker::StartModule(const std::string& module) const {\n \n   if (module == \"Recorder\") {\n     auto* monitors = FuelMonitorManager::Instance()->GetCurrentMonitors();\n-    auto iter = monitors->find(FLAGS_data_collection_monitor_name);\n-    if (iter != monitors->end()) {\n-      auto* data_collection_monitor = iter->second.get();\n-      if (data_collection_monitor->IsEnabled() && record_count_ == 0) {\n-        data_collection_monitor->Restart();\n+    if (monitors != nullptr) {\n+      auto iter = monitors->find(FLAGS_data_collection_monitor_name);\n+      if (iter != monitors->end()) {\n+        auto* data_collection_monitor = iter->second.get();\n+        if (data_collection_monitor->IsEnabled() && record_count_ == 0) {\n+          data_collection_monitor->Restart();\n+        }\n       }\n+      ++record_count_;\n     }\n-    ++record_count_;\n   }\n }\n "
        }
    ],
    "ApolloAuto/apollo/13504": [
        {
            "sha": "74ac9e6bb6d4bb4abd367001585fadb1e681acd7",
            "filename": "modules/dreamview/conf/vehicle_data.pb.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/40a15134d2b7f3fee81195379640beaa008d2281/modules%2Fdreamview%2Fconf%2Fvehicle_data.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/40a15134d2b7f3fee81195379640beaa008d2281/modules%2Fdreamview%2Fconf%2Fvehicle_data.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fconf%2Fvehicle_data.pb.txt?ref=40a15134d2b7f3fee81195379640beaa008d2281",
            "patch": "@@ -194,6 +194,7 @@ data_files {\n   source_path: \"perception_params\"\n   dest_path: \"/apollo/modules/perception/data/params\"\n }\n+data_files {\n   source_path: \"perception_conf/fusion_component_conf.pb.txt\"\n   dest_path: \"/apollo/modules/perception/production/conf/perception/fusion/fusion_component_conf.pb.txt\"\n }"
        }
    ],
    "ApolloAuto/apollo/13532": [
        {
            "sha": "e57949aac6d3ac2485e58e773f06ad5245e9136b",
            "filename": "modules/tools/control_info/control_info.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0eed555038383d4b21f6a53ddffc35a56f90387b/modules%2Ftools%2Fcontrol_info%2Fcontrol_info.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0eed555038383d4b21f6a53ddffc35a56f90387b/modules%2Ftools%2Fcontrol_info%2Fcontrol_info.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fcontrol_info%2Fcontrol_info.py?ref=0eed555038383d4b21f6a53ddffc35a56f90387b",
            "patch": "@@ -319,7 +319,7 @@ def press(self, event):\n         if event.key == 'q' or event.key == 'Q':\n             plt.close('all')\n         if event.key == 'a' or event.key == 'A':\n-            self.longitutidinal()\n+            self.longitudinal()\n         if event.key == 'z' or event.key == 'Z':\n             self.lateral()\n "
        }
    ],
    "ApolloAuto/apollo/13627": [
        {
            "sha": "52fccb708e4cc96300a21fc545b7a8adb57d8412",
            "filename": "modules/perception/lidar/lib/detection/lidar_point_pillars/postprocess_cuda.cu",
            "status": "modified",
            "additions": 21,
            "deletions": 5,
            "changes": 26,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/099191158947588a291628980e4e4b8cebe2345c/modules%2Fperception%2Flidar%2Flib%2Fdetection%2Flidar_point_pillars%2Fpostprocess_cuda.cu",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/099191158947588a291628980e4e4b8cebe2345c/modules%2Fperception%2Flidar%2Flib%2Fdetection%2Flidar_point_pillars%2Fpostprocess_cuda.cu",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Flidar%2Flib%2Fdetection%2Flidar_point_pillars%2Fpostprocess_cuda.cu?ref=099191158947588a291628980e4e4b8cebe2345c",
            "patch": "@@ -31,6 +31,8 @@\n  */\n \n // headers in CUDA\n+#include <thrust/device_ptr.h>\n+#include <thrust/host_vector.h>\n #include <thrust/sort.h>\n \n // headers in local files\n@@ -245,11 +247,25 @@ void PostprocessCuda::DoPostprocessCuda(\n   GPU_CHECK(\n       cudaMalloc(reinterpret_cast<void**>(&dev_sorted_box_for_nms),\n                  num_box_corners_ * host_filter_count[0] * sizeof(float)));\n-  thrust::sequence(thrust::device, dev_indexes,\n-                   dev_indexes + host_filter_count[0]);\n-  thrust::sort_by_key(thrust::device, dev_filtered_score,\n-                      dev_filtered_score + size_t(host_filter_count[0]),\n-                      dev_indexes, thrust::greater<float>());\n+\n+  thrust::device_ptr<float> dev_ptr_filtered_score(dev_filtered_score);\n+  thrust::host_vector<float> host_filtered_score(host_filter_count[0]);\n+  thrust::copy(dev_ptr_filtered_score,\n+               dev_ptr_filtered_score + size_t(host_filter_count[0]),\n+               host_filtered_score.begin());\n+\n+  thrust::host_vector<int> host_indexes(host_filter_count[0]);\n+  thrust::sequence(host_indexes.begin(), host_indexes.end());\n+\n+  // TODO(chenjiahao): using GPU may cause crash, so use CPU here to sort,\n+  //  temporarily. Will change to GPU after upgrading CUDA in the future.\n+  thrust::sort_by_key(host_filtered_score.begin(),\n+                      host_filtered_score.end(),\n+                      host_indexes.begin(), thrust::greater<float>());\n+  GPU_CHECK(cudaMemcpy(dev_indexes,\n+                       thrust::raw_pointer_cast(host_indexes.data()),\n+                       host_filter_count[0] * sizeof(int),\n+                       cudaMemcpyHostToDevice));\n \n   const int num_blocks = DIVUP(host_filter_count[0], num_threads_);\n   sort_boxes_by_indexes_kernel<<<num_blocks, num_threads_>>>("
        }
    ],
    "ApolloAuto/apollo/13725": [
        {
            "sha": "b47adeec30cfe6d1173df9e1f0b5f9ea20b433e3",
            "filename": "modules/perception/inference/tensorrt/plugins/BUILD",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ef37443a380d95945c5ab18ca46f53c2c923f6bd/modules%2Fperception%2Finference%2Ftensorrt%2Fplugins%2FBUILD",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ef37443a380d95945c5ab18ca46f53c2c923f6bd/modules%2Fperception%2Finference%2Ftensorrt%2Fplugins%2FBUILD",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Finference%2Ftensorrt%2Fplugins%2FBUILD?ref=ef37443a380d95945c5ab18ca46f53c2c923f6bd",
            "patch": "@@ -37,6 +37,7 @@ cuda_library(\n         \"nms_cuda.cu\",\n     ],\n     hdrs = [\"kernels.h\"],\n+    alwayslink = True,\n     deps = [\n         \"//modules/perception/base:common\",\n         \"@local_config_cuda//cuda:cudart\","
        }
    ],
    "ApolloAuto/apollo/13730": [
        {
            "sha": "d66e5c06971f3b2cd509eeef23618458f20fb0f0",
            "filename": "docker/build/installers/install_opencv.sh",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/5b20127d8adf2efa1ac4bea891192e455a8460e0/docker%2Fbuild%2Finstallers%2Finstall_opencv.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/5b20127d8adf2efa1ac4bea891192e455a8460e0/docker%2Fbuild%2Finstallers%2Finstall_opencv.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fbuild%2Finstallers%2Finstall_opencv.sh?ref=5b20127d8adf2efa1ac4bea891192e455a8460e0",
            "patch": "@@ -49,6 +49,7 @@ apt_get_update_and_install \\\n     libjpeg-dev \\\n     libpng-dev \\\n     libtiff-dev \\\n+    libgtk2.0-dev \\\n     libv4l-dev \\\n     libeigen3-dev \\\n     libopenblas-dev \\\n@@ -134,7 +135,9 @@ pushd \"opencv-${VERSION}\"\n             -DBUILD_PROTOBUF=OFF \\\n             -DPROTOBUF_UPDATE_FILES=ON \\\n             -DINSTALL_C_EXAMPLES=OFF \\\n-            -DWITH_GTK=OFF \\\n+            -DWITH_GTK=ON \\\n+            -DWITH_GTK_2_X=ON \\\n+            -DWITH_QT=ON \\\n             -DWITH_IPP=OFF \\\n             -DWITH_ITT=OFF \\\n             -DWITH_TBB=OFF \\\n@@ -179,5 +182,6 @@ if [[ -n \"${CLEAN_DEPS}\" ]]; then\n         libatlas-base-dev \\\n         libxvidcore-dev \\\n         libx264-dev \\\n+        libgtk2.0-dev \\\n         libopenni-dev\n fi"
        }
    ],
    "ApolloAuto/apollo/13761": [
        {
            "sha": "b1cd429d6e256f1ab010c3809a9b6ccf138a6550",
            "filename": "modules/canbus/vehicle/vehicle_controller.cc",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/cdbf72e25ded24f9e952d5042b4f4378974319b4/modules%2Fcanbus%2Fvehicle%2Fvehicle_controller.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/cdbf72e25ded24f9e952d5042b4f4378974319b4/modules%2Fcanbus%2Fvehicle%2Fvehicle_controller.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcanbus%2Fvehicle%2Fvehicle_controller.cc?ref=cdbf72e25ded24f9e952d5042b4f4378974319b4",
            "patch": "@@ -120,7 +120,6 @@ ErrorCode VehicleController::Update(const ControlCommand &control_command) {\n     auto error_code = SetDrivingMode(mode);\n     if (error_code != ErrorCode::OK) {\n       AERROR << \"Failed to set driving mode.\";\n-      return error_code;\n     }\n   }\n "
        }
    ],
    "ApolloAuto/apollo/13821": [
        {
            "sha": "38567c646f4b46aeb9263afadd1a9c7400c5ab20",
            "filename": "modules/tools/record_play/rtk_recorder.py",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ff13295eaa91ee3da3b79b970afbc1de920e255f/modules%2Ftools%2Frecord_play%2Frtk_recorder.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ff13295eaa91ee3da3b79b970afbc1de920e255f/modules%2Ftools%2Frecord_play%2Frtk_recorder.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Frecord_play%2Frtk_recorder.py?ref=ff13295eaa91ee3da3b79b970afbc1de920e255f",
            "patch": "@@ -134,8 +134,8 @@ def localization_callback(self, data):\n         carmax_steer_angle = self.vehicle_param.max_steer_angle\n         carsteer_ratio = self.vehicle_param.steer_ratio\n         carwheel_base = self.vehicle_param.wheel_base\n-\t\tcurvature = math.tan(math.radians(carsteer / 100\n-                    * math.degrees(carmax_steer_angle)) / carsteer_ratio) / carwheel_base\n+        curvature = math.tan(math.radians(carsteer / 100\n+                     * math.degrees(carmax_steer_angle)) / carsteer_ratio) / carwheel_base\n \n         if abs(carspeed) >= speed_epsilon:\n             carcurvature_change_rate = (curvature - self.carcurvature) / ("
        }
    ],
    "ApolloAuto/apollo/13908": [
        {
            "sha": "580731d1fca23d7c8e2d3671923c64eeda35b614",
            "filename": "modules/drivers/lidar/lidar_driver_component.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/cca03ca94eb62ea3f00ab5a0ab3c727805437c09/modules%2Fdrivers%2Flidar%2Flidar_driver_component.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/cca03ca94eb62ea3f00ab5a0ab3c727805437c09/modules%2Fdrivers%2Flidar%2Flidar_driver_component.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdrivers%2Flidar%2Flidar_driver_component.cc?ref=cca03ca94eb62ea3f00ab5a0ab3c727805437c09",
            "patch": "@@ -31,7 +31,7 @@ bool LidarDriverComponent::Init() {\n   AINFO << \"conf:\" << conf_.DebugString();\n   LidarDriverFactory::Instance()->RegisterLidarClients();\n   driver_ = LidarDriverFactory::Instance()->CreateLidarDriver(node_, conf_);\n-  if (!driver_->Init()) {\n+  if (driver_ == nullptr || !driver_->Init()) {\n     AERROR << \"driver init error\";\n     return false;\n   }"
        }
    ],
    "ApolloAuto/apollo/13925": [
        {
            "sha": "00157b196aa214c496819e5ab7043bd84de45555",
            "filename": "modules/drivers/lidar/velodyne/driver/driver.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/26b4067f5615952a5655562ab3244bf4b1e12564/modules%2Fdrivers%2Flidar%2Fvelodyne%2Fdriver%2Fdriver.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/26b4067f5615952a5655562ab3244bf4b1e12564/modules%2Fdrivers%2Flidar%2Fvelodyne%2Fdriver%2Fdriver.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdrivers%2Flidar%2Fvelodyne%2Fdriver%2Fdriver.cc?ref=26b4067f5615952a5655562ab3244bf4b1e12564",
            "patch": "@@ -211,8 +211,7 @@ void VelodyneDriver::UpdateGpsTopHour(uint32_t current_time) {\n     return;\n   }\n   if (last_gps_time_ > current_time) {\n-    int32_t time_diff = static_cast<int32_t>(last_gps_time_ - current_time);\n-    if (time_diff > 3599000000) {\n+    if ((last_gps_time_ - current_time) > 3599000000) {\n       basetime_ += static_cast<uint64_t>(3600 * 1e6);\n       AINFO << \"Base time plus 3600s. Model: \" << config_.model() << std::fixed\n             << \". current:\" << current_time << \", last time:\" << last_gps_time_;"
        }
    ],
    "ApolloAuto/apollo/13973": [
        {
            "sha": "59d487365a6d83e2e15f413905dfe2e9d641badc",
            "filename": "modules/dreamview/conf/hmi_modes/mkz_standard_debug_hesai.pb.txt",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0462455fd2abbb7e6d9b7542993c9005e2ab5159/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Fmkz_standard_debug_hesai.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0462455fd2abbb7e6d9b7542993c9005e2ab5159/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Fmkz_standard_debug_hesai.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fconf%2Fhmi_modes%2Fmkz_standard_debug_hesai.pb.txt?ref=0462455fd2abbb7e6d9b7542993c9005e2ab5159",
            "patch": "@@ -100,6 +100,12 @@ cyber_modules {\n     dag_files: \"/apollo/modules/drivers/microphone/dag/microphone.dag\"\n   }\n }\n+cyber_modules {\n+  key: \"TaskManager\"\n+  value: {\n+    dag_files: \"/apollo/modules/task_manager/dag/task_manager.dag\"\n+  }\n+}\n modules {\n   key: \"Recorder\"\n   value: {"
        }
    ],
    "ApolloAuto/apollo/13979": [
        {
            "sha": "bc999c41e67378b71e6d0bde9824daa3611d76d3",
            "filename": "cyber/transport/shm/BUILD",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3da6315e365659a9bc40a46c6e26f3966d2a2837/cyber%2Ftransport%2Fshm%2FBUILD",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3da6315e365659a9bc40a46c6e26f3966d2a2837/cyber%2Ftransport%2Fshm%2FBUILD",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Ftransport%2Fshm%2FBUILD?ref=3da6315e365659a9bc40a46c6e26f3966d2a2837",
            "patch": "@@ -134,6 +134,7 @@ cc_test(\n     name = \"condition_notifier_test\",\n     size = \"small\",\n     srcs = [\"condition_notifier_test.cc\"],\n+    tags = [\"exclusive\"],\n     deps = [\n         \"//cyber:cyber_core\",\n         \"@com_google_googletest//:gtest_main\","
        }
    ],
    "ApolloAuto/apollo/13994": [
        {
            "sha": "0ba424497d7ef02d126c4eb71ebcebe9627f4566",
            "filename": "modules/control/controller/lon_controller.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/31dc46f9f2550931e2b6a27b2e121f98925ee563/modules%2Fcontrol%2Fcontroller%2Flon_controller.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/31dc46f9f2550931e2b6a27b2e121f98925ee563/modules%2Fcontrol%2Fcontroller%2Flon_controller.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcontrol%2Fcontroller%2Flon_controller.cc?ref=31dc46f9f2550931e2b6a27b2e121f98925ee563",
            "patch": "@@ -278,7 +278,7 @@ Status LonController::ComputeControlCommand(\n   debug->set_is_full_stop(false);\n   GetPathRemain(debug);\n \n-  if (trajectory_message_->trajectory_type() ==\n+  if((trajectory_message_->trajectory_type() ==\n        apollo::planning::ADCTrajectory::UNKNOWN) && \n        std::abs(cmd->steering_target()-chassis->steering_percentage())>20){\n     acceleration_cmd =0;"
        }
    ],
    "ApolloAuto/apollo/14077": [
        {
            "sha": "9af5a31c6210debba2ed2447734da341efe439f7",
            "filename": "docs/specs/D-kit/Lidar_Based_Auto_Driving/Virtual_Lane_Generation_cn.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/395af6e6c95fe34510ee99ade108684f1572207c/docs%2Fspecs%2FD-kit%2FLidar_Based_Auto_Driving%2FVirtual_Lane_Generation_cn.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/395af6e6c95fe34510ee99ade108684f1572207c/docs%2Fspecs%2FD-kit%2FLidar_Based_Auto_Driving%2FVirtual_Lane_Generation_cn.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fspecs%2FD-kit%2FLidar_Based_Auto_Driving%2FVirtual_Lane_Generation_cn.md?ref=395af6e6c95fe34510ee99ade108684f1572207c",
            "patch": "@@ -16,7 +16,7 @@\n \n ## \u524d\u63d0\u6761\u4ef6\n \n- - \u5b8c\u6210\u4e86[\u57fa\u4e8e\u6fc0\u5149\u96f7\u8fbe\u7684\u5c01\u95ed\u56ed\u533a\u81ea\u52a8\u9a7e\u9a76\u642d\u5efa--\u611f\u77e5\u8bbe\u5907\u6807\u5b9a](sensor_calibration_cn.md)\n+ - \u5b8c\u6210\u4e86[\u57fa\u4e8e\u6fc0\u5149\u96f7\u8fbe\u7684\u5c01\u95ed\u56ed\u533a\u81ea\u52a8\u9a7e\u9a76\u642d\u5efa--\u611f\u77e5\u8bbe\u5907\u6807\u5b9a](Sensor_Calibration_cn.md)\n  - \u5b8c\u6210\u4e86[\u5f00\u901a\u4e91\u670d\u52a1\u8d26\u53f7\u5411\u5bfc](../../Apollo_Fuel/apply_fuel_account_cn.md)\n  \n ## \u4e3b\u8981\u6b65\u9aa4"
        }
    ],
    "ApolloAuto/apollo/14177": [
        {
            "sha": "28e8ff82df3245c1a0d6c5dfb626971d014825fc",
            "filename": "modules/planning/conf/planning_config.pb.txt",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e3ea638ce685eafdb6514f84094858e960303d9e/modules%2Fplanning%2Fconf%2Fplanning_config.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e3ea638ce685eafdb6514f84094858e960303d9e/modules%2Fplanning%2Fconf%2Fplanning_config.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fconf%2Fplanning_config.pb.txt?ref=e3ea638ce685eafdb6514f84094858e960303d9e",
            "patch": "@@ -356,6 +356,7 @@ default_task_config: {\n   path_bounds_decider_config {\n     is_lane_borrowing: false\n     is_pull_over: false\n+    is_extend_lane_bounds_to_include_adc: false\n     pull_over_destination_to_adc_buffer: 25.0\n     pull_over_destination_to_pathend_buffer: 4.0\n     pull_over_road_edge_buffer: 0.15\n@@ -365,7 +366,7 @@ default_task_config: {\n default_task_config: {\n   task_type: PATH_LANE_BORROW_DECIDER\n   path_lane_borrow_decider_config {\n-    allow_lane_borrowing: false\n+    allow_lane_borrowing: true\n   }\n }\n default_task_config: {"
        }
    ],
    "ApolloAuto/apollo/14192": [
        {
            "sha": "7897227584a55e024bd478b842fc610abb271044",
            "filename": "modules/planning/open_space/coarse_trajectory_generator/reeds_shepp_path.cc",
            "status": "modified",
            "additions": 16,
            "deletions": 16,
            "changes": 32,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e7bb0e6123bfdb11e93504456374695cd430df28/modules%2Fplanning%2Fopen_space%2Fcoarse_trajectory_generator%2Freeds_shepp_path.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e7bb0e6123bfdb11e93504456374695cd430df28/modules%2Fplanning%2Fopen_space%2Fcoarse_trajectory_generator%2Freeds_shepp_path.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fopen_space%2Fcoarse_trajectory_generator%2Freeds_shepp_path.cc?ref=e7bb0e6123bfdb11e93504456374695cd430df28",
            "patch": "@@ -459,7 +459,7 @@ bool ReedShepp::CCCC(const double x, const double y, const double phi,\n bool ReedShepp::CCSC(const double x, const double y, const double phi,\n                      std::vector<ReedSheppPath>* all_possible_paths) {\n   RSPParam LRSL1_param;\n-  LRLRn(x, y, phi, &LRSL1_param);\n+  LRSL(x, y, phi, &LRSL1_param);\n   double LRSL1_lengths[4] = {LRSL1_param.t, -0.5 * M_PI, -LRSL1_param.u,\n                              LRSL1_param.v};\n   char LRSL1_types[] = \"LRSL\";\n@@ -470,7 +470,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSL2_param;\n-  LRLRn(-x, y, -phi, &LRSL2_param);\n+  LRSL(-x, y, -phi, &LRSL2_param);\n   double LRSL2_lengths[4] = {-LRSL2_param.t, 0.5 * M_PI, -LRSL2_param.u,\n                              -LRSL2_param.v};\n   char LRSL2_types[] = \"LRSL\";\n@@ -481,7 +481,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSL3_param;\n-  LRLRn(x, -y, -phi, &LRSL3_param);\n+  LRSL(x, -y, -phi, &LRSL3_param);\n   double LRSL3_lengths[4] = {LRSL3_param.t, -0.5 * M_PI, LRSL3_param.u,\n                              LRSL3_param.v};\n   char LRSL3_types[] = \"RLSR\";\n@@ -492,7 +492,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSL4_param;\n-  LRLRn(-x, -y, phi, &LRSL4_param);\n+  LRSL(-x, -y, phi, &LRSL4_param);\n   double LRSL4_lengths[4] = {-LRSL4_param.t, -0.5 * M_PI, -LRSL4_param.u,\n                              -LRSL4_param.v};\n   char LRSL4_types[] = \"RLSR\";\n@@ -503,7 +503,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSR1_param;\n-  LRLRp(x, y, phi, &LRSR1_param);\n+  LRSR(x, y, phi, &LRSR1_param);\n   double LRSR1_lengths[4] = {LRSR1_param.t, -0.5 * M_PI, LRSR1_param.u,\n                              LRSR1_param.v};\n   char LRSR1_types[] = \"LRSR\";\n@@ -514,7 +514,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSR2_param;\n-  LRLRp(-x, y, -phi, &LRSR2_param);\n+  LRSR(-x, y, -phi, &LRSR2_param);\n   double LRSR2_lengths[4] = {-LRSR2_param.t, 0.5 * M_PI, -LRSR2_param.u,\n                              -LRSR2_param.v};\n   char LRSR2_types[] = \"LRSR\";\n@@ -525,7 +525,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSR3_param;\n-  LRLRp(x, -y, -phi, &LRSR3_param);\n+  LRSR(x, -y, -phi, &LRSR3_param);\n   double LRSR3_lengths[4] = {LRSR3_param.t, -0.5 * M_PI, LRSR3_param.u,\n                              LRSR3_param.v};\n   char LRSR3_types[] = \"RLSL\";\n@@ -536,7 +536,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSR4_param;\n-  LRLRp(-x, -y, phi, &LRSR4_param);\n+  LRSR(-x, -y, phi, &LRSR4_param);\n   double LRSR4_lengths[4] = {-LRSR4_param.t, 0.5 * M_PI, -LRSR4_param.u,\n                              -LRSR4_param.v};\n   char LRSR4_types[] = \"RLSL\";\n@@ -551,7 +551,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   double yb = x * std::sin(phi) - y * std::cos(phi);\n \n   RSPParam LRSL5_param;\n-  LRLRn(xb, yb, phi, &LRSL5_param);\n+  LRSL(xb, yb, phi, &LRSL5_param);\n   double LRSL5_lengths[4] = {LRSL5_param.v, LRSL5_param.u, -0.5 * M_PI,\n                              LRSL5_param.t};\n   char LRSL5_types[] = \"LSRL\";\n@@ -562,7 +562,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSL6_param;\n-  LRLRn(-xb, yb, -phi, &LRSL6_param);\n+  LRSL(-xb, yb, -phi, &LRSL6_param);\n   double LRSL6_lengths[4] = {-LRSL6_param.v, -LRSL6_param.u, 0.5 * M_PI,\n                              -LRSL6_param.t};\n   char LRSL6_types[] = \"LSRL\";\n@@ -573,7 +573,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSL7_param;\n-  LRLRn(xb, -yb, -phi, &LRSL7_param);\n+  LRSL(xb, -yb, -phi, &LRSL7_param);\n   double LRSL7_lengths[4] = {LRSL7_param.v, LRSL7_param.u, -0.5 * M_PI,\n                              LRSL7_param.t};\n   char LRSL7_types[] = \"RSLR\";\n@@ -584,7 +584,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSL8_param;\n-  LRLRn(-xb, -yb, phi, &LRSL8_param);\n+  LRSL(-xb, -yb, phi, &LRSL8_param);\n   double LRSL8_lengths[4] = {-LRSL8_param.v, -LRSL8_param.u, 0.5 * M_PI,\n                              -LRSL8_param.t};\n   char LRSL8_types[] = \"RSLR\";\n@@ -595,7 +595,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSR5_param;\n-  LRLRp(xb, yb, phi, &LRSR5_param);\n+  LRSR(xb, yb, phi, &LRSR5_param);\n   double LRSR5_lengths[4] = {LRSR5_param.v, LRSR5_param.u, -0.5 * M_PI,\n                              LRSR5_param.t};\n   char LRSR5_types[] = \"RSRL\";\n@@ -606,7 +606,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSR6_param;\n-  LRLRp(-xb, yb, -phi, &LRSR6_param);\n+  LRSR(-xb, yb, -phi, &LRSR6_param);\n   double LRSR6_lengths[4] = {-LRSR6_param.v, -LRSR6_param.u, 0.5 * M_PI,\n                              -LRSR6_param.t};\n   char LRSR6_types[] = \"RSRL\";\n@@ -617,7 +617,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSR7_param;\n-  LRLRp(xb, -yb, -phi, &LRSR7_param);\n+  LRSR(xb, -yb, -phi, &LRSR7_param);\n   double LRSR7_lengths[4] = {LRSR7_param.v, LRSR7_param.u, -0.5 * M_PI,\n                              LRSR7_param.t};\n   char LRSR7_types[] = \"LSLR\";\n@@ -628,7 +628,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n   }\n \n   RSPParam LRSR8_param;\n-  LRLRp(-xb, -yb, phi, &LRSR8_param);\n+  LRSR(-xb, -yb, phi, &LRSR8_param);\n   double LRSR8_lengths[4] = {-LRSR8_param.v, -LRSR8_param.u, 0.5 * M_PI,\n                              -LRSR8_param.t};\n   char LRSR8_types[] = \"LSLR\";"
        }
    ],
    "ApolloAuto/apollo/14196": [
        {
            "sha": "7eed9f5b8bdfedcc84fca5de7e043ad7fe1ead98",
            "filename": "modules/dreamview/backend/map/map_service.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/ebe9b530cc3fcb673ccfaf7c12c8ab7050a8d804/modules%2Fdreamview%2Fbackend%2Fmap%2Fmap_service.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/ebe9b530cc3fcb673ccfaf7c12c8ab7050a8d804/modules%2Fdreamview%2Fbackend%2Fmap%2Fmap_service.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fbackend%2Fmap%2Fmap_service.cc?ref=ebe9b530cc3fcb673ccfaf7c12c8ab7050a8d804",
            "patch": "@@ -354,7 +354,7 @@ bool MapService::GetNearestLaneWithHeading(const double x, const double y,\n   PointENU point;\n   point.set_x(x);\n   point.set_y(y);\n-  static constexpr double kSearchRadius = 1.0;\n+  static constexpr double kSearchRadius = 3.0;\n   static constexpr double kMaxHeadingDiff = 1.0;\n   if (!MapReady() || HDMap()->GetNearestLaneWithHeading(\n                          point, kSearchRadius, heading, kMaxHeadingDiff,"
        }
    ],
    "ApolloAuto/apollo/14197": [
        {
            "sha": "146d8c9a6e904bb8c4ce1389643b4451167762bb",
            "filename": "modules/bridge/udp_bridge_multi_receiver_component.h",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d43c8b4ac225a62004450846a345b601a1a7101e/modules%2Fbridge%2Fudp_bridge_multi_receiver_component.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d43c8b4ac225a62004450846a345b601a1a7101e/modules%2Fbridge%2Fudp_bridge_multi_receiver_component.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fbridge%2Fudp_bridge_multi_receiver_component.h?ref=d43c8b4ac225a62004450846a345b601a1a7101e",
            "patch": "@@ -43,7 +43,7 @@ namespace bridge {\n class UDPBridgeMultiReceiverComponent final : public cyber::Component<> {\n  public:\n   UDPBridgeMultiReceiverComponent();\n-  ~UDPBridgeMultiReceiverComponent();\n+  ~UDPBridgeMultiReceiverComponent() = default;\n \n   bool Init() override;\n   std::string Name() const { return FLAGS_bridge_module_name; }\n@@ -68,5 +68,7 @@ class UDPBridgeMultiReceiverComponent final : public cyber::Component<> {\n   std::vector<std::shared_ptr<ProtoDiserializedBufBase>> proto_list_;\n };\n \n+CYBER_REGISTER_COMPONENT(UDPBridgeMultiReceiverComponent)\n+\n }  // namespace bridge\n }  // namespace apollo"
        }
    ],
    "ApolloAuto/apollo/14205": [
        {
            "sha": "59af4ce066701e75734bc13cbd458aa3b1f7395c",
            "filename": "modules/planning/scenarios/scenario_manager.cc",
            "status": "modified",
            "additions": 12,
            "deletions": 3,
            "changes": 15,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/d85e02822279062654b11845bd5f6e3488b0fe94/modules%2Fplanning%2Fscenarios%2Fscenario_manager.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/d85e02822279062654b11845bd5f6e3488b0fe94/modules%2Fplanning%2Fscenarios%2Fscenario_manager.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fscenarios%2Fscenario_manager.cc?ref=d85e02822279062654b11845bd5f6e3488b0fe94",
            "patch": "@@ -515,7 +515,8 @@ ScenarioConfig::ScenarioType ScenarioManager::SelectTrafficLightScenario(\n \n   bool traffic_light_scenario = false;\n   bool red_light = false;\n-\n+  bool left_turn_signal = false;\n+  const auto hdmap_ptr = HDMapUtil::BaseMapPtr();\n   // note: need iterate all lights to check no RED/YELLOW/UNKNOWN\n   for (const auto& traffic_light_overlap : next_traffic_lights) {\n     const double adc_distance_to_traffic_light =\n@@ -538,7 +539,15 @@ ScenarioConfig::ScenarioType ScenarioManager::SelectTrafficLightScenario(\n     ADEBUG << \"traffic_light_id[\" << traffic_light_overlap.object_id\n            << \"] start_s[\" << traffic_light_overlap.start_s << \"] color[\"\n            << signal_color << \"]\";\n-\n+    apollo::hdmap::Id signal_id;\n+    signal_id.set_id(traffic_light_overlap.object_id);\n+    auto signal = hdmap_ptr->GetSignalById(signal_id)->signal();\n+    for (auto subsignal : signal.subsignal()) {\n+      if (subsignal.type() == apollo::hdmap::Subsignal::ARROW_LEFT) {\n+        left_turn_signal = true;\n+        break;\n+      }\n+    }\n     if (signal_color != perception::TrafficLight::GREEN) {\n       red_light = true;\n       break;\n@@ -565,7 +574,7 @@ ScenarioConfig::ScenarioType ScenarioManager::SelectTrafficLightScenario(\n           scenario_config.start_traffic_light_scenario_distance()) {\n         traffic_light_unprotected_right_turn_scenario = true;\n       }\n-    } else if (left_turn) {\n+    } else if (left_turn && !left_turn_signal) {\n       // check TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN\n       const auto& scenario_config =\n           config_map_[ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN]"
        }
    ],
    "ApolloAuto/apollo/14295": [
        {
            "sha": "2a75eacf866358a82d3ee5cfa33cb16c7c032656",
            "filename": "cyber/examples/common_component_example/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/81ec8a9ccd3c44559585a95e6908fcc3a3e77b80/cyber%2Fexamples%2Fcommon_component_example%2FREADME.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/81ec8a9ccd3c44559585a95e6908fcc3a3e77b80/cyber%2Fexamples%2Fcommon_component_example%2FREADME.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fexamples%2Fcommon_component_example%2FREADME.md?ref=81ec8a9ccd3c44559585a95e6908fcc3a3e77b80",
            "patch": "@@ -33,7 +33,7 @@ cyber_launch start cyber/examples/common_component_example/common.launch\n Or\n \n ```\n-mainbooard -d cyber/examples/common_component_example/common.dag\n+mainboard -d cyber/examples/common_component_example/common.dag\n ```\n \n ### Start the writer nodes"
        }
    ],
    "ApolloAuto/apollo/14317": [
        {
            "sha": "3d5ad1b8bc26ba35571ef4862dcd23e5d7f14b2d",
            "filename": "modules/storytelling/README.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/a34349f4ec1be77fd8c8ed01b5ce4c4391548fd3/modules%2Fstorytelling%2FREADME.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/a34349f4ec1be77fd8c8ed01b5ce4c4391548fd3/modules%2Fstorytelling%2FREADME.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fstorytelling%2FREADME.md?ref=a34349f4ec1be77fd8c8ed01b5ce4c4391548fd3",
            "patch": "@@ -1,7 +1,7 @@\n # Storytelling\n \n ## Introduction\n-Storytelling is a global and high-level Scenario Manager to help coordinate cross-module actions. In order to safely operate the autonomous vehicle on urban roads, complex planning scenarios are needed to ensure safe driving. These complex scenarios may involve different modules to ensure proper maneuvering. In order to avoid a sequential based approach to such scenarios, a new isolated scenario manager, the \"Storytelling\" module was created. This module creates stories which are complex scenarios that would trigger multiple modules' actions. Per some predefined rules, this module creates ne or multiple stories and publishes to\n+Storytelling is a global and high-level Scenario Manager to help coordinate cross-module actions. In order to safely operate the autonomous vehicle on urban roads, complex planning scenarios are needed to ensure safe driving. These complex scenarios may involve different modules to ensure proper maneuvering. In order to avoid a sequential based approach to such scenarios, a new isolated scenario manager, the \"Storytelling\" module was created. This module creates stories which are complex scenarios that would trigger multiple modules' actions. Per some predefined rules, this module creates one or multiple stories and publishes to\n `/apollo/storytelling` channel. The main advantage of this module is to fine tune the driving experience and also isolate complex scenarios packaging them into stories that can be subscribed to by other modules like Planning, Control etc. \n \n ## Input\n@@ -20,4 +20,4 @@ Please refer to [CloseToJunction](https://github.com/ApolloAuto/apollo/tree/mast\n ```\n Note:\n The base_teller.h is a virtual class to help you implement your own story. Please inherit this class when writing your own story.\n-```\n\\ No newline at end of file\n+```"
        }
    ],
    "ApolloAuto/apollo/14340": [
        {
            "sha": "f4a4b77f4c127df3993028752809ed7b6acc139f",
            "filename": "modules/control/control_component.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/4ed697bc438db66a9165af721b3fe045ba6777f1/modules%2Fcontrol%2Fcontrol_component.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/4ed697bc438db66a9165af721b3fe045ba6777f1/modules%2Fcontrol%2Fcontrol_component.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fcontrol%2Fcontrol_component.cc?ref=4ed697bc438db66a9165af721b3fe045ba6777f1",
            "patch": "@@ -176,7 +176,7 @@ Status ControlComponent::ProduceControlCommand(\n     Status status_ts = CheckTimestamp(local_view_);\n     if (!status_ts.ok()) {\n       AERROR << \"Input messages timeout\";\n-      // estop_ = true;\n+      estop_ = true;\n       status = status_ts;\n       if (local_view_.chassis().driving_mode() !=\n           apollo::canbus::Chassis::COMPLETE_AUTO_DRIVE) {"
        }
    ],
    "ApolloAuto/apollo/14370": [
        {
            "sha": "7f2c25eb16b95df747991864822462e42b89fd67",
            "filename": "modules/dreamview/backend/map/map_service.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/3a5862ba0e0935f8e42065a0cd9b05a34d764b3a/modules%2Fdreamview%2Fbackend%2Fmap%2Fmap_service.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/3a5862ba0e0935f8e42065a0cd9b05a34d764b3a/modules%2Fdreamview%2Fbackend%2Fmap%2Fmap_service.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fbackend%2Fmap%2Fmap_service.cc?ref=3a5862ba0e0935f8e42065a0cd9b05a34d764b3a",
            "patch": "@@ -505,11 +505,11 @@ bool MapService::GetStartPoint(apollo::common::PointENU *start_point) const {\n   // Start from origin to find a lane from the map.\n   double s, l;\n   LaneInfoConstPtr lane;\n-  if (!GetNearestLane(0.0, 0.0, &lane, &s, &l)) {\n+  if (!GetNearestLane(754091.9, 2563972.46, &lane, &s, &l)) {\n     return false;\n   }\n \n-  *start_point = lane->GetSmoothPoint(0.0);\n+  *start_point = lane->GetSmoothPoint(s);\n   return true;\n }\n "
        }
    ],
    "ApolloAuto/apollo/14387": [
        {
            "sha": "7ffba11e4619aafb28a16d1c9f02cbb27338bdc6",
            "filename": "WORKSPACE",
            "status": "modified",
            "additions": 7,
            "deletions": 1,
            "changes": 8,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f1f173a142837ee279adb0e61ef6022baa9b4087/WORKSPACE",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f1f173a142837ee279adb0e61ef6022baa9b4087/WORKSPACE",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/WORKSPACE?ref=f1f173a142837ee279adb0e61ef6022baa9b4087",
            "patch": "@@ -58,7 +58,13 @@ http_archive(\n         \"https://github.com/grpc/grpc/archive/v1.30.0.tar.gz\",\n     ],\n )\n-\n+http_archive(\n+    name = \"zlib\",\n+    build_file = \"@com_google_protobuf//:third_party/zlib.BUILD\",\n+    sha256 = \"629380c90a77b964d896ed37163f5c3a34f6e6d897311f1df2a7016355c45eff\",\n+    strip_prefix = \"zlib-1.2.11\",\n+    urls = [\"https://github.com/madler/zlib/archive/v1.2.11.tar.gz\"],\n+)\n load(\"@com_github_grpc_grpc//bazel:grpc_deps.bzl\", \"grpc_deps\")\n \n grpc_deps()"
        }
    ],
    "ApolloAuto/apollo/14395": [
        {
            "sha": "8895e274e5a592207c18337983abaa53cb22f4aa",
            "filename": "modules/planning/open_space/coarse_trajectory_generator/reeds_shepp_path.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/87546406b0259a0a692899018c768aa3a675df0e/modules%2Fplanning%2Fopen_space%2Fcoarse_trajectory_generator%2Freeds_shepp_path.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/87546406b0259a0a692899018c768aa3a675df0e/modules%2Fplanning%2Fopen_space%2Fcoarse_trajectory_generator%2Freeds_shepp_path.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fopen_space%2Fcoarse_trajectory_generator%2Freeds_shepp_path.cc?ref=87546406b0259a0a692899018c768aa3a675df0e",
            "patch": "@@ -460,7 +460,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n                      std::vector<ReedSheppPath>* all_possible_paths) {\n   RSPParam LRSL1_param;\n   LRSL(x, y, phi, &LRSL1_param);\n-  double LRSL1_lengths[4] = {LRSL1_param.t, -0.5 * M_PI, -LRSL1_param.u,\n+  double LRSL1_lengths[4] = {LRSL1_param.t, -0.5 * M_PI, LRSL1_param.u,\n                              LRSL1_param.v};\n   char LRSL1_types[] = \"LRSL\";\n   if (LRSL1_param.flag &&\n@@ -493,7 +493,7 @@ bool ReedShepp::CCSC(const double x, const double y, const double phi,\n \n   RSPParam LRSL4_param;\n   LRSL(-x, -y, phi, &LRSL4_param);\n-  double LRSL4_lengths[4] = {-LRSL4_param.t, -0.5 * M_PI, -LRSL4_param.u,\n+  double LRSL4_lengths[4] = {-LRSL4_param.t, 0.5 * M_PI, -LRSL4_param.u,\n                              -LRSL4_param.v};\n   char LRSL4_types[] = \"RLSR\";\n   if (LRSL4_param.flag &&"
        }
    ],
    "ApolloAuto/apollo/14417": [
        {
            "sha": "18e27e45d974e247b4bce4a9ceaedd1e6584f784",
            "filename": "modules/planning/conf/planning.conf",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/71f7295acbf4e0fc414ac9358c534622fb77c8d5/modules%2Fplanning%2Fconf%2Fplanning.conf",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/71f7295acbf4e0fc414ac9358c534622fb77c8d5/modules%2Fplanning%2Fconf%2Fplanning.conf",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fplanning%2Fconf%2Fplanning.conf?ref=71f7295acbf4e0fc414ac9358c534622fb77c8d5",
            "patch": "@@ -33,7 +33,7 @@\n --nouse_s_curve_speed_smooth\n --use_iterative_anchoring_smoother\n \n---open_space_planning_period=1000.0\n+--open_space_planning_period=0.1\n --open_space_standstill_acceleration=0.3\n \n --lane_change_prepare_length=60.0"
        }
    ],
    "ApolloAuto/apollo/14455": [
        {
            "sha": "f09d79369c8b1fe597cab1fca7526be1f348b891",
            "filename": "docs/demo_guide/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/1d9b409c963ac010b427e275e0c13997cf219b55/docs%2Fdemo_guide%2FREADME.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/1d9b409c963ac010b427e275e0c13997cf219b55/docs%2Fdemo_guide%2FREADME.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2Fdemo_guide%2FREADME.md?ref=1d9b409c963ac010b427e275e0c13997cf219b55",
            "patch": "@@ -51,7 +51,7 @@ Note:\n \n > The `--loop` option enables record to keep playing in a loop playback mode.\n \n-## Open <http://127.0.0.1:8888> in your favorate browser (e.g. Chrome) to access Apollo Dreamview\n+## Open <http://127.0.0.1:8888> in your favorite browser (e.g. Chrome) to access Apollo Dreamview\n \n The following screen should be shown to you and the car in Dreamview now moves around!\n "
        }
    ],
    "ApolloAuto/apollo/14495": [
        {
            "sha": "7336577e7f5a8136d74d5d05b9686ba6e8e09765",
            "filename": "cyber/blocker/intra_reader.h",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/2845ef8dbc5fcac73f5c885fa8aed5e3e54dd830/cyber%2Fblocker%2Fintra_reader.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/2845ef8dbc5fcac73f5c885fa8aed5e3e54dd830/cyber%2Fblocker%2Fintra_reader.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fblocker%2Fintra_reader.h?ref=2845ef8dbc5fcac73f5c885fa8aed5e3e54dd830",
            "patch": "@@ -191,7 +191,7 @@ auto IntraReader<MessageT>::End() const -> Iterator {\n   auto blocker = BlockerManager::Instance()->GetBlocker<MessageT>(\n       this->role_attr_.channel_name());\n   ACHECK(blocker != nullptr);\n-  return blocker->ObservedBegin();\n+  return blocker->ObservedEnd();\n }\n \n template <typename MessageT>"
        }
    ],
    "ApolloAuto/apollo/14542": [
        {
            "sha": "54e5a5dc8cd18525d804a01b034c4afcac8c0593",
            "filename": "cyber/component/timer_component.cc",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/0d38462b051ae4b351e3bc0c758838b0110fa15e/cyber%2Fcomponent%2Ftimer_component.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/0d38462b051ae4b351e3bc0c758838b0110fa15e/cyber%2Fcomponent%2Ftimer_component.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/cyber%2Fcomponent%2Ftimer_component.cc?ref=0d38462b051ae4b351e3bc0c758838b0110fa15e",
            "patch": "@@ -45,7 +45,7 @@ bool TimerComponent::Initialize(const TimerComponentConfig& config) {\n \n   std::shared_ptr<TimerComponent> self =\n       std::dynamic_pointer_cast<TimerComponent>(shared_from_this());\n-  auto func = [self]() { self->Proc(); };\n+  auto func = [self]() { self->Process(); };\n   timer_.reset(new Timer(config.interval(), func, false));\n   timer_->Start();\n   return true;"
        }
    ],
    "ApolloAuto/apollo/14574": [
        {
            "sha": "8b8c9c76c4c5eb856bdc6aa243a6f345a2852f8c",
            "filename": "modules/dreamview/backend/teleop/teleop.cc",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/e6d48ae9f9ed8a3801c76ca991c2d98bfdf0390f/modules%2Fdreamview%2Fbackend%2Fteleop%2Fteleop.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/e6d48ae9f9ed8a3801c76ca991c2d98bfdf0390f/modules%2Fdreamview%2Fbackend%2Fteleop%2Fteleop.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fbackend%2Fteleop%2Fteleop.cc?ref=e6d48ae9f9ed8a3801c76ca991c2d98bfdf0390f",
            "patch": "@@ -476,14 +476,14 @@ void TeleopService::SendResumeCruiseCmd() {\n   pad_message_writer_->Write(pad_msg);\n }\n \n-void TeleopService::SendEstopCmd() {\n+void TeleopService::SendPullOverCmd() {\n   AINFO << \"Pull over\";\n   PadMessage pad_msg;\n   pad_msg.set_action(DrivingAction::PULL_OVER);\n   pad_message_writer_->Write(pad_msg);\n }\n \n-void TeleopService::SendPullOverCmd() {\n+void TeleopService::SendEstopCmd() {\n   AINFO << \"EStop\";\n   PadMessage pad_msg;\n   pad_msg.set_action(DrivingAction::STOP);"
        }
    ],
    "ApolloAuto/apollo/14622": [
        {
            "sha": "630f8e601cbec4f32c553fc35dafba2aa3c22361",
            "filename": "modules/perception/lidar/lib/detector/point_pillars_detection/point_pillars_detection.cc",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b9b6d4ac4ddfce136fe61c3bb579708b86949778/modules%2Fperception%2Flidar%2Flib%2Fdetector%2Fpoint_pillars_detection%2Fpoint_pillars_detection.cc",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b9b6d4ac4ddfce136fe61c3bb579708b86949778/modules%2Fperception%2Flidar%2Flib%2Fdetector%2Fpoint_pillars_detection%2Fpoint_pillars_detection.cc",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fperception%2Flidar%2Flib%2Fdetector%2Fpoint_pillars_detection%2Fpoint_pillars_detection.cc?ref=b9b6d4ac4ddfce136fe61c3bb579708b86949778",
            "patch": "@@ -245,7 +245,6 @@ bool PointPillarsDetection::Detect(const LidarDetectorOptions& options,\n          << \"collect: \" << collect_time_;\n \n   delete[] points_array;\n-  */\n   return true;\n }\n "
        }
    ],
    "ApolloAuto/apollo/14634": [
        {
            "sha": "5fe167cde470b49896e960547ccfd6dc3178c04b",
            "filename": "modules/tools/perception/replay_perception.py",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/f553badf637d049f3cc8940ae7bdfce7de509f64/modules%2Ftools%2Fperception%2Freplay_perception.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/f553badf637d049f3cc8940ae7bdfce7de509f64/modules%2Ftools%2Fperception%2Freplay_perception.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fperception%2Freplay_perception.py?ref=f553badf637d049f3cc8940ae7bdfce7de509f64",
            "patch": "@@ -231,7 +231,7 @@ def linear_project_perception(description, prev_perception):\n                 get_point(trace[i - 1], trace[i], ratio))\n             perception.theta = math.atan2(trace[i][1] - trace[i - 1][1],\n                                           trace[i][0] - trace[i - 1][0])\n-\n+            perception.velocity.CopyFrom(get_velocity(perception.theta, description[\"speed\"]))\n             perception.ClearField(\"polygon_point\")\n             perception.polygon_point.extend(generate_polygon(perception.position, perception.theta,\n                                                              perception.length, perception.width))\n@@ -272,9 +272,9 @@ def perception_publisher(perception_channel, files, period):\n     node = cyber.Node(\"perception\")\n     writer = node.create_writer(perception_channel, PerceptionObstacles)\n     perception_description = load_descrptions(files)\n-    sleep_time = int(1.0 / period)  # 10Hz\n+    sleep_time = float(period)  # 10Hz\n     global _s_delta_t\n-    _s_delta_t = period\n+    _s_delta_t = sleep_time\n     perception = None\n     while not cyber.is_shutdown():\n         perception = generate_perception(perception_description, perception)"
        }
    ],
    "ApolloAuto/apollo/14641": [
        {
            "sha": "5858ad3c9ddbd310863852f28edd149ef16ae26a",
            "filename": "modules/tools/record_parse_save/parse_camera.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/73122e41f5b335840e30089675a4c0d8bca987f2/modules%2Ftools%2Frecord_parse_save%2Fparse_camera.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/73122e41f5b335840e30089675a4c0d8bca987f2/modules%2Ftools%2Frecord_parse_save%2Fparse_camera.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Frecord_parse_save%2Fparse_camera.py?ref=73122e41f5b335840e30089675a4c0d8bca987f2",
            "patch": "@@ -36,7 +36,7 @@ def parse_data(channelname, msg, out_folder):\n     parser images from Apollo record file\n     \"\"\"\n     msg_camera = CompressedImage()\n-    msg_camera.ParseFromString(str(msg))\n+    msg_camera.ParseFromString(msg)\n \n     tstamp = msg_camera.measurement_time\n "
        }
    ],
    "ApolloAuto/apollo/14642": [
        {
            "sha": "77bc25ff9c7dd49f1c3c7c3c8102eeb1272a5d31",
            "filename": "modules/dreamview/launch/dreamview.launch",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/28d6ee89a090ca03c9a9830a061d04fbf4c6b6d8/modules%2Fdreamview%2Flaunch%2Fdreamview.launch",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/28d6ee89a090ca03c9a9830a061d04fbf4c6b6d8/modules%2Fdreamview%2Flaunch%2Fdreamview.launch",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Flaunch%2Fdreamview.launch?ref=28d6ee89a090ca03c9a9830a061d04fbf4c6b6d8",
            "patch": "@@ -4,7 +4,7 @@\n         <dag_conf></dag_conf>\n         <type>binary</type>\n         <process_name>\n-           dreamview --flagfile=/apollo/modules/common/data/global_flagfile.txt\n+            /apollo/bazel-bin/modules/dreamview/dreamview --flagfile=/apollo/modules/common/data/global_flagfile.txt\n         </process_name>\n         <exception_handler>respawn</exception_handler>\n     </module>"
        }
    ],
    "ApolloAuto/apollo/14678": [
        {
            "sha": "0650c2d89fec2544243d6bdb6aa87bad4a2f3808",
            "filename": "modules/dreamview/conf/vehicle_data.pb.txt",
            "status": "modified",
            "additions": 4,
            "deletions": 8,
            "changes": 12,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/02ef00bfed54f4da7ffec9ec023c91b3f67906de/modules%2Fdreamview%2Fconf%2Fvehicle_data.pb.txt",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/02ef00bfed54f4da7ffec9ec023c91b3f67906de/modules%2Fdreamview%2Fconf%2Fvehicle_data.pb.txt",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fconf%2Fvehicle_data.pb.txt?ref=02ef00bfed54f4da7ffec9ec023c91b3f67906de",
            "patch": "@@ -158,6 +158,10 @@ data_files {\n   source_path: \"perception_conf\"\n   dest_path: \"/apollo/modules/perception/production/conf/perception\"\n }\n+data_files {\n+  source_path: \"perception_conf\"\n+  dest_path: \"/apollo/modules/perception/production/conf/perception/lidar\"\n+}\n data_files {\n   source_path: \"lidar_dag\"\n   dest_path: \"/apollo/modules/drivers/lidar/dag\"\n@@ -202,14 +206,6 @@ data_files {\n   source_path: \"perception_conf/perception_common.flag\"\n   dest_path: \"/apollo/modules/perception/production/conf/perception/perception_common.flag\"\n }\n-data_files {\n-  source_path: \"perception_conf/velodyne16_segmentation_conf.pb.txt\"\n-  dest_path: \"/apollo/modules/perception/production/conf/perception/lidar/velodyne16_segmentation_conf.pb.txt\"\n-}\n-data_files {\n-  source_path: \"perception_conf/recognition_conf.pb.txt\"\n-  dest_path: \"/apollo/modules/perception/production/conf/perception/lidar/recognition_conf.pb.txt\"\n-}\n data_files {\n   source_path: \"perception_conf/mlf_engine.conf\"\n   dest_path: \"/apollo/modules/perception/production/data/perception/lidar/models/multi_lidar_fusion/mlf_engine.conf\""
        }
    ],
    "ApolloAuto/apollo/14733": [
        {
            "sha": "d7fc5eb16e81ed504ed431ceb7b72b415a004e10",
            "filename": "modules/dreamview/backend/sim_control_manager/sim_control_manager.h",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b6b52e467bfbb65c3f9cf62b2d5c4c1f6120c83e/modules%2Fdreamview%2Fbackend%2Fsim_control_manager%2Fsim_control_manager.h",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b6b52e467bfbb65c3f9cf62b2d5c4c1f6120c83e/modules%2Fdreamview%2Fbackend%2Fsim_control_manager%2Fsim_control_manager.h",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Fdreamview%2Fbackend%2Fsim_control_manager%2Fsim_control_manager.h?ref=b6b52e467bfbb65c3f9cf62b2d5c4c1f6120c83e",
            "patch": "@@ -16,7 +16,7 @@\n \n #pragma once\n \n-#include <limits> q\n+#include <limits>\n #include <memory>\n #include <string>\n "
        }
    ],
    "ApolloAuto/apollo/14768": [
        {
            "sha": "e881ddb520c4b8472a86357f8036b954ee31b6c5",
            "filename": "docs/01_Installation Instructions/apollo_software_installation_guide_package_method.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/b3e9b1a6073c05715de71cd270e5ce96db5527b9/docs%2F01_Installation%20Instructions%2Fapollo_software_installation_guide_package_method.md",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/b3e9b1a6073c05715de71cd270e5ce96db5527b9/docs%2F01_Installation%20Instructions%2Fapollo_software_installation_guide_package_method.md",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docs%2F01_Installation%20Instructions%2Fapollo_software_installation_guide_package_method.md?ref=b3e9b1a6073c05715de71cd270e5ce96db5527b9",
            "patch": "@@ -16,7 +16,7 @@ To update the software after installation:\n \n ```shell\n sudo apt-get update\n-sudp apt-get upgrade\n+sudo apt-get upgrade\n ```\n \n > Note: To complete the update, you need to ensure that you can access the network."
        }
    ],
    "ApolloAuto/apollo/14854": [
        {
            "sha": "15b5c79df60dc83477920ea96141ad191d425369",
            "filename": "modules/tools/sensor_calibration/extract_data.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/de5ee795e67d9f5aec901f24db76f7c19a05dcf1/modules%2Ftools%2Fsensor_calibration%2Fextract_data.py",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/de5ee795e67d9f5aec901f24db76f7c19a05dcf1/modules%2Ftools%2Fsensor_calibration%2Fextract_data.py",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/modules%2Ftools%2Fsensor_calibration%2Fextract_data.py?ref=de5ee795e67d9f5aec901f24db76f7c19a05dcf1",
            "patch": "@@ -94,7 +94,7 @@\n \n class Extractor(object):\n     def __init__(self):\n-        self.node = cyber.Node(\"sendor_calibration_preprocessor\")\n+        self.node = cyber.Node(\"sensor_calibration_preprocessor\")\n         self.writer = self.node.create_writer(\"/apollo/dreamview/progress\",\n                                               preprocess_table_pb2.Progress, 6)\n         self.config = extractor_config_pb2.DataExtractionConfig()"
        }
    ],
    "ApolloAuto/apollo/15113": [
        {
            "sha": "a9ca8a3268de3189a7bf2599153823d443deb5bb",
            "filename": "docker/scripts/dev_start.sh",
            "status": "modified",
            "additions": 13,
            "deletions": 6,
            "changes": 19,
            "blob_url": "https://github.com/ApolloAuto/apollo/blob/8a27f0dbbbdf701d2d8166a5e3a4c20b40041587/docker%2Fscripts%2Fdev_start.sh",
            "raw_url": "https://github.com/ApolloAuto/apollo/raw/8a27f0dbbbdf701d2d8166a5e3a4c20b40041587/docker%2Fscripts%2Fdev_start.sh",
            "contents_url": "https://api.github.com/repos/ApolloAuto/apollo/contents/docker%2Fscripts%2Fdev_start.sh?ref=8a27f0dbbbdf701d2d8166a5e3a4c20b40041587",
            "patch": "@@ -53,7 +53,7 @@ MAP_VOLUMES_CONF=\n # Install python tools\n source docker/setup_host/host_env.sh\n DEFAULT_PYTHON_TOOLS=(\n-  amodel\n+  amodel~=0.1.0\n )\n \n # Model\n@@ -353,7 +353,8 @@ function install_python_tools() {\n \n   for tool in ${DEFAULT_PYTHON_TOOLS[@]}; do\n     info \"Install python tool ${tool} ...\"\n-    pip3 install --user \"${tool}\"\n+    # Use /usr/bin/pip3 because native python is used in the container.\n+    /usr/bin/pip3 install --user \"${tool}\"\n     if [ $? -ne 0 ]; then\n         error \"Failed to install ${tool}\"\n         exit 1\n@@ -408,11 +409,17 @@ function main() {\n \n     mount_map_volumes\n \n-    info \"Installing python tools ...\"\n-    install_python_tools\n+    if ! [ -x \"$(command -v pip3)\" ]; then\n+      warning \"Skip install perception models!!! \" \\\n+          \"Need pip3 to install Apollo model management tool!\" \\\n+          \"Try \\\"sudo apt install python3-pip\\\" \"\n+    else\n+      info \"Installing python tools ...\"\n+      install_python_tools\n \n-    info \"Installing perception models ...\"\n-    install_perception_models\n+      info \"Installing perception models ...\"\n+      install_perception_models\n+    fi\n \n     info \"Starting Docker container \\\"${DEV_CONTAINER}\\\" ...\"\n "
        }
    ],
    "autowarefoundation/autoware/18": [
        {
            "sha": "2b9c368313b98147a434b69611817c4746177bf1",
            "filename": "ros/src/data/packages/map_file/nodes/vector_map_loader/vector_map_loader.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 5,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/5d25650ae8aecf7c414e73ef5fd86f03e925d9ce/ros%2Fsrc%2Fdata%2Fpackages%2Fmap_file%2Fnodes%2Fvector_map_loader%2Fvector_map_loader.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/5d25650ae8aecf7c414e73ef5fd86f03e925d9ce/ros%2Fsrc%2Fdata%2Fpackages%2Fmap_file%2Fnodes%2Fvector_map_loader%2Fvector_map_loader.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fdata%2Fpackages%2Fmap_file%2Fnodes%2Fvector_map_loader%2Fvector_map_loader.cpp?ref=5d25650ae8aecf7c414e73ef5fd86f03e925d9ce",
            "patch": "@@ -1044,11 +1044,13 @@ rosrun map_file vector_map_loader <csv files>\n \n     // road sign pole\n     int plid = roadsigns[i].plid;\n-    set_poleclass_data(poleclasses[plid],\n-\t\t       1, 1, 1, 1,\n-\t\t       vectorclasses,\n-\t\t       pointclasses,\n-\t\t       &marker, &marker_array);\n+    if(plid > 0) {\n+      set_poleclass_data(poleclasses[plid],\n+\t\t\t 1, 1, 1, 1,\n+\t\t\t vectorclasses,\n+\t\t\t pointclasses,\n+\t\t\t &marker, &marker_array);\n+    }\n   }\n \n   // cross walk"
        }
    ],
    "autowarefoundation/autoware/64": [
        {
            "sha": "364ec8b7e555e3cc60845a651aeecb7dad881bc7",
            "filename": "ros/src/computing/perception/detection/packages/cv_tracker/nodes/dpm_ocv/dpm_ocv.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/5f533567425542b9bf8f5ee23860ab14b85d61dd/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Fdpm_ocv%2Fdpm_ocv.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/5f533567425542b9bf8f5ee23860ab14b85d61dd/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Fdpm_ocv%2Fdpm_ocv.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Fdpm_ocv%2Fdpm_ocv.cpp?ref=5f533567425542b9bf8f5ee23860ab14b85d61dd",
            "patch": "@@ -73,9 +73,11 @@ objectDetect::objectDetect() :\n \t\tobject_class = \"car\";\n \t}\n \n+#if defined(HAS_GPU)\n \tif (!private_nh_.getParam(\"use_gpu\", use_gpu)) {\n \t\tuse_gpu = false;\n \t}\n+#endif\n \n \tstd::string default_model;\n \t// switch (type) {"
        }
    ],
    "autowarefoundation/autoware/70": [
        {
            "sha": "115f482d17cfda41c4c1f3679e4d1af9c2845ad6",
            "filename": "ros/src/computing/planning/mission/packages/lane_planner/nodes/lane_rule/lane_rule.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/354a419594e42f5b98d3264d846a7f8e944d0988/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmission%2Fpackages%2Flane_planner%2Fnodes%2Flane_rule%2Flane_rule.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/354a419594e42f5b98d3264d846a7f8e944d0988/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmission%2Fpackages%2Flane_planner%2Fnodes%2Flane_rule%2Flane_rule.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmission%2Fpackages%2Flane_planner%2Fnodes%2Flane_rule%2Flane_rule.cpp?ref=354a419594e42f5b98d3264d846a7f8e944d0988",
            "patch": "@@ -392,6 +392,8 @@ static waypoint_follower::lane apply_acceleration(const waypoint_follower::lane&\n \tif (fixed_cnt == 0)\n \t\treturn computations;\n \n+\tdouble square_vel = fixed_vel * fixed_vel;\n+\tdouble distance = 0;\n \tfor (size_t i = start_index; i < msg.waypoints.size(); ++i) {\n \t\tif (i - start_index < fixed_cnt) {\n \t\t\tcomputations.waypoints[i].twist.twist.linear.x = fixed_vel;\n@@ -400,10 +402,9 @@ static waypoint_follower::lane apply_acceleration(const waypoint_follower::lane&\n \n \t\tgeometry_msgs::Point a = computations.waypoints[i - 1].pose.pose.position;\n \t\tgeometry_msgs::Point b = computations.waypoints[i].pose.pose.position;\n-\t\tdouble distance = hypot(b.x - a.x, b.y - a.y);\n+\t\tdistance += hypot(b.x - a.x, b.y - a.y);\n \n-\t\tdouble velocity = computations.waypoints[i - 1].twist.twist.linear.x +\n-\t\t\tsqrt(2 * acceleration * distance);\n+\t\tdouble velocity = sqrt(square_vel + 2 * acceleration * distance);\n \t\tif (velocity < computations.waypoints[i].twist.twist.linear.x)\n \t\t\tcomputations.waypoints[i].twist.twist.linear.x = velocity;\n \t\telse"
        }
    ],
    "autowarefoundation/autoware/113": [
        {
            "sha": "997daa144a297a808050688b215423636f727949",
            "filename": "ros/src/computing/perception/detection/lib/image/dpm_ocv/gpu/gpu_function.cu",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/29789a7e68c1f195ba7c434d3866f58f6a52f18b/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Fimage%2Fdpm_ocv%2Fgpu%2Fgpu_function.cu",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/29789a7e68c1f195ba7c434d3866f58f6a52f18b/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Fimage%2Fdpm_ocv%2Fgpu%2Fgpu_function.cu",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Fimage%2Fdpm_ocv%2Fgpu%2Fgpu_function.cu?ref=29789a7e68c1f195ba7c434d3866f58f6a52f18b",
            "patch": "@@ -493,9 +493,9 @@ void calculateNorm(\n     const int x = blockDim.x * blockIdx.x + threadIdx.x;\n     const int y = blockDim.y * blockIdx.y + threadIdx.y;\n \n-    if(y <= sizeY)\n+    if(y < sizeY)\n     {\n-        if(x <= sizeX)\n+        if(x < sizeX)\n         {\n             int i, j, p, pos;\n             float valOfNorm = 0.0f;"
        }
    ],
    "autowarefoundation/autoware/128": [
        {
            "sha": "e6cbcbd493c2c0bcd48dd742de99ca9191feb172",
            "filename": "ros/src/util/packages/runtime_manager/scripts/runtime_manager_dialog.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/d78b2510c67b72c45655c1704c6c7061a1d94523/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/d78b2510c67b72c45655c1704c6c7061a1d94523/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py?ref=d78b2510c67b72c45655c1704c6c7061a1d94523",
            "patch": "@@ -393,7 +393,7 @@ def __init__(self, *args, **kwds):\n \t\t\tself.lb_top5.append(lb)\n \t\tline = wx.StaticLine(self, wx.ID_ANY)\n \t\tibl = InfoBarLabel(self, 'Memory', bar_orient=wx.HORIZONTAL)\n-\t\tszr = sizer_wrap(self.lb_top5 + [ line, ibl ], flag=wx.EXPAND)\n+\t\tszr = sizer_wrap(self.lb_top5 + [ line, ibl ], flag=wx.EXPAND | wx.FIXED_MINSIZE)\n \t\tself.sizer_cpuinfo.Add(szr, 2, wx.ALL | wx.EXPAND, 4)\n \n \t\tth_arg = { 'setting':self.status_dic.get('top_cmd_setting', {}),"
        }
    ],
    "autowarefoundation/autoware/131": [
        {
            "sha": "4810c2b6aa9e10b289132a500bd6924260e1d69c",
            "filename": "ros/src/computing/perception/detection/lib/image/dpm_ocv/gpu/matching_gpu.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 7,
            "changes": 21,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/2355a7e1cb8c277094e5c87be906f578dfacc03f/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Fimage%2Fdpm_ocv%2Fgpu%2Fmatching_gpu.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/2355a7e1cb8c277094e5c87be906f578dfacc03f/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Fimage%2Fdpm_ocv%2Fgpu%2Fmatching_gpu.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Fimage%2Fdpm_ocv%2Fgpu%2Fmatching_gpu.cpp?ref=2355a7e1cb8c277094e5c87be906f578dfacc03f",
            "patch": "@@ -662,10 +662,14 @@ static void distanceTransform(int numLevels, int n, int max_size,\n         if (isNew == true)\n         {\n             size = (diffX + 1) * (diffY + 1);\n-            cuMemAlloc(&dev_distTransWork[l], sizeof(DistTransWork) * size);\n-            cuMemAlloc(&dev_distTransScore[l], sizeof(float) * size);\n-            cuMemAlloc(&dev_x[l], sizeof(int) * size);\n-            cuMemAlloc(&dev_y[l], sizeof(int) * size);\n+            CUresult res = cuMemAlloc(&dev_distTransWork[l], sizeof(DistTransWork) * size);\n+            CUDA_CHECK(res, \"cuMemAlloc(&dev_distTransWork[l])\");\n+            res = cuMemAlloc(&dev_distTransScore[l], sizeof(float) * size);\n+            CUDA_CHECK(res, \"cuMemAlloc(&dev_distTransScore[l])\");\n+            res = cuMemAlloc(&dev_x[l], sizeof(int) * size);\n+            CUDA_CHECK(res, \"cuMemAlloc(&dev_x[l])\");\n+            res = cuMemAlloc(&dev_y[l], sizeof(int) * size);\n+            CUDA_CHECK(res, \"cuMemAlloc(&dev_y[l])\");\n         }\n \n         DistanceTransformTwoDimensionalProblemGPU(all_F[i + 1], map[k],\n@@ -687,9 +691,12 @@ static void distanceTransform(int numLevels, int n, int max_size,\n             }\n         }\n     }\n-    cuMemFreeHost(&tmp_disposition.score);\n-    cuMemFreeHost(&tmp_disposition.x);\n-    cuMemFreeHost(&tmp_disposition.y);\n+    CUresult res = cuMemFreeHost(tmp_disposition.score);\n+    CUDA_CHECK(res, \"cuMemFreeHost(tmp_disposition.score)\");\n+    res = cuMemFreeHost(tmp_disposition.x);\n+    CUDA_CHECK(res, \"cuMemFreeHost(tmp_disposition.x)\");\n+    res = cuMemFreeHost(tmp_disposition.y);\n+    CUDA_CHECK(res, \"cuMemFreeHost(tmp_disposition.y)\");\n \n     for (i = 0; i < DISTANCE_TRANSFORM_STREAMS; i++)\n     {"
        }
    ],
    "autowarefoundation/autoware/147": [
        {
            "sha": "44af4546f00510f4aa58eb9dbdf10e9675a36e1f",
            "filename": "ros/src/computing/planning/motion/packages/driving_planner/nodes/velocity_set/velocity_set.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/b44c038036001c41662d357b5156d04b0d3981e7/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fdriving_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/b44c038036001c41662d357b5156d04b0d3981e7/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fdriving_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fdriving_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set.cpp?ref=b44c038036001c41662d357b5156d04b0d3981e7",
            "patch": "@@ -526,19 +526,19 @@ static void DisplayDecelerationRange(int i)\n     marker.points.clear();\n }\n \n-static EControl vscanDetection(int closest_waypoint)\n+static EControl vscanDetection()\n {\n \n-    if (_vscan.empty() == true)\n+    if (_vscan.empty() == true || _closest_waypoint < 0)\n         return KEEP;\n \n     int decelerate_or_stop = -10000;\n     int decelerate2stop_waypoints = 15;\n-    for (int i = closest_waypoint; i < closest_waypoint + _search_distance; i++) {\n+    for (int i = _closest_waypoint; i < _closest_waypoint + _search_distance; i++) {\n         decelerate_or_stop++;\n         if (decelerate_or_stop > decelerate2stop_waypoints ||\n \t    (decelerate_or_stop >= 0 && i >= _path_dk.getSize()-1) ||\n-\t    (decelerate_or_stop >= 0 && i == closest_waypoint+_search_distance-1))\n+\t    (decelerate_or_stop >= 0 && i == _closest_waypoint+_search_distance-1))\n \t    return DECELERATE;\n         if (i > _path_dk.getSize() - 1 )\n             return KEEP;\n@@ -629,7 +629,7 @@ static EControl ObstacleDetection()\n     std::cout << \"current_velocity : \" << mps2kmph(_current_vel) << std::endl;\n     DisplayDetectionRange(_closest_waypoint);\n     DisplayDecelerationRange(_closest_waypoint);\n-    EControl vscan_result = vscanDetection(_closest_waypoint);\n+    EControl vscan_result = vscanDetection();\n \n     if (prev_detection == KEEP) {\n       if (vscan_result != KEEP) { // found obstacle"
        }
    ],
    "autowarefoundation/autoware/148": [
        {
            "sha": "8232b8080aeabda325dcafdf345bf8ebb09765c0",
            "filename": "ros/src/computing/planning/motion/packages/waypoint_follower/lib/libwaypoint_follower.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 11,
            "changes": 21,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/9d012b2ea94681e0be0ea35a6d55390e8e55eb57/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_follower%2Flib%2Flibwaypoint_follower.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/9d012b2ea94681e0be0ea35a6d55390e8e55eb57/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_follower%2Flib%2Flibwaypoint_follower.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_follower%2Flib%2Flibwaypoint_follower.cpp?ref=9d012b2ea94681e0be0ea35a6d55390e8e55eb57",
            "patch": "@@ -109,17 +109,15 @@ bool WayPoints::isFront(int waypoint, geometry_msgs::Pose current_pose) const\n bool WayPoints::isValid(int waypoint, geometry_msgs::Pose current_pose) const\n {\n   double angle_threshold = 90;\n-  //waypoint angle\n-  double waypoint_yaw = tf::getYaw(getWaypointOrientation(waypoint));\n-  //pose angle\n-  double pose_yaw = tf::getYaw(current_pose.orientation);\n-  //skip waypoint which direction is reverse against current_pose\n-  double direction_sub = (waypoint_yaw - pose_yaw) * 180 / M_PI; //degree\n-  if (fabs(direction_sub) > angle_threshold)\n+  tf::Vector3 waypoint_v(getWaypointPosition(waypoint).x,getWaypointPosition(waypoint).y,getWaypointPosition(waypoint).z);\n+  tf::Vector3 pose_v(current_pose.position.x,current_pose.position.y,current_pose.position.z);\n+  double angle = waypoint_v.angle(pose_v) * 180 / M_PI; //degree\n+  ROS_INFO(\"angle : %lf\",angle);\n+\n+  if (fabs(angle) > angle_threshold)\n     return false;\n   else\n     return true;\n-  //ROS_INFO(\"waypoint = %d, waypoint_yaw = %lf, pose_yaw = %lf, direction sub = %lf\", i, waypoint_yaw, pose_yaw,direction_sub);\n \n }\n \n@@ -211,7 +209,7 @@ int getClosestWaypoint(const waypoint_follower::lane &current_path, geometry_msg\n     double distance_min = DBL_MAX;\n     for (auto el :waypoint_candidates)\n     {\n-      ROS_INFO(\"closest_candidates : %d\",el);\n+      //ROS_INFO(\"closest_candidates : %d\",el);\n       double d = getPlaneDistance(wp.getWaypointPosition(el), current_pose.position);\n       if (d < distance_min)\n       {\n@@ -224,6 +222,7 @@ int getClosestWaypoint(const waypoint_follower::lane &current_path, geometry_msg\n   }\n   else\n   {\n+    ROS_INFO(\"no candidate. search closest waypoint from all waypoints...\");\n     //if there is no candidate...\n     int waypoint_min = -1;\n     double distance_min = DBL_MAX;\n@@ -232,8 +231,8 @@ int getClosestWaypoint(const waypoint_follower::lane &current_path, geometry_msg\n       if (!wp.isFront(i, current_pose))\n         continue;\n \n-      if (!wp.isValid(i, current_pose))\n-        continue;\n+      //if (!wp.isValid(i, current_pose))\n+      //  continue;\n \n       double d = getPlaneDistance(wp.getWaypointPosition(i), current_pose.position);\n       if (d < distance_min)"
        }
    ],
    "autowarefoundation/autoware/167": [
        {
            "sha": "b3570fed86e1c5aba93d69ec953c0cafd6e11293",
            "filename": "ros/src/computing/planning/motion/packages/driving_planner/nodes/velocity_set/velocity_set.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 1,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/3d3f2e595dc7d19c48425e68adb3398f85083a03/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fdriving_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/3d3f2e595dc7d19c48425e68adb3398f85083a03/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fdriving_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fdriving_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set.cpp?ref=3d3f2e595dc7d19c48425e68adb3398f85083a03",
            "patch": "@@ -142,7 +142,10 @@ void PathVset::setTemporalWaypoints()\n   temporal_waypoints_.increment = current_waypoints_.increment;\n   // push current pose\n   waypoint_follower::waypoint current_point;\n+\n   current_point.pose = _control_pose;\n+  if (g_sim_mode)\n+    current_point.pose = _current_pose;\n   current_point.twist = current_waypoints_.waypoints[_closest_waypoint].twist;\n   current_point.dtlane = current_waypoints_.waypoints[_closest_waypoint].dtlane;\n   temporal_waypoints_.waypoints.push_back(current_point);\n@@ -614,6 +617,8 @@ static EControl CrossWalkDetection(const int &crosswalk_id)\n   // Search each calculated points in the crosswalk\n   for (const auto &p : vmap.getDetectionPoints(crosswalk_id).points) {\n     geometry_msgs::Point detection_point = calcRelativeCoordinate(p, _current_pose.pose);\n+    if (g_sim_mode)\n+      detection_point = calcRelativeCoordinate(p, _sim_ndt_pose.pose);\n     tf::Vector3 detection_vector = point2vector(detection_point);\n     detection_vector.setZ(0.0);\n \n@@ -627,7 +632,10 @@ static EControl CrossWalkDetection(const int &crosswalk_id)\n \tvscan_temp.x = vscan.x;\n \tvscan_temp.y = vscan.y;\n \tvscan_temp.z = vscan.z;\n-\tg_obstacle.setStopPoint(calcAbsoluteCoordinate(vscan_temp, _current_pose.pose));\n+\tif (g_sim_mode)\n+\t  g_obstacle.setStopPoint(calcAbsoluteCoordinate(vscan_temp, _sim_ndt_pose.pose));\n+\telse\n+\t  g_obstacle.setStopPoint(calcAbsoluteCoordinate(vscan_temp, _current_pose.pose));\n       }\n       if (stop_count > _threshold_points)\n \treturn STOP;"
        }
    ],
    "autowarefoundation/autoware/207": [
        {
            "sha": "0a93916eb43136674b00c0687b7b0386559d798a",
            "filename": "ros/src/computing/perception/detection/packages/cv_tracker/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/37c8b3d7060c6aa43643b86b307fb44e54694433/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/37c8b3d7060c6aa43643b86b307fb44e54694433/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2FCMakeLists.txt?ref=37c8b3d7060c6aa43643b86b307fb44e54694433",
            "patch": "@@ -13,6 +13,7 @@ FIND_PACKAGE(catkin REQUIRED COMPONENTS\n   libdpm_ttic\n   fusion\n   kf\n+  tf\n )\n FIND_PACKAGE(CUDA)\n FIND_PACKAGE(OpenCV REQUIRED)"
        }
    ],
    "autowarefoundation/autoware/209": [
        {
            "sha": "7b1659904117954cab64892e134416983a2de14c",
            "filename": "ros/src/computing/planning/motion/packages/waypoint_follower/nodes/pure_pursuit/pure_pursuit.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 2,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/7c56537310404c71b6fe39a862032c4e03e613b8/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_follower%2Fnodes%2Fpure_pursuit%2Fpure_pursuit.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/7c56537310404c71b6fe39a862032c4e03e613b8/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_follower%2Fnodes%2Fpure_pursuit%2Fpure_pursuit.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_follower%2Fnodes%2Fpure_pursuit%2Fpure_pursuit.cpp?ref=7c56537310404c71b6fe39a862032c4e03e613b8",
            "patch": "@@ -522,14 +522,20 @@ static geometry_msgs::Twist calcTwist(double curvature, double cmd_velocity)\n {\n   //verify whether vehicle is following the path\n   bool following_flag = verifyFollowing();\n+  static double prev_angular_velocity = 0;\n \n   geometry_msgs::Twist twist;\n   twist.linear.x = cmd_velocity;\n-  if(following_flag)\n+  if(!following_flag)\n+  {\n     twist.angular.z = _current_velocity * curvature;\n+  }\n   else\n-    twist.angular.z = 0;\n+  {\n+    twist.angular.z = prev_angular_velocity;\n+  }\n \n+  prev_angular_velocity = twist.angular.z;\n   return twist;\n }\n "
        }
    ],
    "autowarefoundation/autoware/257": [
        {
            "sha": "71cc1e6beb37c0a68b04aced40c31ec7be2dc408",
            "filename": "ros/src/computing/planning/mission/packages/lane_planner/nodes/lane_select/lane_select.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/c145e80fdfc9f45b84d520f9ca810c926b6b8d61/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmission%2Fpackages%2Flane_planner%2Fnodes%2Flane_select%2Flane_select.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/c145e80fdfc9f45b84d520f9ca810c926b6b8d61/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmission%2Fpackages%2Flane_planner%2Fnodes%2Flane_select%2Flane_select.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmission%2Fpackages%2Flane_planner%2Fnodes%2Flane_select%2Flane_select.cpp?ref=c145e80fdfc9f45b84d520f9ca810c926b6b8d61",
            "patch": "@@ -41,13 +41,15 @@ static waypoint_follower::LaneArray g_lane_array;\n static void configCallback(const runtime_manager::ConfigLaneSelectConstPtr &config)\n {\n   g_lane_number = config->number;\n-  g_pub.publish(g_lane_array.lanes[g_lane_number]);\n+  if ((int)g_lane_array.lanes.size() > g_lane_number)\n+    g_pub.publish(g_lane_array.lanes[g_lane_number]);\n }\n \n static void laneArrayCallback(const waypoint_follower::LaneArrayConstPtr &msg)\n {\n   g_lane_array = *msg;\n-  g_pub.publish(g_lane_array.lanes[g_lane_number]);\n+  if ((int)g_lane_array.lanes.size() > g_lane_number)\n+    g_pub.publish(g_lane_array.lanes[g_lane_number]);\n }\n \n int main(int argc, char **argv)"
        }
    ],
    "autowarefoundation/autoware/259": [
        {
            "sha": "7f7b89bd14470306517be5b4da9140e4b1639835",
            "filename": "ros/src/util/packages/runtime_manager/scripts/runtime_manager_dialog.py",
            "status": "modified",
            "additions": 54,
            "deletions": 13,
            "changes": 67,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/a349003672fa05ebc11463a9c03c129ba539c6e2/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/a349003672fa05ebc11463a9c03c129ba539c6e2/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py?ref=a349003672fa05ebc11463a9c03c129ba539c6e2",
            "patch": "@@ -33,7 +33,6 @@\n import wx\n import wx.lib.buttons\n import wx.lib.agw.customtreectrl as CT\n-import gtk\n import gettext\n import os\n import re\n@@ -214,6 +213,7 @@ def __init__(self, *args, **kwds):\n \t\t#\tself.timer.Start(self.probe_interval)\n \n \t\tself.dlg_rosbag_record = MyDialogRosbagRecord(self, cmd_dic=self.sensing_cmd)\n+\t\tbuttons_color_hdr_setup(self.dlg_rosbag_record)\n \n \t\t#\n \t\t# for Computing tab\n@@ -600,7 +600,7 @@ def radio_action(self, event, grp):\n \t\t\tact = True if b is push and not v else act\n \t\t\tact = False if b is not push and v else act\n \t\t\tif act is not None:\n-\t\t\t\tb.SetValue(act)\n+\t\t\t\tset_val(b, act)\n \n \tdef stat_label_off(self, obj):\n \t\tqs_nms = [ 'map', 'sensing', 'localization', 'detection', 'mission_planning', 'motion_planning' ]\n@@ -686,7 +686,7 @@ def OnHyperlinked_obj(self, obj):\n \t\tdic_list_push(gdic, 'dialog_type', 'config')\n \t\tklass_dlg = globals().get(gdic_dialog_name_get(gdic), MyDialogParam)\n \t\tdlg = klass_dlg(self, pdic=pdic, gdic=gdic, prm=prm)\n-\t\tdlg.ShowModal()\n+\t\tshow_modal(dlg)\n \t\tdic_list_pop(gdic, 'dialog_type')\n \n \tdef obj_to_add_args(self, obj, msg_box=True):\n@@ -703,7 +703,7 @@ def obj_to_add_args(self, obj, msg_box=True):\n \t\t\tdic_list_push(gdic, 'dialog_type', 'sel_cam')\n \t\t\tklass_dlg = globals().get(gdic_dialog_name_get(gdic), MyDialogParam)\n \t\t\tdlg = klass_dlg(self, pdic=pdic, gdic=gdic, prm=prm)\n-\t\t\tdlg_ret = dlg.ShowModal()\n+\t\t\tdlg_ret = show_modal(dlg)\n \t\t\tdic_list_pop(gdic, 'dialog_type')\n \t\t\tif dlg_ret != 0:\n \t\t\t\treturn False\t\t\t\n@@ -712,7 +712,7 @@ def obj_to_add_args(self, obj, msg_box=True):\n \t\t\tdic_list_push(gdic, 'dialog_type', 'open')\n \t\t\tklass_dlg = globals().get(gdic_dialog_name_get(gdic), MyDialogParam)\n \t\t\tdlg = klass_dlg(self, pdic=pdic, gdic=gdic, prm=prm)\n-\t\t\tdlg_ret = dlg.ShowModal()\n+\t\t\tdlg_ret = show_modal(dlg)\n \t\t\tdic_list_pop(gdic, 'dialog_type')\n \t\t\tif dlg_ret != 0:\n \t\t\t\treturn False\t\t\t\n@@ -1163,7 +1163,7 @@ def OnCalibrationPublisher(self, event):\n \t\t\targs = { 'pdic':pdic, 'ids':ids, 'param_panel':gdic.get('param_panel'), 'dlg':dlg }\n \t\t\tgdic_v['hook_var'] = { 'hook':self.camera_id_hook, 'args':args }\n \n-\t\t\tdlg_ret = dlg.ShowModal()\n+\t\t\tdlg_ret = show_modal(dlg)\n \n \t\t\tdic_list_pop(gdic, 'dialog_type')\n \t\t\tpdic['camera_id'] = cam_id # restore\n@@ -1788,13 +1788,16 @@ def OnRosbagPlay(self, event):\n \t\tif obj == play:\n \t\t\tvar['v'] = True\n \t\t\tself.OnLaunchKill_obj(play)\n+\t\t\tbutton_color_change(play)\n \t\t\tset_val(stop, False)\n \t\t\tset_val(pause, False)\n \t\telif obj == stop:\n+\t\t\tset_val(stop, True)\n \t\t\tset_val(play, False)\n \t\t\tset_val(pause, False)\n \t\t\tvar['v'] = False\n \t\t\tself.OnLaunchKill_obj(play)\n+\t\t\tbutton_color_change(stop)\n \t\telif obj == pause:\n \t\t\t(_, _, proc) = self.obj_to_cmd_dic_cmd_proc(play)\n \t\t\tif proc:\n@@ -1907,7 +1910,7 @@ def alias_sync(self, obj, v=None):\n \t\t\tif en is not None and o.IsEnabled() != en and not self.is_toggle_button(o):\n \t\t\t\to.Enable(en)\n \t\t\tif v is not None and getattr(o, 'SetValue', None):\n-\t\t\t\to.SetValue(v)\n+\t\t\t\tset_val(o, v)\n \t\t\t\tif getattr(o, 'SetInsertionPointEnd', None):\n \t\t\t\t\to.SetInsertionPointEnd()\n \n@@ -2422,8 +2425,9 @@ def __init__(self, *args, **kwds):\n \t\t\treturn\n \t\tif self.kind == 'toggle_button':\n \t\t\tself.obj = wx.ToggleButton(self, wx.ID_ANY, label)\n-\t\t\tself.obj.SetValue(v)\n+\t\t\tset_val(self.obj, v)\n \t\t\tself.Bind(wx.EVT_TOGGLEBUTTON, self.OnUpdate, self.obj)\n+\t\t\tbutton_color_hdr_setup(self.obj)\n \t\t\treturn\n \t\tif self.kind == 'hide':\n \t\t\tself.Hide()\n@@ -2468,6 +2472,7 @@ def __init__(self, *args, **kwds):\n \t\tif self.kind == 'path':\n \t\t\tself.ref = wx.Button(self, wx.ID_ANY, 'Ref')\n \t\t\tself.Bind(wx.EVT_BUTTON, self.OnRef, self.ref)\n+\t\t\tbutton_color_hdr_setup(self.ref)\n \t\t\tself.ref.SetMinSize((40,29))\n \t\t\tszr.Add(self.ref, 0, flag, 4)\n \n@@ -2914,6 +2919,7 @@ def OnInit(self):\n \t\twx.InitAllImageHandlers()\n \t\tframe_1 = MyFrame(None, wx.ID_ANY, \"\")\n \t\tself.SetTopWindow(frame_1)\n+\t\tbuttons_color_hdr_setup(frame_1)\n \t\tframe_1.Show()\n \t\treturn 1\n \n@@ -3028,7 +3034,7 @@ def file_dialog(parent, tc, path_inf_dic={}):\n \t\tst_dic = { 'save' : wx.FD_SAVE, 'multi' : wx.FD_MULTIPLE }\n \t\tdlg = wx.FileDialog(parent, defaultDir=dn, defaultFile=fn, \n \t\t\t\t    style=st_dic.get(path_type, wx.FD_DEFAULT_STYLE))\n-\tret = dlg.ShowModal()\n+\tret = show_modal(dlg)\n \tif ret == wx.ID_OK:\n \t\tpath = ','.join(dlg.GetPaths()) if path_type == 'multi' else dlg.GetPath()\n \t\tif path_type == 'dir' and fns:\n@@ -3037,6 +3043,43 @@ def file_dialog(parent, tc, path_inf_dic={}):\n \tdlg.Destroy()\n \treturn ret\n \n+def button_color_change(btn, v=None):\n+\tif v is None and type(btn) is wx.ToggleButton:\n+\t\tv = btn.GetValue()\n+\tkey = ( v , btn.IsEnabled() )\n+\tdic = { (True,True):('#F9F9F8','#8B8BB9'), (True,False):('#F9F9F8','#E0E0F0') }\n+\t(fcol, bcol) = dic.get(key, (wx.NullColour, wx.NullColour))\n+\tbtn.SetForegroundColour(fcol)\n+\tbtn.SetBackgroundColour(bcol)\n+\n+def OnButtonColorHdr(event):\n+\tbtn = event.GetEventObject()\n+\tdic = { wx.EVT_TOGGLEBUTTON.typeId : None, \n+\t\twx.EVT_LEFT_DOWN.typeId\t   : True,\n+\t\twx.EVT_LEFT_UP.typeId\t   : False }\n+\tv = dic.get(event.GetEventType(), '?')\n+\tif v != '?':\n+\t\tbutton_color_change(btn, v)\n+\tevent.Skip()\n+\n+def button_color_hdr_setup(btn):\n+\thdr = OnButtonColorHdr\n+\tif type(btn) is wx.ToggleButton:\n+\t\tbtn.Bind(wx.EVT_TOGGLEBUTTON, hdr)\n+\telif type(btn) is wx.Button:\n+\t\tbtn.Bind(wx.EVT_LEFT_DOWN, hdr)\n+\t\tbtn.Bind(wx.EVT_LEFT_UP, hdr)\n+\n+def buttons_color_hdr_setup(frm_obj):\n+\tkey = 'button_'\n+\tbtns = [ getattr(frm_obj, nm) for nm in dir(frm_obj) if nm[:len(key)] == key ]\n+\tfor btn in btns:\n+\t\tbutton_color_hdr_setup(btn)\n+\n+def show_modal(dlg):\n+\tbuttons_color_hdr_setup(dlg)\n+\treturn dlg.ShowModal()\n+\n def load_yaml(filename, def_ret=None):\n \tdir = rtmgr_src_dir()\n \tpath = dir + filename\n@@ -3158,6 +3201,8 @@ def set_val(obj, v):\n \tif func:\n \t\tfunc(v)\n \t\tobj_refresh(obj)\n+\tif type(obj) is wx.ToggleButton:\n+\t\tbutton_color_change(obj)\n \n def obj_refresh(obj):\n \tif type(obj) is CT.GenericTreeItem:\n@@ -3271,10 +3316,6 @@ def set_scheduling_policy(proc, policy, priority):\n \treturn send_to_proc_manager(order)\n \n if __name__ == \"__main__\":\n-\tpath = rtmgr_src_dir() + 'btnrc'\n-\tif os.path.exists(path):\n-\t\tgtk.rc_parse(path)\n-\n \tgettext.install(\"app\")\n \n \tapp = MyApp(0)"
        }
    ],
    "autowarefoundation/autoware/268": [
        {
            "sha": "39c82a7c0481dec5d52f4b5caa91026889e2c647",
            "filename": "ros/src/util/packages/runtime_manager/scripts/runtime_manager_dialog.py",
            "status": "modified",
            "additions": 13,
            "deletions": 9,
            "changes": 22,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/13a1fbb8a29193c178e9530bbd7d14c939923733/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/13a1fbb8a29193c178e9530bbd7d14c939923733/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py?ref=13a1fbb8a29193c178e9530bbd7d14c939923733",
            "patch": "@@ -1307,7 +1307,7 @@ def top_cmd_th(self, ev, setting, cpu_ibls, mem_ibl, toprc, backup):\n \t\t\t\tv = lst[1] if lst[1] != ':' else lst[2]\n \t\t\t\tif v[0] == ':':\n \t\t\t\t\tv = v[1:]\n-\t\t\t\tfv = float(v)\n+\t\t\t\tfv = str_to_float(v)\n \t\t\t\tcol = self.info_col(fv, rate_per_cpu_yellow, rate_per_cpu, (64,64,64), (200,0,0))\n \n \t\t\t\tif i < cpu_n:\n@@ -1362,7 +1362,7 @@ def top_cmd_th(self, ev, setting, cpu_ibls, mem_ibl, toprc, backup):\n \t\t\tloads = [ line[i-1:].strip().split(' ')[0] for line in top5 ]\n \t\t\t\n \t\t\tfor (lb, cmd, load) in zip(self.lb_top5, cmds, loads):\n-\t\t\t\tcol = self.info_col(float(load), rate_per_cpu_yellow, rate_per_cpu, (64,64,64), (200,0,0))\n+\t\t\t\tcol = self.info_col(str_to_float(load), rate_per_cpu_yellow, rate_per_cpu, (64,64,64), (200,0,0))\n \t\t\t\twx.CallAfter(lb.SetForegroundColour, col)\n \t\t\t\twx.CallAfter(lb.SetLabel, cmd + ' (' + load + ' %CPU)')\n \n@@ -1849,9 +1849,9 @@ def rosbag_play_progress_bar(self, file, ev):\n \t\t\tif not s:\n \t\t\t\tbreak\n \t\t\tlst = s.split()\n-\t\t\tpos = float(lst[0])\n+\t\t\tpos = str_to_float(lst[0])\n \t\t\t# lst[1] is '/'\n-\t\t\ttotal = float(lst[2])\n+\t\t\ttotal = str_to_float(lst[2])\n \t\t\tif total == 0:\n \t\t\t\tcontinue\n \t\t\tprg = int(100 * pos / total + 0.5)\n@@ -2510,7 +2510,7 @@ def get_v(self):\n \n \tdef get_tc_v(self):\n \t\ts = self.tc.GetValue()\n-\t\tv = float(s) if self.is_float else int(s)\n+\t\tv = str_to_float(s) if self.is_float else int(s)\n \t\tif self.has_slider:\n \t\t\tv = self.min if v < self.min else v\n \t\t\tv = self.max if v > self.max else v\n@@ -2768,7 +2768,7 @@ def OnPcdOutput(self, event):\n \t\tv = tc.GetValue() if self.radio_btn_filter_resolution.GetValue() else '0.0'\n \t\tmsg = self.klass_msg()\n \t\tmsg.filename = self.text_ctrl_path.GetValue()\n-\t\tmsg.filter_res = float(v)\n+\t\tmsg.filter_res = str_to_float(v)\n \t\tself.pub.publish(msg)\n \t\t\n \tdef OnOk(self, event):\n@@ -3010,7 +3010,7 @@ def size_arg_get(self):\n \t\ts = tc.GetValue()\n \t\tmb = 0\n \t\ttry:\n-\t\t\tmb = float(s)\n+\t\t\tmb = str_to_float(s)\n \t\texcept ValueError:\n \t\t\tmb = 0\n \t\tif mb <= 0:\n@@ -3182,15 +3182,19 @@ def msg_path_to_obj_attr(msg, path):\n \t\tobj = getattr(obj, attr, None)\n \treturn (obj, lst[-1])\n \n-def str_to_rosval(str, type_str, def_ret=None):\n+def str_to_rosval(s, type_str, def_ret=None):\n \tcvt_dic = {\n \t\t'int8':int , 'int16':int , 'int32':int ,\n \t\t'uint8':int , 'uint16':int , 'uint32':int ,\n \t\t'int64':long , 'uint64':long,\n \t\t'float32':float, 'float64':float,\n \t}\n \tt = cvt_dic.get(type_str)\n-\treturn t(str) if t else def_ret\n+\ts = s.replace(',','.') if t is float and type(s) is str else s\n+\treturn t(s) if t else def_ret\n+\n+def str_to_float(s):\n+\treturn float( s.replace(',','.') )\n \n def set_path(tc, v):\n \ttc.SetValue(v)"
        }
    ],
    "autowarefoundation/autoware/287": [
        {
            "sha": "a8caca559db6ef09ace58c2c994ab75c32f6bf0b",
            "filename": "ros/src/util/packages/sound_player/package.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/59f47296fde61753ddcf9f266ebd08f47173dc57/ros%2Fsrc%2Futil%2Fpackages%2Fsound_player%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/59f47296fde61753ddcf9f266ebd08f47173dc57/ros%2Fsrc%2Futil%2Fpackages%2Fsound_player%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fsound_player%2Fpackage.xml?ref=59f47296fde61753ddcf9f266ebd08f47173dc57",
            "patch": "@@ -9,8 +9,10 @@\n   <build_depend>message_generation</build_depend>\n   <build_depend>rospy</build_depend>\n   <build_depend>std_msgs</build_depend>\n+  <build_depend>sound_play</build_depend>\n   <run_depend>rospy</run_depend>\n   <run_depend>std_msgs</run_depend>\n+  <run_depend>sound_play</run_depend>\n   <export>\n   </export>\n </package>"
        }
    ],
    "autowarefoundation/autoware/290": [
        {
            "sha": "941d26321febb1c0c358efc045567235f0a82966",
            "filename": "ros/src/util/packages/runtime_manager/scripts/computing.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/0097f26bd830ede58a75494ee90dd6a3bf4e77a0/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/0097f26bd830ede58a75494ee90dd6a3bf4e77a0/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml?ref=0097f26bd830ede58a75494ee90dd6a3bf4e77a0",
            "patch": "@@ -1074,7 +1074,7 @@ params :\n       kind    : radio_box\n       choices : ['Rviz','ndt_localizer','GNSS']\n       choices_type : str\n-      v       : 0\n+      v       : Rviz\n       cmd_param:\n         dash     : ''\n         delim    : ':='   "
        }
    ],
    "autowarefoundation/autoware/336": [
        {
            "sha": "462da14c63c4c5c2197d7123b5114bde1b6f21e4",
            "filename": "ros/src/computing/perception/detection/packages/cv_tracker/nodes/klt_track/klt_track.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/04065e01094f492f65f874ef807d0ec2297234f9/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Fklt_track%2Fklt_track.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/04065e01094f492f65f874ef807d0ec2297234f9/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Fklt_track%2Fklt_track.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Fklt_track%2Fklt_track.cpp?ref=04065e01094f492f65f874ef807d0ec2297234f9",
            "patch": "@@ -286,6 +286,7 @@ class RosTrackerApp\n \t\t//std::cout << \"TRACKERS: \" << obj_trackers_.size() << std::endl;\n \n \t\tobj_detections_.clear();\n+        ranges_.clear();\n \n \t\tcv_tracker::image_obj_tracked tmp_objects_msg;\n \n@@ -323,7 +324,8 @@ class RosTrackerApp\n \t\t\ttracked_type_ = image_objects_msg.type;\n \t\t\t//points are X,Y,W,H and repeat for each instance\n \t\t\tobj_detections_.clear();\n-\n+            ranges_.clear();\n+            \n \t\t\tfor (unsigned int i=0; i<num;i++)\n \t\t\t{\n \t\t\t\tcv::Rect tmp;"
        }
    ],
    "autowarefoundation/autoware/348": [
        {
            "sha": "824a116f15332a29b6a5b3e780ba817eb49323e6",
            "filename": "README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/f9df9b9a3345abd1fd9518267f407bd6dc49e542/README.md",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/f9df9b9a3345abd1fd9518267f407bd6dc49e542/README.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/README.md?ref=f9df9b9a3345abd1fd9518267f407bd6dc49e542",
            "patch": "@@ -36,7 +36,7 @@ Autoware is protected by BSD License. Please use it on your own responsibility.\n ## Requirements\n \n - ROS indigo(Ubuntu 14.04) or ROS jade(Ubuntu 15.04)\n-- OpenCV 2.4.8 or higher **NOTE: Autoware does not support OpenCV 3. Please use OpenCV 2**\n+- OpenCV 2.4.10 or higher **NOTE: Autoware does not support OpenCV 3. Please use OpenCV 2**\n - Qt 5.2.1 or higher\n - CUDA(Optional)\n - FlyCapture2(optional)"
        }
    ],
    "autowarefoundation/autoware/387": [
        {
            "sha": "ea83a0ef5135e45672ff7f29eed6a4f5cf012a94",
            "filename": "ros/src/computing/perception/detection/packages/cv_tracker/nodes/range_fusion/range_fusion.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/6217b26aa267b5194542f3351237ba14a9bcf3bf/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Frange_fusion%2Frange_fusion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/6217b26aa267b5194542f3351237ba14a9bcf3bf/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Frange_fusion%2Frange_fusion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Frange_fusion%2Frange_fusion.cpp?ref=6217b26aa267b5194542f3351237ba14a9bcf3bf",
            "patch": "@@ -42,9 +42,9 @@ bool ready_ = false;\n \n static void DetectedObjectsCallback(const cv_tracker::image_obj& image_object)\n {\n+    sensor_header = image_object.header;\n+    setDetectedObjects(image_object);\n     if (ready_) {\n-\t\tsensor_header = image_object.header;\n-        setDetectedObjects(image_object);\n         fuse();\n         publishTopic();\n         ready_ = false;\n@@ -64,9 +64,9 @@ static void DetectedObjectsCallback(const cv_tracker::image_obj& image_object)\n \n static void PointsImageCallback(const points2image::PointsImage& points_image)\n {\n+    sensor_header = points_image.header;\n+    setPointsImage(points_image);\n     if (ready_) {\n-\t\tsensor_header = points_image.header;\n-\t\tsetPointsImage(points_image);\n \t\tfuse();\n \t\tpublishTopic();\n         ready_ = false;"
        }
    ],
    "autowarefoundation/autoware/389": [
        {
            "sha": "76323fd19ac69c8fdb3c59f94d9b8186369313a8",
            "filename": "ros/src/computing/perception/detection/lib/fusion/fusion.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/a86e0ebb3f08afa60dcafebe4b6e3dd35d42aa61/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Ffusion%2Ffusion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/a86e0ebb3f08afa60dcafebe4b6e3dd35d42aa61/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Ffusion%2Ffusion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Ffusion%2Ffusion.cpp?ref=a86e0ebb3f08afa60dcafebe4b6e3dd35d42aa61",
            "patch": "@@ -370,7 +370,7 @@ void calcDistance()\n \t\t}\n \n \t\tstd::vector<float> distance_candidates;\n-\t\tfor(int j = g_corner_points[0+i*4]; j <= g_corner_points[0+i*4] + g_corner_points[2+i*4]; j++) {\n+\t\tfor(int j = g_corner_points[0+i*4]; j < g_corner_points[0+i*4] + g_corner_points[2+i*4]; j++) {\n \t\t    for(int k = search_scope_min_y; k <= search_scope_max_y; k++) {\n \t\t\tif(g_scan_image.distance[j][k] != NO_DATA) {\n \t\t\t    distance_candidates.push_back(g_scan_image.distance[j][k]);"
        }
    ],
    "autowarefoundation/autoware/436": [
        {
            "sha": "d6eabde40f41f2277184539cdbb476a0622302a2",
            "filename": "ros/src/computing/perception/detection/lib/image/kf/src/kf.cpp",
            "status": "modified",
            "additions": 18,
            "deletions": 13,
            "changes": 31,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/ceeb1d88a4dde24d21a7fcf9b4cbc9dade2136af/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Fimage%2Fkf%2Fsrc%2Fkf.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/ceeb1d88a4dde24d21a7fcf9b4cbc9dade2136af/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Fimage%2Fkf%2Fsrc%2Fkf.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Fimage%2Fkf%2Fsrc%2Fkf.cpp?ref=ceeb1d88a4dde24d21a7fcf9b4cbc9dade2136af",
            "patch": "@@ -111,7 +111,7 @@ std::vector<float> _max_heights;\n \n std_msgs::Header    image_objects_header;\n \n-bool _ready =false;\n+//static bool _ready;\n \n long int _counter = 0;\n //\n@@ -797,10 +797,10 @@ void trackAndDrawObjects(cv::Mat& image, int frameNumber, std::vector<cv::Latent\n \n \tcv::TickMeter tm;\n \ttm.start();\n-\t//std::cout << endl << \"START tracking...\";\n+\t//std::cout << \"START tracking...\";\n \tdoTracking(detections, frameNumber, kstates, active, image, tracked_detections, colors);\n \ttm.stop();\n-\t//std::cout << \"END Tracking time = \" << tm.getTimeSec() << \" sec\" << endl;\n+\t//std::cout << \"END Tracking time = \" << tm.getTimeSec() << \" sec\" << std::endl;\n \n \t//ROS\n \tint num = tracked_detections.size();\n@@ -835,25 +835,28 @@ void trackAndDrawObjects(cv::Mat& image, int frameNumber, std::vector<cv::Latent\n \t\t//ENDROS\n \t}\n \t//more ros\n-\tkf_objects_msg_.type = object_type;\n-\tkf_objects_msg_.total_num = num;\n-\tcopy(rect_ranged_array.begin(), rect_ranged_array.end(), back_inserter(kf_objects_msg_.rect_ranged)); // copy vector\n-\tcopy(real_data.begin(), real_data.end(), back_inserter(kf_objects_msg_.real_data)); // copy vector\n-\tcopy(obj_id.begin(), obj_id.end(), back_inserter(kf_objects_msg_.obj_id)); // copy vector\n-\tcopy(lifespan.begin(), lifespan.end(), back_inserter(kf_objects_msg_.lifespan)); // copy vector\n+\tcv_tracker::image_obj_tracked kf_objects_msg;\n \n-//\tkf_objects_msg_.header = image_source.header;\n-\tkf_objects_msg_.header = image_objects_header;\n+\tkf_objects_msg.type = object_type;\n+\tkf_objects_msg.total_num = num;\n+\tcopy(rect_ranged_array.begin(), rect_ranged_array.end(), back_inserter(kf_objects_msg.rect_ranged)); // copy vector\n+\tcopy(real_data.begin(), real_data.end(), back_inserter(kf_objects_msg.real_data)); // copy vector\n+\tcopy(obj_id.begin(), obj_id.end(), back_inserter(kf_objects_msg.obj_id)); // copy vector\n+\tcopy(lifespan.begin(), lifespan.end(), back_inserter(kf_objects_msg.lifespan)); // copy vector\n \n+//\tkf_objects_msg_.header = image_source.header;\n+\tkf_objects_msg.header = image_objects_header;\n+\tkf_objects_msg_ = kf_objects_msg;;\n+\ttrack_ready_ = true;\n \tpublish_if_possible();\n \n \t//cout << \".\"<< endl;\n }\n \n void image_callback(const sensor_msgs::Image& image_source)\n {\n-\tif (!_ready)\n-\t\treturn;\n+\t//if (!_ready)\n+\t//\treturn;\n \n \tcv_bridge::CvImagePtr cv_image = cv_bridge::toCvCopy(image_source, sensor_msgs::image_encodings::BGR8);\n \tcv::Mat imageTrack = cv_image->image;\n@@ -980,6 +983,8 @@ int kf_main(int argc, char* argv[])\n \t//TimeSynchronizer<Image, dpm::ImageObjects> sync(image_sub, pos_sub, 10);\n \n \t//sync.registerCallback(boost::bind(&sync_callback, _1, _2));\n+\ttrack_ready_ = false;\n+\tdetect_ready_ = false;\n \n \tros::spin();\n \treturn 0;"
        }
    ],
    "autowarefoundation/autoware/548": [
        {
            "sha": "df26ae160807452d03922d768fa2ef23a9628ba8",
            "filename": "ros/src/computing/perception/detection/lib/fusion/fusion.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/65ff47420d6cb3d2fc5064a3c070a0ee450751eb/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Ffusion%2Ffusion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/65ff47420d6cb3d2fc5064a3c070a0ee450751eb/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Ffusion%2Ffusion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flib%2Ffusion%2Ffusion.cpp?ref=65ff47420d6cb3d2fc5064a3c070a0ee450751eb",
            "patch": "@@ -370,8 +370,8 @@ void calcDistance()\n \t\t}\n \n \t\tstd::vector<float> distance_candidates;\n-\t\tfor(int j = g_corner_points[0+i*4]; j < g_corner_points[0+i*4] + g_corner_points[2+i*4]; j++) {\n-\t\t  j = j>g_scan_image.distance.size()-1 ? g_scan_image.distance.size()-1 : j;\n+\t\tint max_right_corner_point = (g_corner_points[0+i*4] + g_corner_points[2+i*4])>g_scan_image.distance.size()-1 ? g_scan_image.distance.size()-1 : (g_corner_points[0+i*4] + g_corner_points[2+i*4]);\n+\t\tfor(int j = g_corner_points[0+i*4]; j < max_right_corner_point; j++) {\n \t\t    for(int k = search_scope_min_y; k <= search_scope_max_y; k++) {\n \t\t\tif(g_scan_image.distance[j][k] != NO_DATA) {\n \t\t\t    distance_candidates.push_back(g_scan_image.distance[j][k]);"
        }
    ],
    "autowarefoundation/autoware/549": [
        {
            "sha": "bb0e5487cba693dc587526fb9522acdd0a3980a1",
            "filename": "ros/src/computing/perception/detection/packages/lidar_tracker/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/1b4d25163423bca9797298e66fadc0fbd40deeab/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Flidar_tracker%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/1b4d25163423bca9797298e66fadc0fbd40deeab/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Flidar_tracker%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Flidar_tracker%2FCMakeLists.txt?ref=1b4d25163423bca9797298e66fadc0fbd40deeab",
            "patch": "@@ -214,7 +214,7 @@ if(EXISTS \"/usr/local/cuda\")\n   INCLUDE(FindCUDA)\n   \n   # set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-gencode arch=compute_${CUDA_CAPABILITY_VERSION},code=sm_${CUDA_CAPABILITY_VERSION};-std=c++11)\n-  set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-arch=sm_${CUDA_CAPABILITY_VERSION};-std=c++11)\n+  set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-arch=${CUDA_ARCH};-std=c++11)\n   \n   INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS}\n     ${Qt5Widgets_INCLUDE_DIRS})"
        }
    ],
    "autowarefoundation/autoware/550": [
        {
            "sha": "a75c71680bae2372f5480c5983dc46491fd6a881",
            "filename": "ros/src/sensing/drivers/gnss/packages/javad_navsat_driver/lib/libjavad_navsat_driver/driver.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/c03f3db4f1af87a973eee7578b05473fd75873b0/ros%2Fsrc%2Fsensing%2Fdrivers%2Fgnss%2Fpackages%2Fjavad_navsat_driver%2Flib%2Flibjavad_navsat_driver%2Fdriver.py",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/c03f3db4f1af87a973eee7578b05473fd75873b0/ros%2Fsrc%2Fsensing%2Fdrivers%2Fgnss%2Fpackages%2Fjavad_navsat_driver%2Flib%2Flibjavad_navsat_driver%2Fdriver.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fsensing%2Fdrivers%2Fgnss%2Fpackages%2Fjavad_navsat_driver%2Flib%2Flibjavad_navsat_driver%2Fdriver.py?ref=c03f3db4f1af87a973eee7578b05473fd75873b0",
            "patch": "@@ -58,7 +58,7 @@ def add_sentence(self, nmea_string, frame_id, timestamp=None):\n                           \"Sentence was: %s\" % repr(nmea_string))\n             return False\n \n-        parsed_sentence = libnmea_navsat_driver.parser.parse_nmea_sentence(nmea_string)\n+        parsed_sentence = libjavad_navsat_driver.parser.parse_nmea_sentence(nmea_string)\n         if not parsed_sentence:\n             rospy.logdebug(\"Failed to parse NMEA sentence. Sentece was: %s\" % nmea_string)\n             return False"
        }
    ],
    "autowarefoundation/autoware/557": [
        {
            "sha": "b030542182e6f08860803ee8e09c0c59a7987eb4",
            "filename": "ros/src/computing/perception/localization/packages/ndt_localizer/nodes/ndt_mapping/ndt_mapping.cpp",
            "status": "modified",
            "additions": 326,
            "deletions": 305,
            "changes": 631,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/f0fbdfbb0b5741f073c46403e327bc0a05b7e8c1/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Fndt_localizer%2Fnodes%2Fndt_mapping%2Fndt_mapping.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/f0fbdfbb0b5741f073c46403e327bc0a05b7e8c1/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Fndt_localizer%2Fnodes%2Fndt_mapping%2Fndt_mapping.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Fndt_localizer%2Fnodes%2Fndt_mapping%2Fndt_mapping.cpp?ref=f0fbdfbb0b5741f073c46403e327bc0a05b7e8c1",
            "patch": "@@ -34,7 +34,7 @@\n  Yuki KITSUKAWA\n  */\n \n-#define OUTPUT // If you want to output \"position_log.txt\", \"#define OUTPUT\".\n+#define OUTPUT  // If you want to output \"position_log.txt\", \"#define OUTPUT\".\n \n #include <iostream>\n #include <sstream>\n@@ -67,33 +67,35 @@\n #include <runtime_manager/ConfigNdtMapping.h>\n #include <runtime_manager/ConfigNdtMappingOutput.h>\n \n-struct pose {\n-    double x;\n-    double y;\n-    double z;\n-    double roll;\n-    double pitch;\n-    double yaw;\n+struct pose\n+{\n+  double x;\n+  double y;\n+  double z;\n+  double roll;\n+  double pitch;\n+  double yaw;\n };\n \n // global variables\n static pose previous_pose, guess_pose, current_pose, ndt_pose, added_pose, localizer_pose;\n \n-static double offset_x, offset_y, offset_z, offset_yaw; // current_pose - previous_pose\n+static double offset_x, offset_y, offset_z, offset_yaw;  // current_pose - previous_pose\n \n static pcl::PointCloud<pcl::PointXYZI> map;\n \n static pcl::NormalDistributionsTransform<pcl::PointXYZI, pcl::PointXYZI> ndt;\n // Default values\n-static int iter = 30; // Maximum iterations\n-static float ndt_res = 1.0; // Resolution\n-static double step_size = 0.1; // Step size\n-static double trans_eps = 0.01; // Transformation epsilon\n+static int iter = 30;            // Maximum iterations\n+static float ndt_res = 1.0;      // Resolution\n+static double step_size = 0.1;   // Step size\n+static double trans_eps = 0.01;  // Transformation epsilon\n \n // Leaf size of VoxelGrid filter.\n static double voxel_leaf_size = 2.0;\n \n-static ros::Time callback_start, callback_end, t1_start, t1_end, t2_start, t2_end, t3_start, t3_end, t4_start, t4_end, t5_start, t5_end;\n+static ros::Time callback_start, callback_end, t1_start, t1_end, t2_start, t2_end, t3_start, t3_end, t4_start, t4_end,\n+    t5_start, t5_end;\n static ros::Duration d_callback, d1, d2, d3, d4, d5;\n \n static ros::Publisher ndt_map_pub;\n@@ -147,10 +149,13 @@ static void output_callback(const runtime_manager::ConfigNdtMappingOutput::Const\n   sensor_msgs::PointCloud2::Ptr map_msg_ptr(new sensor_msgs::PointCloud2);\n \n   // Apply voxelgrid filter\n-  if(filter_res == 0.0){\n+  if (filter_res == 0.0)\n+  {\n     std::cout << \"Original: \" << map_ptr->points.size() << \" points.\" << std::endl;\n     pcl::toROSMsg(*map_ptr, *map_msg_ptr);\n-  }else{\n+  }\n+  else\n+  {\n     pcl::VoxelGrid<pcl::PointXYZI> voxel_grid_filter;\n     voxel_grid_filter.setLeafSize(filter_res, filter_res, filter_res);\n     voxel_grid_filter.setInputCloud(map_ptr);\n@@ -163,319 +168,335 @@ static void output_callback(const runtime_manager::ConfigNdtMappingOutput::Const\n   ndt_map_pub.publish(*map_msg_ptr);\n \n   // Writing Point Cloud data to PCD file\n-  if(filter_res == 0.0){\n+  if (filter_res == 0.0)\n+  {\n     pcl::io::savePCDFileASCII(filename, *map_ptr);\n     std::cout << \"Saved \" << map_ptr->points.size() << \" data points to \" << filename << \".\" << std::endl;\n-  }else{\n+  }\n+  else\n+  {\n     pcl::io::savePCDFileASCII(filename, *map_filtered);\n     std::cout << \"Saved \" << map_filtered->points.size() << \" data points to \" << filename << \".\" << std::endl;\n-  }    \n+  }\n }\n \n static void points_callback(const sensor_msgs::PointCloud2::ConstPtr& input)\n {\n-    double r;\n-    pcl::PointXYZI p; \n-    pcl::PointCloud<pcl::PointXYZI> tmp, scan;\n-    pcl::PointCloud<pcl::PointXYZI>::Ptr filtered_scan_ptr (new pcl::PointCloud<pcl::PointXYZI>());\n-    pcl::PointCloud<pcl::PointXYZI>::Ptr transformed_scan_ptr (new pcl::PointCloud<pcl::PointXYZI>());\n-    tf::Quaternion q;\n-\n-    Eigen::Matrix4f t_localizer(Eigen::Matrix4f::Identity());\n-    Eigen::Matrix4f t_base_link(Eigen::Matrix4f::Identity());\n-    tf::TransformBroadcaster br;\n-    tf::Transform transform;\n-\n-    ros::Time scan_time = input->header.stamp;\n-\n-    pcl::fromROSMsg(*input, tmp);\n-\n-    for (pcl::PointCloud<pcl::PointXYZI>::const_iterator item = tmp.begin(); item != tmp.end(); item++){\n-    \tp.x = (double) item->x;\n-    \tp.y = (double) item->y;\n-    \tp.z = (double) item->z;\n-    \tp.intensity = (double) item->intensity;\n-\n-    \tr = sqrt(pow(p.x, 2.0) + pow(p.y, 2.0));\n-    \tif(r > RANGE){\n-    \t\tscan.push_back(p);\n-    \t}\n+  double r;\n+  pcl::PointXYZI p;\n+  pcl::PointCloud<pcl::PointXYZI> tmp, scan;\n+  pcl::PointCloud<pcl::PointXYZI>::Ptr filtered_scan_ptr(new pcl::PointCloud<pcl::PointXYZI>());\n+  pcl::PointCloud<pcl::PointXYZI>::Ptr transformed_scan_ptr(new pcl::PointCloud<pcl::PointXYZI>());\n+  tf::Quaternion q;\n+\n+  Eigen::Matrix4f t_localizer(Eigen::Matrix4f::Identity());\n+  Eigen::Matrix4f t_base_link(Eigen::Matrix4f::Identity());\n+  tf::TransformBroadcaster br;\n+  tf::Transform transform;\n+\n+  ros::Time scan_time = input->header.stamp;\n+\n+  pcl::fromROSMsg(*input, tmp);\n+\n+  for (pcl::PointCloud<pcl::PointXYZI>::const_iterator item = tmp.begin(); item != tmp.end(); item++)\n+  {\n+    p.x = (double)item->x;\n+    p.y = (double)item->y;\n+    p.z = (double)item->z;\n+    p.intensity = (double)item->intensity;\n+\n+    r = sqrt(pow(p.x, 2.0) + pow(p.y, 2.0));\n+    if (r > RANGE)\n+    {\n+      scan.push_back(p);\n     }\n+  }\n \n-    pcl::PointCloud<pcl::PointXYZI>::Ptr scan_ptr(new pcl::PointCloud<pcl::PointXYZI>(scan));\n-    \n-    // Add initial point cloud to velodyne_map\n-    if(initial_scan_loaded == 0){\n-      map += *scan_ptr;\n-      initial_scan_loaded = 1;\n-    }\n-    \n-    // Apply voxelgrid filter\n-    pcl::VoxelGrid<pcl::PointXYZI> voxel_grid_filter;\n-    voxel_grid_filter.setLeafSize(voxel_leaf_size, voxel_leaf_size, voxel_leaf_size);\n-    voxel_grid_filter.setInputCloud(scan_ptr);\n-    voxel_grid_filter.filter(*filtered_scan_ptr);\n-    \n-    pcl::PointCloud<pcl::PointXYZI>::Ptr map_ptr(new pcl::PointCloud<pcl::PointXYZI>(map));\n-\n-    ndt.setTransformationEpsilon(trans_eps);\n-    ndt.setStepSize(step_size);\n-    ndt.setResolution(ndt_res);\n-    ndt.setMaximumIterations(iter);\n-    ndt.setInputSource(filtered_scan_ptr);\n-    \n-    if(isMapUpdate == true){\n-    \tndt.setInputTarget(map_ptr);\n-    \tisMapUpdate = false;\n-    }\n+  pcl::PointCloud<pcl::PointXYZI>::Ptr scan_ptr(new pcl::PointCloud<pcl::PointXYZI>(scan));\n+\n+  // Add initial point cloud to velodyne_map\n+  if (initial_scan_loaded == 0)\n+  {\n+    pcl::transformPointCloud(*scan_ptr, *transformed_scan_ptr, tf_btol);\n+    map += *transformed_scan_ptr;\n+    initial_scan_loaded = 1;\n+  }\n \n-    guess_pose.x = previous_pose.x + offset_x;\n-    guess_pose.y = previous_pose.y + offset_y;\n-    guess_pose.z = previous_pose.z + offset_z;\n-    guess_pose.roll = previous_pose.roll;\n-    guess_pose.pitch = previous_pose.pitch;\n-    guess_pose.yaw = previous_pose.yaw + offset_yaw;\n-    \n-    Eigen::AngleAxisf init_rotation_x(guess_pose.roll, Eigen::Vector3f::UnitX());\n-    Eigen::AngleAxisf init_rotation_y(guess_pose.pitch, Eigen::Vector3f::UnitY());\n-    Eigen::AngleAxisf init_rotation_z(guess_pose.yaw, Eigen::Vector3f::UnitZ());\n-    \n-    Eigen::Translation3f init_translation(guess_pose.x, guess_pose.y, guess_pose.z);\n-    \n-    Eigen::Matrix4f init_guess = (init_translation * init_rotation_z * init_rotation_y * init_rotation_x).matrix() * tf_btol;\n-    \n-    t3_end = ros::Time::now();\n-    d3 = t3_end - t3_start;\n-    \n-    t4_start = ros::Time::now();\n-\n-    pcl::PointCloud<pcl::PointXYZI>::Ptr output_cloud(new pcl::PointCloud<pcl::PointXYZI>);\n+  // Apply voxelgrid filter\n+  pcl::VoxelGrid<pcl::PointXYZI> voxel_grid_filter;\n+  voxel_grid_filter.setLeafSize(voxel_leaf_size, voxel_leaf_size, voxel_leaf_size);\n+  voxel_grid_filter.setInputCloud(scan_ptr);\n+  voxel_grid_filter.filter(*filtered_scan_ptr);\n+\n+  pcl::PointCloud<pcl::PointXYZI>::Ptr map_ptr(new pcl::PointCloud<pcl::PointXYZI>(map));\n+\n+  ndt.setTransformationEpsilon(trans_eps);\n+  ndt.setStepSize(step_size);\n+  ndt.setResolution(ndt_res);\n+  ndt.setMaximumIterations(iter);\n+  ndt.setInputSource(filtered_scan_ptr);\n+\n+  if (isMapUpdate == true)\n+  {\n+    ndt.setInputTarget(map_ptr);\n+    isMapUpdate = false;\n+  }\n+\n+  guess_pose.x = previous_pose.x + offset_x;\n+  guess_pose.y = previous_pose.y + offset_y;\n+  guess_pose.z = previous_pose.z + offset_z;\n+  guess_pose.roll = previous_pose.roll;\n+  guess_pose.pitch = previous_pose.pitch;\n+  guess_pose.yaw = previous_pose.yaw + offset_yaw;\n+\n+  Eigen::AngleAxisf init_rotation_x(guess_pose.roll, Eigen::Vector3f::UnitX());\n+  Eigen::AngleAxisf init_rotation_y(guess_pose.pitch, Eigen::Vector3f::UnitY());\n+  Eigen::AngleAxisf init_rotation_z(guess_pose.yaw, Eigen::Vector3f::UnitZ());\n+\n+  Eigen::Translation3f init_translation(guess_pose.x, guess_pose.y, guess_pose.z);\n+\n+  Eigen::Matrix4f init_guess =\n+      (init_translation * init_rotation_z * init_rotation_y * init_rotation_x).matrix() * tf_btol;\n+\n+  t3_end = ros::Time::now();\n+  d3 = t3_end - t3_start;\n+\n+  t4_start = ros::Time::now();\n+\n+  pcl::PointCloud<pcl::PointXYZI>::Ptr output_cloud(new pcl::PointCloud<pcl::PointXYZI>);\n #ifdef USE_FAST_PCL\n-    if(_use_openmp == true){\n-    \tndt.omp_align(*output_cloud, init_guess);\n-    \tfitness_score = ndt.omp_getFitnessScore();\n-    }else{\n+  if (_use_openmp == true)\n+  {\n+    ndt.omp_align(*output_cloud, init_guess);\n+    fitness_score = ndt.omp_getFitnessScore();\n+  }\n+  else\n+  {\n #endif\n-    \tndt.align(*output_cloud, init_guess);\n-    \tfitness_score = ndt.getFitnessScore();\n+    ndt.align(*output_cloud, init_guess);\n+    fitness_score = ndt.getFitnessScore();\n #ifdef USE_FAST_PCL\n-    }\n+  }\n #endif\n-    \n-    t_localizer = ndt.getFinalTransformation();\n-    t_base_link = t_localizer * tf_ltob;\n-\n-    pcl::transformPointCloud(*scan_ptr, *transformed_scan_ptr, t_localizer);\n-\n-    tf::Matrix3x3 mat_l, mat_b;\n-\n-    mat_l.setValue(static_cast<double>(t_localizer(0, 0)), static_cast<double>(t_localizer(0, 1)), static_cast<double>(t_localizer(0, 2)),\n-\t\t  static_cast<double>(t_localizer(1, 0)), static_cast<double>(t_localizer(1, 1)), static_cast<double>(t_localizer(1, 2)),\n-\t\t  static_cast<double>(t_localizer(2, 0)), static_cast<double>(t_localizer(2, 1)), static_cast<double>(t_localizer(2, 2)));\n-    \n-    \n-    mat_b.setValue(static_cast<double>(t_base_link(0, 0)), static_cast<double>(t_base_link(0, 1)), static_cast<double>(t_base_link(0, 2)),\n-\t\t  static_cast<double>(t_base_link(1, 0)), static_cast<double>(t_base_link(1, 1)), static_cast<double>(t_base_link(1, 2)),\n-\t\t  static_cast<double>(t_base_link(2, 0)), static_cast<double>(t_base_link(2, 1)), static_cast<double>(t_base_link(2, 2)));\n-    \n-    // Update localizer_pose.\n-    localizer_pose.x = t_localizer(0, 3);\n-    localizer_pose.y = t_localizer(1, 3);\n-    localizer_pose.z = t_localizer(2, 3);\n-    mat_l.getRPY(localizer_pose.roll, localizer_pose.pitch, localizer_pose.yaw, 1);\n-    \n-    // Update ndt_pose.\n-    ndt_pose.x = t_base_link(0, 3);\n-    ndt_pose.y = t_base_link(1, 3);\n-    ndt_pose.z = t_base_link(2, 3);\n-    mat_b.getRPY(ndt_pose.roll, ndt_pose.pitch, ndt_pose.yaw, 1);\n-    \n-    current_pose.x = ndt_pose.x;\n-    current_pose.y = ndt_pose.y;\n-    current_pose.z = ndt_pose.z;\n-    current_pose.roll = ndt_pose.roll;\n-    current_pose.pitch = ndt_pose.pitch;\n-    current_pose.yaw = ndt_pose.yaw;\n-\n-    transform.setOrigin(tf::Vector3(current_pose.x, current_pose.y, current_pose.z));\n-    q.setRPY(current_pose.roll, current_pose.pitch, current_pose.yaw);\n-    transform.setRotation(q);\n-    \n-    br.sendTransform(tf::StampedTransform(transform, scan_time, \"map\", \"base_link\"));\n-    \n-    // Calculate the offset (curren_pos - previous_pos)\n-    offset_x = current_pose.x - previous_pose.x;\n-    offset_y = current_pose.y - previous_pose.y;\n-    offset_z = current_pose.z - previous_pose.z;\n-    offset_yaw = current_pose.yaw - previous_pose.yaw;\n-    \n-    // Update position and posture. current_pos -> previous_pos\n-    previous_pose.x = current_pose.x;\n-    previous_pose.y = current_pose.y;\n-    previous_pose.z = current_pose.z;\n-    previous_pose.roll = current_pose.roll;\n-    previous_pose.pitch = current_pose.pitch;\n-    previous_pose.yaw = current_pose.yaw;\n-    \n-    // Calculate the shift between added_pos and current_pos\n-    double shift = sqrt(pow(current_pose.x-added_pose.x, 2.0) + pow(current_pose.y-added_pose.y, 2.0));\n-    if(shift >= SHIFT){\n-      map += *transformed_scan_ptr;\n-      added_pose.x = current_pose.x;\n-      added_pose.y = current_pose.y;\n-      added_pose.z = current_pose.z;\n-      added_pose.roll = current_pose.roll;\n-      added_pose.pitch = current_pose.pitch;\n-      added_pose.yaw = current_pose.yaw;\n-      isMapUpdate = true;\n-    }\n-    \n-    sensor_msgs::PointCloud2::Ptr map_msg_ptr(new sensor_msgs::PointCloud2);\n-    pcl::toROSMsg(*map_ptr, *map_msg_ptr);\n-    ndt_map_pub.publish(*map_msg_ptr);\n-    \n-    q.setRPY(current_pose.roll, current_pose.pitch, current_pose.yaw);\n-    current_pose_msg.header.frame_id = \"map\";\n-    current_pose_msg.header.stamp = scan_time;\n-    current_pose_msg.pose.position.x = current_pose.x;\n-    current_pose_msg.pose.position.y = current_pose.y;\n-    current_pose_msg.pose.position.z = current_pose.z;\n-    current_pose_msg.pose.orientation.x = q.x();\n-    current_pose_msg.pose.orientation.y = q.y();\n-    current_pose_msg.pose.orientation.z = q.z();\n-    current_pose_msg.pose.orientation.w = q.w();\n-    \n-    current_pose_pub.publish(current_pose_msg);\n-    \n-    std::cout << \"-----------------------------------------------------------------\" << std::endl;\n-    std::cout << \"Sequence number: \" << input->header.seq << std::endl;\n-    std::cout << \"Number of scan points: \" << scan_ptr->size() << \" points.\" << std::endl;\n-    std::cout << \"Number of filtered scan points: \" << filtered_scan_ptr->size() << \" points.\" << std::endl;\n-    std::cout << \"transformed_scan_ptr: \" << transformed_scan_ptr->points.size() << \" points.\" << std::endl;\n-    std::cout << \"map: \" << map.points.size() << \" points.\" << std::endl;\n-    std::cout << \"NDT has converged: \" << ndt.hasConverged() << std::endl;\n-    std::cout << \"Fitness score: \" << fitness_score << std::endl;\n-    std::cout << \"Number of iteration: \" << ndt.getFinalNumIteration() << std::endl;\n-    std::cout << \"(x,y,z,roll,pitch,yaw):\" << std::endl;\n-    std::cout << \"(\" << current_pose.x << \", \" << current_pose.y << \", \" << current_pose.z << \", \" << current_pose.roll << \", \" << current_pose.pitch << \", \" << current_pose.yaw << \")\" << std::endl;\n-    std::cout << \"Transformation Matrix:\" << std::endl;\n-    std::cout << t_localizer << std::endl;\n-    std::cout << \"shift: \" << shift << std::endl;\n-    std::cout << \"-----------------------------------------------------------------\" << std::endl;\n-    \n+\n+  t_localizer = ndt.getFinalTransformation();\n+  t_base_link = t_localizer * tf_ltob;\n+\n+  pcl::transformPointCloud(*scan_ptr, *transformed_scan_ptr, t_localizer);\n+\n+  tf::Matrix3x3 mat_l, mat_b;\n+\n+  mat_l.setValue(static_cast<double>(t_localizer(0, 0)), static_cast<double>(t_localizer(0, 1)),\n+                 static_cast<double>(t_localizer(0, 2)), static_cast<double>(t_localizer(1, 0)),\n+                 static_cast<double>(t_localizer(1, 1)), static_cast<double>(t_localizer(1, 2)),\n+                 static_cast<double>(t_localizer(2, 0)), static_cast<double>(t_localizer(2, 1)),\n+                 static_cast<double>(t_localizer(2, 2)));\n+\n+  mat_b.setValue(static_cast<double>(t_base_link(0, 0)), static_cast<double>(t_base_link(0, 1)),\n+                 static_cast<double>(t_base_link(0, 2)), static_cast<double>(t_base_link(1, 0)),\n+                 static_cast<double>(t_base_link(1, 1)), static_cast<double>(t_base_link(1, 2)),\n+                 static_cast<double>(t_base_link(2, 0)), static_cast<double>(t_base_link(2, 1)),\n+                 static_cast<double>(t_base_link(2, 2)));\n+\n+  // Update localizer_pose.\n+  localizer_pose.x = t_localizer(0, 3);\n+  localizer_pose.y = t_localizer(1, 3);\n+  localizer_pose.z = t_localizer(2, 3);\n+  mat_l.getRPY(localizer_pose.roll, localizer_pose.pitch, localizer_pose.yaw, 1);\n+\n+  // Update ndt_pose.\n+  ndt_pose.x = t_base_link(0, 3);\n+  ndt_pose.y = t_base_link(1, 3);\n+  ndt_pose.z = t_base_link(2, 3);\n+  mat_b.getRPY(ndt_pose.roll, ndt_pose.pitch, ndt_pose.yaw, 1);\n+\n+  current_pose.x = ndt_pose.x;\n+  current_pose.y = ndt_pose.y;\n+  current_pose.z = ndt_pose.z;\n+  current_pose.roll = ndt_pose.roll;\n+  current_pose.pitch = ndt_pose.pitch;\n+  current_pose.yaw = ndt_pose.yaw;\n+\n+  transform.setOrigin(tf::Vector3(current_pose.x, current_pose.y, current_pose.z));\n+  q.setRPY(current_pose.roll, current_pose.pitch, current_pose.yaw);\n+  transform.setRotation(q);\n+\n+  br.sendTransform(tf::StampedTransform(transform, scan_time, \"map\", \"base_link\"));\n+\n+  // Calculate the offset (curren_pos - previous_pos)\n+  offset_x = current_pose.x - previous_pose.x;\n+  offset_y = current_pose.y - previous_pose.y;\n+  offset_z = current_pose.z - previous_pose.z;\n+  offset_yaw = current_pose.yaw - previous_pose.yaw;\n+\n+  // Update position and posture. current_pos -> previous_pos\n+  previous_pose.x = current_pose.x;\n+  previous_pose.y = current_pose.y;\n+  previous_pose.z = current_pose.z;\n+  previous_pose.roll = current_pose.roll;\n+  previous_pose.pitch = current_pose.pitch;\n+  previous_pose.yaw = current_pose.yaw;\n+\n+  // Calculate the shift between added_pos and current_pos\n+  double shift = sqrt(pow(current_pose.x - added_pose.x, 2.0) + pow(current_pose.y - added_pose.y, 2.0));\n+  if (shift >= SHIFT)\n+  {\n+    map += *transformed_scan_ptr;\n+    added_pose.x = current_pose.x;\n+    added_pose.y = current_pose.y;\n+    added_pose.z = current_pose.z;\n+    added_pose.roll = current_pose.roll;\n+    added_pose.pitch = current_pose.pitch;\n+    added_pose.yaw = current_pose.yaw;\n+    isMapUpdate = true;\n+  }\n+\n+  sensor_msgs::PointCloud2::Ptr map_msg_ptr(new sensor_msgs::PointCloud2);\n+  pcl::toROSMsg(*map_ptr, *map_msg_ptr);\n+  ndt_map_pub.publish(*map_msg_ptr);\n+\n+  q.setRPY(current_pose.roll, current_pose.pitch, current_pose.yaw);\n+  current_pose_msg.header.frame_id = \"map\";\n+  current_pose_msg.header.stamp = scan_time;\n+  current_pose_msg.pose.position.x = current_pose.x;\n+  current_pose_msg.pose.position.y = current_pose.y;\n+  current_pose_msg.pose.position.z = current_pose.z;\n+  current_pose_msg.pose.orientation.x = q.x();\n+  current_pose_msg.pose.orientation.y = q.y();\n+  current_pose_msg.pose.orientation.z = q.z();\n+  current_pose_msg.pose.orientation.w = q.w();\n+\n+  current_pose_pub.publish(current_pose_msg);\n+\n+  std::cout << \"-----------------------------------------------------------------\" << std::endl;\n+  std::cout << \"Sequence number: \" << input->header.seq << std::endl;\n+  std::cout << \"Number of scan points: \" << scan_ptr->size() << \" points.\" << std::endl;\n+  std::cout << \"Number of filtered scan points: \" << filtered_scan_ptr->size() << \" points.\" << std::endl;\n+  std::cout << \"transformed_scan_ptr: \" << transformed_scan_ptr->points.size() << \" points.\" << std::endl;\n+  std::cout << \"map: \" << map.points.size() << \" points.\" << std::endl;\n+  std::cout << \"NDT has converged: \" << ndt.hasConverged() << std::endl;\n+  std::cout << \"Fitness score: \" << fitness_score << std::endl;\n+  std::cout << \"Number of iteration: \" << ndt.getFinalNumIteration() << std::endl;\n+  std::cout << \"(x,y,z,roll,pitch,yaw):\" << std::endl;\n+  std::cout << \"(\" << current_pose.x << \", \" << current_pose.y << \", \" << current_pose.z << \", \" << current_pose.roll\n+            << \", \" << current_pose.pitch << \", \" << current_pose.yaw << \")\" << std::endl;\n+  std::cout << \"Transformation Matrix:\" << std::endl;\n+  std::cout << t_localizer << std::endl;\n+  std::cout << \"shift: \" << shift << std::endl;\n+  std::cout << \"-----------------------------------------------------------------\" << std::endl;\n }\n \n-int main(int argc, char **argv)\n+int main(int argc, char** argv)\n {\n-    previous_pose.x = 0.0;\n-    previous_pose.y = 0.0;\n-    previous_pose.z = 0.0;\n-    previous_pose.roll = 0.0;\n-    previous_pose.pitch = 0.0;\n-    previous_pose.yaw = 0.0;\n-\n-    ndt_pose.x = 0.0;\n-    ndt_pose.y = 0.0;\n-    ndt_pose.z = 0.0;\n-    ndt_pose.roll = 0.0;\n-    ndt_pose.pitch = 0.0;\n-    ndt_pose.yaw = 0.0;\n-\n-    current_pose.x = 0.0;\n-    current_pose.y = 0.0;\n-    current_pose.z = 0.0;\n-    current_pose.roll = 0.0;\n-    current_pose.pitch = 0.0;\n-    current_pose.yaw = 0.0;\n-\n-    guess_pose.x = 0.0;\n-    guess_pose.y = 0.0;\n-    guess_pose.z = 0.0;\n-    guess_pose.roll = 0.0;\n-    guess_pose.pitch = 0.0;\n-    guess_pose.yaw = 0.0;\n-\n-    added_pose.x = 0.0;\n-    added_pose.y = 0.0;\n-    added_pose.z = 0.0;\n-    added_pose.roll = 0.0;\n-    added_pose.pitch = 0.0;\n-    added_pose.yaw = 0.0;\n-\n-    offset_x = 0.0;\n-    offset_y = 0.0;\n-    offset_z = 0.0;\n-    offset_yaw = 0.0;\n-\n-    ros::init(argc, argv, \"ndt_mapping\");\n-\n-    ros::NodeHandle nh;\n-    ros::NodeHandle private_nh(\"~\");\n-\n-    // setting parameters\n-    private_nh.getParam(\"range\", RANGE);\n-    std::cout << \"RANGE: \" << RANGE << std::endl;\n-    private_nh.getParam(\"shift\", SHIFT);\n-    std::cout << \"SHIFT: \" << SHIFT << std::endl;\n-    private_nh.getParam(\"use_openmp\", _use_openmp);\n-    std::cout << \"use_openmp: \" << _use_openmp << std::endl;\n-\n-    if (nh.getParam(\"tf_x\", _tf_x) == false)\n-    {\n-      std::cout << \"tf_x is not set.\" << std::endl;\n-      return 1;\n-    }\n-    if (nh.getParam(\"tf_y\", _tf_y) == false)\n-    {\n-      std::cout << \"tf_y is not set.\" << std::endl;\n-      return 1;\n-    }\n-    if (nh.getParam(\"tf_z\", _tf_z) == false)\n-    {\n-      std::cout << \"tf_z is not set.\" << std::endl;\n-      return 1;\n-    }\n-    if (nh.getParam(\"tf_roll\", _tf_roll) == false)\n-    {\n-      std::cout << \"tf_roll is not set.\" << std::endl;\n-      return 1;\n-    }\n-    if (nh.getParam(\"tf_pitch\", _tf_pitch) == false)\n-    {\n-      std::cout << \"tf_pitch is not set.\" << std::endl;\n-      return 1;\n-    }\n-    if (nh.getParam(\"tf_yaw\", _tf_yaw) == false)\n-    {\n-      std::cout << \"tf_yaw is not set.\" << std::endl;\n-      return 1;\n-    }\n+  previous_pose.x = 0.0;\n+  previous_pose.y = 0.0;\n+  previous_pose.z = 0.0;\n+  previous_pose.roll = 0.0;\n+  previous_pose.pitch = 0.0;\n+  previous_pose.yaw = 0.0;\n+\n+  ndt_pose.x = 0.0;\n+  ndt_pose.y = 0.0;\n+  ndt_pose.z = 0.0;\n+  ndt_pose.roll = 0.0;\n+  ndt_pose.pitch = 0.0;\n+  ndt_pose.yaw = 0.0;\n+\n+  current_pose.x = 0.0;\n+  current_pose.y = 0.0;\n+  current_pose.z = 0.0;\n+  current_pose.roll = 0.0;\n+  current_pose.pitch = 0.0;\n+  current_pose.yaw = 0.0;\n+\n+  guess_pose.x = 0.0;\n+  guess_pose.y = 0.0;\n+  guess_pose.z = 0.0;\n+  guess_pose.roll = 0.0;\n+  guess_pose.pitch = 0.0;\n+  guess_pose.yaw = 0.0;\n+\n+  added_pose.x = 0.0;\n+  added_pose.y = 0.0;\n+  added_pose.z = 0.0;\n+  added_pose.roll = 0.0;\n+  added_pose.pitch = 0.0;\n+  added_pose.yaw = 0.0;\n+\n+  offset_x = 0.0;\n+  offset_y = 0.0;\n+  offset_z = 0.0;\n+  offset_yaw = 0.0;\n+\n+  ros::init(argc, argv, \"ndt_mapping\");\n+\n+  ros::NodeHandle nh;\n+  ros::NodeHandle private_nh(\"~\");\n+\n+  // setting parameters\n+  private_nh.getParam(\"range\", RANGE);\n+  std::cout << \"RANGE: \" << RANGE << std::endl;\n+  private_nh.getParam(\"shift\", SHIFT);\n+  std::cout << \"SHIFT: \" << SHIFT << std::endl;\n+  private_nh.getParam(\"use_openmp\", _use_openmp);\n+  std::cout << \"use_openmp: \" << _use_openmp << std::endl;\n+\n+  if (nh.getParam(\"tf_x\", _tf_x) == false)\n+  {\n+    std::cout << \"tf_x is not set.\" << std::endl;\n+    return 1;\n+  }\n+  if (nh.getParam(\"tf_y\", _tf_y) == false)\n+  {\n+    std::cout << \"tf_y is not set.\" << std::endl;\n+    return 1;\n+  }\n+  if (nh.getParam(\"tf_z\", _tf_z) == false)\n+  {\n+    std::cout << \"tf_z is not set.\" << std::endl;\n+    return 1;\n+  }\n+  if (nh.getParam(\"tf_roll\", _tf_roll) == false)\n+  {\n+    std::cout << \"tf_roll is not set.\" << std::endl;\n+    return 1;\n+  }\n+  if (nh.getParam(\"tf_pitch\", _tf_pitch) == false)\n+  {\n+    std::cout << \"tf_pitch is not set.\" << std::endl;\n+    return 1;\n+  }\n+  if (nh.getParam(\"tf_yaw\", _tf_yaw) == false)\n+  {\n+    std::cout << \"tf_yaw is not set.\" << std::endl;\n+    return 1;\n+  }\n \n-    std::cout << \"(tf_x,tf_y,tf_z,tf_roll,tf_pitch,tf_yaw): (\" << _tf_x << \", \" << _tf_y << \", \" << _tf_z << \", \"\n-              << _tf_roll << \", \" << _tf_pitch << \", \" << _tf_yaw << \")\" << std::endl;\n+  std::cout << \"(tf_x,tf_y,tf_z,tf_roll,tf_pitch,tf_yaw): (\" << _tf_x << \", \" << _tf_y << \", \" << _tf_z << \", \"\n+            << _tf_roll << \", \" << _tf_pitch << \", \" << _tf_yaw << \")\" << std::endl;\n \n-    Eigen::Translation3f tl_btol(_tf_x, _tf_y, _tf_z);  // tl: translation\n-    Eigen::AngleAxisf rot_x_btol(_tf_roll, Eigen::Vector3f::UnitX());  // rot: rotation\n-    Eigen::AngleAxisf rot_y_btol(_tf_pitch, Eigen::Vector3f::UnitY());\n-    Eigen::AngleAxisf rot_z_btol(_tf_yaw, Eigen::Vector3f::UnitZ());\n-    tf_btol = (tl_btol * rot_z_btol * rot_y_btol * rot_x_btol).matrix();\n+  Eigen::Translation3f tl_btol(_tf_x, _tf_y, _tf_z);                 // tl: translation\n+  Eigen::AngleAxisf rot_x_btol(_tf_roll, Eigen::Vector3f::UnitX());  // rot: rotation\n+  Eigen::AngleAxisf rot_y_btol(_tf_pitch, Eigen::Vector3f::UnitY());\n+  Eigen::AngleAxisf rot_z_btol(_tf_yaw, Eigen::Vector3f::UnitZ());\n+  tf_btol = (tl_btol * rot_z_btol * rot_y_btol * rot_x_btol).matrix();\n \n-    Eigen::Translation3f tl_ltob((-1.0) * _tf_x, (-1.0) * _tf_y, (-1.0) * _tf_z);  // tl: translation\n-    Eigen::AngleAxisf rot_x_ltob((-1.0) * _tf_roll, Eigen::Vector3f::UnitX());  // rot: rotation\n-    Eigen::AngleAxisf rot_y_ltob((-1.0) * _tf_pitch, Eigen::Vector3f::UnitY());\n-    Eigen::AngleAxisf rot_z_ltob((-1.0) * _tf_yaw, Eigen::Vector3f::UnitZ());\n-    tf_ltob = (tl_ltob * rot_z_ltob * rot_y_ltob * rot_x_ltob).matrix();\n+  Eigen::Translation3f tl_ltob((-1.0) * _tf_x, (-1.0) * _tf_y, (-1.0) * _tf_z);  // tl: translation\n+  Eigen::AngleAxisf rot_x_ltob((-1.0) * _tf_roll, Eigen::Vector3f::UnitX());     // rot: rotation\n+  Eigen::AngleAxisf rot_y_ltob((-1.0) * _tf_pitch, Eigen::Vector3f::UnitY());\n+  Eigen::AngleAxisf rot_z_ltob((-1.0) * _tf_yaw, Eigen::Vector3f::UnitZ());\n+  tf_ltob = (tl_ltob * rot_z_ltob * rot_y_ltob * rot_x_ltob).matrix();\n \n-    map.header.frame_id = \"map\";\n+  map.header.frame_id = \"map\";\n \n-    ndt_map_pub = nh.advertise<sensor_msgs::PointCloud2>(\"/ndt_map\", 1000);\n-    current_pose_pub = nh.advertise<geometry_msgs::PoseStamped>(\"/current_pose\", 1000);\n+  ndt_map_pub = nh.advertise<sensor_msgs::PointCloud2>(\"/ndt_map\", 1000);\n+  current_pose_pub = nh.advertise<geometry_msgs::PoseStamped>(\"/current_pose\", 1000);\n \n-    ros::Subscriber param_sub = nh.subscribe(\"config/ndt_mapping\", 10, param_callback);\n-    ros::Subscriber output_sub = nh.subscribe(\"config/ndt_mapping_output\", 10, output_callback);\n-    ros::Subscriber points_sub = nh.subscribe(\"points_raw\", 100000, points_callback);\n+  ros::Subscriber param_sub = nh.subscribe(\"config/ndt_mapping\", 10, param_callback);\n+  ros::Subscriber output_sub = nh.subscribe(\"config/ndt_mapping_output\", 10, output_callback);\n+  ros::Subscriber points_sub = nh.subscribe(\"points_raw\", 100000, points_callback);\n \n-    ros::spin();\n+  ros::spin();\n \n-    return 0;\n+  return 0;\n }"
        }
    ],
    "autowarefoundation/autoware/597": [
        {
            "sha": "7546270102321b93da5264bbc0e8d735ea9827e9",
            "filename": "ros/src/computing/perception/detection/packages/lidar_tracker/nodes/obj_fusion/obj_fusion.cpp",
            "status": "modified",
            "additions": 197,
            "deletions": 184,
            "changes": 381,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/b66b165b66fa988f3dd729621785376ba0c44912/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Flidar_tracker%2Fnodes%2Fobj_fusion%2Fobj_fusion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/b66b165b66fa988f3dd729621785376ba0c44912/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Flidar_tracker%2Fnodes%2Fobj_fusion%2Fobj_fusion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Flidar_tracker%2Fnodes%2Fobj_fusion%2Fobj_fusion.cpp?ref=b66b165b66fa988f3dd729621785376ba0c44912",
            "patch": "@@ -1,16 +1,16 @@\n-#include <ros/ros.h>\n #include <cv_tracker/obj_label.h>\n+#include <float.h>\n+#include <geometry_msgs/Point.h>\n #include <jsk_recognition_msgs/BoundingBox.h>\n #include <jsk_recognition_msgs/BoundingBoxArray.h>\n #include <lidar_tracker/CloudCluster.h>\n #include <lidar_tracker/CloudClusterArray.h>\n-#include <geometry_msgs/Point.h>\n #include <math.h>\n-#include <float.h>\n-#include <tf/tf.h>\n-#include <tf/transform_listener.h>\n #include <mutex>\n+#include <ros/ros.h>\n #include <std_msgs/Time.h>\n+#include <tf/tf.h>\n+#include <tf/transform_listener.h>\n \n /* flag for comfirming whether multiple topics are received */\n static bool isReady_obj_label;\n@@ -34,8 +34,8 @@ static double threshold_min_dist;\n static tf::StampedTransform transform;\n \n struct obj_label_t {\n-    std::vector<geometry_msgs::Point> reprojected_positions;\n-    std::vector<int> obj_id;\n+  std::vector<geometry_msgs::Point> reprojected_positions;\n+  std::vector<int> obj_id;\n };\n \n obj_label_t obj_label;\n@@ -49,213 +49,226 @@ std::mutex mtx_centroids;\n #define UNLOCK(mtx) (mtx).unlock()\n \n static double euclid_distance(const geometry_msgs::Point pos1,\n-                              const geometry_msgs::Point pos2)\n-{\n-    return sqrt(pow(pos1.x - pos2.x, 2) +\n-                pow(pos1.y - pos2.y, 2) +\n-                pow(pos1.z - pos2.z, 2));\n+                              const geometry_msgs::Point pos2) {\n+  return sqrt(pow(pos1.x - pos2.x, 2) + pow(pos1.y - pos2.y, 2) +\n+              pow(pos1.z - pos2.z, 2));\n \n } /* static double distance() */\n \n-\n /* fusion reprojected position and pointcloud centroids */\n-static void fusion_objects(void)\n-{\n-    obj_label_t obj_label_current;\n-    std::vector<lidar_tracker::CloudCluster> v_cloud_cluster_current;\n-    std_msgs::Header header = sensor_header;\n-    std::vector<geometry_msgs::Point> centroids_current;\n-\n-    LOCK(mtx_reprojected_positions);\n-    copy(obj_label.reprojected_positions.begin(), obj_label.reprojected_positions.end(), back_inserter(obj_label_current.reprojected_positions));\n-    copy(obj_label.obj_id.begin(), obj_label.obj_id.end(), back_inserter(obj_label_current.obj_id));\n-    UNLOCK(mtx_reprojected_positions);\n-\n-    LOCK(mtx_centroids);\n-    copy(centroids.begin(), centroids.end(), back_inserter(centroids_current));\n-    copy(v_cloud_cluster.begin(), v_cloud_cluster.end(), back_inserter(v_cloud_cluster_current));\n-    UNLOCK(mtx_centroids);\n-\n-    if (centroids_current.empty() || obj_label_current.reprojected_positions.empty() ||  obj_label_current.obj_id.empty()) {\n-        jsk_recognition_msgs::BoundingBoxArray pub_msg;\n-        pub_msg.header = header;\n-        std_msgs::Time time;\n-        obj_pose_pub.publish(pub_msg);\n-\n-        time.data = obj_pose_timestamp;\n-        obj_pose_timestamp_pub.publish(time);\n-        return;\n-    }\n-\n-    std::vector<int> obj_indices;\n-\n-    for(unsigned int i = 0; i < obj_label_current.obj_id.size(); ++i) {\n-        unsigned int min_idx      = 0;\n-        double       min_distance = DBL_MAX;\n-\n-        /* calculate each euclid distance between reprojected position and centroids */\n-        for (unsigned int j=0; j<centroids_current.size(); j++) {\n-            double distance = euclid_distance(obj_label_current.reprojected_positions.at(i), centroids_current.at(j));\n-\n-            /* Nearest centroid correspond to this reprojected object */\n-            if (distance < min_distance)\n-            {\n-                min_distance = distance;\n-                min_idx      = j;\n-            }\n-        }\n-        if (min_distance < threshold_min_dist) {\n-            obj_indices.push_back(min_idx);\n-        } else {\n-            obj_indices.push_back(-1);\n-        }\n-    }\n-\n-    /* Publish marker with centroids coordinates */\n+static void fusion_objects(void) {\n+  obj_label_t obj_label_current;\n+  std::vector<lidar_tracker::CloudCluster> v_cloud_cluster_current;\n+  std_msgs::Header header = sensor_header;\n+  std::vector<geometry_msgs::Point> centroids_current;\n+\n+  LOCK(mtx_reprojected_positions);\n+  copy(obj_label.reprojected_positions.begin(),\n+       obj_label.reprojected_positions.end(),\n+       back_inserter(obj_label_current.reprojected_positions));\n+  copy(obj_label.obj_id.begin(), obj_label.obj_id.end(),\n+       back_inserter(obj_label_current.obj_id));\n+  UNLOCK(mtx_reprojected_positions);\n+\n+  LOCK(mtx_centroids);\n+  copy(centroids.begin(), centroids.end(), back_inserter(centroids_current));\n+  copy(v_cloud_cluster.begin(), v_cloud_cluster.end(),\n+       back_inserter(v_cloud_cluster_current));\n+  UNLOCK(mtx_centroids);\n+\n+  if (centroids_current.empty() ||\n+      obj_label_current.reprojected_positions.empty() ||\n+      obj_label_current.obj_id.empty()) {\n     jsk_recognition_msgs::BoundingBoxArray pub_msg;\n     pub_msg.header = header;\n+    std_msgs::Time time;\n+    obj_pose_pub.publish(pub_msg);\n     lidar_tracker::CloudClusterArray cloud_clusters_msg;\n     cloud_clusters_msg.header = header;\n-\n-    for(unsigned int i = 0; i < obj_label_current.obj_id.size(); ++i) {\n-        jsk_recognition_msgs::BoundingBox bounding_box;\n-        if (obj_indices.at(i) == -1)\n-            continue;\n-\n-        if(object_type == \"car\")\n-          v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box.label = 0;\n-        else if(object_type == \"person\")\n-          v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box.label = 1;\n-        else\n-          v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box.label = 2;\n-\n-        v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box.value = obj_label_current.obj_id.at(i);\n-        bounding_box = v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box;\n-        pub_msg.boxes.push_back(bounding_box);\n-        cloud_clusters_msg.clusters.push_back(v_cloud_cluster_current.at(obj_indices.at(i)));\n-    }\n-\n-    obj_pose_pub.publish(pub_msg);\n     cluster_class_pub.publish(cloud_clusters_msg);\n-    std_msgs::Time time;\n+\n     time.data = obj_pose_timestamp;\n     obj_pose_timestamp_pub.publish(time);\n+    return;\n+  }\n+\n+  std::vector<int> obj_indices;\n+\n+  for (unsigned int i = 0; i < obj_label_current.obj_id.size(); ++i) {\n+    unsigned int min_idx = 0;\n+    double min_distance = DBL_MAX;\n+\n+    /* calculate each euclid distance between reprojected position and centroids\n+     */\n+    for (unsigned int j = 0; j < centroids_current.size(); j++) {\n+      double distance =\n+          euclid_distance(obj_label_current.reprojected_positions.at(i),\n+                          centroids_current.at(j));\n+\n+      /* Nearest centroid correspond to this reprojected object */\n+      if (distance < min_distance) {\n+        min_distance = distance;\n+        min_idx = j;\n+      }\n+    }\n+    if (min_distance < threshold_min_dist) {\n+      obj_indices.push_back(min_idx);\n+    } else {\n+      obj_indices.push_back(-1);\n+    }\n+  }\n+\n+  /* Publish marker with centroids coordinates */\n+  jsk_recognition_msgs::BoundingBoxArray pub_msg;\n+  pub_msg.header = header;\n+  lidar_tracker::CloudClusterArray cloud_clusters_msg;\n+  cloud_clusters_msg.header = header;\n+\n+  for (unsigned int i = 0; i < obj_label_current.obj_id.size(); ++i) {\n+    jsk_recognition_msgs::BoundingBox bounding_box;\n+    if (obj_indices.at(i) == -1)\n+      continue;\n+\n+    v_cloud_cluster_current.at(obj_indices.at(i)).label = object_type;\n+\n+    if (object_type == \"car\") {\n+      v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box.label = 0;\n+    } else if (object_type == \"person\") {\n+      v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box.label = 1;\n+    } else {\n+      v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box.label = 2;\n+      v_cloud_cluster_current.at(obj_indices.at(i)).label = \"unknown\";\n+    }\n+    v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box.value =\n+        obj_label_current.obj_id.at(i);\n+    bounding_box = v_cloud_cluster_current.at(obj_indices.at(i)).bounding_box;\n+    pub_msg.boxes.push_back(bounding_box);\n+    cloud_clusters_msg.clusters.push_back(\n+        v_cloud_cluster_current.at(obj_indices.at(i)));\n+  }\n+\n+  obj_pose_pub.publish(pub_msg);\n+  cluster_class_pub.publish(cloud_clusters_msg);\n+  std_msgs::Time time;\n+  time.data = obj_pose_timestamp;\n+  obj_pose_timestamp_pub.publish(time);\n }\n \n+void obj_label_cb(const cv_tracker::obj_label &obj_label_msg) {\n+  object_type = obj_label_msg.type;\n+  obj_pose_timestamp = obj_label_msg.header.stamp;\n \n-void obj_label_cb(const cv_tracker::obj_label& obj_label_msg)\n-{\n-    object_type = obj_label_msg.type;\n-    obj_pose_timestamp = obj_label_msg.header.stamp;\n+  LOCK(mtx_reprojected_positions);\n+  obj_label.reprojected_positions.clear();\n+  obj_label.obj_id.clear();\n+  UNLOCK(mtx_reprojected_positions);\n \n-    LOCK(mtx_reprojected_positions);\n-    obj_label.reprojected_positions.clear();\n-    obj_label.obj_id.clear();\n-    UNLOCK(mtx_reprojected_positions);\n+  LOCK(mtx_reprojected_positions);\n+  for (unsigned int i = 0; i < obj_label_msg.obj_id.size(); ++i) {\n+    obj_label.reprojected_positions.push_back(\n+        obj_label_msg.reprojected_pos.at(i));\n+    obj_label.obj_id.push_back(obj_label_msg.obj_id.at(i));\n+  }\n+  UNLOCK(mtx_reprojected_positions);\n \n-    LOCK(mtx_reprojected_positions);\n-    for (unsigned int i = 0; i < obj_label_msg.obj_id.size(); ++i) {\n-        obj_label.reprojected_positions.push_back(obj_label_msg.reprojected_pos.at(i));\n-        obj_label.obj_id.push_back(obj_label_msg.obj_id.at(i));\n-    }\n-    UNLOCK(mtx_reprojected_positions);\n+  /* confirm obj_label is subscribed */\n+  LOCK(mtx_flag_obj_label);\n+  isReady_obj_label = true;\n+  UNLOCK(mtx_flag_obj_label);\n+\n+  /* Publish fusion result if both of topics are ready */\n+  if (isReady_obj_label && isReady_cluster_centroids) {\n+    fusion_objects();\n \n-    /* confirm obj_label is subscribed */\n     LOCK(mtx_flag_obj_label);\n-    isReady_obj_label = true;\n+    isReady_obj_label = false;\n     UNLOCK(mtx_flag_obj_label);\n \n-    /* Publish fusion result if both of topics are ready */\n-   if (isReady_obj_label && isReady_cluster_centroids)\n-        {\n-            fusion_objects();\n-\n-            LOCK(mtx_flag_obj_label);\n-            isReady_obj_label = false;\n-            UNLOCK(mtx_flag_obj_label);\n-\n-            LOCK(mtx_flag_cluster_centroids);\n-            isReady_cluster_centroids = false;\n-            UNLOCK(mtx_flag_cluster_centroids);\n-        }\n-\n-} /* void obj_label_cb() */\n-\n-\n-void cluster_centroids_cb(const lidar_tracker::CloudClusterArray::Ptr& in_cloud_cluster_array_ptr)\n-{\n-    LOCK(mtx_centroids);\n-    centroids.clear();\n-    v_cloud_cluster.clear();\n-    UNLOCK(mtx_centroids);\n-\n-    LOCK(mtx_centroids);\n-    static tf::TransformListener trf_listener;\n-    try {\n-        trf_listener.lookupTransform(\"map\", \"velodyne\", ros::Time(0), transform);\n-        for (int i(0) ; i < (int)in_cloud_cluster_array_ptr->clusters.size(); ++i) {\n-            lidar_tracker::CloudCluster cloud_cluster = in_cloud_cluster_array_ptr->clusters.at(i);\n-            /* convert centroids coodinate from velodyne frame to map frame */\n-            tf::Vector3 pt(cloud_cluster.centroid_point.point.x, cloud_cluster.centroid_point.point.y, cloud_cluster.centroid_point.point.z);\n-            tf::Vector3 converted = transform * pt;\n-            sensor_header = cloud_cluster.header;\n-            v_cloud_cluster.push_back(cloud_cluster);\n-            geometry_msgs::Point point_in_map;\n-            point_in_map.x = converted.x();\n-            point_in_map.y = converted.y();\n-            point_in_map.z = converted.z();\n-\n-            centroids.push_back(point_in_map);\n-        }\n-    }\n-    catch (tf::TransformException ex) {\n-        ROS_INFO(\"%s\", ex.what());\n-        ros::Duration(1.0).sleep();\n-    }\n-    UNLOCK(mtx_centroids);\n-\n     LOCK(mtx_flag_cluster_centroids);\n-    isReady_cluster_centroids = true;\n+    isReady_cluster_centroids = false;\n     UNLOCK(mtx_flag_cluster_centroids);\n+  }\n \n-    /* Publish fusion result if both of topics are ready */\n-    if (isReady_obj_label && isReady_cluster_centroids) {\n-        fusion_objects();\n-\n-        LOCK(mtx_flag_obj_label);\n-        isReady_obj_label = false;\n-        UNLOCK(mtx_flag_obj_label);\n+} /* void obj_label_cb() */\n \n-        LOCK(mtx_flag_cluster_centroids);\n-        isReady_cluster_centroids = false;\n-        UNLOCK(mtx_flag_cluster_centroids);\n+void cluster_centroids_cb(\n+    const lidar_tracker::CloudClusterArray::Ptr &in_cloud_cluster_array_ptr) {\n+  LOCK(mtx_centroids);\n+  centroids.clear();\n+  v_cloud_cluster.clear();\n+  UNLOCK(mtx_centroids);\n+\n+  LOCK(mtx_centroids);\n+  static tf::TransformListener trf_listener;\n+  try {\n+    trf_listener.lookupTransform(\"map\", \"velodyne\", ros::Time(0), transform);\n+    for (int i(0); i < (int)in_cloud_cluster_array_ptr->clusters.size(); ++i) {\n+      lidar_tracker::CloudCluster cloud_cluster =\n+          in_cloud_cluster_array_ptr->clusters.at(i);\n+      /* convert centroids coodinate from velodyne frame to map frame */\n+      tf::Vector3 pt(cloud_cluster.centroid_point.point.x,\n+                     cloud_cluster.centroid_point.point.y,\n+                     cloud_cluster.centroid_point.point.z);\n+      tf::Vector3 converted = transform * pt;\n+      sensor_header = cloud_cluster.header;\n+      v_cloud_cluster.push_back(cloud_cluster);\n+      geometry_msgs::Point point_in_map;\n+      point_in_map.x = converted.x();\n+      point_in_map.y = converted.y();\n+      point_in_map.z = converted.z();\n+\n+      centroids.push_back(point_in_map);\n     }\n+  } catch (tf::TransformException ex) {\n+    ROS_INFO(\"%s\", ex.what());\n+    ros::Duration(1.0).sleep();\n+  }\n+  UNLOCK(mtx_centroids);\n \n-} /* void cluster_centroids_cb() */\n-\n+  LOCK(mtx_flag_cluster_centroids);\n+  isReady_cluster_centroids = true;\n+  UNLOCK(mtx_flag_cluster_centroids);\n \n-int main(int argc, char* argv[])\n-{\n-    /* ROS initialization */\n-    ros::init(argc, argv, \"obj_fusion\");\n+  /* Publish fusion result if both of topics are ready */\n+  if (isReady_obj_label && isReady_cluster_centroids) {\n+    fusion_objects();\n \n-    ros::NodeHandle n;\n-    ros::NodeHandle private_n (\"~\");\n+    LOCK(mtx_flag_obj_label);\n+    isReady_obj_label = false;\n+    UNLOCK(mtx_flag_obj_label);\n \n-    if (private_n.getParam(\"min_dist\", threshold_min_dist))\n-  \t{\n-      threshold_min_dist = 5.0;\n-  \t}\n-    /* Initialize flags */\n-    isReady_obj_label         = false;\n+    LOCK(mtx_flag_cluster_centroids);\n     isReady_cluster_centroids = false;\n+    UNLOCK(mtx_flag_cluster_centroids);\n+  }\n \n-    ros::Subscriber obj_label_sub         = n.subscribe(\"obj_label\", SUBSCRIBE_QUEUE_SIZE, obj_label_cb);\n-    ros::Subscriber cluster_centroids_sub = n.subscribe(\"/cloud_clusters\", SUBSCRIBE_QUEUE_SIZE, cluster_centroids_cb);\n-    obj_pose_pub = n.advertise<jsk_recognition_msgs::BoundingBoxArray>(\"obj_pose\", ADVERTISE_QUEUE_SIZE, ADVERTISE_LATCH);\n-\t  cluster_class_pub = n.advertise<lidar_tracker::CloudClusterArray>(\"/cloud_cluster_class\", ADVERTISE_QUEUE_SIZE);\n-    obj_pose_timestamp_pub = n.advertise<std_msgs::Time>(\"obj_pose_timestamp\", ADVERTISE_QUEUE_SIZE);\n-    ros::spin();\n+} /* void cluster_centroids_cb() */\n \n-    return 0;\n+int main(int argc, char *argv[]) {\n+  /* ROS initialization */\n+  ros::init(argc, argv, \"obj_fusion\");\n+\n+  ros::NodeHandle n;\n+  ros::NodeHandle private_n(\"~\");\n+\n+  if (!private_n.getParam(\"min_dist\", threshold_min_dist)) {\n+    threshold_min_dist = 2.0;\n+  }\n+  /* Initialize flags */\n+  isReady_obj_label = false;\n+  isReady_cluster_centroids = false;\n+\n+  ros::Subscriber obj_label_sub =\n+      n.subscribe(\"obj_label\", SUBSCRIBE_QUEUE_SIZE, obj_label_cb);\n+  ros::Subscriber cluster_centroids_sub = n.subscribe(\n+      \"/cloud_clusters\", SUBSCRIBE_QUEUE_SIZE, cluster_centroids_cb);\n+  obj_pose_pub = n.advertise<jsk_recognition_msgs::BoundingBoxArray>(\n+      \"obj_pose\", ADVERTISE_QUEUE_SIZE, ADVERTISE_LATCH);\n+  cluster_class_pub = n.advertise<lidar_tracker::CloudClusterArray>(\n+      \"/cloud_cluster_class\", ADVERTISE_QUEUE_SIZE);\n+  obj_pose_timestamp_pub =\n+      n.advertise<std_msgs::Time>(\"obj_pose_timestamp\", ADVERTISE_QUEUE_SIZE);\n+  ros::spin();\n+\n+  return 0;\n }"
        }
    ],
    "autowarefoundation/autoware/605": [
        {
            "sha": "97a549688a2e38fbe89c5f8d0632e7605d15157c",
            "filename": "ros/src/computing/planning/motion/packages/astar_planner/nodes/velocity_set/velocity_set_path.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/4df0375f51b16298ab57e870ed67a801ab6d00bd/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fastar_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set_path.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/4df0375f51b16298ab57e870ed67a801ab6d00bd/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fastar_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set_path.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fastar_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set_path.cpp?ref=4df0375f51b16298ab57e870ed67a801ab6d00bd",
            "patch": "@@ -144,7 +144,7 @@ void VelocitySetPath::avoidSuddenDeceleration(double velocity_change_limit, doub\n   double square_vel = (current_vel_ - velocity_change_limit) * (current_vel_ - velocity_change_limit);\n   for (int i = 0;; i++)\n   {\n-    if (!checkWaypoint(i, __FUNCTION__))\n+    if (!checkWaypoint(closest_waypoint + i, __FUNCTION__))\n       return;\n \n     // sqrt(v^2 - 2ax)"
        }
    ],
    "autowarefoundation/autoware/631": [
        {
            "sha": "30dd0d1ca84dbd8f3daaba81210530deefe298b4",
            "filename": "ros/src/util/packages/runtime_manager/scripts/runtime_manager_dialog.py",
            "status": "modified",
            "additions": 7,
            "deletions": 1,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/9ab4fd277bbab5fbeeba7ae2cb86473ca668ab86/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/9ab4fd277bbab5fbeeba7ae2cb86473ca668ab86/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py?ref=9ab4fd277bbab5fbeeba7ae2cb86473ca668ab86",
            "patch": "@@ -1215,6 +1215,9 @@ def OnCalibrationPublisher(self, event):\n \t\t\tgdic['flags'] = flags\n \n \t\t\tcam_id_obj = self.cam_id_to_obj(cam_id, obj.GetValue())\n+\t\t\tif not hasattr(cam_id_obj, 'enables_proxy'):\n+\t\t\t\tcam_id_obj.enables_proxy = (obj, cam_id_obj.s)\n+\n \t\t\tif not pdic_a or not gdic_a:\n \t\t\t\tself.add_cfg_info(cam_id_obj, cam_id_obj, cam_id, pdic, gdic, False, prm)\n \t\t\tif not cam_id_obj in cmd_dic:\n@@ -3108,10 +3111,13 @@ def set_val(obj, v):\n \t\tbutton_color_change(obj)\n \n def enables_set(obj, k, en):\n+\tif hasattr(obj, 'enables_proxy'):\n+\t\t(obj, k) = obj.enables_proxy\n \td = attr_getset(obj, 'enabLes', {})\n \td[k] = en\n \td['last_key'] = k\n-\tobj.Enable( all( d.values() ) )\n+\tif hasattr(obj, 'Enable'):\n+\t\tobj.Enable( all( d.values() ) )\n \tobj_refresh(obj)\n \tif isinstance(obj, wx.HyperlinkCtrl):\n \t\tif not hasattr(obj, 'coLor'):"
        }
    ],
    "autowarefoundation/autoware/636": [
        {
            "sha": "7d3321ef2d7b4bb22a9a3d767a5e21ce6296cbd8",
            "filename": "ros/src/sensing/drivers/imu/packages/memsic/nodes/vg440/vg440_node.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/7210279494905bf69b70da549176052fd71caf31/ros%2Fsrc%2Fsensing%2Fdrivers%2Fimu%2Fpackages%2Fmemsic%2Fnodes%2Fvg440%2Fvg440_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/7210279494905bf69b70da549176052fd71caf31/ros%2Fsrc%2Fsensing%2Fdrivers%2Fimu%2Fpackages%2Fmemsic%2Fnodes%2Fvg440%2Fvg440_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fsensing%2Fdrivers%2Fimu%2Fpackages%2Fmemsic%2Fnodes%2Fvg440%2Fvg440_node.cpp?ref=7210279494905bf69b70da549176052fd71caf31",
            "patch": "@@ -313,7 +313,7 @@ struct SNAV1Msg{\n   double dRollRate; //[rad/s]\n   double dPitchRate;\n   double dYawRate;\n-  double dXAccel; //[m/s^2]\n+  double dXAccel; //[G]\n   double dYAccel;\n   double dZAccel;\n   double dNVel;   //[m/s]\n@@ -349,12 +349,14 @@ bool MsgToNav1(const unsigned char* data, SNAV1Msg &sMsg) {\n }\n \n void Nav1ToRosImu(const SNAV1Msg &rNav1, sensor_msgs::Imu &ImuData) {\n+  const double gravityAccel = 9.80665;\n+  \n   ImuData.angular_velocity.x = rNav1.dRollRate;\n   ImuData.angular_velocity.y = rNav1.dPitchRate;\n   ImuData.angular_velocity.z = rNav1.dYawRate;\n-  ImuData.linear_acceleration.x = rNav1.dXAccel;\n-  ImuData.linear_acceleration.y = rNav1.dYAccel;\n-  ImuData.linear_acceleration.z = rNav1.dZAccel;\n+  ImuData.linear_acceleration.x = rNav1.dXAccel * gravityAccel;\n+  ImuData.linear_acceleration.y = rNav1.dYAccel * gravityAccel;\n+  ImuData.linear_acceleration.z = rNav1.dZAccel * gravityAccel;\n   ImuData.orientation = tf::createQuaternionMsgFromRollPitchYaw(rNav1.dRollAngle, rNav1.dPitchAngle, rNav1.dYawAngle);\n }\n "
        }
    ],
    "autowarefoundation/autoware/646": [
        {
            "sha": "e1f036f6f727ef0827b969a5c81befe65e25e52b",
            "filename": "ros/src/computing/perception/detection/packages/cv_tracker/nodes/ssd/ssd_node.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 7,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/35c05d52525612f62c10c3e363d08e5824bb345b/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Fssd%2Fssd_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/35c05d52525612f62c10c3e363d08e5824bb345b/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Fssd%2Fssd_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2Fnodes%2Fssd%2Fssd_node.cpp?ref=35c05d52525612f62c10c3e363d08e5824bb345b",
            "patch": "@@ -33,7 +33,7 @@\n #include <runtime_manager/ConfigSsd.h>\n #include <sensor_msgs/Image.h>\n #include <sensor_msgs/image_encodings.h>\n-#include <cv_tracker/image_obj.h>\n+#include <cv_tracker_msgs/image_obj.h>\n \n #include <rect_class_score.h>\n \n@@ -67,7 +67,7 @@ class RosSsdApp\n \t//vector of indices of the classes to search for\n \tstd::vector<unsigned int> detect_classes_;\n \n-\tvoid convert_rect_to_image_obj(std::vector< RectClassScore<float> >& in_objects, cv_tracker::image_obj& out_message, cv::Mat& in_image, std::string in_class)\n+\tvoid convert_rect_to_image_obj(std::vector< RectClassScore<float> >& in_objects, cv_tracker_msgs::image_obj& out_message, cv::Mat& in_image, std::string in_class)\n \t{\n \t\tfor (unsigned int i = 0; i < in_objects.size(); ++i)\n \t\t{\n@@ -79,7 +79,7 @@ class RosSsdApp\n \t\t\t\t)//check if the score is larger than minimum required\n \t\t\t{\n \t\t\t\t//std::cout << in_objects[i].toString() << std::endl;\n-\t\t\t\tcv_tracker::image_rect rect;\n+\t\t\t\tcv_tracker_msgs::image_rect rect;\n \n \t\t\t\trect.x = in_objects[i].x;\n \t\t\t\trect.y = in_objects[i].y;\n@@ -118,8 +118,8 @@ class RosSsdApp\n \t\t//std::cout << \"Detection took: \" << timer.getTimeMilli() << std::endl;\n \n \t\t//Prepare Output message\n-\t\tcv_tracker::image_obj output_car_message;\n-\t\tcv_tracker::image_obj output_person_message;\n+\t\tcv_tracker_msgs::image_obj output_car_message;\n+\t\tcv_tracker_msgs::image_obj output_person_message;\n \t\toutput_car_message.header = image_source.header;\n \t\toutput_car_message.type = \"car\";\n \n@@ -207,8 +207,8 @@ class RosSsdApp\n \t\t}\n \t\tROS_INFO(\"SSD Detector initialized.\");\n \n-\t\tpublisher_car_objects_ = node_handle_.advertise<cv_tracker::image_obj>(\"/obj_car/image_obj\", 1);\n-\t\tpublisher_person_objects_ = node_handle_.advertise<cv_tracker::image_obj>(\"/obj_person/image_obj\", 1);\n+\t\tpublisher_car_objects_ = node_handle_.advertise<cv_tracker_msgs::image_obj>(\"/obj_car/image_obj\", 1);\n+\t\tpublisher_person_objects_ = node_handle_.advertise<cv_tracker_msgs::image_obj>(\"/obj_person/image_obj\", 1);\n \n \t\tROS_INFO(\"Subscribing to... %s\", image_raw_topic_str.c_str());\n \t\tsubscriber_image_raw_ = node_handle_.subscribe(image_raw_topic_str, 1, &RosSsdApp::image_callback, this);"
        }
    ],
    "autowarefoundation/autoware/670": [
        {
            "sha": "c6d3ff51a7afd74a02945acc035f62821fe0c694",
            "filename": "ros/src/.config/rviz/default.rviz",
            "status": "modified",
            "additions": 0,
            "deletions": 52,
            "changes": 52,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/296c223be2fba562a8fdbc98c9427634a32d63f5/ros%2Fsrc%2F.config%2Frviz%2Fdefault.rviz",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/296c223be2fba562a8fdbc98c9427634a32d63f5/ros%2Fsrc%2F.config%2Frviz%2Fdefault.rviz",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2F.config%2Frviz%2Fdefault.rviz?ref=296c223be2fba562a8fdbc98c9427634a32d63f5",
            "patch": "@@ -137,18 +137,6 @@ Visualization Manager:\n         zebra_zone: true\n       Queue Size: 100\n       Value: true\n-    - Class: rviz/Image\n-      Enabled: false\n-      Image Topic: /image_raw\n-      Max Value: 1\n-      Median window: 5\n-      Min Value: 0\n-      Name: Image\n-      Normalize Range: true\n-      Queue Size: 2\n-      Transport Hint: raw\n-      Unreliable: false\n-      Value: false\n     - Class: rviz/Camera\n       Enabled: false\n       Image Rendering: overlay\n@@ -406,43 +394,6 @@ Visualization Manager:\n         {}\n       Queue Size: 100\n       Value: true\n-    - Buffer length: 100\n-      Class: jsk_rviz_plugin/Plotter2D\n-      Enabled: true\n-      Name: km/h\n-      Show Value: true\n-      Topic: /linear_velocity_viz\n-      Value: true\n-      auto color change: false\n-      auto scale: true\n-      background color: 0; 0; 0\n-      backround alpha: 0\n-      border: true\n-      foreground alpha: 0.6\n-      foreground color: 25; 255; 240\n-      height: 100\n-      left: 10\n-      linewidth: 1\n-      max color: 255; 0; 0\n-      max value: 1\n-      min value: -1\n-      show caption: true\n-      text size: 12\n-      top: 10\n-      update interval: 0.04\n-      width: 100\n-    - Class: jsk_rviz_plugin/BoundingBoxArray\n-      Enabled: true\n-      Name: Bounding Boxes\n-      Topic: /bounding_boxes\n-      Unreliable: false\n-      Value: true\n-      alpha: 0.8\n-      color: 25; 255; 0\n-      coloring: Auto\n-      line width: 0.005\n-      only edge: false\n-      show coords: false\n     - Class: rviz/Marker\n       Enabled: true\n       Marker Topic: /waypoint_guide\n@@ -723,6 +674,3 @@ Window Geometry:\n     collapsed: false\n   Views:\n     collapsed: false\n-  Width: 2560\n-  X: 1070\n-  Y: -14"
        }
    ],
    "autowarefoundation/autoware/676": [
        {
            "sha": "b47e0533ecc97ac8196e25e68222a108ea97520f",
            "filename": "ros/src/computing/perception/detection/packages/cv_tracker/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/e846719acd99d3b3c4eacda86ef1c071e424e955/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/e846719acd99d3b3c4eacda86ef1c071e424e955/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2FCMakeLists.txt?ref=e846719acd99d3b3c4eacda86ef1c071e424e955",
            "patch": "@@ -334,9 +334,7 @@ if(EXISTS \"${YOLO2_PATH}\")\n   set(YOLO2_USE_CUDNN 0)\n   set(YOLO2_USE_GPU 1)\n   \n-  if(\"${CUDA_NVCC_FLAGS}\" MATCHES \"^std\")\n-\tlist(APPEND CUDA_NVCC_FLAGS \"-std=c++11\")\n-  endif()\n+  list(APPEND CUDA_NVCC_FLAGS \"-std=c++11\")\n   list(APPEND CUDA_NVCC_FLAGS \"-I${YOLO2_PATH}/include -I${YOLO2_PATH}/src\")\n \n   cuda_add_library(yolo2lib_wa"
        }
    ],
    "autowarefoundation/autoware/680": [
        {
            "sha": "139b3a4a76b05e958493c5af450614713025368c",
            "filename": "docker/Dockerfile",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/6542d2774d2096ae0f8035383b382dc9f85ed0c2/docker%2FDockerfile",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/6542d2774d2096ae0f8035383b382dc9f85ed0c2/docker%2FDockerfile",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2FDockerfile?ref=6542d2774d2096ae0f8035383b382dc9f85ed0c2",
            "patch": "@@ -19,8 +19,9 @@ RUN apt-get update && apt-get install -y \\\n         libqt5opengl5-dev libssh2-1-dev libarmadillo-dev libpcap-dev gksu\n \n RUN apt-get install -y \\\n-\tros-indigo-velocity-controllers  ros-indigo-grid-map libglew-dev \\\n-\tros-indigo-sicktoolbox ros-indigo-sicktoolbox-wrapper\n+\tros-indigo-velocity-controllers  ros-indigo-grid-map \\\n+\tros-indigo-sicktoolbox ros-indigo-sicktoolbox-wrapper ros-indigo-gps-common \\\n+\tlibglew-dev\n \n RUN rosdep init \\\n         && rosdep update \\"
        }
    ],
    "autowarefoundation/autoware/688": [
        {
            "sha": "7f5fd7b1411692ec72b2d898b7b98d812a002642",
            "filename": "README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/840937b66df6f534b9e60ac50eb56431c918925b/README.md",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/840937b66df6f534b9e60ac50eb56431c918925b/README.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/README.md?ref=840937b66df6f534b9e60ac50eb56431c918925b",
            "patch": "@@ -65,7 +65,7 @@ See also Autoware/docs for the tips of Autoware development, including the codin\n ```\n % sudo apt-get install ros-kinetic-desktop-full ros-kinetic-nmea-msgs ros-kinetic-nmea-navsat-driver ros-kinetic-sound-play ros-kinetic-jsk-visualization ros-kinetic-grid-map ros-kinetic-gps-common\n % sudo apt-get install ros-kinetic-controller-manager ros-kinetic-ros-control ros-kinetic-ros-controllers ros-kinetic-gazebo-ros-control ros-kinetic-joystick-drivers\n-% sudo apt-get install libnlopt-dev freeglut3-dev qtbase5-dev libqt5opengl5-dev libssh2-1-dev libarmadillo-dev libpcap-dev gksu libgl1-mesa-dev libglew-dev\n+% sudo apt-get install libnlopt-dev freeglut3-dev qtbase5-dev libqt5opengl5-dev libssh2-1-dev libarmadillo-dev libpcap-dev gksu libgl1-mesa-dev libglew-dev python-wxgtk3.0\n ```\n \n **NOTE: Following packages are not supported in ROS Kinetic.**"
        }
    ],
    "autowarefoundation/autoware/711": [
        {
            "sha": "c8e3e0ea57629b2a3ea57fec119b41b939410bde",
            "filename": "README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/7e4cee78645a063954b19f1c53c23ee3c78efb8a/README.md",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/7e4cee78645a063954b19f1c53c23ee3c78efb8a/README.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/README.md?ref=7e4cee78645a063954b19f1c53c23ee3c78efb8a",
            "patch": "@@ -153,7 +153,7 @@ More details [here](http://nvie.com/posts/a-successful-git-branching-model/)\n [![Public Road Demonstration](http://img.youtube.com/vi/5DaQBZvZwAI/mqdefault.jpg)](https://www.youtube.com/watch?v=5DaQBZvZwAI)\n \n ### Test Field Demonstration\n-[![Test Field Demonstration](http://img.youtube.com/vi/zujGfJcZCpQ/mqdefault.jpg)](https://www.youtube.com/watch?v=zujGfJcZCpQ)]\n+[![Test Field Demonstration](http://img.youtube.com/vi/zujGfJcZCpQ/mqdefault.jpg)](https://www.youtube.com/watch?v=zujGfJcZCpQ)\n \n ## Instruction Videos\n "
        }
    ],
    "autowarefoundation/autoware/713": [
        {
            "sha": "6e107fab53ffb7cceb7a705537f301dbce6cc92c",
            "filename": "ros/src/computing/perception/detection/packages/cv_tracker/CMakeLists.txt",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/24dafa161ce67bbb1cc0c199f7bc86dbfc923e5a/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/24dafa161ce67bbb1cc0c199f7bc86dbfc923e5a/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Fcv_tracker%2FCMakeLists.txt?ref=24dafa161ce67bbb1cc0c199f7bc86dbfc923e5a",
            "patch": "@@ -334,8 +334,9 @@ if(EXISTS \"${YOLO2_PATH}\")\n   set(YOLO2_USE_CUDNN 0)\n   set(YOLO2_USE_GPU 1)\n   \n-  list(APPEND CUDA_NVCC_FLAGS \"-std=c++11\")\n-  list(APPEND CUDA_NVCC_FLAGS \"-I${YOLO2_PATH}/include -I${YOLO2_PATH}/src\")\n+  list(APPEND CUDA_NVCC_FLAGS \"--std=c++11 -I${YOLO2_PATH}/include -I${YOLO2_PATH}/src\")\n+  SET(CUDA_PROPAGATE_HOST_FLAGS OFF)    \n+\n \n   cuda_add_library(yolo2lib_wa\n     ${YOLO2_PATH}/src/activation_kernels.cu"
        }
    ],
    "autowarefoundation/autoware/717": [
        {
            "sha": "2279c2a4147d64839e449a3165363e5ea237268a",
            "filename": "ros/src/computing/perception/detection/packages/road_wizard/nodes/region_tlr/region_tlr.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/62aebd43dd53ce621c9504ebd4f01c2b90c44555/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Froad_wizard%2Fnodes%2Fregion_tlr%2Fregion_tlr.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/62aebd43dd53ce621c9504ebd4f01c2b90c44555/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Froad_wizard%2Fnodes%2Fregion_tlr%2Fregion_tlr.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Froad_wizard%2Fnodes%2Fregion_tlr%2Fregion_tlr.cpp?ref=62aebd43dd53ce621c9504ebd4f01c2b90c44555",
            "patch": "@@ -373,8 +373,11 @@ static void superimpose_cb(const std_msgs::Bool::ConstPtr& config_msg)\n   }\n \n   if (!show_superimpose_result) {\n-    cv::destroyWindow(window_name);\n-    cv::waitKey(1);\n+\t  if (cvGetWindowHandle(window_name.c_str()) != NULL)\n+\t  {\n+\t\t  cv::destroyWindow(window_name);\n+\t\t  cv::waitKey(1);\n+\t  }\n   }\n \n } /* static void superimpose_cb() */"
        }
    ],
    "autowarefoundation/autoware/718": [
        {
            "sha": "8d58c2b6855e08f6f3c04737f1fad5bc4e9b2b4c",
            "filename": "ros/src/computing/planning/common/lib/openplanner/op_planner/include/RoadNetwork.h",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/96283d999c7606cb63df41bedfe106b14e3120ab/ros%2Fsrc%2Fcomputing%2Fplanning%2Fcommon%2Flib%2Fopenplanner%2Fop_planner%2Finclude%2FRoadNetwork.h",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/96283d999c7606cb63df41bedfe106b14e3120ab/ros%2Fsrc%2Fcomputing%2Fplanning%2Fcommon%2Flib%2Fopenplanner%2Fop_planner%2Finclude%2FRoadNetwork.h",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fcommon%2Flib%2Fopenplanner%2Fop_planner%2Finclude%2FRoadNetwork.h?ref=96283d999c7606cb63df41bedfe106b14e3120ab",
            "patch": "@@ -528,7 +528,7 @@ class TrafficSign\n \t}\n };\n \n-enum TrafficLightState {UNKNOWN_LIGHT, RED_LIGHT, GREEN_LIGHT, YELLOW_LIGHT, LEFT_GREEN, FORWARD_GREEN, RIGHT_GREEN, FLASH_YELLOW, FLAH_RED};\n+enum TrafficLightState {UNKNOWN_LIGHT, RED_LIGHT, GREEN_LIGHT, YELLOW_LIGHT, LEFT_GREEN, FORWARD_GREEN, RIGHT_GREEN, FLASH_YELLOW, FLASH_RED};\n \n class TrafficLight\n {"
        }
    ],
    "autowarefoundation/autoware/732": [
        {
            "sha": "724b35b7d740a9153c36aceed28e866df634857d",
            "filename": "ros/src/data/packages/vector_map_server/CMakeLists.txt",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/6f10f57b9be913ae9693c45e215d6be5ae443381/ros%2Fsrc%2Fdata%2Fpackages%2Fvector_map_server%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/6f10f57b9be913ae9693c45e215d6be5ae443381/ros%2Fsrc%2Fdata%2Fpackages%2Fvector_map_server%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fdata%2Fpackages%2Fvector_map_server%2FCMakeLists.txt?ref=6f10f57b9be913ae9693c45e215d6be5ae443381",
            "patch": "@@ -66,11 +66,13 @@ include_directories(\n add_executable(vector_map_server nodes/vector_map_server/vector_map_server.cpp)\n target_link_libraries(vector_map_server ${catkin_LIBRARIES})\n add_dependencies(vector_map_server\n+  vector_map_server_generate_messages_cpp\n   ${catkin_EXPORTED_TARGETS}\n )\n \n add_executable(vector_map_client nodes/vector_map_client/vector_map_client.cpp)\n target_link_libraries(vector_map_client ${catkin_LIBRARIES})\n add_dependencies(vector_map_client\n+  vector_map_server_generate_messages_cpp\n   ${catkin_EXPORTED_TARGETS}\n )"
        }
    ],
    "autowarefoundation/autoware/733": [
        {
            "sha": "17d7eec3d403eb791e0203090b7d022724ad9954",
            "filename": "ros/src/computing/perception/localization/packages/orb_localizer/CMakeLists.txt",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/c8d4d9eb84d47172ed1e8fe563ee7d4def3f658f/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Forb_localizer%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/c8d4d9eb84d47172ed1e8fe563ee7d4def3f658f/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Forb_localizer%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Forb_localizer%2FCMakeLists.txt?ref=c8d4d9eb84d47172ed1e8fe563ee7d4def3f658f",
            "patch": "@@ -154,6 +154,8 @@ add_executable (\n \t\tnodes/common.cpp\n )\n \n+add_dependencies(orb_matching orb_localizer_generate_messages_cpp)\n+\n target_link_libraries (\n \torb_matching\n \t\t${ORB_BIN_LINKS}\n@@ -169,6 +171,8 @@ add_executable (\n \t\tnodes/common.cpp\n )\n \n+add_dependencies(orb_matching_pf orb_localizer_generate_messages_cpp)\n+\n target_link_libraries (\n \torb_matching_pf\n \t\t${ORB_BIN_LINKS}"
        }
    ],
    "autowarefoundation/autoware/751": [
        {
            "sha": "09fcc9033dee05efaadd4e75a085f5fc55ab9573",
            "filename": "ros/src/computing/planning/common/lib/openplanner/op_planner/src/PlanningHelpers.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/2f215effe591e992383f02745da8f8b3e7ea1d6c/ros%2Fsrc%2Fcomputing%2Fplanning%2Fcommon%2Flib%2Fopenplanner%2Fop_planner%2Fsrc%2FPlanningHelpers.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/2f215effe591e992383f02745da8f8b3e7ea1d6c/ros%2Fsrc%2Fcomputing%2Fplanning%2Fcommon%2Flib%2Fopenplanner%2Fop_planner%2Fsrc%2FPlanningHelpers.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fcommon%2Flib%2Fopenplanner%2Fop_planner%2Fsrc%2FPlanningHelpers.cpp?ref=2f215effe591e992383f02745da8f8b3e7ea1d6c",
            "patch": "@@ -1391,7 +1391,7 @@ WayPoint* PlanningHelpers::BuildPlanningSearchTreeV2(WayPoint* pStart,\n \n \t\t\t\twp->cost = pH->cost + d;\n \t\t\t\twp->pRight = pH;\n-\t\t\t\twp->pRight = 0;\n+\t\t\t\twp->pLeft = 0;\n \n \t\t\t\tnextLeafToTrace.push_back(make_pair(pH, wp));\n \t\t\t\tall_cells_to_delete.push_back(wp);"
        }
    ],
    "autowarefoundation/autoware/768": [
        {
            "sha": "fb01cdf336601ca17512b3ac9aca10bbdf152dc9",
            "filename": "ros/src/sensing/fusion/packages/scan2image/nodes/scan2image/scan2image.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/10e30a269c5d51b6c58cafeb3935d22554173a66/ros%2Fsrc%2Fsensing%2Ffusion%2Fpackages%2Fscan2image%2Fnodes%2Fscan2image%2Fscan2image.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/10e30a269c5d51b6c58cafeb3935d22554173a66/ros%2Fsrc%2Fsensing%2Ffusion%2Fpackages%2Fscan2image%2Fnodes%2Fscan2image%2Fscan2image.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fsensing%2Ffusion%2Fpackages%2Fscan2image%2Fnodes%2Fscan2image%2Fscan2image.cpp?ref=10e30a269c5d51b6c58cafeb3935d22554173a66",
            "patch": "@@ -56,7 +56,7 @@ void trans_depth_points_to_image_points(Scan_points_dataset* scan_points_dataset\n                     + cameraExtrinsicMat.at<double>(2,1) * scan_points_dataset->scan_points.y.at(i)*1000\n                     + cameraExtrinsicMat.at<double>(2,2) * scan_points_dataset->scan_points.z.at(i)*1000)\n             + (cameraExtrinsicMat.at<double>(2,3));\n-        if (camera_z >= 0.0) {\n+        if (camera_z > 0.0) {\n             /*\n              * Projection transformation. Change from camera coordinate to image coordinate\n              */"
        }
    ],
    "autowarefoundation/autoware/817": [
        {
            "sha": "567dc9985e4dad71fc8cc877ddc96c0ed8daec57",
            "filename": "ros/src/util/packages/map_tools/nodes/map_extender/map_extender.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 12,
            "changes": 26,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/ee29bf64c31a51d6751fac47de8521be62c469de/ros%2Fsrc%2Futil%2Fpackages%2Fmap_tools%2Fnodes%2Fmap_extender%2Fmap_extender.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/ee29bf64c31a51d6751fac47de8521be62c469de/ros%2Fsrc%2Futil%2Fpackages%2Fmap_tools%2Fnodes%2Fmap_extender%2Fmap_extender.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fmap_tools%2Fnodes%2Fmap_extender%2Fmap_extender.cpp?ref=ee29bf64c31a51d6751fac47de8521be62c469de",
            "patch": "@@ -92,7 +92,7 @@ static ros::Publisher ndt_map_pub;\n static bool _get_height = false;\n static bool hasMapSet = false;\n \n-static std::string input_pcd;\n+static std::string input_pcd, output_pcd, output_pcd_rgb;\n \n static void initialpose_callback(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr& input)\n {\n@@ -157,15 +157,9 @@ static void initialpose_callback(const geometry_msgs::PoseWithCovarianceStamped:\n   msg_ptr->header.frame_id = \"/map\";\n   ndt_map_pub.publish(*msg_ptr);\n \n-  // Writing Point Cloud data to PCD file\n-  int tmp = input_pcd.find_last_of(\"/\");\n-  std::string prefix = \"extended_\";\n-  std::string prefix_rgb = \"extended_rgb_\";\n-  std::string output = input_pcd.insert(tmp+1, prefix);\n-  std::string output_rgb = input_pcd.insert(tmp+1, prefix_rgb);\n \n-  pcl::io::savePCDFileBinary(output, *transformed_additional_map_ptr);\n-  std::cout << \"Saved \" << output << \": \" << transformed_additional_map_ptr->points.size() << \" points.\" << std::endl;\n+  pcl::io::savePCDFileBinary(output_pcd, *transformed_additional_map_ptr);\n+  std::cout << \"Saved \" << output_pcd << \": \" << transformed_additional_map_ptr->points.size() << \" points.\" << std::endl;\n \n   pcl::PointCloud<pcl::PointXYZRGB> cloud_rgb;\n   cloud_rgb.width = transformed_additional_map_ptr->width;\n@@ -179,8 +173,8 @@ static void initialpose_callback(const geometry_msgs::PoseWithCovarianceStamped:\n     cloud_rgb.points[i].rgb = 255 << 16 | 255 << 8 | 255;\n   }\n \n-  pcl::io::savePCDFileBinary(output_rgb, cloud_rgb);\n-  std::cout << \"Saved \" << output_rgb << \": \" <<  cloud_rgb.points.size() << \" points.\" << std::endl;\n+  pcl::io::savePCDFileBinary(output_pcd_rgb, cloud_rgb);\n+  std::cout << \"Saved \" << output_pcd_rgb << \": \" <<  cloud_rgb.points.size() << \" points.\" << std::endl;\n \n   std::cout << \"-----------------------------------------------------------------\" << std::endl;\n   std::cout << \"Sequence number: \" << input->header.seq << std::endl;\n@@ -219,7 +213,15 @@ int main(int argc, char **argv)\n     ros::init(argc, argv, \"map_extender\");\n     ros::NodeHandle n;\n \n-    input_pcd = argv[1];\n+    input_pcd = output_pcd = output_pcd_rgb = argv[1];\n+    int tmp = input_pcd.find_last_of(\"/\");\n+    std::string prefix = \"extended_\";\n+    std::string prefix_rgb = \"extended_rgb_\";\n+    output_pcd.insert(tmp+1, prefix);\n+    output_pcd_rgb.insert(tmp+1, prefix_rgb);\n+    std::cout << input_pcd << std::endl;\n+    std::cout << output_pcd << std::endl;\n+    std::cout << output_pcd_rgb << std::endl;\n \n     if(pcl::io::loadPCDFile<pcl::PointXYZI> (input_pcd, *additional_map_ptr) == -1){\n       std::cout << \"Couldn't read \" << input_pcd << \".\" << std::endl;"
        }
    ],
    "autowarefoundation/autoware/832": [
        {
            "sha": "2eca48b2acf97b5c59bb9dff14618bf7610d6e56",
            "filename": "ros/src/computing/perception/localization/packages/ndt_localizer/nodes/ndt_matching/ndt_matching.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 8,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/d067f668cc26820420c508923ec99a2226093a23/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Fndt_localizer%2Fnodes%2Fndt_matching%2Fndt_matching.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/d067f668cc26820420c508923ec99a2226093a23/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Fndt_localizer%2Fnodes%2Fndt_matching%2Fndt_matching.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Fndt_localizer%2Fnodes%2Fndt_matching%2Fndt_matching.cpp?ref=d067f668cc26820420c508923ec99a2226093a23",
            "patch": "@@ -190,7 +190,7 @@ static autoware_msgs::ndt_stat ndt_stat_msg;\n static double predict_pose_error = 0.0;\n \n static double _tf_x, _tf_y, _tf_z, _tf_roll, _tf_pitch, _tf_yaw;\n-static Eigen::Matrix4f tf_btol, tf_ltob;\n+static Eigen::Matrix4f tf_btol;\n \n static std::string _localizer = \"velodyne\";\n static std::string _offset = \"linear\";  // linear, zero, quadratic\n@@ -805,7 +805,7 @@ static void points_callback(const sensor_msgs::PointCloud2::ConstPtr& input)\n \n \n     t = ndt.getFinalTransformation();  // localizer\n-    t2 = t * tf_ltob;                  // base_link\n+    t2 = t * tf_btol.inverse();                  // base_link\n \n     iteration = ndt.getFinalNumIteration();\n #ifdef USE_FAST_PCL\n@@ -1336,12 +1336,6 @@ int main(int argc, char** argv)\n   Eigen::AngleAxisf rot_z_btol(_tf_yaw, Eigen::Vector3f::UnitZ());\n   tf_btol = (tl_btol * rot_z_btol * rot_y_btol * rot_x_btol).matrix();\n \n-  Eigen::Translation3f tl_ltob((-1.0) * _tf_x, (-1.0) * _tf_y, (-1.0) * _tf_z);  // tl: translation\n-  Eigen::AngleAxisf rot_x_ltob((-1.0) * _tf_roll, Eigen::Vector3f::UnitX());     // rot: rotation\n-  Eigen::AngleAxisf rot_y_ltob((-1.0) * _tf_pitch, Eigen::Vector3f::UnitY());\n-  Eigen::AngleAxisf rot_z_ltob((-1.0) * _tf_yaw, Eigen::Vector3f::UnitZ());\n-  tf_ltob = (tl_ltob * rot_z_ltob * rot_y_ltob * rot_x_ltob).matrix();\n-\n   // Updated in initialpose_callback or gnss_callback\n   initial_pose.x = 0.0;\n   initial_pose.y = 0.0;"
        }
    ],
    "autowarefoundation/autoware/833": [
        {
            "sha": "4704ae40706b016238775e8427c37a36371490cf",
            "filename": "ros/src/util/packages/runtime_manager/scripts/runtime_manager_dialog.py",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/6e1173e96f54c3cf52d08ad4fa15b0ced48f3bfc/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/6e1173e96f54c3cf52d08ad4fa15b0ced48f3bfc/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py?ref=6e1173e96f54c3cf52d08ad4fa15b0ced48f3bfc",
            "patch": "@@ -1923,7 +1923,7 @@ def create_tree(self, parent, items, tree, item, cmd_dic):\n \t\t\t\t\tself.new_link(item, name, pdic, gdic, pnl, 'app', items.get('param'), add_objs)\n \t\t\t\telse:\n \t\t\t\t\tself.add_cfg_info(item, item, name, None, gdic, False, None)\n-\t\t\t\tszr = sizer_wrap(add_objs, wx.HORIZONTAL, parent=pnl)\n+\t\t\t\tszr = sizer_wrap(add_objs, wx.HORIZONTAL, flag=wx.ALIGN_CENTER_VERTICAL, parent=pnl)\n \t\t\t\tszr.Fit(pnl)\n \t\t\t\ttree.SetItemWindow(item, pnl)\n \n@@ -1935,6 +1935,8 @@ def new_link(self, item, name, pdic, gdic, pnl, link_str, prm_name, add_objs):\n \t\tlkc = None\n \t\tif 'no_link' not in gdic.get('flags', []):\n \t\t\tlkc = wx.HyperlinkCtrl(pnl, wx.ID_ANY, link_str, \"\")\n+\t\t\tif hasattr(lkc, 'SetCanFocus'):\n+\t\t\t\tlkc.SetCanFocus(False)\n \t\t\tfix_link_color(lkc)\n \t\t\tself.Bind(wx.EVT_HYPERLINK, self.OnHyperlinked, lkc)\n \t\t\tif len(add_objs) > 0:"
        }
    ],
    "autowarefoundation/autoware/906": [
        {
            "sha": "2102f2aa8f89af7d15d40c2b41360451febc83d3",
            "filename": "ros/src/sensing/drivers/camera/packages/pointgrey/nodes/ladybug/ladybug.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/1dba0c69a345ae13994c43cca8d8ed902092cd6e/ros%2Fsrc%2Fsensing%2Fdrivers%2Fcamera%2Fpackages%2Fpointgrey%2Fnodes%2Fladybug%2Fladybug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/1dba0c69a345ae13994c43cca8d8ed902092cd6e/ros%2Fsrc%2Fsensing%2Fdrivers%2Fcamera%2Fpackages%2Fpointgrey%2Fnodes%2Fladybug%2Fladybug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fsensing%2Fdrivers%2Fcamera%2Fpackages%2Fpointgrey%2Fnodes%2Fladybug%2Fladybug.cpp?ref=1dba0c69a345ae13994c43cca8d8ed902092cd6e",
            "patch": "@@ -363,6 +363,7 @@ int main (int argc, char **argv)\n \t\t\tcv::resize(image,image,cv::Size(size.width*image_scale/100, size.height*image_scale/100));\n \t\t\t//\n \t\t\tcv::transpose(image, image);\n+\t\t\tcv::flip(image, image, 1);\n \n \t\t\tif (i==0)\n \t\t\t\timage.copyTo(full_size);"
        }
    ],
    "autowarefoundation/autoware/939": [
        {
            "sha": "dc2165d139dae174e6e8fb18591f055c0abfca67",
            "filename": "ros/src/util/packages/runtime_manager/scripts/computing.yaml",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/0d7fcc5d65bac39083cfe688de98dff1105b404c/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/0d7fcc5d65bac39083cfe688de98dff1105b404c/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml?ref=0d7fcc5d65bac39083cfe688de98dff1105b404c",
            "patch": "@@ -3090,24 +3090,24 @@ params :\n       cmd_param :\n         dash      : ''\n         delim     : ':='\n-    - name      : image_raw_topic_str\n-      desc      : image_raw_topic_str desc sample\n-      label     : image_raw_topic_str\n+    - name      : image_src\n+      desc      : Image Topic to be fed to the network for detection\n+      label     : image_src\n       kind      : str\n       v         : /image_raw\n       cmd_param :\n         dash      : ''\n         delim     : ':='\n     - name     : network_definition_file\n-      desc     : network_definition_file sample\n+      desc     : Prototxt file which defines the network\n       label    : 'network_file (ssd)'\n       kind     : path\n       v        : ~/ssdcaffe/models/VGGNet/VOC0712Plus/SSD_300x300/deploy.prototxt\n       cmd_param:\n         dash     : ''\n         delim    : ':='\n     - name     : pretrained_model_file\n-      desc     : pretrained_model_file sample\n+      desc     : Trained Caffe model\n       label    : 'pattern_file (ssd)'\n       kind     : path\n       v        : ~/ssdcaffe/models/VGGNet/VOC0712Plus/SSD_300x300/VGG_VOC0712Plus_SSD_300x300_iter_240000.caffemodel"
        }
    ],
    "autowarefoundation/autoware/941": [
        {
            "sha": "85831f333ec0290e0b325b5286a2a6e1c4e11544",
            "filename": "ros/src/sensing/drivers/imu/packages/xsens/src/xsens_driver/src/mtdevice.py",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/8902ba55db7a18e9a1a72ce3d689d3fe103771e1/ros%2Fsrc%2Fsensing%2Fdrivers%2Fimu%2Fpackages%2Fxsens%2Fsrc%2Fxsens_driver%2Fsrc%2Fmtdevice.py",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/8902ba55db7a18e9a1a72ce3d689d3fe103771e1/ros%2Fsrc%2Fsensing%2Fdrivers%2Fimu%2Fpackages%2Fxsens%2Fsrc%2Fxsens_driver%2Fsrc%2Fmtdevice.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fsensing%2Fdrivers%2Fimu%2Fpackages%2Fxsens%2Fsrc%2Fxsens_driver%2Fsrc%2Fmtdevice.py?ref=8902ba55db7a18e9a1a72ce3d689d3fe103771e1",
            "patch": "@@ -19,8 +19,10 @@ class MTDevice(object):\n \tdef __init__(self, port, baudrate=115200, timeout=0.1, autoconf=True,\n \t\t\tconfig_mode=False):\n \t\t\"\"\"Open device.\"\"\"\n-\t\tself.device = serial.Serial(port, baudrate, timeout=timeout,\n-\t\t\t\twriteTimeout=timeout)\n+#\t\tself.device = serial.Serial(port, baudrate, timeout=timeout,\n+#\t\t\t\twriteTimeout=timeout)\n+                self.device = serial.Serial(port, baudrate, timeout=timeout,\n+                                           writeTimeout=timeout, rtscts=True, dsrdtr=True)\n \t\tself.device.flushInput()\t# flush to make sure the port is ready TODO\n \t\tself.device.flushOutput()\t# flush to make sure the port is ready TODO\n \t\t## timeout for communication"
        }
    ],
    "autowarefoundation/autoware/984": [
        {
            "sha": "52bb05266ee526d0227b3a45303e93a22d0d5101",
            "filename": "ros/src/computing/perception/detection/packages/lidar_tracker/CMakeLists.txt",
            "status": "modified",
            "additions": 3,
            "deletions": 6,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/a7d814b72a70ce1c7afc586738ca1d0c1a4afb94/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Flidar_tracker%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/a7d814b72a70ce1c7afc586738ca1d0c1a4afb94/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Flidar_tracker%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Flidar_tracker%2FCMakeLists.txt?ref=a7d814b72a70ce1c7afc586738ca1d0c1a4afb94",
            "patch": "@@ -4,7 +4,7 @@ project(lidar_tracker)\n ## Find catkin macros and libraries\n ## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n ## is used, also find other catkin packages\n-include(FindPkgConfig)\n+\n find_package(catkin REQUIRED COMPONENTS\n   pcl_conversions\n   pcl_ros\n@@ -34,11 +34,8 @@ execute_process(\n   OUTPUT_VARIABLE ROS_VERSION\n   OUTPUT_STRIP_TRAILING_WHITESPACE\n )\n-if (\"${ROS_VERSION}\" MATCHES \"(kinetic)\")\n-\tpkg_check_modules(OpenCV REQUIRED opencv-3.2.0-dev)\n-else()\n-\tpkg_check_modules(OpenCV REQUIRED)\n-endif()\n+\n+find_package(OpenCV REQUIRED)\n \n execute_process(\n   COMMAND pkg-config --variable=host_bins Qt5Core"
        }
    ],
    "autowarefoundation/autoware/997": [
        {
            "sha": "bc4bc8c74be4939c659b700afccd1a0484d688cd",
            "filename": "ros/src/computing/perception/detection/packages/road_wizard/nodes/feat_proj/feat_proj.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/734817d97e9078045c7b4ae3bda49db239b283dc/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Froad_wizard%2Fnodes%2Ffeat_proj%2Ffeat_proj.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/734817d97e9078045c7b4ae3bda49db239b283dc/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Froad_wizard%2Fnodes%2Ffeat_proj%2Ffeat_proj.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fpackages%2Froad_wizard%2Fnodes%2Ffeat_proj%2Ffeat_proj.cpp?ref=734817d97e9078045c7b4ae3bda49db239b283dc",
            "patch": "@@ -309,9 +309,9 @@ void echoSignals2(ros::Publisher &pub, bool useOpenGLCoord = false)\n \t\t}\n \t}\n \n-\tfor (unsigned int i = 1; i <= vmap.signals.size(); i++)\n+\tfor (const auto& signal_map : vmap.signals)\n \t{\n-\t\tSignal signal = vmap.signals[i];\n+\t\tconst Signal signal = signal_map.second;\n \t\tint pid = vmap.vectors[signal.vid].pid;\n \n \t\tPoint3 signalcenter = vmap.getPoint(pid);"
        }
    ],
    "autowarefoundation/autoware/998": [
        {
            "sha": "bc0fa59fc8d66cbf1975c6bcba5901470b95c6c8",
            "filename": "ros/src/computing/perception/localization/packages/ndt_localizer/nodes/ndt_matching/ndt_matching.cpp",
            "status": "modified",
            "additions": 44,
            "deletions": 46,
            "changes": 90,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/a00083276448ed57a7d5b742558e0836ddf4fc6b/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Fndt_localizer%2Fnodes%2Fndt_matching%2Fndt_matching.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/a00083276448ed57a7d5b742558e0836ddf4fc6b/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Fndt_localizer%2Fnodes%2Fndt_matching%2Fndt_matching.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Fndt_localizer%2Fnodes%2Fndt_matching%2Fndt_matching.cpp?ref=a00083276448ed57a7d5b742558e0836ddf4fc6b",
            "patch": "@@ -105,8 +105,7 @@ struct pose\n };\n \n static pose initial_pose, predict_pose, predict_pose_imu, predict_pose_odom, predict_pose_imu_odom, previous_pose,\n-    ndt_pose, current_pose, current_pose_imu, current_pose_odom, current_pose_imu_odom, localizer_pose,\n-    previous_gnss_pose, current_gnss_pose;\n+    ndt_pose, current_pose, current_pose_imu, current_pose_odom, current_pose_imu_odom, localizer_pose;\n \n static double offset_x, offset_y, offset_z, offset_yaw;  // current_pos - previous_pose\n static double offset_imu_x, offset_imu_y, offset_imu_z, offset_imu_roll, offset_imu_pitch, offset_imu_yaw;\n@@ -273,20 +272,19 @@ static void param_callback(const autoware_msgs::ConfigNdt::ConstPtr& input)\n       gpu_ndt_ptr->setResolution(ndt_res);\n     }\n     else\n-    {\n #endif\n-\t\tif (_use_fast_pcl)\n-\t\t{\n-          cpu_ndt.setResolution(ndt_res);\n-\t\t}\n-\t\telse\n-\t\t{\n-          ndt.setResolution(ndt_res);\n-\t\t}\n-#ifdef CUDA_FOUND\n+    {\n+\t  if (_use_fast_pcl)\n+\t  {\n+        cpu_ndt.setResolution(ndt_res);\n+\t  }\n+\t  else\n+\t  {\n+        ndt.setResolution(ndt_res);\n+\t  }\n     }\n-#endif\n   }\n+\n   if (input->step_size != step_size)\n   {\n     step_size = input->step_size;\n@@ -296,20 +294,19 @@ static void param_callback(const autoware_msgs::ConfigNdt::ConstPtr& input)\n       gpu_ndt_ptr->setStepSize(step_size);\n     }\n     else\n-    {\n #endif\n-\t\tif (_use_fast_pcl)\n-\t\t{\n-          cpu_ndt.setStepSize(step_size);\n-\t\t}\n-\t\telse\n-\t\t{\n-          ndt.setStepSize(step_size);\n-\t\t}\n-#ifdef CUDA_FOUND\n+    {\n+\t  if (_use_fast_pcl)\n+\t  {\n+        cpu_ndt.setStepSize(step_size);\n+\t  }\n+\t  else\n+\t  {\n+        ndt.setStepSize(step_size);\n+\t  }\n     }\n-#endif\n   }\n+\n   if (input->trans_epsilon != trans_eps)\n   {\n     trans_eps = input->trans_epsilon;\n@@ -319,20 +316,19 @@ static void param_callback(const autoware_msgs::ConfigNdt::ConstPtr& input)\n       gpu_ndt_ptr->setTransformationEpsilon(trans_eps);\n     }\n     else\n-    {\n #endif\n-\t\tif (_use_fast_pcl)\n-\t\t{\n-          cpu_ndt.setTransformationEpsilon(trans_eps);\n-\t\t}\n-\t\telse\n-\t\t{\n-          ndt.setTransformationEpsilon(trans_eps);\n-\t\t}\n-#ifdef CUDA_FOUND\n+    {\n+\t  if (_use_fast_pcl)\n+\t  {\n+        cpu_ndt.setTransformationEpsilon(trans_eps);\n+\t  }\n+\t  else\n+\t  {\n+        ndt.setTransformationEpsilon(trans_eps);\n+\t  }\n     }\n-#endif\n   }\n+\n   if (input->max_iterations != max_iter)\n   {\n     max_iter = input->max_iterations;\n@@ -342,19 +338,17 @@ static void param_callback(const autoware_msgs::ConfigNdt::ConstPtr& input)\n       gpu_ndt_ptr->setMaximumIterations(max_iter);\n     }\n     else\n-    {\n #endif\n-\t\tif (_use_fast_pcl)\n-\t\t{\n-          cpu_ndt.setMaximumIterations(max_iter);\n-\t\t}\n-\t\telse\n-\t\t{\n-          ndt.setMaximumIterations(max_iter);\n-\t\t}\n-#ifdef CUDA_FOUND\n+    {\n+\t  if (_use_fast_pcl)\n+\t  {\n+        cpu_ndt.setMaximumIterations(max_iter);\n+\t  }\n+\t  else\n+\t  {\n+        ndt.setMaximumIterations(max_iter);\n+\t  }\n     }\n-#endif\n   }\n \n   if (_use_gnss == 0 && init_pos_set == 0)\n@@ -534,11 +528,15 @@ static void gnss_callback(const geometry_msgs::PoseStamped::ConstPtr& input)\n   tf::Quaternion gnss_q(input->pose.orientation.x, input->pose.orientation.y, input->pose.orientation.z,\n                         input->pose.orientation.w);\n   tf::Matrix3x3 gnss_m(gnss_q);\n+\n+  pose current_gnss_pose;\n   current_gnss_pose.x = input->pose.position.x;\n   current_gnss_pose.y = input->pose.position.y;\n   current_gnss_pose.z = input->pose.position.z;\n   gnss_m.getRPY(current_gnss_pose.roll, current_gnss_pose.pitch, current_gnss_pose.yaw);\n \n+  static pose previous_gnss_pose = current_gnss_pose;\n+\n   if ((_use_gnss == 1 && init_pos_set == 0) || fitness_score >= 500.0)\n   {\n     previous_pose.x = previous_gnss_pose.x;"
        }
    ],
    "autowarefoundation/autoware/1135": [
        {
            "sha": "8626a3d6845b9d83b32ddc9c2de093df741f4eb7",
            "filename": "ros/src/computing/planning/decision/packages/decision_maker/nodes/decision_maker/decision_maker_node_decision.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/bed10b65216f1c2dad373cd4cec67e80e12ebe9c/ros%2Fsrc%2Fcomputing%2Fplanning%2Fdecision%2Fpackages%2Fdecision_maker%2Fnodes%2Fdecision_maker%2Fdecision_maker_node_decision.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/bed10b65216f1c2dad373cd4cec67e80e12ebe9c/ros%2Fsrc%2Fcomputing%2Fplanning%2Fdecision%2Fpackages%2Fdecision_maker%2Fnodes%2Fdecision_maker%2Fdecision_maker_node_decision.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fdecision%2Fpackages%2Fdecision_maker%2Fnodes%2Fdecision_maker%2Fdecision_maker_node_decision.cpp?ref=bed10b65216f1c2dad373cd4cec67e80e12ebe9c",
            "patch": "@@ -1,4 +1,5 @@\n #include <stdio.h>\n+#include <numeric>\n \n #include <geometry_msgs/PoseStamped.h>\n #include <jsk_rviz_plugins/OverlayText.h>"
        }
    ],
    "autowarefoundation/autoware/1149": [
        {
            "sha": "7fc61d2a6bcdf28fa179cd12e4124601b3323f25",
            "filename": "ros/src/sensing/fusion/packages/autoware_camera_lidar_calibrator/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/b1daba78f8671c25d6c999bb88711e7308a21213/ros%2Fsrc%2Fsensing%2Ffusion%2Fpackages%2Fautoware_camera_lidar_calibrator%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/b1daba78f8671c25d6c999bb88711e7308a21213/ros%2Fsrc%2Fsensing%2Ffusion%2Fpackages%2Fautoware_camera_lidar_calibrator%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fsensing%2Ffusion%2Fpackages%2Fautoware_camera_lidar_calibrator%2FCMakeLists.txt?ref=b1daba78f8671c25d6c999bb88711e7308a21213",
            "patch": "@@ -14,7 +14,7 @@ find_package(catkin REQUIRED COMPONENTS\n     geometry_msgs\n     tf\n )\n-\n+find_package(Qt5Core REQUIRED)\n find_package(OpenCV REQUIRED)\n find_package(PCL)\n "
        }
    ],
    "autowarefoundation/autoware/1183": [
        {
            "sha": "8ed9a6dfc7e776e277fffafbb5541f305e798613",
            "filename": "ros/src/computing/planning/motion/packages/astar_planner/nodes/velocity_set/velocity_set.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/6c955a33163772a35eac591996b61c581468acb4/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fastar_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/6c955a33163772a35eac591996b61c581468acb4/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fastar_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fastar_planner%2Fnodes%2Fvelocity_set%2Fvelocity_set.cpp?ref=6c955a33163772a35eac591996b61c581468acb4",
            "patch": "@@ -654,9 +654,7 @@ int main(int argc, char** argv)\n \n     changeWaypoints(vs_info, detection_result, closest_waypoint,\n                     obstacle_waypoint, obstacle_velocity, final_waypoints_pub, &vs_path);\n-\n-    vs_info.clearPoints();\n-\n+    \n     // publish obstacle waypoint index\n     std_msgs::Int32 obstacle_waypoint_index;\n     obstacle_waypoint_index.data = obstacle_waypoint;"
        }
    ],
    "autowarefoundation/autoware/1189": [
        {
            "sha": "126e7a7d976fe39a6786626caac4ada6ee47ce88",
            "filename": "ros/src/computing/perception/localization/lib/fast_pcl/ndt_cpu/src/VoxelGrid.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/30320de6e9ec827dbb2f26542b13332af1920299/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Flib%2Ffast_pcl%2Fndt_cpu%2Fsrc%2FVoxelGrid.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/30320de6e9ec827dbb2f26542b13332af1920299/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Flib%2Ffast_pcl%2Fndt_cpu%2Fsrc%2FVoxelGrid.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Flib%2Ffast_pcl%2Fndt_cpu%2Fsrc%2FVoxelGrid.cpp?ref=30320de6e9ec827dbb2f26542b13332af1920299",
            "patch": "@@ -54,6 +54,7 @@ void VoxelGrid<PointSourceType>::initialize()\n \n \ticovariance_.resize(voxel_num_);\n \n+\tpoints_id_.clear();\n \tpoints_id_.resize(voxel_num_);\n \n \tpoints_per_voxel_.resize(voxel_num_);\n@@ -225,7 +226,7 @@ void VoxelGrid<PointSourceType>::computeCentroidAndCovariance()\n \n \t\tif (ipoint_num >= min_points_per_voxel_) {\n \n-\t\t\tcovariance_[i] = (covariance_[i] - 2 * (pt_sum * centroid_[i].transpose())) / point_num + centroid_[i] * centroid_[i].transpose();\n+\t\t\tcovariance_[i] = (covariance_[i] - 2.0 * (pt_sum * centroid_[i].transpose())) / point_num + centroid_[i] * centroid_[i].transpose();\n \t\t\tcovariance_[i] *= (point_num - 1.0) / point_num;\n \n \t\t\tSymmetricEigensolver3x3 sv(covariance_[i]);"
        }
    ],
    "autowarefoundation/autoware/1204": [
        {
            "sha": "1132534eb2691f3124258abc5d48ad31f4438af2",
            "filename": "ros/run",
            "status": "modified",
            "additions": 16,
            "deletions": 12,
            "changes": 28,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/9ee07840c44af65748c42d52f789d0fc2e7f1bb6/ros%2Frun",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/9ee07840c44af65748c42d52f789d0fc2e7f1bb6/ros%2Frun",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Frun?ref=9ee07840c44af65748c42d52f789d0fc2e7f1bb6",
            "patch": "@@ -6,20 +6,10 @@ MY_PATH=$(readlink -f  $(dirname $0))\n OPTION_WORKING_DIR='--working-directory'\n OPTION_CORE_GEOMETRY='--geometry=50x10+0+0'\n OPTION_RM_GEOMETRY='--geometry=50x10+500+0'\n+OPTION_TITLE='--title'\n OPTION_COMMAND='--command'\n \n-\n-MASTER_DISPLAY_OPTION=\"${OPTION_CORE_GEOMETRY} ${OPTION_TITLE}\\=\\\"roscore\\\"\"\n-RUNMGR_DISPLAY_OPTION=\"${OPTION_RM_GEOMETRY} ${OPTION_TITLE}\\=\\\"runtime_manager\\\"\"\n-\n-if [ $(which gnome-terminal) ]; then\n-    TERMINAL=gnome-terminal\n-    GNOME_VERSION=$(gnome-terminal --version | cut -d '.' -f 2)\n-    if [ ${GNOME_VERSION} -ge 14 ]; then\n-\tMASTER_DISPLAY_OPTION=''\n-\tRUNMGR_DISPLAY_OPTION=''\n-    fi\n-elif [ $(which mate-terminal) ]; then\n+if [ $(which mate-terminal) ]; then\n     TERMINAL=mate-terminal\n elif [ $(which xfce4-terminal) ]; then\n     TERMINAL=xfce4-terminal\n@@ -35,6 +25,20 @@ elif [ $(which konsole) ]; then\n     OPTION_TITLE='-T'\n fi\n \n+MASTER_DISPLAY_OPTION=\"${OPTION_CORE_GEOMETRY} ${OPTION_TITLE}=\\\"roscore\\\"\"\n+RUNMGR_DISPLAY_OPTION=\"${OPTION_RM_GEOMETRY} ${OPTION_TITLE}=\\\"runtime_manager\\\"\"\n+\n+if [ $(which gnome-terminal) ]; then\n+    TERMINAL=gnome-terminal\n+    GNOME_VERSION=$(gnome-terminal --version | cut -d '.' -f 2)\n+    if [ ${GNOME_VERSION} -ge 14 ]; then\n+\tMASTER_DISPLAY_OPTION=''\n+\tRUNMGR_DISPLAY_OPTION=''\n+    fi\n+fi\n+\n+echo \"Process Manager\"\n+\n sudo bash -c \"$MY_PATH/run_proc_manager &\"\n \n ADDR=$($MY_PATH/src/.config/rviz/subnet_chk.py -)"
        }
    ],
    "autowarefoundation/autoware/1216": [
        {
            "sha": "c72213ed867742fa43645c5ebdf36e9d0f7e24cc",
            "filename": "ros/src/computing/planning/decision/packages/decision_maker/nodes/decision_maker/decision_maker_node_stateupdate.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 3,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/61c2fe0206d589de5cf17d6f833be3ea3325d501/ros%2Fsrc%2Fcomputing%2Fplanning%2Fdecision%2Fpackages%2Fdecision_maker%2Fnodes%2Fdecision_maker%2Fdecision_maker_node_stateupdate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/61c2fe0206d589de5cf17d6f833be3ea3325d501/ros%2Fsrc%2Fcomputing%2Fplanning%2Fdecision%2Fpackages%2Fdecision_maker%2Fnodes%2Fdecision_maker%2Fdecision_maker_node_stateupdate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fdecision%2Fpackages%2Fdecision_maker%2Fnodes%2Fdecision_maker%2Fdecision_maker_node_stateupdate.cpp?ref=61c2fe0206d589de5cf17d6f833be3ea3325d501",
            "patch": "@@ -85,9 +85,19 @@ void DecisionMakerNode::setupStateCallback(void)\n \n void DecisionMakerNode::publishLightColor(int status)\n {\n-  autoware_msgs::traffic_light msg;\n-  msg.traffic_light = status;\n-  Pubs[\"light_color\"].publish(msg);\n+  // decision maker updates at 10Hz\n+  ros::Rate loop_rate(5);\n+\n+  // publish twice to make sure that the light color is  not missed\n+  for (int i=0; i<2 ; i++) {\n+    autoware_msgs::traffic_light msg;\n+    msg.traffic_light = status;\n+    ROS_INFO (\"before pub, sub num: %d\",Pubs[\"light_color\"].getNumSubscribers());\n+    Pubs[\"light_color\"].publish(msg);\n+    ROS_INFO (\"after pub, sub num: %d\",Pubs[\"light_color\"].getNumSubscribers());\n+\n+    loop_rate.sleep();\n+  }\n }\n \n void DecisionMakerNode::publishStoplineWaypointIdx(int wp_idx)"
        }
    ],
    "autowarefoundation/autoware/1376": [
        {
            "sha": "3677e61ffc05c2e28363e3046bd5306d15c98048",
            "filename": "ros/src/computing/perception/localization/packages/lidar_localizer/nodes/ndt_mapping/ndt_mapping.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/26f790eec3b619bae87528bf288b869030fa48f8/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Flidar_localizer%2Fnodes%2Fndt_mapping%2Fndt_mapping.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/26f790eec3b619bae87528bf288b869030fa48f8/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Flidar_localizer%2Fnodes%2Fndt_mapping%2Fndt_mapping.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Flidar_localizer%2Fnodes%2Fndt_mapping%2Fndt_mapping.cpp?ref=26f790eec3b619bae87528bf288b869030fa48f8",
            "patch": "@@ -468,7 +468,7 @@ static void points_callback(const sensor_msgs::PointCloud2::ConstPtr& input)\n \n   Eigen::Matrix4f t_localizer(Eigen::Matrix4f::Identity());\n   Eigen::Matrix4f t_base_link(Eigen::Matrix4f::Identity());\n-  tf::TransformBroadcaster br;\n+  static tf::TransformBroadcaster br;\n   tf::Transform transform;\n \n   current_scan_time = input->header.stamp;"
        }
    ],
    "autowarefoundation/autoware/1403": [
        {
            "sha": "e9b38010cb52ba152c101bc75814686f9f387fa1",
            "filename": ".travis.yml",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/ac4c6cd5c4b8ebfe70d6984432231c21c2f65228/.travis.yml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/ac4c6cd5c4b8ebfe70d6984432231c21c2f65228/.travis.yml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/.travis.yml?ref=ac4c6cd5c4b8ebfe70d6984432231c21c2f65228",
            "patch": "@@ -36,7 +36,8 @@ before_install:\n       sudo sh -c \"echo \\\"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\\\" > /etc/apt/sources.list.d/ros-latest.list\";\n       sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116;\n       sudo apt-get update;\n-      sudo apt-get install -y  python-catkin-pkg python-rosdep python-wstool ros-${ROS_DISTRO}-catkin;\n+      sudo apt-get install -y dpkg;\n+      sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool ros-${ROS_DISTRO}-catkin;\n       source /opt/ros/${ROS_DISTRO}/setup.bash;\n       sudo rosdep init;\n       rosdep update;"
        }
    ],
    "autowarefoundation/autoware/1436": [
        {
            "sha": "f66f2ed173abef36d6ef44abf5b0ecbbb7e9cc65",
            "filename": "ros/src/util/packages/runtime_manager/scripts/computing.yaml",
            "status": "modified",
            "additions": 15,
            "deletions": 15,
            "changes": 30,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/7fe613dbf33309db4707c10124c8ef160ef3e0c4/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/7fe613dbf33309db4707c10124c8ef160ef3e0c4/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml?ref=7fe613dbf33309db4707c10124c8ef160ef3e0c4",
            "patch": "@@ -269,12 +269,12 @@ subs :\n       - name : lidar_kf_contour_track\n         desc : part of open planner perception package\n         cmd  : roslaunch lidar_kf_contour_track lidar_kf_contour_track.launch\n-        param: lidar_kf_contour_track\n+        param: lidar_kf_contour_track_param\n \n       - name : lidar_imm_ukf_pda_track\n         desc : lidar_imm_ukf_pda_track desc sample\n         cmd  : roslaunch lidar_imm_ukf_pda_track lidar_imm_ukf_pda_track.launch\n-        param: imm_ukf_pda_tracker\n+        param: lidar_imm_ukf_pda_track_param\n         gui  :\n           sync :\n             func : self.button_synchronization.GetValue()\n@@ -1004,41 +1004,41 @@ params :\n       max   : 10\n       v     : 9\n \n-  - name  : lidar_imm_ukf_pda_track\n+  - name  : lidar_imm_ukf_pda_track_param\n     vars  :\n-    - name    : input_topic_\n+    - name    : tracker_input_topic\n       desc    : input_topic desc sample\n       label   : 'input topic'\n       kind    : str\n       v       : /cloud_clusters\n       cmd_param :\n         dash        : ''\n         delim       : ':='\n-    - name    : output_topic_\n+    - name    : tracker_output_topic\n       desc    : output_topic desc sample\n       label   : 'output topic'\n       kind    : str\n       v       : /tracking_cluster_array\n       cmd_param :\n         dash        : ''\n         delim       : ':='\n-    - name    : pointcloud_frame_\n+    - name    : pointcloud_frame\n       desc    : pointcloud_frame_ desc sample\n       label   : 'pointcloud frame'\n       kind    : str\n       v       : velodyne\n       cmd_param :\n         dash        : ''\n         delim       : ':='\n-    - name    : tracking_frame_\n+    - name    : tracking_frame\n       desc    : trakcing_frame_ desc sample\n       label   : 'tracking frame'\n       kind    : str\n       v       : world\n       cmd_param :\n         dash        : ''\n         delim       : ':='\n-    - name    : life_time_thres_\n+    - name    : life_time_thres\n       desc    : life_time_thres_ desc sample\n       label   : 'life time thres'\n       min       : 1\n@@ -1047,16 +1047,16 @@ params :\n       cmd_param :\n         dash        : ''\n         delim       : ':='\n-    - name    : gating_thres_\n+    - name    : gating_thres\n       desc    : gating_thres_ desc sample\n       label   : 'gating thres'\n       min       : 0\n-      max       : 20\n+      max       : 100\n       v       : 9.22\n       cmd_param :\n         dash        : ''\n         delim       : ':='\n-    - name    : gate_probability_\n+    - name    : gate_probability\n       desc    : gate_probability_ desc sample\n       label   : 'gate probability'\n       min       : 0\n@@ -1065,7 +1065,7 @@ params :\n       cmd_param :\n         dash        : ''\n         delim       : ':='\n-    - name    : detection_probability_\n+    - name    : detection_probability\n       desc    : detection_probability_ desc sample\n       label   : 'detection probability'\n       min       : 0\n@@ -1074,7 +1074,7 @@ params :\n       cmd_param :\n         dash        : ''\n         delim       : ':='\n-    - name    : distance_thres_\n+    - name    : distance_thres\n       desc    : distance_thres_ desc sample\n       label   : 'distance thres'\n       min       : 0\n@@ -1083,7 +1083,7 @@ params :\n       cmd_param :\n         dash        : ''\n         delim       : ':='\n-    - name    : static_distance_thres_\n+    - name    : static_distance_thres\n       desc    : static_distance_thres_ desc sample\n       label   : 'static distance thres'\n       min       : 0\n@@ -1093,7 +1093,7 @@ params :\n         dash        : ''\n         delim       : ':='\n         \n-  - name  : kf_contour_tracker\n+  - name  : lidar_kf_contour_track_param\n     vars  :\n     - name : tracking_type\n       desc : select the type of tracking"
        }
    ],
    "autowarefoundation/autoware/1437": [
        {
            "sha": "fbdebd6de78215d0a22282a9d98b818ebbb75c22",
            "filename": "ros/src/computing/perception/detection/vision_detector/packages/vision_darknet_detect/README.md",
            "status": "modified",
            "additions": 3,
            "deletions": 4,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/7891318628d982a99e5db1927421716fcf7c87f3/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fvision_detector%2Fpackages%2Fvision_darknet_detect%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/7891318628d982a99e5db1927421716fcf7c87f3/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fvision_detector%2Fpackages%2Fvision_darknet_detect%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fvision_detector%2Fpackages%2Fvision_darknet_detect%2FREADME.md?ref=7891318628d982a99e5db1927421716fcf7c87f3",
            "patch": "@@ -14,8 +14,8 @@ Autoware package based on Darknet that supports Yolov3 and Yolov2 image detector\n \n * From a sourced terminal:\n \n-`roslaunch vision_darknet_detect vision_yolo3_detect.launch`\n-`roslaunch vision_darknet_detect vision_yolo2_detect.launch`\n+    - `roslaunch vision_darknet_detect vision_yolo3_detect.launch`\n+    - `roslaunch vision_darknet_detect vision_yolo2_detect.launch`\n \n * From Runtime Manager:\n \n@@ -46,8 +46,7 @@ Launch file available parameters:\n \n |Topic|Type|Objective|\n ------|----|---------\n-|`/obj_car/image_obj`|`autoware_msgs/image_obj`|Contains the coordinates of the bounding box in image coordinates for objects detected as vehicles.|\n-|`/obj_person/image_obj`|`autoware_msgs/image_obj`|Contains the coordinates of the bounding box in image coordinates for objects detected as pedestrian.|\n+|`/detection/vision_objects`|`autoware_msgs::DetectedObjectArray`|Contains the coordinates of the bounding box in image coordinates for detected objects.|\n \n ### Video\n "
        }
    ],
    "autowarefoundation/autoware/1440": [
        {
            "sha": "71fd9d6afdbc8b6927c40ae372c47d4d3bc13daf",
            "filename": "ros/src/computing/perception/detection/lidar_detector/packages/lidar_fake_perception/CMakeLists.txt",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/5ef1286ffbda710932375d4f61e6943cfa951a3e/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flidar_detector%2Fpackages%2Flidar_fake_perception%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/5ef1286ffbda710932375d4f61e6943cfa951a3e/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flidar_detector%2Fpackages%2Flidar_fake_perception%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flidar_detector%2Fpackages%2Flidar_fake_perception%2FCMakeLists.txt?ref=5ef1286ffbda710932375d4f61e6943cfa951a3e",
            "patch": "@@ -38,6 +38,9 @@ add_executable(lidar_fake_perception_node\n target_link_libraries(lidar_fake_perception_node\n   ${catkin_LIBRARIES}\n )\n+add_dependencies(lidar_fake_perception_node\n+        ${catkin_EXPORTED_TARGETS}\n+        )\n \n install(TARGETS\n   lidar_fake_perception_node"
        }
    ],
    "autowarefoundation/autoware/1472": [
        {
            "sha": "5502cae81461243bbd546161d01ef3495fa4e6a9",
            "filename": "ros/src/computing/perception/localization/packages/lidar_localizer/nodes/ndt_mapping/ndt_mapping.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 6,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/ee1e0f9301d87fbc202ef2013285dc705a692ca4/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Flidar_localizer%2Fnodes%2Fndt_mapping%2Fndt_mapping.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/ee1e0f9301d87fbc202ef2013285dc705a692ca4/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Flidar_localizer%2Fnodes%2Fndt_mapping%2Fndt_mapping.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Flocalization%2Fpackages%2Flidar_localizer%2Fnodes%2Fndt_mapping%2Fndt_mapping.cpp?ref=ee1e0f9301d87fbc202ef2013285dc705a692ca4",
            "patch": "@@ -1041,12 +1041,7 @@ int main(int argc, char** argv)\n   Eigen::AngleAxisf rot_y_btol(_tf_pitch, Eigen::Vector3f::UnitY());\n   Eigen::AngleAxisf rot_z_btol(_tf_yaw, Eigen::Vector3f::UnitZ());\n   tf_btol = (tl_btol * rot_z_btol * rot_y_btol * rot_x_btol).matrix();\n-\n-  Eigen::Translation3f tl_ltob((-1.0) * _tf_x, (-1.0) * _tf_y, (-1.0) * _tf_z);  // tl: translation\n-  Eigen::AngleAxisf rot_x_ltob((-1.0) * _tf_roll, Eigen::Vector3f::UnitX());     // rot: rotation\n-  Eigen::AngleAxisf rot_y_ltob((-1.0) * _tf_pitch, Eigen::Vector3f::UnitY());\n-  Eigen::AngleAxisf rot_z_ltob((-1.0) * _tf_yaw, Eigen::Vector3f::UnitZ());\n-  tf_ltob = (tl_ltob * rot_z_ltob * rot_y_ltob * rot_x_ltob).matrix();\n+  tf_ltob = tf_btol.inverse();\n \n   map.header.frame_id = \"map\";\n "
        }
    ],
    "autowarefoundation/autoware/1581": [
        {
            "sha": "1370382b0f28101857fe734558f1a1d9678e60bc",
            "filename": "ros/src/sensing/fusion/packages/autoware_camera_lidar_calibrator/src/autoware_camera_calibration/camera_calibrator.py",
            "status": "modified",
            "additions": 6,
            "deletions": 2,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/571575b52beccda1b5dd37edd1f6c91fad0f649f/ros%2Fsrc%2Fsensing%2Ffusion%2Fpackages%2Fautoware_camera_lidar_calibrator%2Fsrc%2Fautoware_camera_calibration%2Fcamera_calibrator.py",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/571575b52beccda1b5dd37edd1f6c91fad0f649f/ros%2Fsrc%2Fsensing%2Ffusion%2Fpackages%2Fautoware_camera_lidar_calibrator%2Fsrc%2Fautoware_camera_calibration%2Fcamera_calibrator.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fsensing%2Ffusion%2Fpackages%2Fautoware_camera_lidar_calibrator%2Fsrc%2Fautoware_camera_calibration%2Fcamera_calibrator.py?ref=571575b52beccda1b5dd37edd1f6c91fad0f649f",
            "patch": "@@ -79,7 +79,6 @@\n from std_srvs.srv import Empty\n from os import path\n \n-\n class DisplayThread(threading.Thread):\n     \"\"\"\n     Thread that displays the current images\n@@ -257,6 +256,10 @@ def do_upload(self):\n \n class OpenCVCalibrationNode(CalibrationNode):\n     \"\"\" Calibration node with an OpenCV Gui \"\"\"\n+    (cv2_version_major, _, _) = cv2.__version__.split(\".\")\n+    if cv2_version_major == '2': TEXT_AA = cv2.CV_AA\n+    elif cv2_version_major == '3': TEXT_AA = cv2.LINE_AA\n+    else: TEXT_AA = 8\n     FONT_FACE = cv2.FONT_HERSHEY_SIMPLEX\n     FONT_SCALE = 0.4\n     FONT_THICKNESS = 1\n@@ -272,7 +275,8 @@ def __init__(self, *args, **kwargs):\n \n     @classmethod\n     def putText(cls, img, text, org, color = (0,0,0)):\n-        cv2.putText(img, text, org, cls.FONT_FACE, cls.FONT_SCALE, color, thickness = cls.FONT_THICKNESS, lineType = cv2.CV_AA)\n+        cv2.putText(img, text, org, cls.FONT_FACE, cls.FONT_SCALE, color, thickness = cls.FONT_THICKNESS,\n+                    lineType = cls.TEXT_AA)\n \n     @classmethod\n     def getTextSize(cls, text):"
        }
    ],
    "autowarefoundation/autoware/1608": [
        {
            "sha": "8f9c237efff6a2d728445ab28b6ae48710e5b679",
            "filename": "ros/src/computing/perception/detection/vision_detector/packages/vision_darknet_detect/src/vision_darknet_detect.h",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/1aedff91cd277063eff293ac9db1e57b39b7ff2f/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fvision_detector%2Fpackages%2Fvision_darknet_detect%2Fsrc%2Fvision_darknet_detect.h",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/1aedff91cd277063eff293ac9db1e57b39b7ff2f/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fvision_detector%2Fpackages%2Fvision_darknet_detect%2Fsrc%2Fvision_darknet_detect.h",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fvision_detector%2Fpackages%2Fvision_darknet_detect%2Fsrc%2Fvision_darknet_detect.h?ref=1aedff91cd277063eff293ac9db1e57b39b7ff2f",
            "patch": "@@ -38,6 +38,7 @@\n \n #define __APP_NAME__ \"vision_darknet_detect\"\n \n+#include <fstream>\n #include <cstdint>\n #include <cstdlib>\n #include <string>"
        }
    ],
    "autowarefoundation/autoware/1620": [
        {
            "sha": "70d8852766d1133b5ac39ad3a8ce435f08136f6b",
            "filename": "ros/catkin_make_release",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/ab3428b5c9bf4541b9c88d789498ceb5dd0f0987/ros%2Fcatkin_make_release",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/ab3428b5c9bf4541b9c88d789498ceb5dd0f0987/ros%2Fcatkin_make_release",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fcatkin_make_release?ref=ab3428b5c9bf4541b9c88d789498ceb5dd0f0987",
            "patch": "@@ -9,9 +9,10 @@ if [[ -d devel ]]; then\n     rm -rf devel\n fi\n \n-catkin_make -DCMAKE_BUILD_TYPE=Release clean -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs\n+CATKIN_OPTS=\"-DCMAKE_BUILD_TYPE=Release -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs\"\n+\n+catkin_make clean $CATKIN_OPTS\n source devel/setup.bash\n \n export LIBRARY_PATH=/usr/lib/OpenNI2/Drivers:$LIBRARY_PATH\n-catkin_make -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs -DCMAKE_BUILD_TYPE=Release $@\n-\n+catkin_make $CATKIN_OPTS $@"
        }
    ],
    "autowarefoundation/autoware/1680": [
        {
            "sha": "1fd2be6a568696c1a5f1e644e22ae556108cd85a",
            "filename": "ros/src/util/packages/log_tools/requirements.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/a3747efdfb88f368c27c35c3eaabea0461398216/ros%2Fsrc%2Futil%2Fpackages%2Flog_tools%2Frequirements.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/a3747efdfb88f368c27c35c3eaabea0461398216/ros%2Fsrc%2Futil%2Fpackages%2Flog_tools%2Frequirements.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Flog_tools%2Frequirements.txt?ref=a3747efdfb88f368c27c35c3eaabea0461398216",
            "patch": "@@ -1,3 +1,3 @@\n-flask==0.12.2\n+flask==1.0.2\n requests==2.20.0\n "
        }
    ],
    "autowarefoundation/autoware/1681": [
        {
            "sha": "407261bf40a02e4a5c3ebac8427d8a232faf33c5",
            "filename": "ros/src/computing/perception/detection/lidar_detector/packages/lidar_naive_l_shape_detect/nodes/lidar_naive_l_shape_detect/lidar_naive_l_shape_detect.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/3a46cdc64dc5366fa2183c738ff436f623af6465/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flidar_detector%2Fpackages%2Flidar_naive_l_shape_detect%2Fnodes%2Flidar_naive_l_shape_detect%2Flidar_naive_l_shape_detect.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/3a46cdc64dc5366fa2183c738ff436f623af6465/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flidar_detector%2Fpackages%2Flidar_naive_l_shape_detect%2Fnodes%2Flidar_naive_l_shape_detect%2Flidar_naive_l_shape_detect.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flidar_detector%2Fpackages%2Flidar_naive_l_shape_detect%2Fnodes%2Flidar_naive_l_shape_detect%2Flidar_naive_l_shape_detect.cpp?ref=3a46cdc64dc5366fa2183c738ff436f623af6465",
            "patch": "@@ -28,6 +28,9 @@\n  *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+\n+#include <random>\n+\n #include <pcl_conversions/pcl_conversions.h>\n #include <tf/transform_datatypes.h>\n "
        }
    ],
    "autowarefoundation/autoware/1687": [
        {
            "sha": "26f000a044da5d013a67e57f526ab51a28ab543c",
            "filename": "ros/src/.config/model/milee.urdf",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/bf888ac8ab9180572f9de1d2f29d7f3150ccb098/ros%2Fsrc%2F.config%2Fmodel%2Fmilee.urdf",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/bf888ac8ab9180572f9de1d2f29d7f3150ccb098/ros%2Fsrc%2F.config%2Fmodel%2Fmilee.urdf",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2F.config%2Fmodel%2Fmilee.urdf?ref=bf888ac8ab9180572f9de1d2f29d7f3150ccb098",
            "patch": "@@ -2,9 +2,9 @@\n <robot name=\"car\">\n   <link name=\"base_link\">\n     <visual name=\"base_visual\">\n-      <origin xyz=\"1 0 0.0\" rpy=\"1.57 0 4.71\" />\n+      <origin xyz=\"1.1 0 0.0\" rpy=\"1.57 0 4.71\" />\n       <geometry>\n-        <mesh filename=\"package://model_publisher/../../../.config/model/milee.dae\" scale=\"1.0 1.0 1.0\"/>\n+        <mesh filename=\"package://model_publisher/../../../.config/model/milee.dae\" scale=\"1.5 1.5 1.5\"/>\n       </geometry>\n     </visual>\n   </link>"
        }
    ],
    "autowarefoundation/autoware/1699": [
        {
            "sha": "b58c8b7f3da1a9c25437cd3202baafbba55a994e",
            "filename": "ros/src/computing/planning/motion/packages/waypoint_follower/nodes/twist_gate/twist_gate.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 4,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/dbe595e4a3c4e06b0732dfd4100434626a564110/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_follower%2Fnodes%2Ftwist_gate%2Ftwist_gate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/dbe595e4a3c4e06b0732dfd4100434626a564110/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_follower%2Fnodes%2Ftwist_gate%2Ftwist_gate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_follower%2Fnodes%2Ftwist_gate%2Ftwist_gate.cpp?ref=dbe595e4a3c4e06b0732dfd4100434626a564110",
            "patch": "@@ -238,22 +238,27 @@ void TwistGate::watchdog_timer()\n         send_emergency_cmd = true;\n       }\n       // Set Emergency Stop\n-      emergency_stop_msg_.data = true;\n       emergency_stop_pub_.publish(emergency_stop_msg_);\n       ROS_WARN(\"Emergency Stop!\");\n     }\n+    else {\n+      send_emergency_cmd = false;\n+    }\n \n     std::this_thread::sleep_for(std::chrono::milliseconds(10));\n   }\n }\n \n void TwistGate::remote_cmd_callback(const remote_msgs_t::ConstPtr& input_msg)\n {\n+  remote_cmd_time_ = ros::Time::now();\n   command_mode_ = static_cast<CommandMode>(input_msg->control_mode);\n   emergency_stop_msg_.data = static_cast<bool>(input_msg->vehicle_cmd.emergency);\n-  remote_cmd_time_ = ros::Time::now();\n \n-  if (command_mode_ == CommandMode::REMOTE)\n+  // Update Emergency Mode\n+  twist_gate_msg_.emergency = input_msg->vehicle_cmd.emergency;\n+\n+  if (command_mode_ == CommandMode::REMOTE && emergency_stop_msg_.data == false)\n   {\n     twist_gate_msg_.header.frame_id = input_msg->vehicle_cmd.header.frame_id;\n     twist_gate_msg_.header.stamp = input_msg->vehicle_cmd.header.stamp;\n@@ -266,7 +271,6 @@ void TwistGate::remote_cmd_callback(const remote_msgs_t::ConstPtr& input_msg)\n     twist_gate_msg_.gear = input_msg->vehicle_cmd.gear;\n     twist_gate_msg_.lamp_cmd = input_msg->vehicle_cmd.lamp_cmd;\n     twist_gate_msg_.mode = input_msg->vehicle_cmd.mode;\n-    twist_gate_msg_.emergency = input_msg->vehicle_cmd.emergency;\n     vehicle_cmd_pub_.publish(twist_gate_msg_);\n   }\n }"
        }
    ],
    "autowarefoundation/autoware/1703": [
        {
            "sha": "162f46f0bf918b13ff46c6e2dcce3552c239b4f7",
            "filename": "ros/src/common/libs/amathutils_lib/src/Amathutils.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/f596fe5eefe5728842ce5fe519dc4e8fb5764dab/ros%2Fsrc%2Fcommon%2Flibs%2Famathutils_lib%2Fsrc%2FAmathutils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/f596fe5eefe5728842ce5fe519dc4e8fb5764dab/ros%2Fsrc%2Fcommon%2Flibs%2Famathutils_lib%2Fsrc%2FAmathutils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcommon%2Flibs%2Famathutils_lib%2Fsrc%2FAmathutils.cpp?ref=f596fe5eefe5728842ce5fe519dc4e8fb5764dab",
            "patch": "@@ -14,17 +14,17 @@ geometry_msgs::Point getNearPtOnLine(const geometry_msgs::Point &_p, const geome\n \n   vnab.x = (_b.x - _a.x) / len;\n   vnab.y = (_b.y - _a.y) / len;\n-  vnab.z = 0;  //(_b.z - _a.z) / len;\n+  vnab.z = (_b.z - _a.z) / len;\n \n   vap.x = _p.x - _a.x;\n   vap.y = _p.y - _a.y;\n-  vap.z = 0;  //_p.z - _a.z;\n+  vap.z = _p.z - _a.z;\n \n-  double dist_ax = vnab.x * vap.x + vnab.y * vap.y + vnab.z + vap.z;\n+  double dist_ax = vnab.x * vap.x + vnab.y * vap.y + vnab.z * vap.z;\n \n   ret.x = _a.x + (vnab.x * dist_ax);\n   ret.y = _a.y + (vnab.y * dist_ax);\n-  ret.z = 0;  //_a.z + (vnab.z * dist_ax);\n+  ret.z = _a.z + (vnab.z * dist_ax);\n \n   return ret;\n }"
        }
    ],
    "autowarefoundation/autoware/1706": [
        {
            "sha": "e82b28e110f5828271a2fdba85e0e7e971e7385c",
            "filename": "docs/quick_start/my_mission_planning.launch",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/4af60cd97c36986eb1b22d4969e4291e75424703/docs%2Fquick_start%2Fmy_mission_planning.launch",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/4af60cd97c36986eb1b22d4969e4291e75424703/docs%2Fquick_start%2Fmy_mission_planning.launch",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docs%2Fquick_start%2Fmy_mission_planning.launch?ref=4af60cd97c36986eb1b22d4969e4291e75424703",
            "patch": "@@ -17,7 +17,7 @@\n \n   <!-- waypoint_loader -->\n   <node pkg=\"rostopic\" type=\"rostopic\" name=\"config_waypoint_loader_rostopic\"\n-        args=\"pub -l /config/waypoint_loader autoware_msgs/ConfigWaypointLoader\n+        args=\"pub -l /config/waypoint_loader autoware_config_msgs/ConfigWaypointLoader\n         '{multi_lane_csv: '$(env HOME)/.autoware/data/path/moriyama_path.txt', replanning_mode: false, velocity_max: 20.0, velocity_min: 4.0, accel_limit: 0.98, decel_limit: 0.98, radius_thresh: 20.0, radius_min: 6.0, resample_mode: true, resample_interval: 1.0, velocity_offset: 4, end_point_offset: 5}' \"\n   />\n   <include file=\"$(find waypoint_maker)/launch/waypoint_loader.launch\" />"
        }
    ],
    "autowarefoundation/autoware/1775": [
        {
            "sha": "b94d015eb75d0dfc671a67ca33baf704b525475c",
            "filename": "ros/src/computing/planning/common/lib/openplanner/op_planner/src/DecisionMaker.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/f4edb099d3041f070d38c84ecccfa17d895085d0/ros%2Fsrc%2Fcomputing%2Fplanning%2Fcommon%2Flib%2Fopenplanner%2Fop_planner%2Fsrc%2FDecisionMaker.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/f4edb099d3041f070d38c84ecccfa17d895085d0/ros%2Fsrc%2Fcomputing%2Fplanning%2Fcommon%2Flib%2Fopenplanner%2Fop_planner%2Fsrc%2FDecisionMaker.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fcommon%2Flib%2Fopenplanner%2Fop_planner%2Fsrc%2FDecisionMaker.cpp?ref=f4edb099d3041f070d38c84ecccfa17d895085d0",
            "patch": "@@ -381,7 +381,7 @@ void DecisionMaker::InitBehaviorStates()\n \n \t\tdouble deceleration_critical = 0;\n \t\tdouble inv_time = 2.0*((beh.followDistance- (critical_long_front_distance+m_params.additionalBrakingDistance))-CurrStatus.speed);\n-\t\tif(inv_time == 0)\n+\t\tif(inv_time <= 0)\n \t\t\tdeceleration_critical = m_CarInfo.max_deceleration;\n \t\telse\n \t\t\tdeceleration_critical = CurrStatus.speed*CurrStatus.speed/inv_time;"
        }
    ],
    "autowarefoundation/autoware/1780": [
        {
            "sha": "88c94c0366b27424224eb9673e14cdc2bebe7194",
            "filename": "ros/src/computing/perception/semantics/packages/object_map/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/f44622a033d2f9d06deba45a086025d0d54c043a/ros%2Fsrc%2Fcomputing%2Fperception%2Fsemantics%2Fpackages%2Fobject_map%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/f44622a033d2f9d06deba45a086025d0d54c043a/ros%2Fsrc%2Fcomputing%2Fperception%2Fsemantics%2Fpackages%2Fobject_map%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fsemantics%2Fpackages%2Fobject_map%2Fpackage.xml?ref=f44622a033d2f9d06deba45a086025d0d54c043a",
            "patch": "@@ -33,6 +33,7 @@\n     <run_depend>grid_map_ros</run_depend>\n     <run_depend>grid_map_cv</run_depend>\n     <run_depend>grid_map_msgs</run_depend>\n+    <run_depend>grid_map_visualization</run_depend>\n     <run_depend>autoware_msgs</run_depend>\n     <run_depend>vector_map</run_depend>\n     <run_depend>libqt5-core</run_depend>"
        }
    ],
    "autowarefoundation/autoware/1817": [
        {
            "sha": "fcdd0680d42cdd8bd392759d889a77d4542b15a2",
            "filename": "ros/src/util/packages/runtime_manager/scripts/runtime_manager_dialog.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/96ba014b218bd75708c602b0181a29637a4eced9/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/96ba014b218bd75708c602b0181a29637a4eced9/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fruntime_manager_dialog.py?ref=96ba014b218bd75708c602b0181a29637a4eced9",
            "patch": "@@ -3003,7 +3003,7 @@ def size_arg_get(self):\n \t\t\tmb = 0\n \t\tif mb <= 0:\n \t\t\ttc.SetValue('')\n-\t\treturn [ '--size=' + str(int(mb * 1024 * 1024)) ] if mb > 0 else []\n+\t\treturn [ '--size=' + str(int(mb)) ] if mb > 0 else []\n \n def set_size_gdic(dlg, gdic={}):\n \t(w, h) = dlg.GetSize()"
        }
    ],
    "autowarefoundation/autoware/1851": [
        {
            "sha": "f9769bfc946ce8d1c2810a41d096fa3940281c96",
            "filename": "docker/generic/Dockerfile.kinetic",
            "status": "modified",
            "additions": 3,
            "deletions": 4,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/7f28c22cd6a86092f9a09f39cb3f11a66a768c5b/docker%2Fgeneric%2FDockerfile.kinetic",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/7f28c22cd6a86092f9a09f39cb3f11a66a768c5b/docker%2Fgeneric%2FDockerfile.kinetic",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2Fgeneric%2FDockerfile.kinetic?ref=7f28c22cd6a86092f9a09f39cb3f11a66a768c5b",
            "patch": "@@ -112,10 +112,9 @@ RUN sudo rosdep init \\\n         && rosdep update \\\n         && echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc\n \n-# YOLO_V2\n-RUN cd && git clone https://github.com/pjreddie/darknet.git\n-RUN cd ~/darknet && git checkout 56d69e73aba37283ea7b9726b81afd2f79cd1134\n-RUN cd ~/darknet/data && wget https://pjreddie.com/media/files/yolo.weights\n+# Setting\n+RUN sudo ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1\n+ENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs/:$LD_LIBRARY_PATH\"\n \n # Install Autoware\n RUN cd && mkdir /home/$USERNAME/Autoware"
        }
    ],
    "autowarefoundation/autoware/1858": [
        {
            "sha": "f9769bfc946ce8d1c2810a41d096fa3940281c96",
            "filename": "docker/generic/Dockerfile.kinetic",
            "status": "modified",
            "additions": 3,
            "deletions": 4,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/7f28c22cd6a86092f9a09f39cb3f11a66a768c5b/docker%2Fgeneric%2FDockerfile.kinetic",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/7f28c22cd6a86092f9a09f39cb3f11a66a768c5b/docker%2Fgeneric%2FDockerfile.kinetic",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2Fgeneric%2FDockerfile.kinetic?ref=7f28c22cd6a86092f9a09f39cb3f11a66a768c5b",
            "patch": "@@ -112,10 +112,9 @@ RUN sudo rosdep init \\\n         && rosdep update \\\n         && echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc\n \n-# YOLO_V2\n-RUN cd && git clone https://github.com/pjreddie/darknet.git\n-RUN cd ~/darknet && git checkout 56d69e73aba37283ea7b9726b81afd2f79cd1134\n-RUN cd ~/darknet/data && wget https://pjreddie.com/media/files/yolo.weights\n+# Setting\n+RUN sudo ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1\n+ENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs/:$LD_LIBRARY_PATH\"\n \n # Install Autoware\n RUN cd && mkdir /home/$USERNAME/Autoware"
        }
    ],
    "autowarefoundation/autoware/1921": [
        {
            "sha": "03a67760c169558bf7abe7f71b9752084d9e2205",
            "filename": "ros/src/computing/planning/decision/packages/decision_maker/CMakeLists.txt",
            "status": "modified",
            "additions": 0,
            "deletions": 6,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/95b9d8354cd2641c26cc2138362b7535f85aea0a/ros%2Fsrc%2Fcomputing%2Fplanning%2Fdecision%2Fpackages%2Fdecision_maker%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/95b9d8354cd2641c26cc2138362b7535f85aea0a/ros%2Fsrc%2Fcomputing%2Fplanning%2Fdecision%2Fpackages%2Fdecision_maker%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fdecision%2Fpackages%2Fdecision_maker%2FCMakeLists.txt?ref=95b9d8354cd2641c26cc2138362b7535f85aea0a",
            "patch": "@@ -82,9 +82,3 @@ install(DIRECTORY launch\n         DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}/launch/\n         PATTERN \".svn\" EXCLUDE\n         )\n-\n-# Install config files\n-foreach(dir config)\n-  install(DIRECTORY ${dir}/\n-    DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/${dir})\n-endforeach(dir)"
        }
    ],
    "autowarefoundation/autoware/1956": [
        {
            "sha": "04d034639c6831ba743b2ef93099713f032ccad9",
            "filename": "ros/src/system/autoware_health_checker/CMakeLists.txt",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/57ee3d63427023e0d89e7f59be6aae1be94f7c0c/ros%2Fsrc%2Fsystem%2Fautoware_health_checker%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/57ee3d63427023e0d89e7f59be6aae1be94f7c0c/ros%2Fsrc%2Fsystem%2Fautoware_health_checker%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fsystem%2Fautoware_health_checker%2FCMakeLists.txt?ref=57ee3d63427023e0d89e7f59be6aae1be94f7c0c",
            "patch": "@@ -13,7 +13,7 @@ find_package(catkin REQUIRED COMPONENTS\n catkin_package(\n   INCLUDE_DIRS include\n   LIBRARIES node_status_publisher\n-#  CATKIN_DEPENDS autoware_system_msgs roscpp\n+  CATKIN_DEPENDS autoware_system_msgs roscpp\n #  DEPENDS system_lib\n )\n \n@@ -28,20 +28,20 @@ add_library(node_status_publisher\n   src/rate_checker.cpp\n )\n target_link_libraries(node_status_publisher ${catkin_LIBRARIES})\n-add_dependencies(node_status_publisher ${catkin_EXPORTED_TARGETS})\n+add_dependencies(node_status_publisher ${catkin_EXPORTED_TARGETS} autoware_system_msgs_generate_messages_cpp)\n \n add_library(system_status_subscriber\n   src/system_status_subscriber.cpp\n )\n target_link_libraries(system_status_subscriber ${catkin_LIBRARIES})\n-add_dependencies(system_status_subscriber ${catkin_EXPORTED_TARGETS})\n+add_dependencies(system_status_subscriber ${catkin_EXPORTED_TARGETS} autoware_system_msgs_generate_messages_cpp)\n \n add_executable(health_aggregator\n   src/health_aggregator_node.cpp\n   src/health_aggregator.cpp\n )\n target_link_libraries(health_aggregator ${catkin_LIBRARIES})\n-add_dependencies(health_aggregator ${catkin_EXPORTED_TARGETS})\n+add_dependencies(health_aggregator ${catkin_EXPORTED_TARGETS} autoware_system_msgs_generate_messages_cpp)\n \n # CPP Execution programs\n set(CPP_EXEC_NAMES health_aggregator)"
        }
    ],
    "autowarefoundation/autoware/2000": [
        {
            "sha": "06704298aabb0fb3e55797c9956ff18ab863b637",
            "filename": "ros/src/computing/perception/detection/vision_detector/packages/vision_dpm_ttic_detect/CMakeLists.txt",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/fa668b78f1799a5001efb92e8939f0e1a01743e6/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fvision_detector%2Fpackages%2Fvision_dpm_ttic_detect%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/fa668b78f1799a5001efb92e8939f0e1a01743e6/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fvision_detector%2Fpackages%2Fvision_dpm_ttic_detect%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Fvision_detector%2Fpackages%2Fvision_dpm_ttic_detect%2FCMakeLists.txt?ref=fa668b78f1799a5001efb92e8939f0e1a01743e6",
            "patch": "@@ -44,6 +44,8 @@ include_directories(\n \n IF (CUDA_FOUND)\n     include_directories(${CUDA_INCLUDE_DIRS})\n+    \n+    set(CMAKE_CXX_FLAGS \"-lcuda ${CMAKE_CXX_FLAGS}\")\n \n     IF (\"${CMAKE_SYSTEM_PROCESSOR}\" MATCHES \"^arm\")\n         link_directories(/usr/lib/arm-linux-gnueabihf/tegra)"
        }
    ],
    "autowarefoundation/autoware/2089": [
        {
            "sha": "475eb9a248d7c623c6bbbcf2295ef4155b3d6e4c",
            "filename": "ros/src/computing/perception/detection/lidar_detector/packages/lidar_apollo_cnn_seg_detect/include/cnn_segmentation.h",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/255ebc9098a217a8cc8aa4f8b60e90cde0a24e4a/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flidar_detector%2Fpackages%2Flidar_apollo_cnn_seg_detect%2Finclude%2Fcnn_segmentation.h",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/255ebc9098a217a8cc8aa4f8b60e90cde0a24e4a/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flidar_detector%2Fpackages%2Flidar_apollo_cnn_seg_detect%2Finclude%2Fcnn_segmentation.h",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fperception%2Fdetection%2Flidar_detector%2Fpackages%2Flidar_apollo_cnn_seg_detect%2Finclude%2Fcnn_segmentation.h?ref=255ebc9098a217a8cc8aa4f8b60e90cde0a24e4a",
            "patch": "@@ -17,6 +17,7 @@\n #define CNN_SEGMENTATION_H\n \n #include <chrono>\n+#include <numeric>\n \n #include <ros/ros.h>\n "
        }
    ],
    "autowarefoundation/autoware/2142": [
        {
            "sha": "fccc925bb7ad35ab1a7a98aef19504a26777bb9c",
            "filename": "ros/src/util/packages/runtime_manager/scripts/computing.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/b69b4992b6c0a3beba8dd216fed31e1be680819d/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/b69b4992b6c0a3beba8dd216fed31e1be680819d/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml?ref=b69b4992b6c0a3beba8dd216fed31e1be680819d",
            "patch": "@@ -1011,7 +1011,7 @@ params :\n       label   : 'output topic'\n       kind    : topic\n       topic_type : autoware_msgs/DetectedObjectArray\n-      v       : /detection/objects\n+      v       : /detection/object_tracker/objects\n       cmd_param :\n         dash        : ''\n         delim       : ':='"
        }
    ],
    "autowarefoundation/autoware/2219": [
        {
            "sha": "e740b4be457e19d3098d72fc6e7d10ddc47a66c9",
            "filename": "ros/src/computing/planning/motion/packages/waypoint_maker/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/018635851957d2114c4efacff0ccf2a937c5ebf9/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_maker%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/018635851957d2114c4efacff0ccf2a937c5ebf9/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_maker%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_maker%2FCMakeLists.txt?ref=018635851957d2114c4efacff0ccf2a937c5ebf9",
            "patch": "@@ -84,6 +84,7 @@ install(TARGETS\n         waypoint_clicker\n         waypoint_marker_publisher\n         waypoint_velocity_visualizer\n+        waypoint_extractor\n         ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n         LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n         RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}"
        }
    ],
    "autowarefoundation/autoware/2266": [
        {
            "sha": "bb9c196a4907f6b652dd1f97d60ef614ea0c0701",
            "filename": "ros/src/util/packages/runtime_manager/scripts/computing.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/8dd05e8e636b0d9e446dd6eb7325dac79c9c5a3d/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/8dd05e8e636b0d9e446dd6eb7325dac79c9c5a3d/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Futil%2Fpackages%2Fruntime_manager%2Fscripts%2Fcomputing.yaml?ref=8dd05e8e636b0d9e446dd6eb7325dac79c9c5a3d",
            "patch": "@@ -1744,7 +1744,7 @@ params :\n       label : Deceleration Range (m)\n       min   : 0\n       max   : 10\n-      v     : 0\n+      v     : 0.0\n     - name  : threshold_points\n       desc  : threshold_points desc sample\n       label : Points Threshold"
        }
    ],
    "autowarefoundation/autoware/2268": [
        {
            "sha": "fc9c4bb2afdb52ffbe8a56019753e818c735566d",
            "filename": "ros/colcon_release_cross",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/fc6a104d7babbe37a37649c049d4ab28e1da3a08/ros%2Fcolcon_release_cross",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/fc6a104d7babbe37a37649c049d4ab28e1da3a08/ros%2Fcolcon_release_cross",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fcolcon_release_cross?ref=fc6a104d7babbe37a37649c049d4ab28e1da3a08",
            "patch": "@@ -52,7 +52,7 @@ END\n     echo \"Using toolchain file: '${AUTOWARE_TOOLCHAIN_FILE_PATH}''\"\n     AUTOWARE_SYSROOT=/sysroot/${AUTOWARE_TARGET_PLATFORM}\n \n-    AUTOWARE_DOCKER_DATE=20190102\n+    AUTOWARE_DOCKER_DATE=20190211\n \n     docker container run \\\n         -it \\"
        }
    ],
    "autowarefoundation/autoware/2269": [
        {
            "sha": "27bd05bc6c762b3ad8c9bb85f678d4b7ce7a27c5",
            "filename": "ros/src/simulation/gazebo_simulator/worlds/external/osrf_citysim",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": null,
            "raw_url": null,
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fsimulation%2Fgazebo_simulator%2Fworlds%2Fexternal%2Fosrf_citysim?ref=97f1b488651f4df8eb9ab97f655cbf2c72cceeef",
            "patch": "@@ -1 +1 @@\n-Subproject commit 53b8483d098999298498854f3795a9f01c5e8828\n+Subproject commit 27bd05bc6c762b3ad8c9bb85f678d4b7ce7a27c5"
        }
    ],
    "autowarefoundation/autoware/2272": [
        {
            "sha": "42082f58aa3b6cf3ad0a8db26b870c97161a23fc",
            "filename": "ros/src/computing/planning/motion/packages/waypoint_planner/src/velocity_set/velocity_set.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/deb87d9e1ddf0a3c92221b9517ee9155ed3b739c/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_planner%2Fsrc%2Fvelocity_set%2Fvelocity_set.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/deb87d9e1ddf0a3c92221b9517ee9155ed3b739c/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_planner%2Fsrc%2Fvelocity_set%2Fvelocity_set.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ros%2Fsrc%2Fcomputing%2Fplanning%2Fmotion%2Fpackages%2Fwaypoint_planner%2Fsrc%2Fvelocity_set%2Fvelocity_set.cpp?ref=deb87d9e1ddf0a3c92221b9517ee9155ed3b739c",
            "patch": "@@ -580,7 +580,7 @@ int main(int argc, char** argv)\n     if (crosswalk.loaded_all && !crosswalk.set_points)\n       crosswalk.setCrossWalkPoints();\n \n-    if (!vs_info.getSetPose() || !vs_path.getSetPath())\n+    if (!vs_info.getSetPose() || !vs_path.getSetPath() || vs_path.getPrevWaypointsSize() == 0)\n     {\n       loop_rate.sleep();\n       continue;"
        }
    ],
    "autowarefoundation/autoware/2409": [
        {
            "sha": "ec2124a5939fc521076c713347a546338aff54fa",
            "filename": "README.md",
            "status": "modified",
            "additions": 18,
            "deletions": 18,
            "changes": 36,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/3482a53fd859408fc928a4fca9e8d7e4045a395a/README.md",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/3482a53fd859408fc928a4fca9e8d7e4045a395a/README.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/README.md?ref=3482a53fd859408fc928a4fca9e8d7e4045a395a",
            "patch": "@@ -1,4 +1,4 @@\n-[![Autoware.AI](docs/images/Autoware.AI-Logo-Typo-right.png)](https://github.com/Autoware-AI/autoware.ai)\n+[![Autoware.AI](docs/images/Autoware.AI-Logo-Typo-right.png)](https://github.com/autowarefoundation/autoware.ai)\n \n ## Announcement on End-of-Life on Autoware.AI and Transition to ROS2\n As some of the users may know, the Autoware Foundation is currently developing [Autoware Core/Universe](https://github.com/autowarefoundation/autoware), which is ROS2 version of Autoware. In order to focus our resources, the Technical Steering Committee has decided on the end-of-life date for Autoware.AI by the end of 2022 as [announced in 2020](https://discourse.ros.org/t/end-of-life-dates-for-autoware-ai/13750).\n@@ -8,25 +8,25 @@ After the end-of-life, no releases will be made and no merge requests accepted.\n **Please be aware that we do NOT stop development of Autoware**, and we are just transitioning to ROS2 based Autoware for future development. We encourage any current and future contributors to consider using/contributing to Autoware Core/Universe rather than Autoware.AI.\n \n ---\n-![Native CI workflow](https://github.com/Autoware-AI/autoware.ai/workflows/Native%20CI%20workflow/badge.svg) ![CUDA CI workflow](https://github.com/Autoware-AI/autoware.ai/workflows/CUDA%20CI%20workflow/badge.svg) ![Cross CI workflow](https://github.com/Autoware-AI/autoware.ai/workflows/Cross%20CI%20workflow/badge.svg)\n+![Native CI workflow](https://github.com/autowarefoundation/autoware.ai/workflows/Native%20CI%20workflow/badge.svg) ![CUDA CI workflow](https://github.com/autowarefoundation/autoware.ai/workflows/CUDA%20CI%20workflow/badge.svg) ![Cross CI workflow](https://github.com/autowarefoundation/autoware.ai/workflows/Cross%20CI%20workflow/badge.svg)\n \n ## What Is Autoware\n \n [Autoware](https://www.autoware.org) is the world's first \"all-in-one\" open-source software for self-driving vehicles. The capabilities of Autoware are primarily well-suited for urban cities, but highways, freeways, mesomountaineous regions, and geofenced areas can be also covered. The code base of Autoware is protected by the Apache 2 License. Please use it at your own discretion. For safe use, we provide a ROSBAG-based simulation environment for those who do not own real autonomous vehicles. If you plan to use Autoware with real autonomous vehicles, **please formulate safety measures and assessment of risk before field testing.**\n \n-You may refer to [Autoware Wiki](https://github.com/Autoware-AI/autoware.ai/wiki/home) for **Users Guide** and **Developers Guide**.\n+You may refer to [Autoware Wiki](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/home) for **Users Guide** and **Developers Guide**.\n \n \n [![Autoware\n-Overview](docs/images/autoware_overview.png)](https://github.com/Autoware-AI/autoware.ai/wiki/Overview)\n+Overview](docs/images/autoware_overview.png)](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Overview)\n \n-Autoware provides a rich set of self-driving modules composed of sensing, computing, and actuation capabilities. An overview of those capabilities is described [here](https://github.com/Autoware-AI/autoware.ai/wiki/Overview). Keywords include *Localization, Mapping, Object Detection & Tracking, Traffic Light Recognition, Mission & Motion Planning, Trajectory Generation, Lane Detection & Selection, Vehicle Control, Sensor Fusion, Cameras, LiDARs, RADARs, Deep Learning, Rule-based System, Connected Navigation, Logging, Virtual Reality, and so on*.\n+Autoware provides a rich set of self-driving modules composed of sensing, computing, and actuation capabilities. An overview of those capabilities is described [here](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Overview). Keywords include *Localization, Mapping, Object Detection & Tracking, Traffic Light Recognition, Mission & Motion Planning, Trajectory Generation, Lane Detection & Selection, Vehicle Control, Sensor Fusion, Cameras, LiDARs, RADARs, Deep Learning, Rule-based System, Connected Navigation, Logging, Virtual Reality, and so on*.\n \n Free manuals can be also found at [Autoware-Manuals](https://github.com/CPFL/Autoware-Manuals). You are encouraged to contribute to the maintenance of these manuals. Thank you for your cooperation!\n \n ## Getting Started\n \n-[![Autoware Demo](docs/images/autoware_demo.png)](https://github.com/Autoware-AI/autoware.ai/wiki/Demo)\n+[![Autoware Demo](docs/images/autoware_demo.png)](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Demo)\n \n ### Recommended System Specifications\n \n@@ -36,19 +36,19 @@ Free manuals can be also found at [Autoware-Manuals](https://github.com/CPFL/Aut\n \n ### Users Guide\n \n-1. [Installation](https://github.com/Autoware-AI/autoware.ai/wiki/Installation)\n-    1. [Docker](https://github.com/Autoware-AI/autoware.ai/wiki/Docker)\n-    1. [Source](https://github.com/Autoware-AI/autoware.ai/wiki/Source-Build)\n-1. [Demo](https://github.com/Autoware-AI/autoware.ai/wiki/ROSBAG-Demo)\n-1. [Field Test](https://github.com/Autoware-AI/autoware.ai/wiki/Field-Test)\n-1. [Simulation Test](https://github.com/Autoware-AI/autoware.ai/wiki/Simulation-Demo)\n-1. [Videos](https://github.com/Autoware-AI/autoware.ai/wiki/Videos)\n+1. [Installation](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Installation)\n+    1. [Docker](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Docker)\n+    1. [Source](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Source-Build)\n+1. [Demo](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/ROSBAG-Demo)\n+1. [Field Test](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Field-Test)\n+1. [Simulation Test](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Simulation-Demo)\n+1. [Videos](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Videos)\n \n ### Developers Guide\n \n-1. [Contribution Rules](https://github.com/Autoware-AI/autoware.ai/wiki/Contributing-to-Autoware) (**Must Read**)\n-1. [Overview](https://github.com/Autoware-AI/autoware.ai/wiki/Overvieww)\n-1. [Specification](https://github.com/Autoware-AI/autoware.ai/wiki/Specification)\n+1. [Contribution Rules](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Contributing-to-Autoware) (**Must Read**)\n+1. [Overview](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Overvieww)\n+1. [Specification](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Specification)\n \n \n ## Research Papers for Citation\n@@ -77,15 +77,15 @@ You may create 3D map data through Tier IV's [Map Tools](https://maptools.tier4.\n \n ## License\n \n-Autoware is provided under the [Apache 2 License](https://github.com/Autoware-AI/autoware.ai/blob/master/LICENSE).\n+Autoware is provided under the [Apache 2 License](https://github.com/autowarefoundation/autoware.ai/blob/master/LICENSE).\n \n ## Contact\n \n [Autoware Discourse](https://discourse.ros.org/c/autoware)\n \n [Autoware Developers Discord Team](https://autoware.herokuapp.com/)\n \n-Please see the [Support Guidelines](https://github.com/Autoware-AI/autoware.ai/wiki/Support-guidelines) for more details about getting help.\n+Please see the [Support Guidelines](https://github.com/autowarefoundation/autoware_ai_documentation/wiki/Support-guidelines) for more details about getting help.\n \n ***\n <div align=\"center\"><img src=\"docs/images/autoware_logo_1.png\" width=\"400\"/></div>"
        }
    ],
    "autowarefoundation/autoware/2728": [
        {
            "sha": "c1b8057b4d82b1f7dfd9aaef465a5dab043bb3ec",
            "filename": "docker/autoware-universe/Dockerfile",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/a2e16005f9bac2b65c008deda3e81c932c11f165/docker%2Fautoware-universe%2FDockerfile",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/a2e16005f9bac2b65c008deda3e81c932c11f165/docker%2Fautoware-universe%2FDockerfile",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2Fautoware-universe%2FDockerfile?ref=a2e16005f9bac2b65c008deda3e81c932c11f165",
            "patch": "@@ -38,7 +38,7 @@ RUN --mount=type=ssh \\\n ## Clean up unnecessary files\n RUN rm -rf \\\n   \"$HOME\"/.cache \\\n-  /etc/apt/sources.list.d/cuda.list \\\n+  /etc/apt/sources.list.d/cuda*.list \\\n   /etc/apt/sources.list.d/docker.list \\\n   /etc/apt/sources.list.d/nvidia-docker.list\n "
        }
    ],
    "autowarefoundation/autoware/2732": [
        {
            "sha": "f9186843b2227c3c681e4b7319439e2da56f6aa5",
            "filename": "docker/README.md",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/e4bbdc6b04658ccc1cee6797a90dff9fa7f1319a/docker%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/e4bbdc6b04658ccc1cee6797a90dff9fa7f1319a/docker%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2FREADME.md?ref=e4bbdc6b04658ccc1cee6797a90dff9fa7f1319a",
            "patch": "@@ -32,6 +32,8 @@ docker run --rm -it \\\n \n To run with `rocker`:\n \n+If you use `rocker<=0.2.9`, add an option of `--env NVIDIA_DRIVER_CAPABILITIES=\"\"` or `--env NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics` to avoid the CUDA environment error. For more details, see [this issue](https://github.com/autowarefoundation/autoware/issues/2452).\n+\n ```bash\n rocker --nvidia --x11 --user \\\n  --volume {path_to_your_workspace} \\"
        }
    ],
    "autowarefoundation/autoware/2736": [
        {
            "sha": "8a7ad19ce05e6a74cdd40f5dcb53d8de0547b966",
            "filename": "docker/autoware-universe/Dockerfile",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/76a03ff1bd3a4f08c1679beb61d95758cd335ea3/docker%2Fautoware-universe%2FDockerfile",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/76a03ff1bd3a4f08c1679beb61d95758cd335ea3/docker%2Fautoware-universe%2FDockerfile",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2Fautoware-universe%2FDockerfile?ref=76a03ff1bd3a4f08c1679beb61d95758cd335ea3",
            "patch": "@@ -42,6 +42,12 @@ RUN rm -rf \\\n   /etc/apt/sources.list.d/docker.list \\\n   /etc/apt/sources.list.d/nvidia-docker.list\n \n+## Register Vulkan GPU vendors\n+ADD \"https://gitlab.com/nvidia/container-images/vulkan/raw/dc389b0445c788901fda1d85be96fd1cb9410164/nvidia_icd.json\" /etc/vulkan/icd.d/nvidia_icd.json\n+RUN chmod 644 /etc/vulkan/icd.d/nvidia_icd.json\n+ADD \"https://gitlab.com/nvidia/container-images/opengl/raw/5191cf205d3e4bb1150091f9464499b076104354/glvnd/runtime/10_nvidia.json\" /etc/glvnd/egl_vendor.d/10_nvidia.json\n+RUN chmod 644 /etc/glvnd/egl_vendor.d/10_nvidia.json\n+\n ## Create entrypoint\n # hadolint ignore=DL3059\n RUN echo \"source /opt/ros/${ROS_DISTRO}/setup.bash\" > /etc/bash.bashrc"
        }
    ],
    "autowarefoundation/autoware/2810": [
        {
            "sha": "c81059edb9b18ef4fe30e8cb5f0c89e06db8ca21",
            "filename": "ansible/roles/tensorrt/tasks/main.yaml",
            "status": "modified",
            "additions": 0,
            "deletions": 4,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/136ed54416a0e59c9f0fe51bc0f7f8b4d5c3f65e/ansible%2Froles%2Ftensorrt%2Ftasks%2Fmain.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/136ed54416a0e59c9f0fe51bc0f7f8b4d5c3f65e/ansible%2Froles%2Ftensorrt%2Ftasks%2Fmain.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ansible%2Froles%2Ftensorrt%2Ftasks%2Fmain.yaml?ref=136ed54416a0e59c9f0fe51bc0f7f8b4d5c3f65e",
            "patch": "@@ -8,12 +8,10 @@\n       - libnvinfer-plugin8={{ tensorrt_version }}\n       - libnvparsers8={{ tensorrt_version }}\n       - libnvonnxparsers8={{ tensorrt_version }}\n-      - libnvinfer-bin={{ tensorrt_version }}\n       - libnvinfer-dev={{ tensorrt_version }}\n       - libnvinfer-plugin-dev={{ tensorrt_version }}\n       - libnvparsers-dev={{ tensorrt_version }}\n       - libnvonnxparsers-dev={{ tensorrt_version }}\n-      - libnvinfer-samples={{ tensorrt_version }}\n     allow_downgrade: true\n     update_cache: true\n \n@@ -30,9 +28,7 @@\n     - libnvinfer-plugin8\n     - libnvparsers8\n     - libnvonnxparsers8\n-    - libnvinfer-bin\n     - libnvinfer-dev\n     - libnvinfer-plugin-dev\n     - libnvparsers-dev\n     - libnvonnxparsers-dev\n-    - libnvinfer-samples"
        }
    ],
    "autowarefoundation/autoware/2823": [
        {
            "sha": "f9210b66546b5f764d03779774f694ae8fda4625",
            "filename": ".clang-tidy",
            "status": "modified",
            "additions": 7,
            "deletions": 3,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/8106858507ee02c8d863d4696688d5c2fa7b447b/.clang-tidy",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/8106858507ee02c8d863d4696688d5c2fa7b447b/.clang-tidy",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/.clang-tidy?ref=8106858507ee02c8d863d4696688d5c2fa7b447b",
            "patch": "@@ -432,16 +432,20 @@ CheckOptions:\n     value: lower_case\n   - key: readability-identifier-naming.ClassCase\n     value: CamelCase\n-  - key: readability-identifier-naming.PrivateMemberPrefix\n-    value: \"\"\n+  - key: readability-identifier-naming.PrivateMemberSuffix\n+    value: _\n   - key: readability-identifier-naming.StructCase\n     value: CamelCase\n   - key: readability-identifier-naming.FunctionCase\n     value: lower_case\n   - key: readability-identifier-naming.VariableCase\n     value: lower_case\n   - key: readability-identifier-naming.GlobalConstantCase\n-    value: UPPER_CASE\n+    value: lower_case\n+  - key: readability-identifier-naming.GlobalConstantPrefix\n+    value: g_\n+  - key: readability-identifier-naming.ConstexprVariableCase\n+    value: lower_case\n   - key: readability-inconsistent-declaration-parameter-name.IgnoreMacros\n     value: \"1\"\n   - key: readability-inconsistent-declaration-parameter-name.Strict"
        }
    ],
    "autowarefoundation/autoware/2928": [
        {
            "sha": "af7090c6ed87882601f670e47433295c6c60f795",
            "filename": "setup-dev-env.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/123502d1dae35b7a0244c82e1934ab3843375c6f/setup-dev-env.sh",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/123502d1dae35b7a0244c82e1934ab3843375c6f/setup-dev-env.sh",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/setup-dev-env.sh?ref=123502d1dae35b7a0244c82e1934ab3843375c6f",
            "patch": "@@ -114,7 +114,7 @@ if ! (command -v git >/dev/null 2>&1); then\n fi\n \n # Install pipx for ansible\n-if ! (python3 -m pipx >/dev/null 2>&1); then\n+if ! (python3 -m pipx --version >/dev/null 2>&1); then\n     sudo apt-get -y update\n     sudo apt-get -y install python3-pip python3-venv\n     python3 -m pip install --user pipx"
        }
    ],
    "autowarefoundation/autoware/2986": [
        {
            "sha": "8a980676406f4c5f4926b35d1769dbc692adfc7a",
            "filename": "ansible/roles/cuda/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/bd2ec10bd9068052a7d83b933d643071f4cf2209/ansible%2Froles%2Fcuda%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/bd2ec10bd9068052a7d83b933d643071f4cf2209/ansible%2Froles%2Fcuda%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ansible%2Froles%2Fcuda%2FREADME.md?ref=bd2ec10bd9068052a7d83b933d643071f4cf2209",
            "patch": "@@ -24,7 +24,7 @@ sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600\n sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub\n sudo add-apt-repository \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /\"\n sudo apt-get update\n-cuda_version=11-4\n+cuda_version=11-6\n sudo apt install cuda-${cuda_version} --no-install-recommends\n ```\n "
        }
    ],
    "autowarefoundation/autoware/3105": [
        {
            "sha": "95995293ddf95346f9d3e6f3d8b3d752b59ac540",
            "filename": ".webauto-ci.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/d4d1121647fc7e62b69d75349ab15036509d33a0/.webauto-ci.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/d4d1121647fc7e62b69d75349ab15036509d33a0/.webauto-ci.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/.webauto-ci.yaml?ref=d4d1121647fc7e62b69d75349ab15036509d33a0",
            "patch": "@@ -3,7 +3,7 @@ version: 2\n artifacts:\n   - name: main\n     build:\n-      type: tier4/iv/main/amd64/v2\n+      type: tier4/universe/main/amd64/v1\n \n simulations:\n   - name: lexus_planning_sim"
        }
    ],
    "autowarefoundation/autoware/3239": [
        {
            "sha": "38a998158d75aa161ddebb400ae6f9eac3aaff71",
            "filename": "docker/autoware-universe/Dockerfile",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/4cb8bc9fdb2b92cd99ed14e8507af2125f513ad6/docker%2Fautoware-universe%2FDockerfile",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/4cb8bc9fdb2b92cd99ed14e8507af2125f513ad6/docker%2Fautoware-universe%2FDockerfile",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2Fautoware-universe%2FDockerfile?ref=4cb8bc9fdb2b92cd99ed14e8507af2125f513ad6",
            "patch": "@@ -43,10 +43,10 @@ RUN rm -rf \\\n   /etc/apt/sources.list.d/nvidia-docker.list\n \n ## Register Vulkan GPU vendors\n-ADD \"https://gitlab.com/nvidia/container-images/vulkan/raw/dc389b0445c788901fda1d85be96fd1cb9410164/nvidia_icd.json\" /etc/vulkan/icd.d/nvidia_icd.json\n-RUN chmod 644 /etc/vulkan/icd.d/nvidia_icd.json\n-ADD \"https://gitlab.com/nvidia/container-images/opengl/raw/5191cf205d3e4bb1150091f9464499b076104354/glvnd/runtime/10_nvidia.json\" /etc/glvnd/egl_vendor.d/10_nvidia.json\n-RUN chmod 644 /etc/glvnd/egl_vendor.d/10_nvidia.json\n+RUN curl https://gitlab.com/nvidia/container-images/vulkan/raw/dc389b0445c788901fda1d85be96fd1cb9410164/nvidia_icd.json -o /etc/vulkan/icd.d/nvidia_icd.json \\\n+  && chmod 644 /etc/vulkan/icd.d/nvidia_icd.json\n+RUN curl https://gitlab.com/nvidia/container-images/opengl/raw/5191cf205d3e4bb1150091f9464499b076104354/glvnd/runtime/10_nvidia.json -o /etc/glvnd/egl_vendor.d/10_nvidia.json \\\n+  && chmod 644 /etc/glvnd/egl_vendor.d/10_nvidia.json\n \n ## Register OpenCL GPU vendors\n RUN mkdir -p /etc/OpenCL/vendors \\"
        }
    ],
    "autowarefoundation/autoware/3241": [
        {
            "sha": "fb5d7954406990bbc845e3e7199815fd46b95ae8",
            "filename": "docker/build.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/9a5ebf0cb27e06e24892e504b7c6aa58c53a13e2/docker%2Fbuild.sh",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/9a5ebf0cb27e06e24892e504b7c6aa58c53a13e2/docker%2Fbuild.sh",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2Fbuild.sh?ref=9a5ebf0cb27e06e24892e504b7c6aa58c53a13e2",
            "patch": "@@ -52,7 +52,7 @@ fi\n export BUILDKIT_STEP_LOG_MAX_SIZE=10000000\n \n set -x\n-docker buildx bake --load --progress=plain -f \"$SCRIPT_DIR/autoware-universe/docker-bake.hcl\" \\\n+docker buildx bake --no-cache --load --progress=plain -f \"$SCRIPT_DIR/autoware-universe/docker-bake.hcl\" \\\n     --set \"*.context=$WORKSPACE_ROOT\" \\\n     --set \"*.ssh=default\" \\\n     --set \"*.platform=$platform\" \\"
        }
    ],
    "autowarefoundation/autoware/3290": [
        {
            "sha": "7fe21367f45c4c3f1bae330e0f1b5c79196844e6",
            "filename": "setup-dev-env.sh",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/bfdb3440ae2a91c0cc69fc88636d0b80b5efcd56/setup-dev-env.sh",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/bfdb3440ae2a91c0cc69fc88636d0b80b5efcd56/setup-dev-env.sh",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/setup-dev-env.sh?ref=bfdb3440ae2a91c0cc69fc88636d0b80b5efcd56",
            "patch": "@@ -113,10 +113,15 @@ if ! (command -v git >/dev/null 2>&1); then\n     sudo apt-get -y install git\n fi\n \n+# Install pip for ansible\n+if ! (python3 -m pip --version >/dev/null 2>&1); then\n+    sudo apt-get -y update\n+    sudo apt-get -y install python3-pip python3-venv\n+fi\n+\n # Install pipx for ansible\n if ! (python3 -m pipx --version >/dev/null 2>&1); then\n     sudo apt-get -y update\n-    sudo apt-get -y install python3-pip python3-venv\n     python3 -m pip install --user pipx\n fi\n "
        }
    ],
    "autowarefoundation/autoware/3303": [
        {
            "sha": "3edf7085be4b64dca4bf4f61eda9319f32d5352c",
            "filename": "docker/build.sh",
            "status": "modified",
            "additions": 3,
            "deletions": 4,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/f44fdeed004b59c19b6ebf0d8886bb66d34b79bd/docker%2Fbuild.sh",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/f44fdeed004b59c19b6ebf0d8886bb66d34b79bd/docker%2Fbuild.sh",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2Fbuild.sh?ref=f44fdeed004b59c19b6ebf0d8886bb66d34b79bd",
            "patch": "@@ -37,10 +37,10 @@ fi\n \n # Set prebuilt options\n if [ \"$option_no_prebuilt\" = \"true\" ]; then\n-    targets=\"devel\"\n+    targets=(\"devel\")\n else\n     # default targets include devel and prebuilt\n-    targets=\"\"\n+    targets=()\n fi\n \n # Set platform\n@@ -69,9 +69,8 @@ docker buildx bake --no-cache --load --progress=plain -f \"$SCRIPT_DIR/autoware-u\n     --set \"*.platform=$platform\" \\\n     --set \"*.args.ROS_DISTRO=$rosdistro\" \\\n     --set \"*.args.BASE_IMAGE=$base_image\" \\\n-    --set \"*.args.PREBUILT_BASE_IMAGE=$prebuilt_base_image\" \\\n     --set \"*.args.SETUP_ARGS=$setup_args\" \\\n     --set \"devel.tags=ghcr.io/autowarefoundation/autoware-universe:$rosdistro-latest$image_name_suffix\" \\\n     --set \"prebuilt.tags=ghcr.io/autowarefoundation/autoware-universe:$rosdistro-latest-prebuilt$image_name_suffix\" \\\n-    \"$targets\"\n+    \"${targets[@]}\"\n set +x"
        }
    ],
    "autowarefoundation/autoware/3327": [
        {
            "sha": "803040ad41a498a6c2b2529543b52369d4f03cce",
            "filename": "docker/build.sh",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/907dc904df430462523dc259450f1c6595708937/docker%2Fbuild.sh",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/907dc904df430462523dc259450f1c6595708937/docker%2Fbuild.sh",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2Fbuild.sh?ref=907dc904df430462523dc259450f1c6595708937",
            "patch": "@@ -69,6 +69,7 @@ docker buildx bake --no-cache --load --progress=plain -f \"$SCRIPT_DIR/autoware-u\n     --set \"*.platform=$platform\" \\\n     --set \"*.args.ROS_DISTRO=$rosdistro\" \\\n     --set \"*.args.BASE_IMAGE=$base_image\" \\\n+    --set \"*.args.PREBUILT_BASE_IMAGE=$prebuilt_base_image\" \\\n     --set \"*.args.SETUP_ARGS=$setup_args\" \\\n     --set \"devel.tags=ghcr.io/autowarefoundation/autoware-universe:$rosdistro-latest$image_name_suffix\" \\\n     --set \"prebuilt.tags=ghcr.io/autowarefoundation/autoware-universe:$rosdistro-latest-prebuilt$image_name_suffix\" \\"
        }
    ],
    "autowarefoundation/autoware/3350": [
        {
            "sha": "a7e1465f0f962a2c16dc2655104257109d4388fc",
            "filename": "docker/autoware-universe/Dockerfile",
            "status": "modified",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/8c8a612cc7746e031bd29e16bf799ed1d938af1b/docker%2Fautoware-universe%2FDockerfile",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/8c8a612cc7746e031bd29e16bf799ed1d938af1b/docker%2Fautoware-universe%2FDockerfile",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/docker%2Fautoware-universe%2FDockerfile?ref=8c8a612cc7746e031bd29e16bf799ed1d938af1b",
            "patch": "@@ -55,6 +55,17 @@ RUN mkdir -p /etc/OpenCL/vendors \\\n   && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd \\\n   && chmod 644 /etc/OpenCL/vendors/nvidia.icd\n \n+## TODO: remove/re-evaluate after Ubuntu 24.04 is released\n+## Fix OpenGL issues (e.g. black screen in rviz2) due to old mesa lib in Ubuntu 22.04\n+## See https://github.com/autowarefoundation/autoware.universe/issues/2789\n+# hadolint ignore=DL3008\n+RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y software-properties-common \\\n+  && apt-add-repository ppa:kisak/kisak-mesa \\\n+  && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n+  libegl-mesa0 libegl1-mesa-dev libgbm-dev libgbm1 libgl1-mesa-dev libgl1-mesa-dri libglapi-mesa libglx-mesa0 \\\n+  && apt-get clean \\\n+  && rm -rf /var/lib/apt/lists/*\n+\n ## Create entrypoint\n # hadolint ignore=DL3059\n RUN echo \"source /opt/ros/${ROS_DISTRO}/setup.bash\" > /etc/bash.bashrc"
        }
    ],
    "autowarefoundation/autoware/3562": [
        {
            "sha": "2be6f0d21244ccdc8fffe4a1d559bf2b8195d3ae",
            "filename": "README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/f200674e861f99bf3b8d098d13f17c413ad239fa/README.md",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/f200674e861f99bf3b8d098d13f17c413ad239fa/README.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/README.md?ref=f200674e861f99bf3b8d098d13f17c413ad239fa",
            "patch": "@@ -36,7 +36,7 @@ To learn more about using or developing Autoware, refer to the [Autoware documen\n \n ## Using Autoware.AI\n \n-If you wish to use Autoware.AI, the previous version of Autoware based on ROS 1, switch to [autoware-ai](https://github.com/autowarefoundation/autoware.ai/tree/autoware-ai) branch. However, be aware that Autoware.AI will reach the end-of-life by the end of 2022, and we strongly recommend transitioning to Autoware Core/Universe for future use.\n+If you wish to use Autoware.AI, the previous version of Autoware based on ROS 1, switch to [autoware-ai](https://github.com/autowarefoundation/autoware_ai) repository. However, be aware that Autoware.AI has reached the end-of-life as of 2022, and we strongly recommend transitioning to Autoware Core/Universe for future use.\n \n ## Contributing\n "
        }
    ],
    "autowarefoundation/autoware/3593": [
        {
            "sha": "4df627edc1220ffa258542fe99416cfbaf8bf463",
            "filename": "autoware.repos",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/822df49192139929fe00dc4887c54e125508ccdf/autoware.repos",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/822df49192139929fe00dc4887c54e125508ccdf/autoware.repos",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/autoware.repos?ref=822df49192139929fe00dc4887c54e125508ccdf",
            "patch": "@@ -22,7 +22,7 @@ repositories:\n   universe/autoware.universe:\n     type: git\n     url: https://github.com/autowarefoundation/autoware.universe.git\n-    version: 7364443b24116158c29f71a3075eb6a8282ac651\n+    version: 715c6e4cd7bb4b2ae6565dcc9c2f775e4f2c0061 # dependencies fixes\n   universe/external/tier4_ad_api_adaptor:\n     type: git\n     url: https://github.com/tier4/tier4_ad_api_adaptor.git"
        }
    ],
    "autowarefoundation/autoware/3848": [
        {
            "sha": "36a234395dbb206bd0acf7bc34c6b8c5c52a98cf",
            "filename": "ansible/roles/artifacts/tasks/main.yaml",
            "status": "modified",
            "additions": 18,
            "deletions": 2,
            "changes": 20,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/bd6761d7067e3a1d6d42f3eb61fd8428667ad59e/ansible%2Froles%2Fartifacts%2Ftasks%2Fmain.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/bd6761d7067e3a1d6d42f3eb61fd8428667ad59e/ansible%2Froles%2Fartifacts%2Ftasks%2Fmain.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ansible%2Froles%2Fartifacts%2Ftasks%2Fmain.yaml?ref=bd6761d7067e3a1d6d42f3eb61fd8428667ad59e",
            "patch": "@@ -198,15 +198,31 @@\n     url: https://awf.ml.dev.web.auto/perception/models/yolox-sPlus-opt.onnx\n     dest: \"{{ data_dir }}/tensorrt_yolox/yolox-sPlus-opt.onnx\"\n     mode: \"644\"\n-    checksum: md5:bf3b0155351f90fcdca2626acbfd3bcf\n+    checksum: sha256:36b0832177b01e6b278e00c7369f1de71e616c36261cbae50f0753d41289da01\n \n - name: Download tensorrt_yolox/yolox-sPlus-opt.EntropyV2-calibration.table\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/yolox-sPlus-opt.EntropyV2-calibration.table\n     dest: \"{{ data_dir }}/tensorrt_yolox/yolox-sPlus-opt.EntropyV2-calibration.table\"\n     mode: \"644\"\n-    checksum: md5:c6e6f1999d5724a017516a956096701f\n+    checksum: sha256:b9e9d7da33342262ccaea4469b4d02b8abb32b6d7bf737f9e0883fece1b8f580\n+\n+- name: Download tensorrt_yolox/yolox-sPlus-T4-960x960-pseudo-finetune.onnx\n+  become: true\n+  ansible.builtin.get_url:\n+    url: https://awf.ml.dev.web.auto/perception/models/object_detection_yolox_s/v1/yolox-sPlus-T4-960x960-pseudo-finetune.onnx\n+    dest: \"{{ data_dir }}/tensorrt_yolox/yolox-sPlus-T4-960x960-pseudo-finetune.onnx\"\n+    mode: \"644\"\n+    checksum: sha256:f5054e8a890c3be86dc1b4b89a5a36fb2279d4f6110b0159e793be062641bf65\n+\n+- name: Download tensorrt_yolox/yolox-sPlus-T4-960x960-pseudo-finetune.EntropyV2-calibration.table\n+  become: true\n+  ansible.builtin.get_url:\n+    url: https://awf.ml.dev.web.auto/perception/models/object_detection_yolox_s/v1/yolox-sPlus-T4-960x960-pseudo-finetune.EntropyV2-calibration.table\n+    dest: \"{{ data_dir }}/tensorrt_yolox/yolox-sPlus-T4-960x960-pseudo-finetune.EntropyV2-calibration.table\"\n+    mode: \"644\"\n+    checksum: sha256:cc378d327db5616b0b3a4d077bf37100c25a50ecd22d2b542f54098da100f34c\n \n - name: Download tensorrt_yolox/label.txt\n   become: true"
        }
    ],
    "autowarefoundation/autoware/3866": [
        {
            "sha": "4be7a3400c96031c2b14bb79433102b2b0b7b222",
            "filename": "ansible/roles/artifacts/tasks/main.yaml",
            "status": "modified",
            "additions": 16,
            "deletions": 16,
            "changes": 32,
            "blob_url": "https://github.com/autowarefoundation/autoware/blob/325360ae3d53b93a07f70280603ed0ced67a049e/ansible%2Froles%2Fartifacts%2Ftasks%2Fmain.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware/raw/325360ae3d53b93a07f70280603ed0ced67a049e/ansible%2Froles%2Fartifacts%2Ftasks%2Fmain.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware/contents/ansible%2Froles%2Fartifacts%2Ftasks%2Fmain.yaml?ref=325360ae3d53b93a07f70280603ed0ced67a049e",
            "patch": "@@ -31,15 +31,15 @@\n     url: https://awf.ml.dev.web.auto/perception/models/pointpainting/v4/pts_voxel_encoder_pointpainting.onnx\n     dest: \"{{ data_dir }}/image_projection_based_fusion/pts_voxel_encoder_pointpainting.onnx\"\n     mode: \"644\"\n-    checksum: md5:25c70f76a45a64944ccd19f604c99410\n+    checksum: sha256:3ca452ea5ca9467bf782955f75704ba8466841e275e8b8acd991b9911d53249e\n \n - name: Download image_projection_based_fusion/pts_backbone_neck_head_pointpainting.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/pointpainting/v4/pts_backbone_neck_head_pointpainting.onnx\n     dest: \"{{ data_dir }}/image_projection_based_fusion/pts_backbone_neck_head_pointpainting.onnx\"\n     mode: \"644\"\n-    checksum: md5:2c7108245240fbd7bf0104dd68225868\n+    checksum: sha256:7fe62fcebe0e0f62a000d06aa94d779feb444d933671a4a3189fe01be8c19a00\n \n # lidar_apollo_instance_segmentation\n - name: Create lidar_apollo_instance_segmentation directory inside {{ data_dir }}\n@@ -54,23 +54,23 @@\n     url: https://awf.ml.dev.web.auto/perception/models/lidar_apollo_instance_segmentation/vlp-16.onnx\n     dest: \"{{ data_dir }}/lidar_apollo_instance_segmentation/vlp-16.onnx\"\n     mode: \"644\"\n-    checksum: md5:63a5a1bb73f7dbb64cf70d04eca45fb4\n+    checksum: sha256:eec521ebad7553d0ea2c90472a293aecb7499ab592632f0e100481c8196eb421\n \n - name: Download lidar_apollo_instance_segmentation/hdl-64.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/lidar_apollo_instance_segmentation/hdl-64.onnx\n     dest: \"{{ data_dir }}/lidar_apollo_instance_segmentation/hdl-64.onnx\"\n     mode: \"644\"\n-    checksum: md5:009745e33b1df44b68296431cc384cd2\n+    checksum: sha256:86348d8c4bced750f54288b01cc471c0d4f1ec9c693466169ef19413731e6ecc\n \n - name: Download lidar_apollo_instance_segmentation/vls-128.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/lidar_apollo_instance_segmentation/vls-128.onnx\n     dest: \"{{ data_dir }}/lidar_apollo_instance_segmentation/vls-128.onnx\"\n     mode: \"644\"\n-    checksum: md5:b2d709f56f73ae2518c9bf4d0214468f\n+    checksum: sha256:95ef950bb694bd6de91b7e47f5d191d557e92a7f5e2a6bdf655a8b5eed4075cc\n \n # lidar_centerpoint\n - name: Create lidar_centerpoint directory inside {{ data_dir }}\n@@ -109,7 +109,7 @@\n     url: https://awf.ml.dev.web.auto/perception/models/centerpoint/v2/pts_backbone_neck_head_centerpoint_tiny.onnx\n     dest: \"{{ data_dir }}/lidar_centerpoint/pts_backbone_neck_head_centerpoint_tiny.onnx\"\n     mode: \"644\"\n-    checksum: md5:e4658325b70222f7c3637fe00e586b82\n+    checksum: sha256:9bb0b634f3664bd098ce7d6a3d8a9fb7cc8d9b8252b27f302c71e43316bab551\n \n # tensorrt_yolo\n - name: Create tensorrt_yolo directory inside {{ data_dir }}\n@@ -250,47 +250,47 @@\n     url: https://awf.ml.dev.web.auto/perception/models/traffic_light_classifier/v2/traffic_light_classifier_mobilenetv2_batch_1.onnx\n     dest: \"{{ data_dir }}/traffic_light_classifier/traffic_light_classifier_mobilenetv2_batch_1.onnx\"\n     mode: \"644\"\n-    checksum: md5:caa51f2080aa2df943e4f884c41898eb\n+    checksum: sha256:455b71b3b20d3a96aa0e49f32714ba50421f668a2f9b9907c30b1346ac8a3703\n \n - name: Download traffic_light_classifier/traffic_light_classifier_mobilenetv2_batch_4.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/traffic_light_classifier/v2/traffic_light_classifier_mobilenetv2_batch_4.onnx\n     dest: \"{{ data_dir }}/traffic_light_classifier/traffic_light_classifier_mobilenetv2_batch_4.onnx\"\n     mode: \"644\"\n-    checksum: md5:c2beaf60210f471debfe72b86d076ca0\n+    checksum: sha256:41bb79a23a4ac57956adb8e9cb3904420db1b0cd032e97b670cc4f8b174ae3fe\n \n - name: Download traffic_light_classifier/traffic_light_classifier_mobilenetv2_batch_6.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/traffic_light_classifier/v2/traffic_light_classifier_mobilenetv2_batch_6.onnx\n     dest: \"{{ data_dir }}/traffic_light_classifier/traffic_light_classifier_mobilenetv2_batch_6.onnx\"\n     mode: \"644\"\n-    checksum: md5:28b408710bcb24f4cdd4d746301d4e78\n+    checksum: sha256:e4792eed6a46fdbd02be2f3a4f1ce91f36fa77698493caf3102e445178c0f058\n \n - name: Download traffic_light_classifier/traffic_light_classifier_efficientNet_b1_batch_1.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/traffic_light_classifier/v2/traffic_light_classifier_efficientNet_b1_batch_1.onnx\n     dest: \"{{ data_dir }}/traffic_light_classifier/traffic_light_classifier_efficientNet_b1_batch_1.onnx\"\n     mode: \"644\"\n-    checksum: md5:82baba4fcf1abe0c040cd55005e34510\n+    checksum: sha256:55ebb0d117a5e8943f8d1c6769f1d856b533079d4d871d8e923255cc992ad48a\n \n - name: Download traffic_light_classifier/traffic_light_classifier_efficientNet_b1_batch_4.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/traffic_light_classifier/v2/traffic_light_classifier_efficientNet_b1_batch_4.onnx\n     dest: \"{{ data_dir }}/traffic_light_classifier/traffic_light_classifier_efficientNet_b1_batch_4.onnx\"\n     mode: \"644\"\n-    checksum: md5:21b549c2fe4fbb20d32cc019e6d70cd7\n+    checksum: sha256:684e29843e3128eadb774018730644b3ab9b0a06dc4cdaeed579c2f3fa5d5265\n \n - name: Download traffic_light_classifier/traffic_light_classifier_efficientNet_b1_batch_6.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/traffic_light_classifier/v2/traffic_light_classifier_efficientNet_b1_batch_6.onnx\n     dest: \"{{ data_dir }}/traffic_light_classifier/traffic_light_classifier_efficientNet_b1_batch_6.onnx\"\n     mode: \"644\"\n-    checksum: md5:378526d9aa9fc6705cf399f7b35b3053\n+    checksum: sha256:44d94540fa8b89dfb39cd9a8523cf010ddfb10ea2f1f9b53bf3618ce7f4912ad\n \n - name: Download traffic_light_classifier/lamp_labels.txt\n   become: true\n@@ -313,31 +313,31 @@\n     url: https://awf.ml.dev.web.auto/perception/models/tlr_yolox_s/v2/tlr_yolox_s_batch_1.onnx\n     dest: \"{{ data_dir }}/traffic_light_fine_detector/tlr_yolox_s_batch_1.onnx\"\n     mode: \"644\"\n-    checksum: md5:2b72d085022b8ee6aacff06bd722cfda\n+    checksum: sha256:922839fcf22bd32ae5065146fcec193e9d6360ca03bd4c83faea835045daf8eb\n \n - name: Download traffic_light_fine_detector/tlr_yolox_s_batch_4.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/tlr_yolox_s/v2/tlr_yolox_s_batch_4.onnx\n     dest: \"{{ data_dir }}/traffic_light_fine_detector/tlr_yolox_s_batch_4.onnx\"\n     mode: \"644\"\n-    checksum: md5:4044daa86e7776ce241e94d98a09cc0e\n+    checksum: sha256:b3c6e00acc6ff547d165469684ffb620a9a6330e9d591d445f50c4cf5cb4e292\n \n - name: Download traffic_light_fine_detector/tlr_yolox_s_batch_6.onnx\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/tlr_yolox_s/v2/tlr_yolox_s_batch_6.onnx\n     dest: \"{{ data_dir }}/traffic_light_fine_detector/tlr_yolox_s_batch_6.onnx\"\n     mode: \"644\"\n-    checksum: md5:47255a11bde479320d703f1f45db1242\n+    checksum: sha256:2824d4c5b7ab5f6bfd41e43e82747107c53e1c727b1cf1dd6746bc49e6749128\n \n - name: Download traffic_light_fine_detector/tlr_labels.txt\n   become: true\n   ansible.builtin.get_url:\n     url: https://awf.ml.dev.web.auto/perception/models/tlr_yolox_s/v2/tlr_labels.txt\n     dest: \"{{ data_dir }}/traffic_light_fine_detector/tlr_labels.txt\"\n     mode: \"644\"\n-    checksum: md5:e9f45efb02f2a9aa8ac27b3d5c164905\n+    checksum: sha256:a41e6e3324e32c30b3b2fe38908eaf3471e2bfdaeb9e14ca0c1c3bc0275119c6\n \n # traffic_light_ssd_fine_detector\n - name: Create traffic_light_ssd_fine_detector directory inside {{ data_dir }}"
        }
    ],
    "autowarefoundation/autoware.universe/128": [
        {
            "sha": "820432e4c9e1a38b33d7e4fda947a6a02287b80f",
            "filename": "control/shift_decider/README.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cca3b2f5da2a8ed2d87126c5923deb8143209b81/control%2Fshift_decider%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cca3b2f5da2a8ed2d87126c5923deb8143209b81/control%2Fshift_decider%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fshift_decider%2FREADME.md?ref=cca3b2f5da2a8ed2d87126c5923deb8143209b81",
            "patch": "@@ -43,9 +43,9 @@ stop\n \n ### Output\n \n-| Name                | Type                                           | Description                        |\n-| ------------------- | ---------------------------------------------- | ---------------------------------- |\n-| `~output/shift_cmd` | `autoware_auto_vehicle_msgs::msg::GearCommand` | Gear for drive forward / backward. |\n+| Name               | Type                                           | Description                        |\n+| ------------------ | ---------------------------------------------- | ---------------------------------- |\n+| `~output/gear_cmd` | `autoware_auto_vehicle_msgs::msg::GearCommand` | Gear for drive forward / backward. |\n \n ## Parameters\n "
        }
    ],
    "autowarefoundation/autoware.universe/132": [
        {
            "sha": "f69ac9426e9740315ab38d96e6a2092abf4045c5",
            "filename": "perception/multi_object_tracker/src/tracker/model/pedestrian_tracker.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 3,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e8e3a35e47a6beb8c56baa7c71427ea8a6e21618/perception%2Fmulti_object_tracker%2Fsrc%2Ftracker%2Fmodel%2Fpedestrian_tracker.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e8e3a35e47a6beb8c56baa7c71427ea8a6e21618/perception%2Fmulti_object_tracker%2Fsrc%2Ftracker%2Fmodel%2Fpedestrian_tracker.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmulti_object_tracker%2Fsrc%2Ftracker%2Fmodel%2Fpedestrian_tracker.cpp?ref=e8e3a35e47a6beb8c56baa7c71427ea8a6e21618",
            "patch": "@@ -401,9 +401,15 @@ bool PedestrianTracker::getTrackedObject(\n     P(IDX::WZ, IDX::WZ);\n \n   // set shape\n-  object.shape.dimensions.x = bounding_box_.width;\n-  object.shape.dimensions.y = bounding_box_.length;\n-  object.shape.dimensions.z = bounding_box_.height;\n+  if (object.shape.type == autoware_auto_perception_msgs::msg::Shape::BOUNDING_BOX) {\n+    object.shape.dimensions.x = bounding_box_.width;\n+    object.shape.dimensions.y = bounding_box_.length;\n+    object.shape.dimensions.z = bounding_box_.height;\n+  } else if (object.shape.type == autoware_auto_perception_msgs::msg::Shape::CYLINDER) {\n+    object.shape.dimensions.x = cylinder_.width;\n+    object.shape.dimensions.y = cylinder_.width;\n+    object.shape.dimensions.z = cylinder_.height;\n+  }\n \n   return true;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/137": [
        {
            "sha": "96a1ad6ea4450a1ec3b28b78276f6ca256e5a433",
            "filename": "control/lane_departure_checker/src/lane_departure_checker_node/lane_departure_checker_node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cee06ffe54fa7a4be162c7d0ee7bce879482109b/control%2Flane_departure_checker%2Fsrc%2Flane_departure_checker_node%2Flane_departure_checker_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cee06ffe54fa7a4be162c7d0ee7bce879482109b/control%2Flane_departure_checker%2Fsrc%2Flane_departure_checker_node%2Flane_departure_checker_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Flane_departure_checker%2Fsrc%2Flane_departure_checker_node%2Flane_departure_checker_node.cpp?ref=cee06ffe54fa7a4be162c7d0ee7bce879482109b",
            "patch": "@@ -150,7 +150,8 @@ LaneDepartureCheckerNode::LaneDepartureCheckerNode(const rclcpp::NodeOptions & o\n     \"~/input/lanelet_map_bin\", rclcpp::QoS{1}.transient_local(),\n     std::bind(&LaneDepartureCheckerNode::onLaneletMapBin, this, _1));\n   sub_route_ = this->create_subscription<HADMapRoute>(\n-    \"~/input/route\", 1, std::bind(&LaneDepartureCheckerNode::onRoute, this, _1));\n+    \"~/input/route\", rclcpp::QoS{1}.transient_local(),\n+    std::bind(&LaneDepartureCheckerNode::onRoute, this, _1));\n   sub_reference_trajectory_ = this->create_subscription<Trajectory>(\n     \"~/input/reference_trajectory\", 1,\n     std::bind(&LaneDepartureCheckerNode::onReferenceTrajectory, this, _1));"
        }
    ],
    "autowarefoundation/autoware.universe/147": [
        {
            "sha": "9e1439ec847a56dc7bf9c647a58629a558caafda",
            "filename": "planning/behavior_velocity_planner/test/src/test_state_machine.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 2,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/223ffe343cb438eb24350d0b9cca48781370c4ed/planning%2Fbehavior_velocity_planner%2Ftest%2Fsrc%2Ftest_state_machine.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/223ffe343cb438eb24350d0b9cca48781370c4ed/planning%2Fbehavior_velocity_planner%2Ftest%2Fsrc%2Ftest_state_machine.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Ftest%2Fsrc%2Ftest_state_machine.cpp?ref=223ffe343cb438eb24350d0b9cca48781370c4ed",
            "patch": "@@ -20,6 +20,7 @@\n #include <gtest/gtest.h>\n \n #include <chrono>\n+#include <iostream>\n #include <limits>\n \n using StateMachine = behavior_velocity_planner::StateMachine;\n@@ -61,14 +62,23 @@ TEST(state_machine, set_state_go_with_margin_time)\n   state_machine.setMarginTime(margin_time);\n   rclcpp::Logger logger = rclcpp::get_logger(\"test_set_state_with_margin_time\");\n   state_machine.setState(State::STOP);\n+  size_t loop_counter = 0;\n   // loop until state change from STOP -> GO\n   while (state_machine.getState() == State::STOP) {\n     EXPECT_EQ(enumToInt(state_machine.getState()), enumToInt(State::STOP));\n     rclcpp::Clock current_time = rclcpp::Clock(RCL_ROS_TIME);\n+    if (state_machine.getDuration() > margin_time) {\n+      std::cerr << \"stop duration is larger than margin time\" << std::endl;\n+    }\n     EXPECT_TRUE(state_machine.getDuration() < margin_time);\n     state_machine.setStateWithMarginTime(State::GO, logger, current_time);\n+    loop_counter++;\n   }\n   // time past STOP -> GO\n-  EXPECT_TRUE(state_machine.getDuration() > margin_time);\n-  EXPECT_EQ(enumToInt(state_machine.getState()), enumToInt(State::GO));\n+  if (loop_counter > 2) {\n+    EXPECT_TRUE(state_machine.getDuration() > margin_time);\n+    EXPECT_EQ(enumToInt(state_machine.getState()), enumToInt(State::GO));\n+  } else {\n+    std::cerr << \"[Warning] computational resource is not enough\" << std::endl;\n+  }\n }"
        }
    ],
    "autowarefoundation/autoware.universe/151": [
        {
            "sha": "072f079028db649db098f13ffdab809046537fb3",
            "filename": "map/lanelet2_extension/lib/utilities.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e6ebd55211cc856d1c0b96a0337fec393f5b9118/map%2Flanelet2_extension%2Flib%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e6ebd55211cc856d1c0b96a0337fec393f5b9118/map%2Flanelet2_extension%2Flib%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Flanelet2_extension%2Flib%2Futilities.cpp?ref=e6ebd55211cc856d1c0b96a0337fec393f5b9118",
            "patch": "@@ -588,8 +588,9 @@ bool isInLanelet(\n   const geometry_msgs::msg::Pose & current_pose, const lanelet::ConstLanelet & lanelet,\n   const double radius)\n {\n+  constexpr double eps = 1.0e-9;\n   const lanelet::BasicPoint2d p(current_pose.position.x, current_pose.position.y);\n-  if (boost::geometry::distance(p, lanelet.polygon2d().basicPolygon()) < radius) {\n+  if (boost::geometry::distance(p, lanelet.polygon2d().basicPolygon()) < radius + eps) {\n     return true;\n   }\n   return false;"
        }
    ],
    "autowarefoundation/autoware.universe/152": [
        {
            "sha": "1e9e9ae7c6c9836d4dc610275e92c964e7cb4dae",
            "filename": "map/lanelet2_extension/lib/query.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/655c71a164b91ff83de4806f0a51eec0c280c265/map%2Flanelet2_extension%2Flib%2Fquery.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/655c71a164b91ff83de4806f0a51eec0c280c265/map%2Flanelet2_extension%2Flib%2Fquery.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Flanelet2_extension%2Flib%2Fquery.cpp?ref=655c71a164b91ff83de4806f0a51eec0c280c265",
            "patch": "@@ -731,10 +731,11 @@ bool query::getClosestLanelet(\n       if (angle_diff < min_angle) {\n         min_angle = angle_diff;\n         *closest_lanelet_ptr = llt;\n-      } else if ((segment_angle - pose_yaw) < 1e-04) {\n-        min_angle = std::abs(segment_angle - pose_yaw);\n-        *closest_lanelet_ptr = llt;\n       }\n+      /* else if ((segment_angle - pose_yaw) < 1e-04) {\n+         min_angle = std::abs(segment_angle - pose_yaw);\n+         *closest_lanelet_ptr = llt;\n+       }*/\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/156": [
        {
            "sha": "467f8cb41a33809e5da8a298ad5fdc79a3b079f8",
            "filename": "planning/behavior_velocity_planner/test/src/test_state_machine.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/faa57b4d24799786e63ab93300b0a4979e88ed76/planning%2Fbehavior_velocity_planner%2Ftest%2Fsrc%2Ftest_state_machine.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/faa57b4d24799786e63ab93300b0a4979e88ed76/planning%2Fbehavior_velocity_planner%2Ftest%2Fsrc%2Ftest_state_machine.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Ftest%2Fsrc%2Ftest_state_machine.cpp?ref=faa57b4d24799786e63ab93300b0a4979e88ed76",
            "patch": "@@ -70,7 +70,7 @@ TEST(state_machine, set_state_go_with_margin_time)\n     if (state_machine.getDuration() > margin_time) {\n       std::cerr << \"stop duration is larger than margin time\" << std::endl;\n     }\n-    EXPECT_TRUE(state_machine.getDuration() < margin_time);\n+    EXPECT_FALSE(state_machine.getDuration() > margin_time);\n     state_machine.setStateWithMarginTime(State::GO, logger, current_time);\n     loop_counter++;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/178": [
        {
            "sha": "77b2da1d0e80f6aebe3d2d083cf9297f5805817e",
            "filename": "planning/motion_velocity_smoother/src/smoother/smoother_base.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/27b09e1b06f80ae7a7c22d3ddd4732574d5be14f/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fsmoother_base.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/27b09e1b06f80ae7a7c22d3ddd4732574d5be14f/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fsmoother_base.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fsmoother_base.cpp?ref=27b09e1b06f80ae7a7c22d3ddd4732574d5be14f",
            "patch": "@@ -79,8 +79,8 @@ boost::optional<TrajectoryPoints> SmootherBase::applyLateralAccelerationFilter(\n \n   for (size_t i = 0; i < output->size(); ++i) {\n     double curvature = 0.0;\n-    const size_t start = i > before_decel_index ? i - before_decel_index : 0;\n-    const size_t end = std::min(output->size(), i + after_decel_index);\n+    const size_t start = i > after_decel_index ? i - after_decel_index : 0;\n+    const size_t end = std::min(output->size(), i + before_decel_index);\n     for (size_t j = start; j < end; ++j) {\n       curvature = std::max(curvature, std::fabs(curvature_v->at(j)));\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/179": [
        {
            "sha": "1579fee8798a54f00de932f1beb75b0d38f8870b",
            "filename": "simulator/simple_planning_simulator/param/simple_planning_simulator_default.param.yaml",
            "status": "modified",
            "additions": 20,
            "deletions": 19,
            "changes": 39,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c2c75b02e247a2f2452b9730529d4863c9a73c43/simulator%2Fsimple_planning_simulator%2Fparam%2Fsimple_planning_simulator_default.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c2c75b02e247a2f2452b9730529d4863c9a73c43/simulator%2Fsimple_planning_simulator%2Fparam%2Fsimple_planning_simulator_default.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Fparam%2Fsimple_planning_simulator_default.param.yaml?ref=c2c75b02e247a2f2452b9730529d4863c9a73c43",
            "patch": "@@ -1,21 +1,22 @@\n-simulation:\n-  simple_planning_simulator:\n-    ros__parameters:\n-      simulated_frame_id: \"base_link\"\n-      origin_frame_id: \"map\"\n-      vehicle_model_type: \"DELAY_STEER_ACC_GEARED\"\n-      initialize_source: \"INITIAL_POSE_TOPIC\"\n-      timer_sampling_time_ms: 25\n-      add_measurement_noise: False\n-      vel_lim: 30.0\n-      vel_rate_lim: 30.0\n-      steer_lim: 0.6\n-      steer_rate_lim: 6.28\n-      acc_time_delay: 0.1\n-      acc_time_constant: 0.1\n-      steer_time_delay: 0.1\n-      steer_time_constant: 0.1\n-      x_stddev: 0.0001 # x standard deviation for dummy covariance in map coordinate\n-      y_stddev: 0.0001 # y standard deviation for dummy covariance in map coordinate\n+/**:\n+  ros__parameters:\n+    simulation:\n+      simple_planning_simulator:\n+        simulated_frame_id: \"base_link\"\n+        origin_frame_id: \"map\"\n+        vehicle_model_type: \"DELAY_STEER_ACC_GEARED\"\n+        initialize_source: \"INITIAL_POSE_TOPIC\"\n+        timer_sampling_time_ms: 25\n+        add_measurement_noise: False\n+        vel_lim: 30.0\n+        vel_rate_lim: 30.0\n+        steer_lim: 0.6\n+        steer_rate_lim: 6.28\n+        acc_time_delay: 0.1\n+        acc_time_constant: 0.1\n+        steer_time_delay: 0.1\n+        steer_time_constant: 0.1\n+        x_stddev: 0.0001 # x standard deviation for dummy covariance in map coordinate\n+        y_stddev: 0.0001 # y standard deviation for dummy covariance in map coordinate\n \n # Note: vehicle characteristics parameters (e.g. wheelbase) are defined in a separate file."
        }
    ],
    "autowarefoundation/autoware.universe/202": [
        {
            "sha": "dc083471758cbf75444ac504c2c40b599aafb166",
            "filename": "build_depends.repos",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/26d6433bb33060b90e2e2130169e8888528b8fc2/build_depends.repos",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/26d6433bb33060b90e2e2130169e8888528b8fc2/build_depends.repos",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/build_depends.repos?ref=26d6433bb33060b90e2e2130169e8888528b8fc2",
            "patch": "@@ -11,6 +11,10 @@ repositories:\n     type: git\n     url: https://github.com/tier4/autoware_auto_msgs.git\n     version: tier4/main\n+  messages/tier4_msgs:\n+    type: git\n+    url: https://github.com/tier4/AutowareArchitectureProposal_msgs/tree/tier4/universe\n+    version: tier4/universe\n   vendor/grid_map:\n     type: git\n     url: https://github.com/ANYbotics/grid_map.git"
        }
    ],
    "autowarefoundation/autoware.universe/203": [
        {
            "sha": "f63309bd2d11cd45e288cead80dd0c0d3a352bb4",
            "filename": "build_depends.repos",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/47b1a26ddf059642395e34a209336ad5c275e547/build_depends.repos",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/47b1a26ddf059642395e34a209336ad5c275e547/build_depends.repos",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/build_depends.repos?ref=47b1a26ddf059642395e34a209336ad5c275e547",
            "patch": "@@ -13,7 +13,7 @@ repositories:\n     version: tier4/main\n   messages/tier4_msgs:\n     type: git\n-    url: https://github.com/tier4/AutowareArchitectureProposal_msgs/tree/tier4/universe\n+    url: https://github.com/tier4/AutowareArchitectureProposal_msgs.git\n     version: tier4/universe\n   vendor/grid_map:\n     type: git"
        }
    ],
    "autowarefoundation/autoware.universe/205": [
        {
            "sha": "9b4615f8e2bf6f1349b2326df9ab3b7c6bac0cc8",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a4461b02307834c0f02722e1946da5587573b536/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a4461b02307834c0f02722e1946da5587573b536/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=a4461b02307834c0f02722e1946da5587573b536",
            "patch": "@@ -880,7 +880,8 @@ OccupancyGrid generateDrivableArea(\n     const double yaw = tf2::getYaw(current_pose.pose.orientation);\n     const double origin_offset_x_m = (-width / 4) * cos(yaw) - (-height / 2) * sin(yaw);\n     const double origin_offset_y_m = (-width / 4) * sin(yaw) + (-height / 2) * cos(yaw);\n-    grid_origin.pose.orientation = current_pose.pose.orientation;\n+    // Only current yaw should be considered as the orientation of grid_origin.\n+    grid_origin.pose.orientation = tier4_autoware_utils::createQuaternionFromYaw(yaw);\n     grid_origin.pose.position.x = current_pose.pose.position.x + origin_offset_x_m;\n     grid_origin.pose.position.y = current_pose.pose.position.y + origin_offset_y_m;\n     grid_origin.pose.position.z = current_pose.pose.position.z;"
        }
    ],
    "autowarefoundation/autoware.universe/206": [
        {
            "sha": "bac09549d870385a6d611b0e9d2ad854d8710b6d",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 43,
            "deletions": 2,
            "changes": 45,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a04fa655805bf910aea994afcf88816a894c15ae/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a04fa655805bf910aea994afcf88816a894c15ae/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=a04fa655805bf910aea994afcf88816a894c15ae",
            "patch": "@@ -675,10 +675,51 @@ bool exists(std::vector<T> vec, T element)\n   return std::find(vec.begin(), vec.end(), element) != vec.end();\n }\n \n+boost::optional<size_t> findNearestIndexToGoal(\n+  const std::vector<autoware_auto_planning_msgs::msg::PathPointWithLaneId> & points,\n+  const geometry_msgs::msg::Pose & goal, const int64_t goal_lane_id,\n+  const double max_dist = std::numeric_limits<double>::max())\n+{\n+  if (points.empty()) {\n+    return boost::none;\n+  }\n+\n+  size_t min_dist_index;\n+  double min_dist = std::numeric_limits<double>::max();\n+  {\n+    bool found = false;\n+    for (size_t i = 0; i < points.size(); ++i) {\n+      const double x = points.at(i).point.pose.position.x - goal.position.x;\n+      const double y = points.at(i).point.pose.position.y - goal.position.y;\n+      const double dist = std::hypot(x, y);\n+      if (dist < max_dist && dist < min_dist && exists(points.at(i).lane_ids, goal_lane_id)) {\n+        min_dist_index = i;\n+        min_dist = dist;\n+        found = true;\n+      }\n+    }\n+    if (!found) {\n+      return boost::none;\n+    }\n+  }\n+\n+  size_t min_dist_out_of_range_index = min_dist_index;\n+  for (size_t i = min_dist_index; i != 0; --i) {\n+    const double x = points.at(i).point.pose.position.x - goal.position.x;\n+    const double y = points.at(i).point.pose.position.y - goal.position.y;\n+    const double dist = std::hypot(x, y);\n+    min_dist_out_of_range_index = i;\n+    if (max_dist < dist) {\n+      break;\n+    }\n+  }\n+  return min_dist_out_of_range_index;\n+}\n+\n // goal does not have z\n bool setGoal(\n   const double search_radius_range, [[maybe_unused]] const double search_rad_range,\n-  const PathWithLaneId & input, const Pose & goal, [[maybe_unused]] const int64_t goal_lane_id,\n+  const PathWithLaneId & input, const Pose & goal, const int64_t goal_lane_id,\n   PathWithLaneId * output_ptr)\n {\n   try {\n@@ -752,7 +793,7 @@ bool setGoal(\n \n     // find min_dist_index whose distance to goal is shorter than search_radius_range\n     const auto min_dist_index_opt =\n-      tier4_autoware_utils::findNearestIndex(input.points, goal, search_radius_range);\n+      findNearestIndexToGoal(input.points, goal, goal_lane_id, search_radius_range);\n     if (!min_dist_index_opt) {\n       return false;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/218": [
        {
            "sha": "d54c3fae48b10125a93fe3589fb8d6321fa236ee",
            "filename": "planning/behavior_velocity_planner/src/utilization/path_utilization.cpp",
            "status": "modified",
            "additions": 46,
            "deletions": 33,
            "changes": 79,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0d49a812307c2589cbcca7befc77403c842bde69/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Fpath_utilization.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0d49a812307c2589cbcca7befc77403c842bde69/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Fpath_utilization.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Fpath_utilization.cpp?ref=0d49a812307c2589cbcca7befc77403c842bde69",
            "patch": "@@ -23,6 +23,8 @@\n #include <memory>\n #include <vector>\n \n+constexpr double DOUBLE_EPSILON = 1e-6;\n+\n namespace behavior_velocity_planner\n {\n autoware_auto_planning_msgs::msg::Path interpolatePath(\n@@ -31,10 +33,11 @@ autoware_auto_planning_msgs::msg::Path interpolatePath(\n   const auto logger{rclcpp::get_logger(\"behavior_velocity_planner\").get_child(\"path_utilization\")};\n   autoware_auto_planning_msgs::msg::Path interpolated_path;\n \n-  std::vector<double> x, x_interp;\n-  std::vector<double> y, y_interp;\n-  std::vector<double> z, z_interp;\n-  std::vector<double> v, v_interp;\n+  const double epsilon = 0.01;\n+  std::vector<double> x;\n+  std::vector<double> y;\n+  std::vector<double> z;\n+  std::vector<double> v;\n   std::vector<double> s_in, s_out;\n   if (2000 < path.points.size()) {\n     RCLCPP_WARN(\n@@ -46,7 +49,7 @@ autoware_auto_planning_msgs::msg::Path interpolatePath(\n     return path;\n   }\n \n-  // Calculate sample points\n+  double path_len = length;\n   {\n     double s = 0.0;\n     for (size_t idx = 0; idx < path.points.size(); ++idx) {\n@@ -59,28 +62,36 @@ autoware_auto_planning_msgs::msg::Path interpolatePath(\n         const auto path_point_prev = path.points.at(idx - 1);\n         s += tier4_autoware_utils::calcDistance3d(path_point_prev.pose, path_point.pose);\n       }\n+      if (s > path_len) {\n+        break;\n+      }\n       s_in.push_back(s);\n     }\n+\n+    // update path length\n+    path_len = std::min(path_len, s_in.back());\n+\n+    // Check Terminal Points\n+    if (std::fabs(s_in.back() - path_len) < epsilon) {\n+      s_in.back() = path_len;\n+    } else {\n+      s_in.push_back(path_len);\n+    }\n   }\n \n   // Calculate query points\n   // Remove query point if query point is near input path point\n-  const double epsilon = 0.01;\n-  const double interpolation_interval = interval;\n-  size_t checkpoint_idx = 1;\n-  for (double s = interpolation_interval; s < std::min(length, s_in.back());\n-       s += interpolation_interval) {\n-    while (checkpoint_idx < s_in.size() && s_in.at(checkpoint_idx) < s) {\n-      s_out.push_back(s_in.at(checkpoint_idx));\n-      v_interp.push_back(v.at(checkpoint_idx));\n-      ++checkpoint_idx;\n-    }\n-    if (\n-      std::fabs(s - s_in.at(checkpoint_idx - 1)) > epsilon &&\n-      std::fabs(s - s_in.at(checkpoint_idx)) > epsilon) {\n-      s_out.push_back(s);\n-      v_interp.push_back(v.at(checkpoint_idx - 1));\n+  std::vector<double> s_tmp = s_in;\n+  for (double s = 0.0; s < path_len; s += interval) {\n+    s_tmp.push_back(s);\n+  }\n+  std::sort(s_tmp.begin(), s_tmp.end());\n+\n+  for (const double s : s_tmp) {\n+    if (!s_out.empty() && std::fabs(s_out.back() - s) < epsilon) {\n+      continue;\n     }\n+    s_out.push_back(s);\n   }\n \n   if (s_out.empty()) {\n@@ -89,19 +100,21 @@ autoware_auto_planning_msgs::msg::Path interpolatePath(\n   }\n \n   // Interpolate\n-  x_interp = interpolation::slerp(s_in, x, s_out);\n-  y_interp = interpolation::slerp(s_in, y, s_out);\n-  z_interp = interpolation::slerp(s_in, z, s_out);\n-\n-  // Insert boundary points\n-  x_interp.insert(x_interp.begin(), x.front());\n-  y_interp.insert(y_interp.begin(), y.front());\n-  z_interp.insert(z_interp.begin(), z.front());\n-  v_interp.insert(v_interp.begin(), v.front());\n-\n-  x_interp.push_back(x.back());\n-  y_interp.push_back(y.back());\n-  z_interp.push_back(z.back());\n+  const auto x_interp = interpolation::slerp(s_in, x, s_out);\n+  const auto y_interp = interpolation::slerp(s_in, y, s_out);\n+  const auto z_interp = interpolation::slerp(s_in, z, s_out);\n+\n+  std::vector<double> v_interp;\n+  size_t closest_segment_idx = 0;\n+  for (size_t i = 0; i < s_out.size() - 1; ++i) {\n+    for (size_t j = closest_segment_idx; j < s_in.size() - 1; ++j) {\n+      if (s_in.at(j) < s_out.at(i) + DOUBLE_EPSILON && s_out.at(i) < s_in.at(j + 1)) {\n+        // find closest segment in s_in\n+        closest_segment_idx = j;\n+      }\n+    }\n+    v_interp.push_back(v.at(closest_segment_idx));\n+  }\n   v_interp.push_back(v.back());\n \n   // Insert path point to interpolated_path"
        }
    ],
    "autowarefoundation/autoware.universe/220": [
        {
            "sha": "9eeb5f359695d1d77b248ad6b1714c13791138cd",
            "filename": "localization/pose2twist/src/pose2twist_core.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8dfc6ebf17c20b1acd3c5b1ba204df1548e2d9cc/localization%2Fpose2twist%2Fsrc%2Fpose2twist_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8dfc6ebf17c20b1acd3c5b1ba204df1548e2d9cc/localization%2Fpose2twist%2Fsrc%2Fpose2twist_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fpose2twist%2Fsrc%2Fpose2twist_core.cpp?ref=8dfc6ebf17c20b1acd3c5b1ba204df1548e2d9cc",
            "patch": "@@ -28,13 +28,13 @@ Pose2Twist::Pose2Twist() : Node(\"pose2twist_core\")\n   rclcpp::QoS durable_qos(queue_size);\n   durable_qos.transient_local();\n \n-  pose_sub_ = create_subscription<geometry_msgs::msg::PoseStamped>(\n-    \"pose\", queue_size, std::bind(&Pose2Twist::callbackPose, this, _1));\n-\n   twist_pub_ = create_publisher<geometry_msgs::msg::TwistStamped>(\"twist\", durable_qos);\n   linear_x_pub_ = create_publisher<tier4_debug_msgs::msg::Float32Stamped>(\"linear_x\", durable_qos);\n   angular_z_pub_ =\n     create_publisher<tier4_debug_msgs::msg::Float32Stamped>(\"angular_z\", durable_qos);\n+  // Note: this callback publishes topics above\n+  pose_sub_ = create_subscription<geometry_msgs::msg::PoseStamped>(\n+    \"pose\", queue_size, std::bind(&Pose2Twist::callbackPose, this, _1));\n }\n \n double calcDiffForRadian(const double lhs_rad, const double rhs_rad)"
        }
    ],
    "autowarefoundation/autoware.universe/225": [
        {
            "sha": "82f35b934208c12e8647378cc0b1f2a4177a2d7b",
            "filename": "common/tier4_calibration_rviz_plugin/plugins/plugin_description.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7c85a9d12596ff6322283a96012a2390e0a60d1b/common%2Ftier4_calibration_rviz_plugin%2Fplugins%2Fplugin_description.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7c85a9d12596ff6322283a96012a2390e0a60d1b/common%2Ftier4_calibration_rviz_plugin%2Fplugins%2Fplugin_description.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_calibration_rviz_plugin%2Fplugins%2Fplugin_description.xml?ref=7c85a9d12596ff6322283a96012a2390e0a60d1b",
            "patch": "@@ -1,4 +1,4 @@\n-<library path=\"accel_brake_map_calibrator_button_panel\">\n+<library path=\"tier4_calibration_rviz_plugin\">\n   <class name=\"tier4_calibration_rviz_plugin/AccelBrakeMapCalibratorButtonPanel\"\n           type=\"tier4_calibration_rviz_plugin::AccelBrakeMapCalibratorButtonPanel\"\n           base_class_type=\"rviz_common::Panel\">"
        }
    ],
    "autowarefoundation/autoware.universe/230": [
        {
            "sha": "c04a5e32524af18fd02e490b4c137986669a7e48",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 4,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ba7f69f2d4080c21970b5a25ecf79a3467ca8b47/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ba7f69f2d4080c21970b5a25ecf79a3467ca8b47/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=ba7f69f2d4080c21970b5a25ecf79a3467ca8b47",
            "patch": "@@ -66,7 +66,6 @@ bool convertToFrenetCoordinate3d(\n   }\n \n   const auto search_pt = tier4_autoware_utils::fromMsg(search_point_geom);\n-  bool found = false;\n   double min_distance = std::numeric_limits<double>::max();\n \n   // get frenet coordinate based on points\n@@ -88,15 +87,17 @@ bool convertToFrenetCoordinate3d(\n \n       const double tmp_distance = current2search_pt.norm();\n       if (tmp_distance < min_distance) {\n-        found = true;\n         min_distance = tmp_distance;\n         frenet_coordinate->distance = tmp_distance;\n         frenet_coordinate->length = accumulated_length;\n+      } else {\n+        break;\n       }\n     }\n   }\n \n   // get frenet coordinate based on lines\n+  bool found_on_line = false;\n   {\n     auto prev_geom_pt = linestring.front();\n     double accumulated_length = 0;\n@@ -113,17 +114,26 @@ bool convertToFrenetCoordinate3d(\n       if (tmp_length >= 0 && tmp_length <= line_segment_length) {\n         double tmp_distance = direction.cross(start2search_pt).norm();\n         if (tmp_distance < min_distance) {\n-          found = true;\n           min_distance = tmp_distance;\n           frenet_coordinate->distance = tmp_distance;\n           frenet_coordinate->length = accumulated_length + tmp_length;\n+\n+          if (found_on_line) {\n+            break;\n+          }\n+\n+          found_on_line = true;\n+        } else if (found_on_line) {\n+          break;\n         }\n+      } else if (found_on_line) {\n+        break;\n       }\n       accumulated_length += line_segment_length;\n       prev_geom_pt = geom_pt;\n     }\n   }\n-  return found;\n+  return found_on_line;\n }\n \n std::vector<Point> convertToGeometryPointArray(const PathWithLaneId & path)"
        }
    ],
    "autowarefoundation/autoware.universe/242": [
        {
            "sha": "12faac2799b13bc40d444e6e2ad4c98446f1d53b",
            "filename": "simulator/dummy_perception_publisher/launch/dummy_perception_publisher.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ec1249b7edca3554cf302c3cf7e5eba571874325/simulator%2Fdummy_perception_publisher%2Flaunch%2Fdummy_perception_publisher.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ec1249b7edca3554cf302c3cf7e5eba571874325/simulator%2Fdummy_perception_publisher%2Flaunch%2Fdummy_perception_publisher.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fdummy_perception_publisher%2Flaunch%2Fdummy_perception_publisher.launch.xml?ref=ec1249b7edca3554cf302c3cf7e5eba571874325",
            "patch": "@@ -53,12 +53,13 @@\n     <push-ros-namespace namespace=\"perception\"/>\n     <!-- object segmentation module -->\n     <group>\n-      <push-ros-namespace namespace=\"obstacle_segmentation\"/>\n+      <push-ros-namespace namespace=\"occupancy_grid_map\"/>\n       <!-- Occupancy Grid -->\n       <include file=\"$(find-pkg-share laserscan_to_occupancy_grid_map)/launch/laserscan_to_occupancy_grid_map.launch.py\">\n         <arg name=\"input_obstacle_pointcloud\" value=\"true\" />\n         <arg name=\"input_obstacle_and_raw_pointcloud\" value=\"false\" />\n         <arg name=\"input/obstacle_pointcloud\" value=\"/perception/obstacle_segmentation/pointcloud\" />\n+        <arg name=\"output\" value=\"/perception/occupancy_grid_map/map\" />\n       </include>\n     </group>\n "
        }
    ],
    "autowarefoundation/autoware.universe/246": [
        {
            "sha": "7f7f5bb9120a26c6ab55f360c95d0832139fe962",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ca6c72f77fc6bc8702c14ec90cf429abb58194dd/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ca6c72f77fc6bc8702c14ec90cf429abb58194dd/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=ca6c72f77fc6bc8702c14ec90cf429abb58194dd",
            "patch": "@@ -164,9 +164,11 @@ ObjectDataArray AvoidanceModule::calcAvoidanceTargetObjects(\n     *planner_data_->dynamic_object, parameters_.threshold_speed_object_is_stopped);\n \n   // detection area filter\n+  // when expanding lanelets, right_offset must be minus.\n+  // This is because y axis is positive on the left.\n   const auto expanded_lanelets = lanelet::utils::getExpandedLanelets(\n     current_lanes, parameters_.detection_area_left_expand_dist,\n-    parameters_.detection_area_right_expand_dist);\n+    parameters_.detection_area_right_expand_dist * (-1.0));\n   const auto lane_filtered_objects_index =\n     util::filterObjectsByLanelets(objects_candidate, expanded_lanelets);\n "
        }
    ],
    "autowarefoundation/autoware.universe/251": [
        {
            "sha": "937476b414a1de4454cd54d7dac50a64096e6a70",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/18eee4b35f719cca616b4b3872234b7e0ec4b0ed/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/18eee4b35f719cca616b4b3872234b7e0ec4b0ed/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=18eee4b35f719cca616b4b3872234b7e0ec4b0ed",
            "patch": "@@ -594,9 +594,13 @@ bool calcObjectPolygon(const PredictedObject & object, Polygon2d * object_polygo\n         obj_x + r * std::cos(2.0 * M_PI / N * i), obj_y + r * std::sin(2.0 * M_PI / N * i));\n     }\n   } else if (object.shape.type == Shape::POLYGON) {\n+    tf2::Transform tf_map2obj;\n+    tf2::fromMsg(object.kinematics.initial_pose_with_covariance.pose, tf_map2obj);\n     const auto obj_points = object.shape.footprint.points;\n     for (const auto & obj_point : obj_points) {\n-      object_polygon->outer().emplace_back(obj_point.x, obj_point.y);\n+      tf2::Vector3 obj(obj_point.x, obj_point.y, obj_point.z);\n+      tf2::Vector3 tf_obj = tf_map2obj * obj;\n+      object_polygon->outer().emplace_back(tf_obj.x(), tf_obj.y());\n     }\n   } else {\n     RCLCPP_WARN("
        }
    ],
    "autowarefoundation/autoware.universe/253": [
        {
            "sha": "0529066e62cb83292127a59de700d6f62eb9e9b9",
            "filename": "sensing/pointcloud_preprocessor/src/outlier_filter/ring_outlier_filter_nodelet.cpp",
            "status": "modified",
            "additions": 22,
            "deletions": 12,
            "changes": 34,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7176acd02fb02d5de9101b65427b4fa25844bcee/sensing%2Fpointcloud_preprocessor%2Fsrc%2Foutlier_filter%2Fring_outlier_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7176acd02fb02d5de9101b65427b4fa25844bcee/sensing%2Fpointcloud_preprocessor%2Fsrc%2Foutlier_filter%2Fring_outlier_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Foutlier_filter%2Fring_outlier_filter_nodelet.cpp?ref=7176acd02fb02d5de9101b65427b4fa25844bcee",
            "patch": "@@ -39,6 +39,7 @@ void RingOutlierFilterComponent::filter(\n   PointCloud2 & output)\n {\n   boost::mutex::scoped_lock lock(mutex_);\n+  output.header = input->header;\n   if (input->row_step < 1) {\n     return;\n   }\n@@ -53,38 +54,47 @@ void RingOutlierFilterComponent::filter(\n       .emplace_back(idx);\n   }\n \n-  output.header = input->header;\n   PointCloud2Modifier<PointXYZI> output_modifier{output, input->header.frame_id};\n   output_modifier.reserve(input->width);\n \n   std::vector<std::size_t> tmp_indices;\n   tmp_indices.reserve(input->width);\n \n+  const auto azimuth_offset =\n+    input->fields.at(static_cast<size_t>(autoware_point_types::PointIndex::Azimuth)).offset;\n+  const auto distance_offset =\n+    input->fields.at(static_cast<size_t>(autoware_point_types::PointIndex::Distance)).offset;\n   for (const auto & ring_indices : input_ring_array) {\n     if (ring_indices.size() < 2) {\n       continue;\n     }\n \n-    for (size_t idx = 0; idx < ring_indices.size() - 1; ++idx) {\n-      const auto current_idx = ring_indices.at(idx);\n-      const auto next_idx = ring_indices.at(idx + 1);\n-      PointXYZIRADRT * current_pt =\n-        reinterpret_cast<PointXYZIRADRT *>(&input_ptr->data[current_idx]);\n-      PointXYZIRADRT * next_pt = reinterpret_cast<PointXYZIRADRT *>(&input_ptr->data[next_idx]);\n+    for (size_t idx = 0U; idx < ring_indices.size() - 1; ++idx) {\n+      const auto & current_idx = ring_indices.at(idx);\n+      const auto & next_idx = ring_indices.at(idx + 1);\n       tmp_indices.emplace_back(current_idx);\n \n       // if(std::abs(iter->distance - (iter+1)->distance) <= std::sqrt(iter->distance) * 0.08)\n-      float azimuth_diff = next_pt->azimuth - current_pt->azimuth;\n+      const auto current_pt_azimuth =\n+        *reinterpret_cast<float *>(&input_ptr->data[current_idx + azimuth_offset]);\n+      const auto next_pt_azimuth =\n+        *reinterpret_cast<float *>(&input_ptr->data[next_idx + azimuth_offset]);\n+      float azimuth_diff = next_pt_azimuth - current_pt_azimuth;\n       azimuth_diff = azimuth_diff < 0.f ? azimuth_diff + 36000.f : azimuth_diff;\n \n+      const auto current_pt_distance =\n+        *reinterpret_cast<float *>(&input_ptr->data[current_idx + distance_offset]);\n+      const auto next_pt_distance =\n+        *reinterpret_cast<float *>(&input_ptr->data[next_idx + distance_offset]);\n+\n       if (\n-        std::max(current_pt->distance, next_pt->distance) <\n-          std::min(current_pt->distance, next_pt->distance) * distance_ratio_ &&\n+        std::max(current_pt_distance, next_pt_distance) <\n+          std::min(current_pt_distance, next_pt_distance) * distance_ratio_ &&\n         azimuth_diff < 100.f) {\n         continue;\n       }\n       if (isCluster(input_ptr, tmp_indices)) {\n-        for (const auto tmp_idx : tmp_indices) {\n+        for (const auto & tmp_idx : tmp_indices) {\n           output_modifier.push_back(\n             std::move(*reinterpret_cast<PointXYZI *>(&input_ptr->data[tmp_idx])));\n         }\n@@ -95,7 +105,7 @@ void RingOutlierFilterComponent::filter(\n       continue;\n     }\n     if (isCluster(input_ptr, tmp_indices)) {\n-      for (const auto tmp_idx : tmp_indices) {\n+      for (const auto & tmp_idx : tmp_indices) {\n         output_modifier.push_back(\n           std::move(*reinterpret_cast<PointXYZI *>(&input_ptr->data[tmp_idx])));\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/264": [
        {
            "sha": "d24ebb3aa37034233c7817f551efc492f493adaa",
            "filename": "map/lanelet2_extension/lib/query.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 12,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9f65fdeb6167218e2d682da46182a74485770614/map%2Flanelet2_extension%2Flib%2Fquery.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9f65fdeb6167218e2d682da46182a74485770614/map%2Flanelet2_extension%2Flib%2Fquery.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Flanelet2_extension%2Flib%2Fquery.cpp?ref=9f65fdeb6167218e2d682da46182a74485770614",
            "patch": "@@ -34,17 +34,6 @@\n #include <vector>\n \n using lanelet::utils::to2D;\n-namespace\n-{\n-double getAngleDifference(const double angle1, const double angle2)\n-{\n-  const double normalized_angle1 = tier4_autoware_utils::normalizeRadian(angle1);\n-  const double normalized_angle2 = tier4_autoware_utils::normalizeRadian(angle2);\n-  const double diff_angle = std::fabs(normalized_angle1 - normalized_angle2);\n-  return diff_angle;\n-}\n-\n-}  // namespace\n \n namespace lanelet\n {\n@@ -727,7 +716,7 @@ bool query::getClosestLanelet(\n       lanelet::ConstLineString3d segment = getClosestSegment(search_point, llt.centerline());\n       double segment_angle = std::atan2(\n         segment.back().y() - segment.front().y(), segment.back().x() - segment.front().x());\n-      double angle_diff = getAngleDifference(segment_angle, pose_yaw);\n+      double angle_diff = std::abs(tier4_autoware_utils::normalizeRadian(segment_angle - pose_yaw));\n       if (angle_diff < min_angle) {\n         min_angle = angle_diff;\n         *closest_lanelet_ptr = llt;"
        }
    ],
    "autowarefoundation/autoware.universe/274": [
        {
            "sha": "a3cd7d2219ef0a76ba086d5a12282d2625605ca3",
            "filename": "control/vehicle_cmd_gate/src/vehicle_cmd_gate.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/04d3452bfb6ad5493cc22da1150d3ee33a5eaba2/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/04d3452bfb6ad5493cc22da1150d3ee33a5eaba2/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp?ref=04d3452bfb6ad5493cc22da1150d3ee33a5eaba2",
            "patch": "@@ -692,7 +692,7 @@ VehicleCmdGate::StartRequest::StartRequest(rclcpp::Node * node, bool use_start_r\n   request_start_pub_ = node_->create_publisher<tier4_debug_msgs::msg::BoolStamped>(\n     \"/api/autoware/get/start_accepted\", rclcpp::QoS(1));\n   current_twist_sub_ = node_->create_subscription<nav_msgs::msg::Odometry>(\n-    \"/localization/twist\", rclcpp::QoS(1),\n+    \"/localization/kinematic_state\", rclcpp::QoS(1),\n     std::bind(&VehicleCmdGate::StartRequest::onCurrentTwist, this, _1));\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/277": [
        {
            "sha": "297f363e83f206428fffe21ed80c0aae0bcd004d",
            "filename": "launch/tier4_localization_launch/launch/util/util.launch.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/56829e300ebf15328804e59d29d22e0f85e9e4cd/launch%2Ftier4_localization_launch%2Flaunch%2Futil%2Futil.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/56829e300ebf15328804e59d29d22e0f85e9e4cd/launch%2Ftier4_localization_launch%2Flaunch%2Futil%2Futil.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_localization_launch%2Flaunch%2Futil%2Futil.launch.py?ref=56829e300ebf15328804e59d29d22e0f85e9e4cd",
            "patch": "@@ -55,7 +55,7 @@ def load_composable_node_param(param_path):\n     )\n     random_downsample_component = ComposableNode(\n         package=\"pointcloud_preprocessor\",\n-        plugin=\"pointcloud_preprocessor::VoxelGridDownsampleFilterComponent\",\n+        plugin=\"pointcloud_preprocessor::RandomDownsampleFilterComponent\",\n         name=\"random_downsample_filter\",\n         remappings=[\n             (\"input\", LaunchConfiguration(\"output_voxel_grid_downsample_sensor_points_topic\")),"
        }
    ],
    "autowarefoundation/autoware.universe/278": [
        {
            "sha": "d2c41f47cd27a5a8850c03583ee9eaffd40bf588",
            "filename": "localization/ndt_scan_matcher/src/util_func.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 6,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/66e9d03d6ec95c960cb5cd00b4569af458419146/localization%2Fndt_scan_matcher%2Fsrc%2Futil_func.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/66e9d03d6ec95c960cb5cd00b4569af458419146/localization%2Fndt_scan_matcher%2Fsrc%2Futil_func.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Futil_func.cpp?ref=66e9d03d6ec95c960cb5cd00b4569af458419146",
            "patch": "@@ -220,12 +220,12 @@ std::vector<geometry_msgs::msg::Pose> createRandomPoseArray(\n   const Eigen::Map<const RowMatrixXd> covariance =\n     makeEigenCovariance(base_pose_with_cov.pose.covariance);\n \n-  std::normal_distribution<> x_distribution(0.0, covariance(0, 0));\n-  std::normal_distribution<> y_distribution(0.0, covariance(1, 1));\n-  std::normal_distribution<> z_distribution(0.0, covariance(2, 2));\n-  std::normal_distribution<> roll_distribution(0.0, covariance(3, 3));\n-  std::normal_distribution<> pitch_distribution(0.0, covariance(4, 4));\n-  std::normal_distribution<> yaw_distribution(0.0, covariance(5, 5));\n+  std::normal_distribution<> x_distribution(0.0, std::sqrt(covariance(0, 0)));\n+  std::normal_distribution<> y_distribution(0.0, std::sqrt(covariance(1, 1)));\n+  std::normal_distribution<> z_distribution(0.0, std::sqrt(covariance(2, 2)));\n+  std::normal_distribution<> roll_distribution(0.0, std::sqrt(covariance(3, 3)));\n+  std::normal_distribution<> pitch_distribution(0.0, std::sqrt(covariance(4, 4)));\n+  std::normal_distribution<> yaw_distribution(0.0, std::sqrt(covariance(5, 5)));\n \n   const auto base_rpy = getRPY(base_pose_with_cov);\n "
        }
    ],
    "autowarefoundation/autoware.universe/280": [
        {
            "sha": "fb9cb9071153c08a9b451a1e991104164717af67",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1a1c6954d4b92272bc63c49fc1bb96865c56ee31/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1a1c6954d4b92272bc63c49fc1bb96865c56ee31/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=1a1c6954d4b92272bc63c49fc1bb96865c56ee31",
            "patch": "@@ -44,7 +44,7 @@ static geometry_msgs::msg::Pose getObjectPoseWithVelocityDirection(\n   double yaw, pitch, roll;\n   tf2::getEulerYPR(obj_pose.orientation, yaw, pitch, roll);\n   tf2::Quaternion inv_q;\n-  inv_q.setRPY(roll, pitch, -yaw);\n+  inv_q.setRPY(roll, pitch, yaw + M_PI);\n   obj_pose.orientation = tf2::toMsg(inv_q);\n   return obj_pose;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/298": [
        {
            "sha": "cbf4630e201e4c946600ab632463663482a737f0",
            "filename": "perception/euclidean_cluster/CMakeLists.txt",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f14c3a3240eed27c72c2aefe5bfd333521c3bfe3/perception%2Feuclidean_cluster%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f14c3a3240eed27c72c2aefe5bfd333521c3bfe3/perception%2Feuclidean_cluster%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Feuclidean_cluster%2FCMakeLists.txt?ref=f14c3a3240eed27c72c2aefe5bfd333521c3bfe3",
            "patch": "@@ -5,7 +5,7 @@ if(NOT CMAKE_CXX_STANDARD)\n \tset(CMAKE_CXX_STANDARD 14)\n endif()\n if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n-  add_compile_options(-Wall -Wextra -Wpedantic)\n+  add_compile_options(-Wall -Wextra -Wpedantic -Werror)\n endif()\n \n find_package(ament_cmake_auto REQUIRED)\n@@ -15,6 +15,7 @@ ament_auto_find_build_dependencies()\n \n include_directories(\n   include\n+  SYSTEM\n   ${PCL_COMMON_INCLUDE_DIRS}\n   ${PCL_INCLUDE_DIRS}\n )"
        }
    ],
    "autowarefoundation/autoware.universe/305": [
        {
            "sha": "a8786427b27f66be6aa475bb67f1b772db1ae8bb",
            "filename": "planning/behavior_velocity_planner/src/scene_module/detection_area/scene.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/41956928d1e5dbba71a78b039f1a9791c10fa298/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fdetection_area%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/41956928d1e5dbba71a78b039f1a9791c10fa298/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fdetection_area%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fdetection_area%2Fscene.cpp?ref=41956928d1e5dbba71a78b039f1a9791c10fa298",
            "patch": "@@ -171,11 +171,13 @@ boost::optional<PathIndexWithOffset> findForwardOffsetSegment(\n     const auto p_front = to_bg2d(path.points.at(i).point.pose.position);\n     const auto p_back = to_bg2d(path.points.at(i + 1).point.pose.position);\n \n-    sum_length += bg::distance(p_front, p_back);\n+    const auto segment_length = bg::distance(p_front, p_back);\n+    sum_length += segment_length;\n \n     // If it's over offset point, return front index and remain offset length\n     if (sum_length >= offset_length) {\n-      return std::make_pair(i, sum_length - offset_length);\n+      const auto remain_length = sum_length - offset_length;\n+      return std::make_pair(i, segment_length - remain_length);\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/317": [
        {
            "sha": "386ad0ebe145939d122f7041c2397aae8e76f90b",
            "filename": "control/vehicle_cmd_gate/src/vehicle_cmd_gate.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2b7626668230f8f7da215ba7c05cf594c062fb4b/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2b7626668230f8f7da215ba7c05cf594c062fb4b/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp?ref=2b7626668230f8f7da215ba7c05cf594c062fb4b",
            "patch": "@@ -517,7 +517,7 @@ autoware_auto_control_msgs::msg::AckermannControlCommand VehicleCmdGate::createS\n   const\n {\n   autoware_auto_control_msgs::msg::AckermannControlCommand cmd;\n-\n+  cmd.stamp = this->now();\n   cmd.lateral.steering_tire_angle = current_steer_;\n   cmd.lateral.steering_tire_rotation_rate = 0.0;\n   cmd.longitudinal.speed = 0.0;"
        }
    ],
    "autowarefoundation/autoware.universe/318": [
        {
            "sha": "ced4536cf122e2e369c893cb914375b00a2ff29a",
            "filename": "common/web_controller/launch/web_controller.launch.xml",
            "status": "modified",
            "additions": 0,
            "deletions": 3,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fa18364a5ca753c0b5a6f774162dcfe3f81883c7/common%2Fweb_controller%2Flaunch%2Fweb_controller.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fa18364a5ca753c0b5a6f774162dcfe3f81883c7/common%2Fweb_controller%2Flaunch%2Fweb_controller.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fweb_controller%2Flaunch%2Fweb_controller.launch.xml?ref=fa18364a5ca753c0b5a6f774162dcfe3f81883c7",
            "patch": "@@ -1,8 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <launch>\n   <!-- Web Controller -->\n-\n   <executable cmd=\"python3 -m http.server 8085\" cwd=\"$(find-pkg-share web_controller)/www\" name=\"web_server\"/>\n-  <node pkg=\"rosbridge_server\" exec=\"rosbridge_websocket\" name=\"rosbridge_server_node\">\n-  </node>\n </launch>"
        }
    ],
    "autowarefoundation/autoware.universe/321": [
        {
            "sha": "bc1b41a7e1abe4e43a24656c041691412d456a95",
            "filename": "planning/behavior_path_planner/src/turn_signal_decider.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2e7ac270b27d2ac82e5f39c4c7b0b27e78840fc6/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2e7ac270b27d2ac82e5f39c4c7b0b27e78840fc6/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp?ref=2e7ac270b27d2ac82e5f39c4c7b0b27e78840fc6",
            "patch": "@@ -87,9 +87,7 @@ std::pair<TurnIndicatorsCommand, double> TurnSignalDecider::getIntersectionTurnS\n       if (\n         lane.attributeOr(\"turn_signal_distance\", std::numeric_limits<double>::max()) <\n         distance_from_vehicle_front) {\n-        if (1 < path_point.lane_ids.size() && lane.id() == path_point.lane_ids.back()) {\n-          continue;\n-        }\n+        continue;\n       }\n       if (lane.attributeOr(\"turn_direction\", std::string(\"none\")) == \"left\") {\n         turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;"
        }
    ],
    "autowarefoundation/autoware.universe/340": [
        {
            "sha": "5f1c27539bcc155a2452bef71453b3c004e708a3",
            "filename": "planning/motion_velocity_smoother/src/motion_velocity_smoother_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 4,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2908b730799731a96b534dd1acf134603919ff93/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2908b730799731a96b534dd1acf134603919ff93/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp?ref=2908b730799731a96b534dd1acf134603919ff93",
            "patch": "@@ -367,7 +367,7 @@ void MotionVelocitySmootherNode::onExternalVelocityLimit(const VelocityLimit::Co\n   // constraints\n   if (!prev_output_.empty()) {\n     // if external velocity limit decreases\n-    if ((external_velocity_limit_ - msg->max_velocity) > eps) {\n+    if (std::fabs((external_velocity_limit_ - msg->max_velocity)) > eps) {\n       if (prev_closest_point_) {\n         const double v0 = prev_closest_point_->longitudinal_velocity_mps;\n         const double a0 = prev_closest_point_->acceleration_mps2;\n@@ -404,9 +404,6 @@ void MotionVelocitySmootherNode::onExternalVelocityLimit(const VelocityLimit::Co\n           }\n         }\n       }\n-      // if external velocity limit increases\n-    } else if ((msg->max_velocity - external_velocity_limit_) > eps) {\n-      max_velocity_with_deceleration_ = msg->max_velocity;\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/365": [
        {
            "sha": "1922cb97b1286487e568bb93fb458fd2a11c68a3",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 9,
            "changes": 22,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/89f2abb4d3b90f396adfa2660df34e53ab1cc3ad/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/89f2abb4d3b90f396adfa2660df34e53ab1cc3ad/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=89f2abb4d3b90f396adfa2660df34e53ab1cc3ad",
            "patch": "@@ -1682,22 +1682,26 @@ void AvoidanceModule::generateExtendedDrivableArea(ShiftedPath * shifted_path) c\n           extended_lanelets.push_back(lanelet_at_left.get());\n           lanelet_at_left = route_handler->getLeftLanelet(lanelet_at_left.get());\n         }\n-        auto lanelet_at_right =\n-          planner_data_->route_handler->getRightLanelet(lanelet_at_left.get());\n-        while (lanelet_at_right) {\n-          extended_lanelets.push_back(lanelet_at_right.get());\n-          lanelet_at_right = route_handler->getRightLanelet(lanelet_at_right.get());\n+        if (lanelet_at_left) {\n+          auto lanelet_at_right =\n+            planner_data_->route_handler->getRightLanelet(lanelet_at_left.get());\n+          while (lanelet_at_right) {\n+            extended_lanelets.push_back(lanelet_at_right.get());\n+            lanelet_at_right = route_handler->getRightLanelet(lanelet_at_right.get());\n+          }\n         }\n       } else {\n         auto lanelet_at_right = route_handler->getRightLanelet(object_lanelet);\n         while (lanelet_at_right) {\n           extended_lanelets.push_back(lanelet_at_right.get());\n           lanelet_at_right = route_handler->getRightLanelet(lanelet_at_right.get());\n         }\n-        auto lanelet_at_left = route_handler->getLeftLanelet(lanelet_at_right.get());\n-        while (lanelet_at_left) {\n-          extended_lanelets.push_back(lanelet_at_left.get());\n-          lanelet_at_left = route_handler->getLeftLanelet(lanelet_at_left.get());\n+        if (lanelet_at_right) {\n+          auto lanelet_at_left = route_handler->getLeftLanelet(lanelet_at_right.get());\n+          while (lanelet_at_left) {\n+            extended_lanelets.push_back(lanelet_at_left.get());\n+            lanelet_at_left = route_handler->getLeftLanelet(lanelet_at_left.get());\n+          }\n         }\n       }\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/393": [
        {
            "sha": "9ab84b5ecf951670e71fbee793d31a8ee988bd8a",
            "filename": "planning/motion_velocity_smoother/src/smoother/jerk_filtered_smoother.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a20b38ea64addc5b3a571890ba051d849b17bbf3/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fjerk_filtered_smoother.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a20b38ea64addc5b3a571890ba051d849b17bbf3/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fjerk_filtered_smoother.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fjerk_filtered_smoother.cpp?ref=a20b38ea64addc5b3a571890ba051d849b17bbf3",
            "patch": "@@ -424,8 +424,7 @@ TrajectoryPoints JerkFilteredSmoother::mergeFilteredTrajectory(\n   if (getVx(backward_filtered, 0) < v0) {\n     double current_vel = v0;\n     double current_acc = a0;\n-    while (getVx(backward_filtered, i) < current_vel && current_vel <= getVx(forward_filtered, i) &&\n-           i < merged.size() - 1) {\n+    while (getVx(backward_filtered, i) < current_vel && i < merged.size() - 1) {\n       merged.at(i).longitudinal_velocity_mps = current_vel;\n       merged.at(i).acceleration_mps2 = current_acc;\n \n@@ -443,6 +442,10 @@ TrajectoryPoints JerkFilteredSmoother::mergeFilteredTrajectory(\n         current_vel = current_vel + current_acc * dt + 0.5 * j_min * dt * dt;\n         current_acc = current_acc + j_min * dt;\n       }\n+\n+      if (current_vel > getVx(forward_filtered, i)) {\n+        current_vel = getVx(forward_filtered, i);\n+      }\n       ++i;\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/410": [
        {
            "sha": "ffadfa4edd209f6959e9b821037f2f616290cc71",
            "filename": "vehicle/accel_brake_map_calibrator/accel_brake_map_calibrator/config/accel_brake_map_calibrator.param.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/13fd6480386d97b355f70fcb388b143795dffa13/vehicle%2Faccel_brake_map_calibrator%2Faccel_brake_map_calibrator%2Fconfig%2Faccel_brake_map_calibrator.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/13fd6480386d97b355f70fcb388b143795dffa13/vehicle%2Faccel_brake_map_calibrator%2Faccel_brake_map_calibrator%2Fconfig%2Faccel_brake_map_calibrator.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/vehicle%2Faccel_brake_map_calibrator%2Faccel_brake_map_calibrator%2Fconfig%2Faccel_brake_map_calibrator.param.yaml?ref=13fd6480386d97b355f70fcb388b143795dffa13",
            "patch": "@@ -1,4 +1,4 @@\n-accel_brake_map_calibrator:\n+/**:\n   ros__parameters:\n     update_hz: 10.0\n     initial_covariance: 0.05"
        }
    ],
    "autowarefoundation/autoware.universe/434": [
        {
            "sha": "bdaa5adae8bb040a66d9575e281747d5b426142e",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0f28aab19970aaf4684b71dfc4fe82c0e05465f4/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0f28aab19970aaf4684b71dfc4fe82c0e05465f4/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=0f28aab19970aaf4684b71dfc4fe82c0e05465f4",
            "patch": "@@ -484,7 +484,7 @@ bool lerpByTimeStamp(const PredictedPath & path, const double t_query, Pose * le\n     return false;\n   }\n \n-  const double t_final = time_step.seconds() * static_cast<double>(path.path.size());\n+  const double t_final = time_step.seconds() * static_cast<double>(path.path.size() - 1);\n   if (t_query > t_final) {\n     RCLCPP_DEBUG_STREAM(\n       rclcpp::get_logger(\"behavior_path_planner\").get_child(\"utilities\"),"
        }
    ],
    "autowarefoundation/autoware.universe/439": [
        {
            "sha": "f696e6b33d73d1feb4071c74b826dcaccf667f9c",
            "filename": "launch/tier4_vehicle_launch/launch/vehicle.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3e3c3463e1efd7415830bbaca11d3d7fc9d4137e/launch%2Ftier4_vehicle_launch%2Flaunch%2Fvehicle.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3e3c3463e1efd7415830bbaca11d3d7fc9d4137e/launch%2Ftier4_vehicle_launch%2Flaunch%2Fvehicle.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_vehicle_launch%2Flaunch%2Fvehicle.launch.xml?ref=3e3c3463e1efd7415830bbaca11d3d7fc9d4137e",
            "patch": "@@ -6,7 +6,7 @@\n   <arg name=\"simulation\" default=\"false\" description=\"use simulation\"/>\n   <arg name=\"initial_engage_state\" default=\"false\" description=\"/vehicle/engage state after starting Autoware\"/>\n \n-  <let name=\"vehicle_model_pkg\" value=\"$(find-pkg-share $(var vehicle_model)_description)\"/>\n+  <let name=\"vehicle_launch_pkg\" value=\"$(find-pkg-share $(var vehicle_model)_launch)\"/>\n \n   <!-- vehicle description -->\n   <group>\n@@ -18,7 +18,7 @@\n \n   <!-- vehicle interface -->\n   <group unless=\"$(var simulation)\">\n-    <include file=\"$(var vehicle_model_pkg)/launch/vehicle_interface.launch.xml\">\n+    <include file=\"$(var vehicle_launch_pkg)/launch/vehicle_interface.launch.xml\">\n       <arg name=\"vehicle_id\" value=\"$(var vehicle_id)\"/>\n       <arg name=\"initial_engage_state\" value=\"$(var initial_engage_state)\"/>\n     </include>"
        }
    ],
    "autowarefoundation/autoware.universe/451": [
        {
            "sha": "c368ca1011260803eacd4b95a89b21f498546454",
            "filename": "planning/behavior_path_planner/src/behavior_path_planner_node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f8ce65ad14aa0185687ee034555d4a675f1a8e1c/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f8ce65ad14aa0185687ee034555d4a675f1a8e1c/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp?ref=f8ce65ad14aa0185687ee034555d4a675f1a8e1c",
            "patch": "@@ -673,8 +673,8 @@ PathWithLaneId BehaviorPathPlannerNode::modifyPathForSmoothGoalConnection(\n   const PathWithLaneId & path) const\n {\n   const auto goal = planner_data_->route_handler->getGoalPose();\n-  const auto goal_lane_id = planner_data_->route_handler->getGoalLaneId();\n   const auto is_approved = planner_data_->approval.is_approved.data;\n+  auto goal_lane_id = planner_data_->route_handler->getGoalLaneId();\n \n   Pose refined_goal{};\n   {\n@@ -685,6 +685,7 @@ PathWithLaneId BehaviorPathPlannerNode::modifyPathForSmoothGoalConnection(\n       is_approved && planner_data_->route_handler->getPullOverTarget(\n                        planner_data_->route_handler->getShoulderLanelets(), &pull_over_lane)) {\n       refined_goal = planner_data_->route_handler->getPullOverGoalPose();\n+      goal_lane_id = pull_over_lane.id();\n     } else if (planner_data_->route_handler->getGoalLanelet(&goal_lanelet)) {\n       refined_goal = util::refineGoal(goal, goal_lanelet);\n     } else {"
        }
    ],
    "autowarefoundation/autoware.universe/474": [
        {
            "sha": "10ce43e18e6d5ed3ef3e46b09125d1c22b4a47b8",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5e30d7006189aea4e216a7555b9001f9ddf3e32e/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5e30d7006189aea4e216a7555b9001f9ddf3e32e/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=5e30d7006189aea4e216a7555b9001f9ddf3e32e",
            "patch": "@@ -352,7 +352,7 @@ PredictedPath convertToPredictedPath(\n {\n   PredictedPath predicted_path{};\n   predicted_path.time_step = rclcpp::Duration::from_seconds(resolution);\n-  predicted_path.path.reserve(path.points.size());\n+  predicted_path.path.reserve(std::min(path.points.size(), static_cast<size_t>(100)));\n   if (path.points.empty()) {\n     return predicted_path;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/487": [
        {
            "sha": "1a6af93ebadadd3df022e569d669238c0ca9cca7",
            "filename": "control/vehicle_cmd_gate/src/vehicle_cmd_gate.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2b43d946fdb880d292c8c4c305e36e7783373c9a/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2b43d946fdb880d292c8c4c305e36e7783373c9a/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp?ref=2b43d946fdb880d292c8c4c305e36e7783373c9a",
            "patch": "@@ -342,7 +342,7 @@ void VehicleCmdGate::onTimer()\n   } else {\n     if (current_gate_mode_.data == tier4_control_msgs::msg::GateMode::AUTO) {\n       turn_indicator = auto_commands_.turn_indicator;\n-      hazard_light = emergency_commands_.hazard_light;\n+      hazard_light = auto_commands_.hazard_light;\n       gear = auto_commands_.gear;\n \n       // Don't send turn signal when autoware is not engaged"
        }
    ],
    "autowarefoundation/autoware.universe/525": [
        {
            "sha": "f682919038b6f288d79f033f787f8eb3e3510956",
            "filename": "planning/behavior_velocity_planner/include/behavior_velocity_planner/planner_data.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c44e2f031031d224de7a36cf90c6ce26d4161711/planning%2Fbehavior_velocity_planner%2Finclude%2Fbehavior_velocity_planner%2Fplanner_data.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c44e2f031031d224de7a36cf90c6ce26d4161711/planning%2Fbehavior_velocity_planner%2Finclude%2Fbehavior_velocity_planner%2Fplanner_data.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Finclude%2Fbehavior_velocity_planner%2Fplanner_data.hpp?ref=c44e2f031031d224de7a36cf90c6ce26d4161711",
            "patch": "@@ -113,7 +113,7 @@ struct PlannerData\n     }\n \n     // Check all velocities\n-    constexpr double stop_velocity = 0.1;\n+    constexpr double stop_velocity = 1e-3;\n     for (const auto & v : vs) {\n       if (v >= stop_velocity) {\n         return false;"
        }
    ],
    "autowarefoundation/autoware.universe/526": [
        {
            "sha": "e509b80b3464a76dc902d3df68a7f90d4caf46ee",
            "filename": "planning/behavior_velocity_planner/src/scene_module/traffic_light/scene.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7aa97cf0e82f6a54888642136610b19432942a9b/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Ftraffic_light%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7aa97cf0e82f6a54888642136610b19432942a9b/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Ftraffic_light%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Ftraffic_light%2Fscene.cpp?ref=7aa97cf0e82f6a54888642136610b19432942a9b",
            "patch": "@@ -460,15 +460,15 @@ autoware_auto_planning_msgs::msg::PathWithLaneId TrafficLightModule::insertStopP\n   modified_path = input;\n \n   // Create stop pose\n-  size_t target_velocity_point_idx = std::max(static_cast<int>(insert_target_point_idx - 1), 0);\n+  const int target_velocity_point_idx = std::max(static_cast<int>(insert_target_point_idx - 1), 0);\n   auto target_point_with_lane_id = modified_path.points.at(target_velocity_point_idx);\n   target_point_with_lane_id.point.pose.position.x = target_point.x();\n   target_point_with_lane_id.point.pose.position.y = target_point.y();\n   target_point_with_lane_id.point.longitudinal_velocity_mps = 0.0;\n \n   // Insert stop pose into path or replace with zero velocity\n-  planning_utils::insertVelocity(\n-    modified_path, target_point_with_lane_id, 0.0, target_velocity_point_idx);\n+  size_t insert_index = insert_target_point_idx;\n+  planning_utils::insertVelocity(modified_path, target_point_with_lane_id, 0.0, insert_index);\n   if (static_cast<int>(target_velocity_point_idx) < first_stop_path_point_index_) {\n     first_stop_path_point_index_ = static_cast<int>(target_velocity_point_idx);\n     debug_data_.first_stop_pose = target_point_with_lane_id.point.pose;"
        }
    ],
    "autowarefoundation/autoware.universe/530": [
        {
            "sha": "8d44bf755bdb2ed6467a49fae89ded3761fb551c",
            "filename": "control/vehicle_cmd_gate/src/vehicle_cmd_gate.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 2,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3fd10df87621530e36689355ec65cc75c543a4b6/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3fd10df87621530e36689355ec65cc75c543a4b6/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp?ref=3fd10df87621530e36689355ec65cc75c543a4b6",
            "patch": "@@ -514,7 +514,10 @@ autoware_auto_control_msgs::msg::AckermannControlCommand VehicleCmdGate::createS\n   const\n {\n   autoware_auto_control_msgs::msg::AckermannControlCommand cmd;\n-  cmd.stamp = this->now();\n+  const auto t = this->now();\n+  cmd.stamp = t;\n+  cmd.lateral.stamp = t;\n+  cmd.longitudinal.stamp = t;\n   cmd.lateral.steering_tire_angle = current_steer_;\n   cmd.lateral.steering_tire_rotation_rate = 0.0;\n   cmd.longitudinal.speed = 0.0;\n@@ -527,7 +530,10 @@ autoware_auto_control_msgs::msg::AckermannControlCommand\n VehicleCmdGate::createEmergencyStopControlCmd() const\n {\n   autoware_auto_control_msgs::msg::AckermannControlCommand cmd;\n-\n+  const auto t = this->now();\n+  cmd.stamp = t;\n+  cmd.lateral.stamp = t;\n+  cmd.longitudinal.stamp = t;\n   cmd.lateral.steering_tire_angle = prev_control_cmd_.lateral.steering_tire_angle;\n   cmd.lateral.steering_tire_rotation_rate = prev_control_cmd_.lateral.steering_tire_rotation_rate;\n   cmd.longitudinal.speed = 0.0;"
        }
    ],
    "autowarefoundation/autoware.universe/542": [
        {
            "sha": "4a8b7bbda8a8036399d0d12bba2959b15b543fbf",
            "filename": "planning/planning_error_monitor/src/planning_error_monitor_node.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/16a3fd16a07345e8a07d7f7ef45385b7388dbba7/planning%2Fplanning_error_monitor%2Fsrc%2Fplanning_error_monitor_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/16a3fd16a07345e8a07d7f7ef45385b7388dbba7/planning%2Fplanning_error_monitor%2Fsrc%2Fplanning_error_monitor_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_error_monitor%2Fsrc%2Fplanning_error_monitor_node.cpp?ref=16a3fd16a07345e8a07d7f7ef45385b7388dbba7",
            "patch": "@@ -251,6 +251,9 @@ bool PlanningErrorMonitorNode::checkTrajectoryCurvature(\n   }\n \n   constexpr double points_distance = 1.0;\n+  const auto isValidDistance = [points_distance](const auto & p1, const auto & p2) {\n+    return calcDistance2d(p1, p2) >= points_distance;\n+  };\n \n   for (size_t p1_id = 0; p1_id < traj.points.size() - 2; ++p1_id) {\n     // Get Point1\n@@ -268,6 +271,9 @@ bool PlanningErrorMonitorNode::checkTrajectoryCurvature(\n     if (p1_id == p2_id || p1_id == p3_id || p2_id == p3_id) {\n       break;\n     }\n+    if (!isValidDistance(p1, p2) || !isValidDistance(p1, p3) || !isValidDistance(p2, p3)) {\n+      break;\n+    }\n \n     const double curvature = calcCurvature(p1, p2, p3);\n "
        }
    ],
    "autowarefoundation/autoware.universe/547": [
        {
            "sha": "d2d95fb5e3eacb6b39c1fa7f48b59d1e7169afd9",
            "filename": "perception/map_based_prediction/src/map_based_prediction_node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9d05a7f7ef4e80593492596f3705597ecf077f97/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9d05a7f7ef4e80593492596f3705597ecf077f97/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp?ref=9d05a7f7ef4e80593492596f3705597ecf077f97",
            "patch": "@@ -301,7 +301,7 @@ double MapBasedPredictionNode::getObjectYaw(const TrackedObject & object)\n   const auto & object_twist = object.kinematics.twist_with_covariance.twist;\n   const auto future_object_pose = tier4_autoware_utils::calcOffsetPose(\n     object_pose, object_twist.linear.x * 0.1, object_twist.linear.y * 0.1, 0.0);\n-  return tier4_autoware_utils::calcAzimuthAngle(future_object_pose.position, object_pose.position);\n+  return tier4_autoware_utils::calcAzimuthAngle(object_pose.position, future_object_pose.position);\n }\n \n void MapBasedPredictionNode::removeOldObjectsHistory(const double current_time)\n@@ -412,11 +412,11 @@ bool MapBasedPredictionNode::checkCloseLaneletCondition(\n   }\n \n   // Step3. Calculate the angle difference between the lane angle and obstacle angle\n-  double object_yaw = getObjectYaw(object);\n+  const double object_yaw = getObjectYaw(object);\n   const double lane_yaw = lanelet::utils::getLaneletAngle(\n     lanelet.second, object.kinematics.pose_with_covariance.pose.position);\n   const double delta_yaw = object_yaw - lane_yaw;\n-  const double normalized_delta_yaw = std::atan2(std::sin(delta_yaw), std::cos(delta_yaw));\n+  const double normalized_delta_yaw = tier4_autoware_utils::normalizeRadian(delta_yaw);\n   const double abs_norm_delta = std::fabs(normalized_delta_yaw);\n \n   // Step4. Check if the closest lanelet is valid, and add all"
        }
    ],
    "autowarefoundation/autoware.universe/571": [
        {
            "sha": "dc95371ef5c2230d54e5aee3fb8a48bea2008897",
            "filename": "common/tier4_perception_rviz_plugin/src/tools/pedestrian_pose.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3e83d54f1fe786bbce835dc14d7fee00bfbe53fd/common%2Ftier4_perception_rviz_plugin%2Fsrc%2Ftools%2Fpedestrian_pose.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3e83d54f1fe786bbce835dc14d7fee00bfbe53fd/common%2Ftier4_perception_rviz_plugin%2Fsrc%2Ftools%2Fpedestrian_pose.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_perception_rviz_plugin%2Fsrc%2Ftools%2Fpedestrian_pose.cpp?ref=3e83d54f1fe786bbce835dc14d7fee00bfbe53fd",
            "patch": "@@ -113,8 +113,8 @@ Object PedestrianInitialPoseTool::createObjectMsg() const\n \n   // shape\n   object.shape.type = Shape::CYLINDER;\n-  const double width = 0.8;\n-  const double length = 0.8;\n+  const double width = 0.6;\n+  const double length = 0.6;\n   object.shape.dimensions.x = length;\n   object.shape.dimensions.y = width;\n   object.shape.dimensions.z = 2.0;"
        }
    ],
    "autowarefoundation/autoware.universe/588": [
        {
            "sha": "cf4caf61d01e830b77766f895d791648e3d067dd",
            "filename": "simulator/dummy_perception_publisher/src/node.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7ae4569a0c6b8ac9c23bff2daf7250780e9aeda1/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7ae4569a0c6b8ac9c23bff2daf7250780e9aeda1/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp?ref=7ae4569a0c6b8ac9c23bff2daf7250780e9aeda1",
            "patch": "@@ -402,6 +402,18 @@ void DummyPerceptionPublisherNode::objectCallback(\n           dummy_perception_publisher::msg::Object object;\n           objects_.at(i) = *msg;\n           tf2::toMsg(tf_map2object_origin, objects_.at(i).initial_state.pose_covariance.pose);\n+\n+          // Use base_link Z\n+          geometry_msgs::msg::TransformStamped ros_map2base_link;\n+          try {\n+            ros_map2base_link = tf_buffer_.lookupTransform(\n+              \"map\", \"base_link\", rclcpp::Time(0), rclcpp::Duration::from_seconds(0.5));\n+            objects_.at(i).initial_state.pose_covariance.pose.position.z =\n+              ros_map2base_link.transform.translation.z;\n+          } catch (tf2::TransformException & ex) {\n+            RCLCPP_WARN_SKIPFIRST_THROTTLE(get_logger(), *get_clock(), 5000, \"%s\", ex.what());\n+            return;\n+          }\n           break;\n         }\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/590": [
        {
            "sha": "12fa33de8cd4d89f80d7a7c968eef6fc1a9f1332",
            "filename": "planning/behavior_velocity_planner/src/utilization/util.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/56bbb9b89daee54b57b4a3a83e1e18f585c5ec5a/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/56bbb9b89daee54b57b4a3a83e1e18f585c5ec5a/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Futil.cpp?ref=56bbb9b89daee54b57b4a3a83e1e18f585c5ec5a",
            "patch": "@@ -146,6 +146,7 @@ void extractClosePartition(\n   const geometry_msgs::msg::Point position, const BasicPolygons2d & all_partitions,\n   BasicPolygons2d & close_partition, const double distance_thresh)\n {\n+  close_partition.clear();\n   for (const auto & p : all_partitions) {\n     if (boost::geometry::distance(Point2d(position.x, position.y), p) < distance_thresh) {\n       close_partition.emplace_back(p);"
        }
    ],
    "autowarefoundation/autoware.universe/615": [
        {
            "sha": "d9c1e89800977313a8756463ce4fd0f7aa4c50ee",
            "filename": "planning/behavior_velocity_planner/src/node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f0ca4aa8a6ca97b5008b2e17bd8470f838757e1b/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f0ca4aa8a6ca97b5008b2e17bd8470f838757e1b/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp?ref=f0ca4aa8a6ca97b5008b2e17bd8470f838757e1b",
            "patch": "@@ -199,6 +199,9 @@ bool BehaviorVelocityPlannerNode::isDataReady(const PlannerData planner_data) co\n   if (!d.current_velocity) {\n     return false;\n   }\n+  if (!d.current_accel) {\n+    return false;\n+  }\n   if (!d.predicted_objects) {\n     return false;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/621": [
        {
            "sha": "912f8129da738b3ffefed827ba0ad15da1564cbf",
            "filename": "planning/motion_velocity_smoother/src/motion_velocity_smoother_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6af7232a4167b5a0d5bc2ee27e085ad5335b8f79/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6af7232a4167b5a0d5bc2ee27e085ad5335b8f79/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp?ref=6af7232a4167b5a0d5bc2ee27e085ad5335b8f79",
            "patch": "@@ -286,7 +286,7 @@ void MotionVelocitySmootherNode::onExternalVelocityLimit(const VelocityLimit::Co\n         const double a0 = prev_closest_point_->acceleration_mps2;\n \n         if (isEngageStatus(v0)) {\n-          max_velocity_with_deceleration_ = external_velocity_limit_;\n+          max_velocity_with_deceleration_ = msg->max_velocity;\n           external_velocity_limit_dist_ = 0.0;\n         } else {\n           const double a_min ="
        }
    ],
    "autowarefoundation/autoware.universe/626": [
        {
            "sha": "08f31b31bf65f2dcfaf67c2660c3edd164882a34",
            "filename": "launch/tier4_sensing_launch/package.xml",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ac4d738f47a47c250a78e42970f5a35a154ce601/launch%2Ftier4_sensing_launch%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ac4d738f47a47c250a78e42970f5a35a154ce601/launch%2Ftier4_sensing_launch%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_sensing_launch%2Fpackage.xml?ref=ac4d738f47a47c250a78e42970f5a35a154ce601",
            "patch": "@@ -9,7 +9,6 @@\n   <license>Apache License 2.0</license>\n \n   <buildtool_depend>ament_cmake_auto</buildtool_depend>\n-  <exec_depend>common_sensor_launch</exec_depend>\n   <exec_depend>vehicle_info_util</exec_depend>\n   <test_depend>ament_lint_auto</test_depend>\n   <test_depend>autoware_lint_common</test_depend>"
        }
    ],
    "autowarefoundation/autoware.universe/632": [
        {
            "sha": "cf48bd088d3781e9a86f916497e8fde91ead141d",
            "filename": "perception/euclidean_cluster/launch/euclidean_cluster.launch.py",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9bc5517f995afe2e633841b6993d4bdc7cf37658/perception%2Feuclidean_cluster%2Flaunch%2Feuclidean_cluster.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9bc5517f995afe2e633841b6993d4bdc7cf37658/perception%2Feuclidean_cluster%2Flaunch%2Feuclidean_cluster.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Feuclidean_cluster%2Flaunch%2Feuclidean_cluster.launch.py?ref=9bc5517f995afe2e633841b6993d4bdc7cf37658",
            "patch": "@@ -49,8 +49,8 @@ def load_composable_node_param(param_path):\n \n     # set compare map filter as a component\n     compare_map_filter_component = ComposableNode(\n-        package=\"pointcloud_preprocessor\",\n-        plugin=\"pointcloud_preprocessor::VoxelBasedCompareMapFilterComponent\",\n+        package=\"compare_map_segmentation\",\n+        plugin=\"compare_map_segmentation::VoxelBasedCompareMapFilterComponent\",\n         name=AnonName(\"compare_map_filter\"),\n         remappings=[\n             (\"input\", \"voxel_grid_filtered/pointcloud\"),"
        }
    ],
    "autowarefoundation/autoware.universe/633": [
        {
            "sha": "b0cad0282cf9aae5462255fa4b2f01b574030d85",
            "filename": "common/tier4_state_rviz_plugin/src/autoware_state_panel.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f8950423252bdd1c0a423d07218d67329576ec37/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f8950423252bdd1c0a423d07218d67329576ec37/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp?ref=f8950423252bdd1c0a423d07218d67329576ec37",
            "patch": "@@ -110,10 +110,10 @@ void AutowareStatePanel::onInitialize()\n     \"/vehicle/status/gear_status\", 10, std::bind(&AutowareStatePanel::onShift, this, _1));\n \n   sub_engage_ = raw_node_->create_subscription<tier4_external_api_msgs::msg::EngageStatus>(\n-    \"/api/external/get/engage\", 10, std::bind(&AutowareStatePanel::onEngageStatus, this, _1));\n+    \"/api/autoware/get/engage\", 10, std::bind(&AutowareStatePanel::onEngageStatus, this, _1));\n \n   client_engage_ = raw_node_->create_client<tier4_external_api_msgs::srv::Engage>(\n-    \"/api/external/set/engage\", rmw_qos_profile_services_default);\n+    \"/api/autoware/set/engage\", rmw_qos_profile_services_default);\n }\n \n void AutowareStatePanel::onGateMode(const tier4_control_msgs::msg::GateMode::ConstSharedPtr msg)"
        }
    ],
    "autowarefoundation/autoware.universe/634": [
        {
            "sha": "feac381416c374dc5400bd80f162318aa3c191ad",
            "filename": "planning/motion_velocity_smoother/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/eea85a5d1734efdb30d8e7a2b86818f8d4da17d9/planning%2Fmotion_velocity_smoother%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/eea85a5d1734efdb30d8e7a2b86818f8d4da17d9/planning%2Fmotion_velocity_smoother%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fpackage.xml?ref=eea85a5d1734efdb30d8e7a2b86818f8d4da17d9",
            "patch": "@@ -19,6 +19,7 @@\n   <depend>libboost-dev</depend>\n   <depend>nav_msgs</depend>\n   <depend>osqp_interface</depend>\n+  <depend>rclcpp</depend>\n   <depend>tf2</depend>\n   <depend>tf2_ros</depend>\n   <depend>tier4_autoware_utils</depend>"
        }
    ],
    "autowarefoundation/autoware.universe/639": [
        {
            "sha": "09a4cf970fbca8a904caec8ca583ace0a98553f0",
            "filename": "system/dummy_diag_publisher/launch/dummy_diag_publisher_node.launch.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1a3673bfa606fae069f06dd2c0ea818d441155be/system%2Fdummy_diag_publisher%2Flaunch%2Fdummy_diag_publisher_node.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1a3673bfa606fae069f06dd2c0ea818d441155be/system%2Fdummy_diag_publisher%2Flaunch%2Fdummy_diag_publisher_node.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdummy_diag_publisher%2Flaunch%2Fdummy_diag_publisher_node.launch.xml?ref=1a3673bfa606fae069f06dd2c0ea818d441155be",
            "patch": "@@ -5,9 +5,7 @@\n   <arg name=\"status\" default=\"0\"/>\n \n   <group>\n-    <push-ros-namespace namespace=\"dummy_diag_publisher\"/>\n-\n-    <node pkg=\"dummy_diag_publisher\" exec=\"dummy_diag_publisher\" name=\"$(var diag_name)\" output=\"screen\">\n+    <node pkg=\"dummy_diag_publisher\" exec=\"dummy_diag_publisher\" name=\"$(anon dummy_diag_publisher)\" output=\"screen\">\n       <param name=\"diag_name\" value=\"$(var diag_name)\"/>\n       <param name=\"update_rate\" value=\"$(var update_rate)\"/>\n       <param name=\"is_active\" value=\"$(var is_active)\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/646": [
        {
            "sha": "6f645b7a83ce6f4610d6c9b58c3324b248477b9e",
            "filename": "localization/ekf_localizer/src/ekf_localizer.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 9,
            "changes": 22,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5899841cbd966be1db4b88599c84cc61d544444a/localization%2Fekf_localizer%2Fsrc%2Fekf_localizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5899841cbd966be1db4b88599c84cc61d544444a/localization%2Fekf_localizer%2Fsrc%2Fekf_localizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fekf_localizer%2Fsrc%2Fekf_localizer.cpp?ref=5899841cbd966be1db4b88599c84cc61d544444a",
            "patch": "@@ -116,15 +116,19 @@ EKFLocalizer::EKFLocalizer(const std::string & node_name, const rclcpp::NodeOpti\n void EKFLocalizer::updatePredictFrequency()\n {\n   if (last_predict_time_) {\n-    ekf_rate_ = 1.0 / (get_clock()->now() - *last_predict_time_).seconds();\n-    DEBUG_INFO(get_logger(), \"[EKF] update ekf_rate_ to %f hz\", ekf_rate_);\n-    ekf_dt_ = 1.0 / std::max(ekf_rate_, 0.1);\n-\n-    /* Update discrete proc_cov*/\n-    proc_cov_vx_d_ = std::pow(proc_stddev_vx_c_ * ekf_dt_, 2.0);\n-    proc_cov_wz_d_ = std::pow(proc_stddev_wz_c_ * ekf_dt_, 2.0);\n-    proc_cov_yaw_d_ = std::pow(proc_stddev_yaw_c_ * ekf_dt_, 2.0);\n-    proc_cov_yaw_bias_d_ = std::pow(proc_stddev_yaw_bias_c_ * ekf_dt_, 2.0);\n+    if (get_clock()->now() < *last_predict_time_) {\n+      RCLCPP_WARN(get_logger(), \"Detected jump back in time\");\n+    } else {\n+      ekf_rate_ = 1.0 / (get_clock()->now() - *last_predict_time_).seconds();\n+      DEBUG_INFO(get_logger(), \"[EKF] update ekf_rate_ to %f hz\", ekf_rate_);\n+      ekf_dt_ = 1.0 / std::max(ekf_rate_, 0.1);\n+\n+      /* Update discrete proc_cov*/\n+      proc_cov_vx_d_ = std::pow(proc_stddev_vx_c_ * ekf_dt_, 2.0);\n+      proc_cov_wz_d_ = std::pow(proc_stddev_wz_c_ * ekf_dt_, 2.0);\n+      proc_cov_yaw_d_ = std::pow(proc_stddev_yaw_c_ * ekf_dt_, 2.0);\n+      proc_cov_yaw_bias_d_ = std::pow(proc_stddev_yaw_bias_c_ * ekf_dt_, 2.0);\n+    }\n   }\n   last_predict_time_ = std::make_shared<const rclcpp::Time>(get_clock()->now());\n }"
        }
    ],
    "autowarefoundation/autoware.universe/650": [
        {
            "sha": "75c15ffd01e575a40c8a442cba3d8aca5095ed9e",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/scene_module_interface.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e45890103b62d38ee0612b4ffa3b3d63fad86c25/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e45890103b62d38ee0612b4ffa3b3d63fad86c25/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp?ref=e45890103b62d38ee0612b4ffa3b3d63fad86c25",
            "patch": "@@ -83,7 +83,8 @@ class SceneModuleInterface\n   : name_{name},\n     logger_{node.get_logger().get_child(name)},\n     clock_{node.get_clock()},\n-    approval_handler_(node)\n+    approval_handler_(node),\n+    current_state_{BT::NodeStatus::IDLE}\n   {\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/664": [
        {
            "sha": "d93cc890054a527b38e57e385b71a52accfd00da",
            "filename": "planning/obstacle_avoidance_planner/include/obstacle_avoidance_planner/node.hpp",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1076f081d03884fcc65107b94157ca4f50667075/planning%2Fobstacle_avoidance_planner%2Finclude%2Fobstacle_avoidance_planner%2Fnode.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1076f081d03884fcc65107b94157ca4f50667075/planning%2Fobstacle_avoidance_planner%2Finclude%2Fobstacle_avoidance_planner%2Fnode.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Finclude%2Fobstacle_avoidance_planner%2Fnode.hpp?ref=1076f081d03884fcc65107b94157ca4f50667075",
            "patch": "@@ -51,6 +51,10 @@ template <typename T>\n double lerpTwistX(\n   const T & points, const geometry_msgs::msg::Point & target_pos, const size_t closest_seg_idx)\n {\n+  if (points.size() == 1) {\n+    return points.at(0).longitudinal_velocity_mps;\n+  }\n+\n   constexpr double epsilon = 1e-6;\n \n   const double closest_to_target_dist =\n@@ -70,6 +74,10 @@ template <typename T>\n double lerpPoseZ(\n   const T & points, const geometry_msgs::msg::Point & target_pos, const size_t closest_seg_idx)\n {\n+  if (points.size() == 1) {\n+    return points.at(0).pose.position.z;\n+  }\n+\n   constexpr double epsilon = 1e-6;\n \n   const double closest_to_target_dist ="
        }
    ],
    "autowarefoundation/autoware.universe/665": [
        {
            "sha": "f9927114fc35c2e4a67b8485c92e843082d329dc",
            "filename": "simulator/simple_planning_simulator/src/simple_planning_simulator/simple_planning_simulator_core.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6695e24702b6ac296fd34083cfbed0a382465a30/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6695e24702b6ac296fd34083cfbed0a382465a30/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp?ref=6695e24702b6ac296fd34083cfbed0a382465a30",
            "patch": "@@ -383,7 +383,7 @@ void SimplePlanningSimulator::add_measurement_noise(\n   odom.pose.pose.position.x += (*n.pos_dist_)(*n.rand_engine_);\n   odom.pose.pose.position.y += (*n.pos_dist_)(*n.rand_engine_);\n   const auto velocity_noise = (*n.vel_dist_)(*n.rand_engine_);\n-  odom.twist.twist.linear.x = velocity_noise;\n+  odom.twist.twist.linear.x += velocity_noise;\n   float32_t yaw = motion::motion_common::to_angle(odom.pose.pose.orientation);\n   yaw += static_cast<float>((*n.rpy_dist_)(*n.rand_engine_));\n   odom.pose.pose.orientation = motion::motion_common::from_angle(yaw);"
        }
    ],
    "autowarefoundation/autoware.universe/667": [
        {
            "sha": "f8a129af4d2a43096e9e3098e9707aa977ea9184",
            "filename": "launch/tier4_control_launch/config/trajectory_follower/lateral_controller.param.yaml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3ed3e4878298a2707ed77e98735979f61d6d9dac/launch%2Ftier4_control_launch%2Fconfig%2Ftrajectory_follower%2Flateral_controller.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3ed3e4878298a2707ed77e98735979f61d6d9dac/launch%2Ftier4_control_launch%2Fconfig%2Ftrajectory_follower%2Flateral_controller.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_control_launch%2Fconfig%2Ftrajectory_follower%2Flateral_controller.param.yaml?ref=3ed3e4878298a2707ed77e98735979f61d6d9dac",
            "patch": "@@ -44,8 +44,8 @@\n     # -- vehicle model --\n     vehicle_model_type: \"kinematics\" # vehicle model type for mpc prediction. option is kinematics, kinematics_no_delay, and dynamics\n     input_delay: 0.24                # steering input delay time for delay compensation\n-    vehicle_model_steer_tau: 0.1     # steering dynamics time constant (1d approximation) [s]\n-    steer_lim_deg: 20.0              # steering angle limit [deg]\n+    vehicle_model_steer_tau: 0.3     # steering dynamics time constant (1d approximation) [s]\n+    steer_lim_deg: 40.0              # steering angle limit [deg]\n     steer_rate_lim_dps: 600.0        # steering angle rate limit [deg/s]\n     acceleration_limit: 2.0          # acceleration limit for trajectory velocity modification [m/ss]\n     velocity_time_constant: 0.3      # velocity dynamics time constant  for trajectory velocity modification [s]"
        }
    ],
    "autowarefoundation/autoware.universe/681": [
        {
            "sha": "044c451160cc47f4d67caa3d50069a1124774aa9",
            "filename": "perception/map_based_prediction/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f8a96da2e11d4878c07db67ab1c4657101912a89/perception%2Fmap_based_prediction%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f8a96da2e11d4878c07db67ab1c4657101912a89/perception%2Fmap_based_prediction%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmap_based_prediction%2FCMakeLists.txt?ref=f8a96da2e11d4878c07db67ab1c4657101912a89",
            "patch": "@@ -34,5 +34,6 @@ endif()\n \n ament_auto_package(\n   INSTALL_TO_SHARE\n+  config\n   launch\n )"
        }
    ],
    "autowarefoundation/autoware.universe/689": [
        {
            "sha": "039c02c8c5aba3795314592d185a193e3b8bb724",
            "filename": "planning/behavior_velocity_planner/src/scene_module/traffic_light/scene.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f8bee4771a2f08573d128c96d40b2ba30a85ff6c/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Ftraffic_light%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f8bee4771a2f08573d128c96d40b2ba30a85ff6c/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Ftraffic_light%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Ftraffic_light%2Fscene.cpp?ref=f8bee4771a2f08573d128c96d40b2ba30a85ff6c",
            "patch": "@@ -465,6 +465,7 @@ autoware_auto_planning_msgs::msg::PathWithLaneId TrafficLightModule::insertStopP\n   target_point_with_lane_id.point.pose.position.x = target_point.x();\n   target_point_with_lane_id.point.pose.position.y = target_point.y();\n   target_point_with_lane_id.point.longitudinal_velocity_mps = 0.0;\n+  debug_data_.stop_poses.push_back(target_point_with_lane_id.point.pose);\n \n   // Insert stop pose into path or replace with zero velocity\n   size_t insert_index = insert_target_point_idx;"
        }
    ],
    "autowarefoundation/autoware.universe/691": [
        {
            "sha": "4395302d9092a0af2ae4a388b3e864a0cb8dee42",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/36f05dcfdc15c8bd01445bc965158ef29a1054f3/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/36f05dcfdc15c8bd01445bc965158ef29a1054f3/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=36f05dcfdc15c8bd01445bc965158ef29a1054f3",
            "patch": "@@ -123,8 +123,8 @@ bool IntersectionModule::modifyPathVelocity(\n     return false;\n   }\n \n-  if (stop_line_idx <= 0 || pass_judge_line_idx <= 0) {\n-    RCLCPP_DEBUG(logger_, \"stop line or pass judge line is at path[0], ignore planning.\");\n+  if (stop_line_idx <= 0) {\n+    RCLCPP_DEBUG(logger_, \"stop line line is at path[0], ignore planning.\");\n     RCLCPP_DEBUG(logger_, \"===== plan end =====\");\n     return true;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/697": [
        {
            "sha": "52594094bf8b965b596e42715af6c79668936529",
            "filename": "planning/behavior_velocity_planner/include/scene_module/occlusion_spot/grid_utils.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/662ad605b14fb827f1583ab3d839f3b75a189580/planning%2Fbehavior_velocity_planner%2Finclude%2Fscene_module%2Focclusion_spot%2Fgrid_utils.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/662ad605b14fb827f1583ab3d839f3b75a189580/planning%2Fbehavior_velocity_planner%2Finclude%2Fscene_module%2Focclusion_spot%2Fgrid_utils.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Finclude%2Fscene_module%2Focclusion_spot%2Fgrid_utils.hpp?ref=662ad605b14fb827f1583ab3d839f3b75a189580",
            "patch": "@@ -21,6 +21,7 @@\n #include <grid_map_ros/GridMapRosConverter.hpp>\n #include <opencv2/opencv.hpp>\n #include <tier4_autoware_utils/geometry/geometry.hpp>\n+#include <tier4_autoware_utils/math/normalization.hpp>\n #include <utilization/boost_geometry_helper.hpp>\n #include <utilization/util.hpp>\n "
        }
    ],
    "autowarefoundation/autoware.universe/699": [
        {
            "sha": "761a5e8c1f987de3499c7fb81d7470ebdb5f236d",
            "filename": "planning/behavior_velocity_planner/include/utilization/trajectory_utils.hpp",
            "status": "modified",
            "additions": 21,
            "deletions": 10,
            "changes": 31,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/33ad51714095270c26d3094c83a513a2a40fc89c/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/33ad51714095270c26d3094c83a513a2a40fc89c/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp?ref=33ad51714095270c26d3094c83a513a2a40fc89c",
            "patch": "@@ -142,18 +142,29 @@ inline bool smoothPath(\n       0, trajectory.size(), external_v_limit->max_velocity, trajectory);\n   }\n   const auto traj_lateral_acc_filtered = smoother->applyLateralAccelerationFilter(trajectory);\n-  // calc ego internal division point on path\n-  const auto traj_with_ego_point_with_idx =\n-    getLerpTrajectoryPointWithIdx(*traj_lateral_acc_filtered, current_pose.position);\n+  auto nearest_idx =\n+    tier4_autoware_utils::findNearestIndex(*traj_lateral_acc_filtered, current_pose.position);\n+  const auto dist_to_nearest = tier4_autoware_utils::calcSignedArcLength(\n+    *traj_lateral_acc_filtered, current_pose.position, nearest_idx);\n+\n+  // if trajectory has the almost same point as ego, don't insert the ego point\n+  constexpr double epsilon = 1e-2;\n   TrajectoryPoints traj_with_ego_point_on_path = *traj_lateral_acc_filtered;\n-  TrajectoryPoint ego_point_on_path = traj_with_ego_point_with_idx.first;\n-  const size_t nearest_seg_idx = traj_with_ego_point_with_idx.second;\n-  //! insert ego projected pose on path so new nearest segment will be nearest_seg_idx + 1\n-  traj_with_ego_point_on_path.insert(\n-    traj_with_ego_point_on_path.begin() + nearest_seg_idx, ego_point_on_path);\n+  if (std::fabs(dist_to_nearest) > epsilon) {\n+    // calc ego internal division point on path\n+    const auto traj_with_ego_point_with_idx =\n+      getLerpTrajectoryPointWithIdx(*traj_lateral_acc_filtered, current_pose.position);\n+    TrajectoryPoint ego_point_on_path = traj_with_ego_point_with_idx.first;\n+    const size_t nearest_seg_idx = traj_with_ego_point_with_idx.second;\n+    //! insert ego projected pose on path so new nearest segment will be nearest_seg_idx + 1\n+    traj_with_ego_point_on_path.insert(\n+      traj_with_ego_point_on_path.begin() + nearest_seg_idx, ego_point_on_path);\n+\n+    // ego point inserted is new nearest point\n+    nearest_idx = traj_with_ego_point_with_idx.second + 1;\n+  }\n   // Resample trajectory with ego-velocity based interval distances\n-  auto traj_resampled =\n-    smoother->resampleTrajectory(traj_with_ego_point_on_path, v0, nearest_seg_idx + 1);\n+  auto traj_resampled = smoother->resampleTrajectory(traj_with_ego_point_on_path, v0, nearest_idx);\n   const auto traj_resampled_closest = findNearestIndex(*traj_resampled, current_pose, max, M_PI_4);\n   std::vector<TrajectoryPoints> debug_trajectories;\n   // Clip trajectory from closest point"
        }
    ],
    "autowarefoundation/autoware.universe/715": [
        {
            "sha": "01796b2d2104d5deac163a41a12152ba3a1a3ab9",
            "filename": "perception/multi_object_tracker/src/multi_object_tracker_core.cpp",
            "status": "modified",
            "additions": 19,
            "deletions": 18,
            "changes": 37,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d35dd370b64bde39d0f75bca1f2bcc4257ff4f09/perception%2Fmulti_object_tracker%2Fsrc%2Fmulti_object_tracker_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d35dd370b64bde39d0f75bca1f2bcc4257ff4f09/perception%2Fmulti_object_tracker%2Fsrc%2Fmulti_object_tracker_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmulti_object_tracker%2Fsrc%2Fmulti_object_tracker_core.cpp?ref=d35dd370b64bde39d0f75bca1f2bcc4257ff4f09",
            "patch": "@@ -279,25 +279,26 @@ std::shared_ptr<Tracker> MultiObjectTracker::createNewTracker(\n   const rclcpp::Time & time) const\n {\n   const std::uint8_t label = utils::getHighestProbLabel(object.classification);\n-  const auto tracker = tracker_map_.at(label);\n-\n-  if (tracker == \"bicycle_tracker\") {\n-    return std::make_shared<BicycleTracker>(time, object);\n-  } else if (tracker == \"big_vehicle_tracker\") {\n-    return std::make_shared<BigVehicleTracker>(time, object);\n-  } else if (tracker == \"multi_vehicle_tracker\") {\n-    return std::make_shared<MultipleVehicleTracker>(time, object);\n-  } else if (tracker == \"normal_vehicle_tracker\") {\n-    return std::make_shared<NormalVehicleTracker>(time, object);\n-  } else if (tracker == \"pass_through_tracker\") {\n-    return std::make_shared<PassThroughTracker>(time, object);\n-  } else if (tracker == \"pedestrian_and_bicycle_tracker\") {\n-    return std::make_shared<PedestrianAndBicycleTracker>(time, object);\n-  } else if (tracker == \"pedestrian_tracker\") {\n-    return std::make_shared<PedestrianTracker>(time, object);\n-  } else {\n-    return std::make_shared<UnknownTracker>(time, object);\n+  if (tracker_map_.count(label) != 0) {\n+    const auto tracker = tracker_map_.at(label);\n+\n+    if (tracker == \"bicycle_tracker\") {\n+      return std::make_shared<BicycleTracker>(time, object);\n+    } else if (tracker == \"big_vehicle_tracker\") {\n+      return std::make_shared<BigVehicleTracker>(time, object);\n+    } else if (tracker == \"multi_vehicle_tracker\") {\n+      return std::make_shared<MultipleVehicleTracker>(time, object);\n+    } else if (tracker == \"normal_vehicle_tracker\") {\n+      return std::make_shared<NormalVehicleTracker>(time, object);\n+    } else if (tracker == \"pass_through_tracker\") {\n+      return std::make_shared<PassThroughTracker>(time, object);\n+    } else if (tracker == \"pedestrian_and_bicycle_tracker\") {\n+      return std::make_shared<PedestrianAndBicycleTracker>(time, object);\n+    } else if (tracker == \"pedestrian_tracker\") {\n+      return std::make_shared<PedestrianTracker>(time, object);\n+    }\n   }\n+  return std::make_shared<UnknownTracker>(time, object);\n }\n \n void MultiObjectTracker::onTimer()"
        }
    ],
    "autowarefoundation/autoware.universe/728": [
        {
            "sha": "55814309e4f41016dd7c28411d92dae834e197b0",
            "filename": "planning/behavior_path_planner/src/turn_signal_decider.cpp",
            "status": "modified",
            "additions": 27,
            "deletions": 23,
            "changes": 50,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/48d03a732b9a4d0eef74667d43e1b5dc78be010d/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/48d03a732b9a4d0eef74667d43e1b5dc78be010d/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp?ref=48d03a732b9a4d0eef74667d43e1b5dc78be010d",
            "patch": "@@ -67,42 +67,46 @@ std::pair<TurnIndicatorsCommand, double> TurnSignalDecider::getIntersectionTurnS\n   double accumulated_distance = 0;\n \n   auto prev_point = path.points.front();\n-  auto prev_lane_id = lanelet::InvalId;\n+  auto lane_attribute = std::string(\"none\");\n   for (const auto & path_point : path.points) {\n-    accumulated_distance +=\n+    const double path_point_distance =\n       tier4_autoware_utils::calcDistance3d(prev_point.point, path_point.point);\n+    accumulated_distance += path_point_distance;\n     prev_point = path_point;\n     const double distance_from_vehicle_front =\n       accumulated_distance - vehicle_pose_frenet.length - base_link2front_;\n-    if (distance_from_vehicle_front < 0.0) {\n-      continue;\n+    if (distance_from_vehicle_front > intersection_search_distance_) {\n+      return std::make_pair(turn_signal, distance);\n     }\n     // TODO(Horibe): Route Handler should be a library.\n     for (const auto & lane : route_handler.getLaneletsFromIds(path_point.lane_ids)) {\n-      if (lane.id() == prev_lane_id) {\n-        continue;\n+      // judgement of lighting of turn_signal\n+      bool lighting_turn_signal = false;\n+      if (lane.attributeOr(\"turn_direction\", std::string(\"none\")) != lane_attribute) {\n+        if (\n+          distance_from_vehicle_front <\n+            lane.attributeOr(\"turn_signal_distance\", intersection_search_distance_) &&\n+          path_point_distance > 0.0) {\n+          lighting_turn_signal = true;\n+        }\n+      } else {\n+        if (\n+          lane.hasAttribute(\"turn_direction\") &&\n+          distance_from_vehicle_front < path_point_distance && distance_from_vehicle_front > 0) {\n+          lighting_turn_signal = true;\n+        }\n       }\n-      prev_lane_id = lane.id();\n+      lane_attribute = lane.attributeOr(\"turn_direction\", std::string(\"none\"));\n \n-      if (\n-        lane.attributeOr(\"turn_signal_distance\", std::numeric_limits<double>::max()) <\n-        distance_from_vehicle_front) {\n-        continue;\n-      }\n-      if (lane.attributeOr(\"turn_direction\", std::string(\"none\")) == \"left\") {\n-        turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;\n-        distance = distance_from_vehicle_front;\n-        return std::make_pair(turn_signal, distance);\n-      }\n-      if (lane.attributeOr(\"turn_direction\", std::string(\"none\")) == \"right\") {\n-        turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n+      if (lighting_turn_signal) {\n+        if (lane_attribute == std::string(\"left\")) {\n+          turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;\n+        } else if (lane_attribute == std::string(\"right\")) {\n+          turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n+        }\n         distance = distance_from_vehicle_front;\n-        return std::make_pair(turn_signal, distance);\n       }\n     }\n-    if (distance_from_vehicle_front > intersection_search_distance_) {\n-      return std::make_pair(turn_signal, distance);\n-    }\n   }\n   return std::make_pair(turn_signal, distance);\n }"
        }
    ],
    "autowarefoundation/autoware.universe/731": [
        {
            "sha": "2923996ca8697b9f7e8d8ba600b63fb3a9f61390",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 12,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/271637c4c3a30892cab171ded2e6496fe2529cb6/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/271637c4c3a30892cab171ded2e6496fe2529cb6/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=271637c4c3a30892cab171ded2e6496fe2529cb6",
            "patch": "@@ -490,24 +490,19 @@ AvoidPointArray AvoidanceModule::calcRawShiftPointsFromObjects(\n     avoidance_debug_msg.max_shift_length = max_allowable_lateral_distance;\n \n     if (!(o.to_road_shoulder_distance > max_allowable_lateral_distance)) {\n-      avoidance_debug_msg.allow_avoidance = false;\n-      avoidance_debug_msg.failed_reason = AvoidanceDebugFactor::INSUFFICIENT_LATERAL_MARGIN;\n+      avoidance_debug_array_false_and_push_back(AvoidanceDebugFactor::INSUFFICIENT_LATERAL_MARGIN);\n+      continue;\n     }\n \n     const auto max_shift_length =\n       o.to_road_shoulder_distance - road_shoulder_safety_margin - 0.5 * vehicle_width;\n-    const auto max_left_shift_limit = [&o, &max_allowable_lateral_distance, &max_shift_length,\n-                                       this]() noexcept {\n-      const auto left_shift_constraint = std::min(getLeftShiftBound(), max_shift_length);\n-      return (o.to_road_shoulder_distance > max_allowable_lateral_distance) ? left_shift_constraint\n-                                                                            : 0.0;\n+\n+    const auto max_left_shift_limit = [&max_shift_length, this]() noexcept {\n+      return std::min(getLeftShiftBound(), max_shift_length);\n     };\n \n-    const auto max_right_shift_limit = [&o, &max_allowable_lateral_distance, &max_shift_length,\n-                                        this]() noexcept {\n-      const auto right_shift_constraint = std::max(getRightShiftBound(), -max_shift_length);\n-      return (o.to_road_shoulder_distance > max_allowable_lateral_distance) ? right_shift_constraint\n-                                                                            : 0.0;\n+    const auto max_right_shift_limit = [&max_shift_length, this]() noexcept {\n+      return std::max(getRightShiftBound(), -max_shift_length);\n     };\n \n     const auto shift_length = isOnRight(o)"
        }
    ],
    "autowarefoundation/autoware.universe/734": [
        {
            "sha": "7d628173b2e4c25ac5536461f957804c6aee272b",
            "filename": "perception/lidar_apollo_instance_segmentation/src/detector.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7435cba943eb5cef875c2d5ecb299f96b2c50a95/perception%2Flidar_apollo_instance_segmentation%2Fsrc%2Fdetector.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7435cba943eb5cef875c2d5ecb299f96b2c50a95/perception%2Flidar_apollo_instance_segmentation%2Fsrc%2Fdetector.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_apollo_instance_segmentation%2Fsrc%2Fdetector.cpp?ref=7435cba943eb5cef875c2d5ecb299f96b2c50a95",
            "patch": "@@ -103,6 +103,7 @@ bool LidarApolloInstanceSegmentation::transformCloud(\n         tf2::transformToEigen(transform_stamped.transform).matrix().cast<float>();\n       pcl::transformPointCloud(pcl_input, pcl_transformed_cloud, affine_matrix);\n       transformed_cloud.header.frame_id = target_frame_;\n+      pcl_transformed_cloud.header.frame_id = target_frame_;\n     } catch (tf2::TransformException & ex) {\n       RCLCPP_WARN(node_->get_logger(), \"%s\", ex.what());\n       return false;"
        }
    ],
    "autowarefoundation/autoware.universe/738": [
        {
            "sha": "31c6420a67870d365ae0daf97e45b68df5ea755b",
            "filename": "planning/motion_velocity_smoother/src/smoother/smoother_base.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8adff0c82cd38855cbcf81f313364d34fbc75bd1/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fsmoother_base.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8adff0c82cd38855cbcf81f313364d34fbc75bd1/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fsmoother_base.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fsmoother_base.cpp?ref=8adff0c82cd38855cbcf81f313364d34fbc75bd1",
            "patch": "@@ -105,7 +105,7 @@ boost::optional<TrajectoryPoints> SmootherBase::applyLateralAccelerationFilter(\n   for (size_t i = 0; i < output->size(); ++i) {\n     double curvature = 0.0;\n     const size_t start = i > after_decel_index ? i - after_decel_index : 0;\n-    const size_t end = std::min(output->size(), i + before_decel_index);\n+    const size_t end = std::min(output->size(), i + before_decel_index + 1);\n     for (size_t j = start; j < end; ++j) {\n       curvature = std::max(curvature, std::fabs(curvature_v->at(j)));\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/739": [
        {
            "sha": "adffe53472f9cb6ec1768e4a5ab091562f934db1",
            "filename": "launch/tier4_planning_launch/config/scenario_planning/common/motion_velocity_smoother/motion_velocity_smoother.param.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6e60c268bf44e75442e41fc8c27075e11fc38a80/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Fcommon%2Fmotion_velocity_smoother%2Fmotion_velocity_smoother.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6e60c268bf44e75442e41fc8c27075e11fc38a80/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Fcommon%2Fmotion_velocity_smoother%2Fmotion_velocity_smoother.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Fcommon%2Fmotion_velocity_smoother%2Fmotion_velocity_smoother.param.yaml?ref=6e60c268bf44e75442e41fc8c27075e11fc38a80",
            "patch": "@@ -2,6 +2,7 @@\n   ros__parameters:\n     # motion state constraints\n     max_velocity: 20.0      # max velocity limit [m/s]\n+    stop_decel: 0.0         # deceleration at a stop point[m/ss]\n \n     # external velocity limit parameter\n     margin_to_insert_external_velocity_limit: 0.3   #  margin distance to insert external velocity limit [m]"
        }
    ],
    "autowarefoundation/autoware.universe/741": [
        {
            "sha": "d1290bef41da160b7022164da83442a44803b3d6",
            "filename": "common/autoware_testing/design/autoware_testing-design.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7480dadfeeb0c3a3015169e6f5651c46d801850b/common%2Fautoware_testing%2Fdesign%2Fautoware_testing-design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7480dadfeeb0c3a3015169e6f5651c46d801850b/common%2Fautoware_testing%2Fdesign%2Fautoware_testing-design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fautoware_testing%2Fdesign%2Fautoware_testing-design.md?ref=7480dadfeeb0c3a3015169e6f5651c46d801850b",
            "patch": "@@ -38,7 +38,7 @@ Where\n \n `<executable_name>` - [required] tested node executable name.\n \n-`<param_filename>` - [optional] param filename. Default value is `test.param.yaml`. Required mostly in situation where there are multiple smoke tests in a package and each requires different paramteres set\n+`<param_filename>` - [optional] param filename. Default value is `test.param.yaml`. Required mostly in situation where there are multiple smoke tests in a package and each requires different parameters set\n \n `<arguments>` - [optional] arguments passed to executable. By default no arguments are passed.\n \n@@ -52,7 +52,7 @@ build/<package_name>/test_results/<package_name>/<executable_name>_smoke_test.xu\n \n ## References / External links\n \n-- <https://en.wikipedia.org/wiki/Smoke_testing_(software>)\n+- <https://en.wikipedia.org/wiki/Smoke_testing_(software)>\n - <https://github.com/ros2/ros_testing>\n - <https://github.com/ros2/launch/blob/master/launch_testing>\n "
        }
    ],
    "autowarefoundation/autoware.universe/743": [
        {
            "sha": "4b4f900bb6cd04d63ec594c21e13255bf77ed751",
            "filename": "common/autoware_auto_geometry/design/polygon_intersection_2d-design.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/138c96065d4fb75b66782cb0fc77a2e7511daa3b/common%2Fautoware_auto_geometry%2Fdesign%2Fpolygon_intersection_2d-design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/138c96065d4fb75b66782cb0fc77a2e7511daa3b/common%2Fautoware_auto_geometry%2Fdesign%2Fpolygon_intersection_2d-design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fautoware_auto_geometry%2Fdesign%2Fpolygon_intersection_2d-design.md?ref=138c96065d4fb75b66782cb0fc77a2e7511daa3b",
            "patch": "@@ -12,7 +12,7 @@ association and in any application that deals with the objects around the percei\n \n ## Design\n \n-[\\(Livermore, Calif, 1977\\)](https://www.osti.gov/servlets/purl/7309916/) mention the following\n+[\\(Livermore, Calif, 1977\\)](https://www.osti.gov/biblio/7309916/) mention the following\n observations about convex polygon intersection:\n \n - Intersection of two convex polygons is a convex polygon\n@@ -29,7 +29,7 @@ With the observation mentioned above, the current algorithm operates in the foll\n \n - Compute and find the vertices from each polygon that is contained in the other polygon\n   (Vertices A, C, D)\n-- Compute and find the intersection points between each polygon (Verties B, E)\n+- Compute and find the intersection points between each polygon (Vertices B, E)\n - Compute the convex hull shaped by these vertices by ordering them CCW.\n \n ### Inputs / Outputs / API"
        }
    ],
    "autowarefoundation/autoware.universe/745": [
        {
            "sha": "dfd9a9dec757aca1d4b6978104bbe76eb822dd82",
            "filename": "planning/motion_velocity_smoother/scripts/trajectory_visualizer.py",
            "status": "modified",
            "additions": 45,
            "deletions": 16,
            "changes": 61,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/25ad13386dbe887e2c8bf664820f242a69e21f96/planning%2Fmotion_velocity_smoother%2Fscripts%2Ftrajectory_visualizer.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/25ad13386dbe887e2c8bf664820f242a69e21f96/planning%2Fmotion_velocity_smoother%2Fscripts%2Ftrajectory_visualizer.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fscripts%2Ftrajectory_visualizer.py?ref=25ad13386dbe887e2c8bf664820f242a69e21f96",
            "patch": "@@ -43,6 +43,8 @@\n \n args = parser.parse_args()\n \n+PLOT_MIN_ARCLENGTH = -5\n+\n if args.length is None:\n     PLOT_MAX_ARCLENGTH = 200\n else:\n@@ -264,7 +266,7 @@ def setPlotTrajectoryVelocity(self):\n \n         self.ax1.set_title(\"trajectory's velocity\")\n         self.ax1.legend()\n-        self.ax1.set_xlim([0, PLOT_MAX_ARCLENGTH])\n+        self.ax1.set_xlim([PLOT_MIN_ARCLENGTH, PLOT_MAX_ARCLENGTH])\n         self.ax1.set_ylabel(\"vel [m/s]\")\n \n         return (\n@@ -370,14 +372,11 @@ def plotTrajectoryVelocity(self, data):\n             self.im9.set_data(x, y)\n             self.update_traj_final = False\n \n-            closest = self.calcClosestTrajectory(trajectory_final)\n-            if closest >= 0:\n-                x_closest = x[closest]\n-                self.im10.set_data(x_closest, self.localization_vx)\n-                self.im11.set_data(x_closest, self.vehicle_vx)\n+            self.im10.set_data(0, self.localization_vx)\n+            self.im11.set_data(0, self.vehicle_vx)\n \n             if self.velocity_limit is not None:\n-                x = [0, PLOT_MAX_ARCLENGTH]\n+                x = [PLOT_MIN_ARCLENGTH, PLOT_MAX_ARCLENGTH]\n                 y = [self.velocity_limit, self.velocity_limit]\n                 self.im12.set_data(x, y)\n \n@@ -400,13 +399,23 @@ def plotTrajectoryVelocity(self, data):\n         )\n \n     def CalcArcLength(self, traj):\n+        if len(traj.points) == 0:\n+            return\n+\n         s_arr = []\n         ds = 0.0\n         s_sum = 0.0\n \n-        if len(traj.points) > 0:\n-            s_arr.append(s_sum)\n+        closest_id = self.calcClosestTrajectory(traj)\n+        for i in range(1, closest_id):\n+            p0 = traj.points[i - 1]\n+            p1 = traj.points[i]\n+            dx = p1.pose.position.x - p0.pose.position.x\n+            dy = p1.pose.position.y - p0.pose.position.y\n+            ds = np.sqrt(dx**2 + dy**2)\n+            s_sum -= ds\n \n+        s_arr.append(s_sum)\n         for i in range(1, len(traj.points)):\n             p0 = traj.points[i - 1]\n             p1 = traj.points[i]\n@@ -418,13 +427,23 @@ def CalcArcLength(self, traj):\n         return s_arr\n \n     def CalcArcLengthPathWLid(self, traj):\n+        if len(traj.points) == 0:\n+            return\n+\n         s_arr = []\n         ds = 0.0\n         s_sum = 0.0\n \n-        if len(traj.points) > 0:\n-            s_arr.append(s_sum)\n+        closest_id = self.calcClosestPathWLid(traj)\n+        for i in range(1, closest_id):\n+            p0 = traj.points[i - 1].point\n+            p1 = traj.points[i].point\n+            dx = p1.pose.position.x - p0.pose.position.x\n+            dy = p1.pose.position.y - p0.pose.position.y\n+            ds = np.sqrt(dx**2 + dy**2)\n+            s_sum -= ds\n \n+        s_arr.append(s_sum)\n         for i in range(1, len(traj.points)):\n             p0 = traj.points[i - 1].point\n             p1 = traj.points[i].point\n@@ -436,13 +455,23 @@ def CalcArcLengthPathWLid(self, traj):\n         return s_arr\n \n     def CalcArcLengthPath(self, traj):\n+        if len(traj.points) == 0:\n+            return\n+\n         s_arr = []\n         ds = 0.0\n         s_sum = 0.0\n \n-        if len(traj.points) > 0:\n-            s_arr.append(s_sum)\n+        closest_id = self.calcClosestPath(traj)\n+        for i in range(1, closest_id):\n+            p0 = traj.points[i - 1]\n+            p1 = traj.points[i]\n+            dx = p1.pose.position.x - p0.pose.position.x\n+            dy = p1.pose.position.y - p0.pose.position.y\n+            ds = np.sqrt(dx**2 + dy**2)\n+            s_sum -= ds\n \n+        s_arr.append(s_sum)\n         for i in range(1, len(traj.points)):\n             p0 = traj.points[i - 1]\n             p1 = traj.points[i]\n@@ -528,17 +557,17 @@ def setPlotTrajectory(self):\n         (self.im2,) = self.ax1.plot([], [], label=\"4: final velocity\", marker=\"\")\n         self.ax1.set_title(\"trajectory's velocity\")\n         self.ax1.legend()\n-        self.ax1.set_xlim([0, PLOT_MAX_ARCLENGTH])\n+        self.ax1.set_xlim([PLOT_MIN_ARCLENGTH, PLOT_MAX_ARCLENGTH])\n         self.ax1.set_ylabel(\"vel [m/s]\")\n \n         self.ax2 = plt.subplot(3, 1, 2)\n-        self.ax2.set_xlim([0, PLOT_MAX_ARCLENGTH])\n+        self.ax2.set_xlim([PLOT_MIN_ARCLENGTH, PLOT_MAX_ARCLENGTH])\n         self.ax2.set_ylim([-1, 1])\n         self.ax2.set_ylabel(\"acc [m/ss]\")\n         (self.im3,) = self.ax2.plot([], [], label=\"final accel\")\n \n         self.ax3 = plt.subplot(3, 1, 3)\n-        self.ax3.set_xlim([0, PLOT_MAX_ARCLENGTH])\n+        self.ax3.set_xlim([PLOT_MIN_ARCLENGTH, PLOT_MAX_ARCLENGTH])\n         self.ax3.set_ylim([-2, 2])\n         self.ax3.set_xlabel(\"arclength [m]\")\n         self.ax3.set_ylabel(\"jerk [m/sss]\")"
        }
    ],
    "autowarefoundation/autoware.universe/746": [
        {
            "sha": "93b3d9c3d9617a15b9bf5e282aa939f190f7c488",
            "filename": "planning/behavior_velocity_planner/include/utilization/trajectory_utils.hpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9a0455985163650dd729b94e822db6291b7e7021/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9a0455985163650dd729b94e822db6291b7e7021/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp?ref=9a0455985163650dd729b94e822db6291b7e7021",
            "patch": "@@ -166,6 +166,9 @@ inline bool smoothPath(\n   // Resample trajectory with ego-velocity based interval distances\n   auto traj_resampled = smoother->resampleTrajectory(traj_with_ego_point_on_path, v0, nearest_idx);\n   const auto traj_resampled_closest = findNearestIndex(*traj_resampled, current_pose, max, M_PI_4);\n+  if (!traj_resampled_closest) {\n+    return false;\n+  }\n   std::vector<TrajectoryPoints> debug_trajectories;\n   // Clip trajectory from closest point\n   TrajectoryPoints clipped;"
        }
    ],
    "autowarefoundation/autoware.universe/747": [
        {
            "sha": "61f60a7f340319306c21c39498cd0e77251bb7ad",
            "filename": "system/emergency_handler/src/emergency_handler/emergency_handler_core.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d73d8e88893fd858ca84fa66624d2d2a48ecd9d9/system%2Femergency_handler%2Fsrc%2Femergency_handler%2Femergency_handler_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d73d8e88893fd858ca84fa66624d2d2a48ecd9d9/system%2Femergency_handler%2Fsrc%2Femergency_handler%2Femergency_handler_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Femergency_handler%2Fsrc%2Femergency_handler%2Femergency_handler_core.cpp?ref=d73d8e88893fd858ca84fa66624d2d2a48ecd9d9",
            "patch": "@@ -132,6 +132,8 @@ void EmergencyHandler::publishControlCommands()\n     autoware_auto_control_msgs::msg::AckermannControlCommand msg;\n     msg = selectAlternativeControlCommand();\n     msg.stamp = stamp;\n+    msg.lateral.stamp = stamp;\n+    msg.longitudinal.stamp = stamp;\n     pub_control_command_->publish(msg);\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/748": [
        {
            "sha": "b5a97435a623bbc178e00f022ac8e7e278773c05",
            "filename": "planning/behavior_path_planner/src/path_utilities.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 3,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/faf2f48bfc6bfb9f02c20e1c445d3513f132cf33/planning%2Fbehavior_path_planner%2Fsrc%2Fpath_utilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/faf2f48bfc6bfb9f02c20e1c445d3513f132cf33/planning%2Fbehavior_path_planner%2Fsrc%2Fpath_utilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fpath_utilities.cpp?ref=faf2f48bfc6bfb9f02c20e1c445d3513f132cf33",
            "patch": "@@ -313,10 +313,15 @@ std::pair<TurnIndicatorsCommand, double> getPathTurnSignal(\n   }\n \n   bool cross_line = false;\n-  if (\n-    left_start_point_is_in_lane != left_end_point_is_in_lane ||\n-    right_start_point_is_in_lane != right_end_point_is_in_lane) {\n+  bool TEMPORARY_SET_CROSSLINE_TRUE =\n+    true;  // due to a bug. See link:\n+           // https://github.com/autowarefoundation/autoware.universe/pull/748\n+  if (TEMPORARY_SET_CROSSLINE_TRUE) {\n     cross_line = true;\n+  } else {\n+    cross_line =\n+      (left_start_point_is_in_lane != left_end_point_is_in_lane ||\n+       right_start_point_is_in_lane != right_end_point_is_in_lane);\n   }\n \n   if (time_to_shift_start < prev_sec || distance_to_shift_start < tl_on_threshold_long) {"
        }
    ],
    "autowarefoundation/autoware.universe/758": [
        {
            "sha": "1e81c6ef5131c1d43721f32c4c0723f82c40f0a8",
            "filename": "planning/costmap_generator/CMakeLists.txt",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/68086493e57b45223131f514bd13698765e06006/planning%2Fcostmap_generator%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/68086493e57b45223131f514bd13698765e06006/planning%2Fcostmap_generator%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fcostmap_generator%2FCMakeLists.txt?ref=68086493e57b45223131f514bd13698765e06006",
            "patch": "@@ -33,6 +33,13 @@ target_link_libraries(costmap_generator_lib\n   FLANN::FLANN\n )\n \n+if(${PCL_VERSION} GREATER_EQUAL 1.12.1)\n+  find_package(Qhull REQUIRED)\n+  target_link_libraries(costmap_generator_lib\n+    QHULL::QHULL\n+  )\n+endif()\n+\n ament_auto_add_library(costmap_generator_node SHARED\n   nodes/costmap_generator/costmap_generator_node.cpp\n )"
        }
    ],
    "autowarefoundation/autoware.universe/760": [
        {
            "sha": "9f9646feb8f9ffd6c5ca01167725444e6d8e2139",
            "filename": "system/dummy_diag_publisher/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6eb0f9d45fe59691160f8650ed79feb5b6931c34/system%2Fdummy_diag_publisher%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6eb0f9d45fe59691160f8650ed79feb5b6931c34/system%2Fdummy_diag_publisher%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdummy_diag_publisher%2Fpackage.xml?ref=6eb0f9d45fe59691160f8650ed79feb5b6931c34",
            "patch": "@@ -11,6 +11,7 @@\n \n   <depend>diagnostic_updater</depend>\n   <depend>rclcpp</depend>\n+  <depend>rclcpp_components</depend>\n   <depend>tier4_autoware_utils</depend>\n \n   <exec_depend>rqt_reconfigure</exec_depend>"
        }
    ],
    "autowarefoundation/autoware.universe/761": [
        {
            "sha": "7e150cf96f087f36c8ce04f20f2572b49113471c",
            "filename": "simulator/dummy_perception_publisher/CMakeLists.txt",
            "status": "modified",
            "additions": 8,
            "deletions": 2,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/36468adbca74d6013098b430862bd56a4b77f7c5/simulator%2Fdummy_perception_publisher%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/36468adbca74d6013098b430862bd56a4b77f7c5/simulator%2Fdummy_perception_publisher%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fdummy_perception_publisher%2FCMakeLists.txt?ref=36468adbca74d6013098b430862bd56a4b77f7c5",
            "patch": "@@ -56,8 +56,14 @@ target_include_directories(dummy_perception_publisher_node\n     $<INSTALL_INTERFACE:include>)\n \n # For using message definitions from the same package\n-rosidl_target_interfaces(dummy_perception_publisher_node\n-  ${PROJECT_NAME} \"rosidl_typesupport_cpp\")\n+if(${rosidl_cmake_VERSION} VERSION_LESS 2.5.0)\n+  rosidl_target_interfaces(dummy_perception_publisher_node\n+    ${PROJECT_NAME} \"rosidl_typesupport_cpp\")\n+else()\n+  rosidl_get_typesupport_target(\n+    cpp_typesupport_target ${PROJECT_NAME} \"rosidl_typesupport_cpp\")\n+  target_link_libraries(dummy_perception_publisher_node \"${cpp_typesupport_target}\")\n+endif()\n \n # PCL dependencies \u2013 `ament_target_dependencies` doesn't respect the\n # components/modules selected above and only links in `common` ,so we need"
        }
    ],
    "autowarefoundation/autoware.universe/775": [
        {
            "sha": "59dec38b4e7f067bce7de520d8f24710917ade11",
            "filename": "perception/image_projection_based_fusion/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4f67a8e2b8e66bff1ed4087a1a90e1b2e4a0ba2f/perception%2Fimage_projection_based_fusion%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4f67a8e2b8e66bff1ed4087a1a90e1b2e4a0ba2f/perception%2Fimage_projection_based_fusion%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2Fpackage.xml?ref=4f67a8e2b8e66bff1ed4087a1a90e1b2e4a0ba2f",
            "patch": "@@ -20,6 +20,7 @@\n   <depend>rclcpp_components</depend>\n   <depend>sensor_msgs</depend>\n   <depend>tf2</depend>\n+  <depend>tf2_eigen</depend>\n   <depend>tf2_ros</depend>\n   <depend>tf2_sensor_msgs</depend>\n   <depend>tier4_perception_msgs</depend>"
        }
    ],
    "autowarefoundation/autoware.universe/776": [
        {
            "sha": "8fc3e3acfdf476d0004fbc65c1d14045986239ef",
            "filename": "common/osqp_interface/CMakeLists.txt",
            "status": "modified",
            "additions": 10,
            "deletions": 3,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/063fc4247ffce699198c98e0f995b055f4d6a340/common%2Fosqp_interface%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/063fc4247ffce699198c98e0f995b055f4d6a340/common%2Fosqp_interface%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fosqp_interface%2FCMakeLists.txt?ref=063fc4247ffce699198c98e0f995b055f4d6a340",
            "patch": "@@ -19,14 +19,17 @@ project(osqp_interface)\n # require that dependencies from package.xml be available\n find_package(ament_cmake_auto REQUIRED)\n find_package(Eigen3 REQUIRED)\n-find_package(osqp REQUIRED)\n-get_target_property(OSQP_INCLUDE_DIR osqp::osqp INTERFACE_INCLUDE_DIRECTORIES)\n \n ament_auto_find_build_dependencies(REQUIRED\n   ${${PROJECT_NAME}_BUILD_DEPENDS}\n   ${${PROJECT_NAME}_BUILDTOOL_DEPENDS}\n )\n \n+# after find_package(osqp_vendor) in ament_auto_find_build_dependencies\n+find_package(osqp REQUIRED)\n+get_target_property(OSQP_INCLUDE_SUB_DIR osqp::osqp INTERFACE_INCLUDE_DIRECTORIES)\n+get_filename_component(OSQP_INCLUDE_DIR ${OSQP_INCLUDE_SUB_DIR} PATH)\n+\n set(OSQP_INTERFACE_LIB_SRC\n   src/csc_matrix_conv.cpp\n   src/osqp_interface.cpp\n@@ -46,7 +49,11 @@ ament_auto_add_library(${PROJECT_NAME} SHARED\n autoware_set_compile_options(${PROJECT_NAME})\n target_compile_options(${PROJECT_NAME} PRIVATE -Wno-error=old-style-cast -Wno-error=useless-cast)\n \n-target_include_directories(osqp_interface PUBLIC \"${OSQP_INCLUDE_DIR}\")\n+target_include_directories(osqp_interface\n+  SYSTEM PUBLIC\n+    \"${OSQP_INCLUDE_DIR}\"\n+)\n+\n ament_target_dependencies(osqp_interface\n   Eigen3\n   osqp_vendor"
        }
    ],
    "autowarefoundation/autoware.universe/777": [
        {
            "sha": "f48ced30d275c1519d4b11455d5007aec3737807",
            "filename": "map/map_loader/CMakeLists.txt",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/75b53ef6a35a1f32c06879fbe4841896a6d4fb16/map%2Fmap_loader%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/75b53ef6a35a1f32c06879fbe4841896a6d4fb16/map%2Fmap_loader%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2FCMakeLists.txt?ref=75b53ef6a35a1f32c06879fbe4841896a6d4fb16",
            "patch": "@@ -21,6 +21,11 @@ ament_auto_add_library(pointcloud_map_loader_node SHARED\n )\n target_link_libraries(pointcloud_map_loader_node ${PCL_LIBRARIES})\n \n+target_include_directories(pointcloud_map_loader_node\n+  SYSTEM PUBLIC\n+    ${PCL_INCLUDE_DIRS}\n+)\n+\n rclcpp_components_register_node(pointcloud_map_loader_node\n   PLUGIN \"PointCloudMapLoaderNode\"\n   EXECUTABLE pointcloud_map_loader"
        }
    ],
    "autowarefoundation/autoware.universe/778": [
        {
            "sha": "e1f74fd40511d80188acc3e531701e7f6d42bd72",
            "filename": "map/map_tf_generator/package.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c42ed8edef3c334d9ea0584aea97601d4d041774/map%2Fmap_tf_generator%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c42ed8edef3c334d9ea0584aea97601d4d041774/map%2Fmap_tf_generator%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_tf_generator%2Fpackage.xml?ref=c42ed8edef3c334d9ea0584aea97601d4d041774",
            "patch": "@@ -12,7 +12,8 @@\n   <depend>libpcl-all-dev</depend>\n   <depend>pcl_conversions</depend>\n   <depend>rclcpp</depend>\n-  <depend>std_msgs</depend>\n+  <depend>rclcpp_components</depend>\n+  <depend>sensor_msgs</depend>\n   <depend>tf2</depend>\n   <depend>tf2_ros</depend>\n "
        }
    ],
    "autowarefoundation/autoware.universe/781": [
        {
            "sha": "86558c015ddb61892806205147d2807d71f05dfa",
            "filename": "planning/freespace_planner/include/freespace_planner/freespace_planner_node.hpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3b7552ca4da0b97c39458328d642fe9824549bdc/planning%2Ffreespace_planner%2Finclude%2Ffreespace_planner%2Ffreespace_planner_node.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3b7552ca4da0b97c39458328d642fe9824549bdc/planning%2Ffreespace_planner%2Finclude%2Ffreespace_planner%2Ffreespace_planner_node.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Ffreespace_planner%2Finclude%2Ffreespace_planner%2Ffreespace_planner_node.hpp?ref=3b7552ca4da0b97c39458328d642fe9824549bdc",
            "patch": "@@ -42,7 +42,12 @@\n #include <nav_msgs/msg/odometry.hpp>\n #include <tier4_planning_msgs/msg/scenario.hpp>\n \n+#ifdef USE_TF2_GEOMETRY_MSGS_DEPRECATED_HEADER\n #include <tf2_geometry_msgs/tf2_geometry_msgs.h>\n+#else\n+#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>\n+#endif\n+\n #include <tf2_ros/buffer.h>\n #include <tf2_ros/transform_listener.h>\n "
        }
    ],
    "autowarefoundation/autoware.universe/782": [
        {
            "sha": "442ab64d79cd503df1a4ec7fd01be7285017bf0a",
            "filename": "common/had_map_utils/CMakeLists.txt",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e820b3a4c392a2bd5cb8256e55334fe70d6357a3/common%2Fhad_map_utils%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e820b3a4c392a2bd5cb8256e55334fe70d6357a3/common%2Fhad_map_utils%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fhad_map_utils%2FCMakeLists.txt?ref=e820b3a4c392a2bd5cb8256e55334fe70d6357a3",
            "patch": "@@ -25,9 +25,13 @@ ament_auto_add_library(${PROJECT_NAME} SHARED\n   src/had_map_query.cpp\n   src/had_map_visualization.cpp)\n \n-# Disable warnings due to external dependencies (Eigen)\n+# Disable warnings due to external dependencies\n+get_target_property(lanelet2_core_INCLUDE_DIR\n+  lanelet2_core::lanelet2_core INTERFACE_INCLUDE_DIRECTORIES\n+)\n target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC\n   ${EIGEN3_INCLUDE_DIR}\n+  ${lanelet2_core_INCLUDE_DIR}\n   ${rclcpp_INCLUDE_DIRS}\n )\n "
        }
    ],
    "autowarefoundation/autoware.universe/783": [
        {
            "sha": "52b5f5f74621e34e363958abd866cdf442ab6e34",
            "filename": "perception/lidar_centerpoint/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f7fd390d301ebc4e52796845fbeef9a3c3e2b8ca/perception%2Flidar_centerpoint%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f7fd390d301ebc4e52796845fbeef9a3c3e2b8ca/perception%2Flidar_centerpoint%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_centerpoint%2Fpackage.xml?ref=f7fd390d301ebc4e52796845fbeef9a3c3e2b8ca",
            "patch": "@@ -14,6 +14,7 @@\n   <depend>pcl_ros</depend>\n   <depend>rclcpp</depend>\n   <depend>rclcpp_components</depend>\n+  <depend>tf2_eigen</depend>\n   <depend>tf2_geometry_msgs</depend>\n   <depend>tier4_autoware_utils</depend>\n "
        }
    ],
    "autowarefoundation/autoware.universe/784": [
        {
            "sha": "5822172c73822dbb93b58d86b56d5b928ca6c27a",
            "filename": "perception/map_based_prediction/src/map_based_prediction_node.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3df78d76427411053d25f772198b31f1c13b1fe7/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3df78d76427411053d25f772198b31f1c13b1fe7/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp?ref=3df78d76427411053d25f772198b31f1c13b1fe7",
            "patch": "@@ -18,7 +18,12 @@\n #include <tier4_autoware_utils/tier4_autoware_utils.hpp>\n \n #include <tf2/utils.h>\n+\n+#ifdef USE_TF2_GEOMETRY_MSGS_DEPRECATED_HEADER\n #include <tf2_geometry_msgs/tf2_geometry_msgs.h>\n+#else\n+#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>\n+#endif\n \n #include <algorithm>\n #include <chrono>"
        }
    ],
    "autowarefoundation/autoware.universe/786": [
        {
            "sha": "79622d527b36ca5e10db4a5dc018bb74dc114bf0",
            "filename": "control/obstacle_collision_checker/src/obstacle_collision_checker_node/obstacle_collision_checker.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bd25de54f71518e54f970d68d7500e3418f96c6d/control%2Fobstacle_collision_checker%2Fsrc%2Fobstacle_collision_checker_node%2Fobstacle_collision_checker.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bd25de54f71518e54f970d68d7500e3418f96c6d/control%2Fobstacle_collision_checker%2Fsrc%2Fobstacle_collision_checker_node%2Fobstacle_collision_checker.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fobstacle_collision_checker%2Fsrc%2Fobstacle_collision_checker_node%2Fobstacle_collision_checker.cpp?ref=bd25de54f71518e54f970d68d7500e3418f96c6d",
            "patch": "@@ -27,7 +27,12 @@\n \n #include <pcl_conversions/pcl_conversions.h>\n #include <tf2/utils.h>\n+\n+#ifdef USE_TF2_GEOMETRY_MSGS_DEPRECATED_HEADER\n #include <tf2_eigen/tf2_eigen.h>\n+#else\n+#include <tf2_eigen/tf2_eigen.hpp>\n+#endif\n \n #include <iostream>\n #include <vector>"
        }
    ],
    "autowarefoundation/autoware.universe/789": [
        {
            "sha": "873639a5e873c819efd50418c4b7ef826d21c49b",
            "filename": "sensing/probabilistic_occupancy_grid_map/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/229d698743e372fd0c90a9562e650ae47fa67ff1/sensing%2Fprobabilistic_occupancy_grid_map%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/229d698743e372fd0c90a9562e650ae47fa67ff1/sensing%2Fprobabilistic_occupancy_grid_map%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fprobabilistic_occupancy_grid_map%2Fpackage.xml?ref=229d698743e372fd0c90a9562e650ae47fa67ff1",
            "patch": "@@ -19,6 +19,7 @@\n   <depend>rclcpp_components</depend>\n   <depend>sensor_msgs</depend>\n   <depend>tf2</depend>\n+  <depend>tf2_eigen</depend>\n   <depend>tf2_geometry_msgs</depend>\n   <depend>tf2_ros</depend>\n   <depend>tf2_sensor_msgs</depend>"
        }
    ],
    "autowarefoundation/autoware.universe/805": [
        {
            "sha": "3ae3aff3e980ad62ad7838856eb62d42f290c084",
            "filename": "localization/stop_filter/package.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/02bb3e83adf0082ad0286b6c853430fa52e22fed/localization%2Fstop_filter%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/02bb3e83adf0082ad0286b6c853430fa52e22fed/localization%2Fstop_filter%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fstop_filter%2Fpackage.xml?ref=02bb3e83adf0082ad0286b6c853430fa52e22fed",
            "patch": "@@ -12,7 +12,9 @@\n   <depend>geometry_msgs</depend>\n   <depend>nav_msgs</depend>\n   <depend>rclcpp</depend>\n+  <depend>tf2</depend>\n   <depend>tier4_debug_msgs</depend>\n+\n   <test_depend>ament_cmake_gtest</test_depend>\n   <test_depend>ament_lint_auto</test_depend>\n   <test_depend>autoware_lint_common</test_depend>"
        }
    ],
    "autowarefoundation/autoware.universe/806": [
        {
            "sha": "3b63dee0bb73fb7a211b419ad6bb7c068b706fbc",
            "filename": "perception/traffic_light_map_based_detector/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f1e21e9cacfd79e74e2045ab09e7d86a173995a2/perception%2Ftraffic_light_map_based_detector%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f1e21e9cacfd79e74e2045ab09e7d86a173995a2/perception%2Ftraffic_light_map_based_detector%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_map_based_detector%2Fpackage.xml?ref=f1e21e9cacfd79e74e2045ab09e7d86a173995a2",
            "patch": "@@ -16,6 +16,7 @@\n   <depend>image_geometry</depend>\n   <depend>lanelet2_extension</depend>\n   <depend>rclcpp</depend>\n+  <depend>rclcpp_components</depend>\n   <depend>sensor_msgs</depend>\n   <depend>tf2</depend>\n   <depend>tf2_ros</depend>"
        }
    ],
    "autowarefoundation/autoware.universe/808": [
        {
            "sha": "8a7cd908dd13b0592efeb9e525761374a3eb0cd4",
            "filename": "common/tier4_planning_rviz_plugin/src/tools/jsk_overlay_utils.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a5271c4f5d787833b8b210cab4ea837d4389cbff/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Ftools%2Fjsk_overlay_utils.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a5271c4f5d787833b8b210cab4ea837d4389cbff/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Ftools%2Fjsk_overlay_utils.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Ftools%2Fjsk_overlay_utils.hpp?ref=a5271c4f5d787833b8b210cab4ea837d4389cbff",
            "patch": "@@ -60,7 +60,9 @@\n #endif\n \n #include <QColor>\n+#include <QCursor>\n #include <QImage>\n+#include <QVariant>\n #include <rclcpp/rclcpp.hpp>\n #include <rviz_rendering/render_system.hpp>\n "
        }
    ],
    "autowarefoundation/autoware.universe/811": [
        {
            "sha": "90e8b2bcbf9c505d2ed27d2993510024f57c9f7d",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/261b26d8d88bc65d6909ac2f16c93e7a446b02d7/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/261b26d8d88bc65d6909ac2f16c93e7a446b02d7/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=261b26d8d88bc65d6909ac2f16c93e7a446b02d7",
            "patch": "@@ -1711,7 +1711,7 @@ bool checkLaneIsInIntersection(\n   const RouteHandler & route_handler, const PathWithLaneId & reference_path,\n   const lanelet::ConstLanelets & lanelet_sequence, double & additional_length_to_add)\n {\n-  if (lanelet_sequence.empty()) {\n+  if (lanelet_sequence.size() < 2) {\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/814": [
        {
            "sha": "a6c6b816c99f7e9e9d98e6a7b5ca130115803fad",
            "filename": "simulator/fault_injection/include/fault_injection/diagnostic_storage.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0c48923e875363b6fbb4cb078107ea2aceefcfcd/simulator%2Ffault_injection%2Finclude%2Ffault_injection%2Fdiagnostic_storage.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0c48923e875363b6fbb4cb078107ea2aceefcfcd/simulator%2Ffault_injection%2Finclude%2Ffault_injection%2Fdiagnostic_storage.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Ffault_injection%2Finclude%2Ffault_injection%2Fdiagnostic_storage.hpp?ref=0c48923e875363b6fbb4cb078107ea2aceefcfcd",
            "patch": "@@ -39,7 +39,7 @@ class DiagnosticStorage\n   {\n     DiagnosticStatus status;\n     status.name = diag_config.diag_name;\n-    status.hardware_id = \"\";\n+    status.hardware_id = \"fault_injection\";\n     status.level = DiagnosticStatus::OK;\n     status.message = \"OK\";\n     event_diag_map_[diag_config.sim_name] = status;"
        }
    ],
    "autowarefoundation/autoware.universe/816": [
        {
            "sha": "cb51e52254bb198c707d55a113f33d411477106b",
            "filename": "planning/motion_velocity_smoother/src/motion_velocity_smoother_node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/28e9c29a6c6d54c2e42add95393f4aeddf17ab4d/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/28e9c29a6c6d54c2e42add95393f4aeddf17ab4d/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp?ref=28e9c29a6c6d54c2e42add95393f4aeddf17ab4d",
            "patch": "@@ -545,13 +545,13 @@ bool MotionVelocitySmootherNode::smoothVelocity(\n     RCLCPP_WARN(get_logger(), \"Fail to solve optimization.\");\n   }\n \n+  // Set 0 velocity after input-stop-point\n+  overwriteStopPoint(clipped, traj_smoothed);\n+\n   traj_smoothed.insert(\n     traj_smoothed.begin(), traj_resampled->begin(),\n     traj_resampled->begin() + *traj_resampled_closest);\n \n-  // Set 0 velocity after input-stop-point\n-  overwriteStopPoint(*traj_resampled, traj_smoothed);\n-\n   // For the endpoint of the trajectory\n   if (!traj_smoothed.empty()) {\n     traj_smoothed.back().longitudinal_velocity_mps = 0.0;"
        }
    ],
    "autowarefoundation/autoware.universe/818": [
        {
            "sha": "a2c3545d65c7cc6dc321fa102d9e7931df1f8b48",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 40,
            "deletions": 36,
            "changes": 76,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d3a0595ec4246db23ab09f5a254f90dbff4719d7/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d3a0595ec4246db23ab09f5a254f90dbff4719d7/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=d3a0595ec4246db23ab09f5a254f90dbff4719d7",
            "patch": "@@ -1742,45 +1742,49 @@ bool checkLaneIsInIntersection(\n     [&check_lane](const lanelet::ConstLanelet & lanelet) noexcept {\n       return lanelet.id() == check_lane.id();\n     });\n-  if (checking_rev_iter != lanelet_sequence.crend()) {\n-    const auto prev_lane = std::next(checking_rev_iter);\n-\n-    if (prev_lane != lanelet_sequence.crend()) {\n-      const auto lanes = route_handler.getNextLanelets(*prev_lane);\n-      const auto isHaveNeighborWithTurnDirection =\n-        [&](const lanelet::ConstLanelets & lanes) noexcept {\n-          return std::any_of(lanes.cbegin(), lanes.cend(), [](const lanelet::ConstLanelet & lane) {\n-            return lane.hasAttribute(\"turn_direction\");\n-          });\n-        };\n-\n-      if (isHaveNeighborWithTurnDirection(lanes)) {\n-        // lambdas\n-        const auto checkAttribute = [](const lanelet::ConstLineString3d & linestring) noexcept {\n-          const auto & attribute_name = lanelet::AttributeNamesString::LaneChange;\n-          if (linestring.hasAttribute(attribute_name)) {\n-            const auto attr = linestring.attribute(attribute_name);\n-            if (attr.value() == std::string(\"yes\")) {\n-              return true;\n-            }\n-          }\n-          return false;\n-        };\n-        const auto isLaneChangeAttributeYes =\n-          [checkAttribute](const lanelet::ConstLanelet & lanelet) noexcept {\n-            return (checkAttribute(lanelet.rightBound()) || checkAttribute(lanelet.leftBound()));\n-          };\n-\n-        for (auto prev_ll_itr = prev_lane; prev_ll_itr != lanelet_sequence.crend(); ++prev_ll_itr) {\n-          if (!isLaneChangeAttributeYes(*prev_ll_itr)) {\n-            lane_change_prohibited_lanes.push_back(*prev_ll_itr);\n-          } else {\n-            break;\n-          }\n-        }\n+  if (checking_rev_iter == lanelet_sequence.crend()) {\n+    return false;\n+  }\n+\n+  const auto prev_lane = std::next(checking_rev_iter);\n+  if (prev_lane == lanelet_sequence.crend()) {\n+    return false;\n+  }\n+\n+  const auto lanes = route_handler.getNextLanelets(*prev_lane);\n+  const auto isHaveNeighborWithTurnDirection = [&](const lanelet::ConstLanelets & lanes) noexcept {\n+    return std::any_of(lanes.cbegin(), lanes.cend(), [](const lanelet::ConstLanelet & lane) {\n+      return lane.hasAttribute(\"turn_direction\");\n+    });\n+  };\n+  if (!isHaveNeighborWithTurnDirection(lanes)) {\n+    return false;\n+  }\n+\n+  const auto checkAttribute = [](const lanelet::ConstLineString3d & linestring) noexcept {\n+    const auto & attribute_name = lanelet::AttributeNamesString::LaneChange;\n+    if (linestring.hasAttribute(attribute_name)) {\n+      const auto attr = linestring.attribute(attribute_name);\n+      if (attr.value() == std::string(\"yes\")) {\n+        return true;\n       }\n     }\n+    return false;\n+  };\n+\n+  const auto isLaneChangeAttributeYes =\n+    [checkAttribute](const lanelet::ConstLanelet & lanelet) noexcept {\n+      return (checkAttribute(lanelet.rightBound()) || checkAttribute(lanelet.leftBound()));\n+    };\n+\n+  for (auto prev_ll_itr = prev_lane; prev_ll_itr != lanelet_sequence.crend(); ++prev_ll_itr) {\n+    if (!isLaneChangeAttributeYes(*prev_ll_itr)) {\n+      lane_change_prohibited_lanes.push_back(*prev_ll_itr);\n+    } else {\n+      break;\n+    }\n   }\n+\n   std::reverse(lane_change_prohibited_lanes.begin(), lane_change_prohibited_lanes.end());\n   const auto prohibited_arc_coordinate =\n     lanelet::utils::getArcCoordinates(lane_change_prohibited_lanes, end_of_route_pose);"
        }
    ],
    "autowarefoundation/autoware.universe/823": [
        {
            "sha": "e19f8c134fddd7c590ce347e1f2fa4b18221a6a7",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/utilities.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/17f7fd17fa566eeb7fb582e38e575128463d6721/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Futilities.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/17f7fd17fa566eeb7fb582e38e575128463d6721/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Futilities.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Futilities.hpp?ref=17f7fd17fa566eeb7fb582e38e575128463d6721",
            "patch": "@@ -74,7 +74,6 @@ inline geometry_msgs::msg::Pose getPose(\n }\n }  // namespace tier4_autoware_utils\n \n-#ifdef USE_TF2_GEOMETRY_MSGS_DEPRECATED_HEADER\n namespace tf2\n {\n inline void fromMsg(const geometry_msgs::msg::PoseStamped & msg, tf2::Stamped<tf2::Transform> & out)\n@@ -85,7 +84,7 @@ inline void fromMsg(const geometry_msgs::msg::PoseStamped & msg, tf2::Stamped<tf\n   fromMsg(msg.pose, tmp);\n   out.setData(tmp);\n }\n-\n+#ifdef USE_TF2_GEOMETRY_MSGS_DEPRECATED_HEADER\n // Remove after this commit is released\n // https://github.com/ros2/geometry2/commit/e9da371d81e388a589540357c050e262442f1b4a\n inline geometry_msgs::msg::Point & toMsg(const tf2::Vector3 & in, geometry_msgs::msg::Point & out)\n@@ -115,8 +114,8 @@ inline void doTransform(\n   tf2::Vector3 v_out = t * v_in;\n   toMsg(v_out, t_out);\n }\n-}  // namespace tf2\n #endif\n+}  // namespace tf2\n \n namespace behavior_path_planner\n {"
        }
    ],
    "autowarefoundation/autoware.universe/828": [
        {
            "sha": "82e8e8da1f3f0735b66a405a8c19ee4d66a89f72",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/scene_module_interface.hpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1ea23bca9d5545a6e81a7b404fcfe0ea27ac2823/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1ea23bca9d5545a6e81a7b404fcfe0ea27ac2823/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp?ref=1ea23bca9d5545a6e81a7b404fcfe0ea27ac2823",
            "patch": "@@ -196,7 +196,9 @@ class SceneModuleInterface\n \n   AvoidanceDebugMsgArray::SharedPtr getAvoidanceDebugMsgArray()\n   {\n-    debug_avoidance_msg_array_ptr_->header.stamp = clock_->now();\n+    if (debug_avoidance_msg_array_ptr_) {\n+      debug_avoidance_msg_array_ptr_->header.stamp = clock_->now();\n+    }\n     return debug_avoidance_msg_array_ptr_;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/834": [
        {
            "sha": "729af3099f814ab50a22c70ede128f33cae635c3",
            "filename": "planning/behavior_velocity_planner/include/utilization/trajectory_utils.hpp",
            "status": "modified",
            "additions": 9,
            "deletions": 5,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6e84d294196f99a24a26344c0fe83f3e0b17e425/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6e84d294196f99a24a26344c0fe83f3e0b17e425/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp?ref=6e84d294196f99a24a26344c0fe83f3e0b17e425",
            "patch": "@@ -91,7 +91,7 @@ inline Quaternion lerpOrientation(\n  * @param [in] point Interpolated point is nearest to this point.\n  */\n template <class T>\n-TrajectoryPointWithIdx getLerpTrajectoryPointWithIdx(\n+boost::optional<TrajectoryPointWithIdx> getLerpTrajectoryPointWithIdx(\n   const T & points, const geometry_msgs::msg::Point & point)\n {\n   TrajectoryPoint interpolated_point;\n@@ -100,7 +100,9 @@ TrajectoryPointWithIdx getLerpTrajectoryPointWithIdx(\n     tier4_autoware_utils::calcLongitudinalOffsetToSegment(points, nearest_seg_idx, point);\n   const double len_segment =\n     tier4_autoware_utils::calcSignedArcLength(points, nearest_seg_idx, nearest_seg_idx + 1);\n-  const double interpolate_ratio = std::clamp(len_to_interpolated / len_segment, 0.0, 1.0);\n+  const double ratio = len_to_interpolated / len_segment;\n+  if (ratio <= 0.0 || 1.0 <= ratio) return boost::none;\n+  const double interpolate_ratio = std::clamp(ratio, 0.0, 1.0);\n   {\n     const size_t i = nearest_seg_idx;\n     const auto & pos0 = points.at(i).pose.position;\n@@ -154,14 +156,15 @@ inline bool smoothPath(\n     // calc ego internal division point on path\n     const auto traj_with_ego_point_with_idx =\n       getLerpTrajectoryPointWithIdx(*traj_lateral_acc_filtered, current_pose.position);\n-    TrajectoryPoint ego_point_on_path = traj_with_ego_point_with_idx.first;\n-    const size_t nearest_seg_idx = traj_with_ego_point_with_idx.second;\n+    if (traj_with_ego_point_with_idx == boost::none) return false;\n+    TrajectoryPoint ego_point_on_path = traj_with_ego_point_with_idx->first;\n+    const size_t nearest_seg_idx = traj_with_ego_point_with_idx->second;\n     //! insert ego projected pose on path so new nearest segment will be nearest_seg_idx + 1\n     traj_with_ego_point_on_path.insert(\n       traj_with_ego_point_on_path.begin() + nearest_seg_idx, ego_point_on_path);\n \n     // ego point inserted is new nearest point\n-    nearest_idx = traj_with_ego_point_with_idx.second + 1;\n+    nearest_idx = nearest_seg_idx + 1;\n   }\n   // Resample trajectory with ego-velocity based interval distances\n   auto traj_resampled = smoother->resampleTrajectory(traj_with_ego_point_on_path, v0, nearest_idx);\n@@ -182,6 +185,7 @@ inline bool smoothPath(\n   traj_smoothed.insert(\n     traj_smoothed.begin(), traj_resampled->begin(),\n     traj_resampled->begin() + *traj_resampled_closest);\n+\n   out_path = convertTrajectoryPointsToPath(traj_smoothed);\n   return true;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/837": [
        {
            "sha": "cf2be236c21e34cc88f64e386c5978558add2ec6",
            "filename": "planning/behavior_velocity_planner/src/node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/21d72206be158cbcaa970ff812fa64a17e4e97df/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/21d72206be158cbcaa970ff812fa64a17e4e97df/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp?ref=21d72206be158cbcaa970ff812fa64a17e4e97df",
            "patch": "@@ -263,7 +263,9 @@ void BehaviorVelocityPlannerNode::onNoGroundPointCloud(\n \n   Eigen::Affine3f affine = tf2::transformToEigen(transform.transform).cast<float>();\n   pcl::PointCloud<pcl::PointXYZ>::Ptr pc_transformed(new pcl::PointCloud<pcl::PointXYZ>);\n-  pcl::transformPointCloud(pc, *pc_transformed, affine);\n+  if (!pc.empty()) {\n+    pcl::transformPointCloud(pc, *pc_transformed, affine);\n+  }\n \n   {\n     std::lock_guard<std::mutex> lock(mutex_);"
        }
    ],
    "autowarefoundation/autoware.universe/853": [
        {
            "sha": "6162ee23f46ed1eb3b55d168b1407e1de9e33214",
            "filename": "common/osqp_interface/include/osqp_interface/osqp_interface.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bc960ed163e3baa35c51ceb5e8395bf54f05d3f8/common%2Fosqp_interface%2Finclude%2Fosqp_interface%2Fosqp_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bc960ed163e3baa35c51ceb5e8395bf54f05d3f8/common%2Fosqp_interface%2Finclude%2Fosqp_interface%2Fosqp_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fosqp_interface%2Finclude%2Fosqp_interface%2Fosqp_interface.hpp?ref=bc960ed163e3baa35c51ceb5e8395bf54f05d3f8",
            "patch": "@@ -33,7 +33,7 @@ namespace common\n {\n namespace osqp\n {\n-constexpr c_float INF = OSQP_INFTY;\n+constexpr c_float INF = 1e30;\n using autoware::common::types::bool8_t;\n using autoware::common::types::float64_t;\n "
        }
    ],
    "autowarefoundation/autoware.universe/869": [
        {
            "sha": "8da0d071de58242c956fb29be28f3beef303bf54",
            "filename": "system/system_monitor/src/gpu_monitor/tegra_gpu_monitor.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c61f59c9695ad4968c379a701394388fc0a9450c/system%2Fsystem_monitor%2Fsrc%2Fgpu_monitor%2Ftegra_gpu_monitor.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c61f59c9695ad4968c379a701394388fc0a9450c/system%2Fsystem_monitor%2Fsrc%2Fgpu_monitor%2Ftegra_gpu_monitor.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fsystem_monitor%2Fsrc%2Fgpu_monitor%2Ftegra_gpu_monitor.cpp?ref=c61f59c9695ad4968c379a701394388fc0a9450c",
            "patch": "@@ -127,8 +127,10 @@ void GPUMonitor::checkUsage(diagnostic_updater::DiagnosticStatusWrapper & stat)\n   }\n }\n \n-void GPUMonitor::checkThrottling(diagnostic_updater::DiagnosticStatusWrapper & stat)\n+void GPUMonitor::checkThrottling(\n+  [[maybe_unused]] diagnostic_updater::DiagnosticStatusWrapper & stat)\n {\n+  // Please remove the [[maybe_unused]] tag after implementation, it's a temp build fix\n   // TODO(Fumihito Ito): implement me\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/871": [
        {
            "sha": "5811fa88a6b7a352091230a05e67919df43d5197",
            "filename": "perception/tensorrt_yolo/README.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1752c57ca76ed9771aa8216529c5893f15faef9d/perception%2Ftensorrt_yolo%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1752c57ca76ed9771aa8216529c5893f15faef9d/perception%2Ftensorrt_yolo%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftensorrt_yolo%2FREADME.md?ref=1752c57ca76ed9771aa8216529c5893f15faef9d",
            "patch": "@@ -72,15 +72,15 @@ This package includes multiple licenses.\n \n ### YOLOv4\n \n-[YOLOv4](https://drive.google.com//uc?id=1vkNmSwcIpTkJ_-BrKhxtit0PBJeJYTVX \"YOLOv4\"): Converted from darknet [weight file](https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights \"weight file\") and [conf file](https://github.com/AlexeyAB/darknet/blob/master/cfg/yolov4.cfg \"conf file\").\n+[YOLOv4](https://drive.google.com/uc?id=1vkNmSwcIpTkJ_-BrKhxtit0PBJeJYTVX \"YOLOv4\"): Converted from darknet [weight file](https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights \"weight file\") and [conf file](https://github.com/AlexeyAB/darknet/blob/master/cfg/yolov4.cfg \"conf file\").\n \n ### YOLOv5\n \n Refer to [this guide](https://github.com/ultralytics/yolov5/issues/251 \"guide\")\n \n-- [YOLOv5s](https://drive.google.com//uc?id=1CF21nQWigwCPTr5psQZXg6cBQIOYKbad \"YOLOv5s\")\n+- [YOLOv5s](https://drive.google.com/uc?id=1CF21nQWigwCPTr5psQZXg6cBQIOYKbad \"YOLOv5s\")\n \n-- [YOLOv5m](https://drive.google.com//uc?id=1a1h50KJH6slwmjKZpPlS-errukF-BrgG \"YOLOv5m\")\n+- [YOLOv5m](https://drive.google.com/uc?id=1a1h50KJH6slwmjKZpPlS-errukF-BrgG \"YOLOv5m\")\n \n - [YOLOv5l](https://drive.google.com/uc?id=1xO8S92Cq7qrmx93UHHyA7Cd7-dJsBDP8 \"YOLOv5l\")\n "
        }
    ],
    "autowarefoundation/autoware.universe/877": [
        {
            "sha": "cd7117f360143cf60476ce671068da36874fd9ba",
            "filename": "planning/surround_obstacle_checker/src/node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d26f6decdc995479897d762b1424799a35712c80/planning%2Fsurround_obstacle_checker%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d26f6decdc995479897d762b1424799a35712c80/planning%2Fsurround_obstacle_checker%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fsurround_obstacle_checker%2Fsrc%2Fnode.cpp?ref=d26f6decdc995479897d762b1424799a35712c80",
            "patch": "@@ -131,8 +131,8 @@ Polygon2d createSelfPolygon(const VehicleInfo & vehicle_info)\n \n   ego_polygon.outer().push_back(Point2d(front_m, -width_m));\n   ego_polygon.outer().push_back(Point2d(front_m, width_m));\n-  ego_polygon.outer().push_back(Point2d(-rear_m, width_m));\n-  ego_polygon.outer().push_back(Point2d(-rear_m, -width_m));\n+  ego_polygon.outer().push_back(Point2d(rear_m, width_m));\n+  ego_polygon.outer().push_back(Point2d(rear_m, -width_m));\n \n   bg::correct(ego_polygon);\n "
        }
    ],
    "autowarefoundation/autoware.universe/882": [
        {
            "sha": "d55c42a0c28bd324e9e073204e77246f4f42660f",
            "filename": "simulator/dummy_perception_publisher/src/pointcloud_creator.cpp",
            "status": "modified",
            "additions": 41,
            "deletions": 15,
            "changes": 56,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d49b56adcb5a2f9cc1d84aa516118acf66308892/simulator%2Fdummy_perception_publisher%2Fsrc%2Fpointcloud_creator.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d49b56adcb5a2f9cc1d84aa516118acf66308892/simulator%2Fdummy_perception_publisher%2Fsrc%2Fpointcloud_creator.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fdummy_perception_publisher%2Fsrc%2Fpointcloud_creator.cpp?ref=d49b56adcb5a2f9cc1d84aa516118acf66308892",
            "patch": "@@ -25,28 +25,34 @@\n #include <limits>\n #include <memory>\n \n+namespace\n+{\n+\n+static constexpr double epsilon = 0.001;\n+static constexpr double step = 0.05;\n+static constexpr double vertical_theta_step = (1.0 / 180.0) * M_PI;\n+static constexpr double vertical_min_theta = (-15.0 / 180.0) * M_PI;\n+static constexpr double vertical_max_theta = (15.0 / 180.0) * M_PI;\n+static constexpr double horizontal_theta_step = (0.1 / 180.0) * M_PI;\n+static constexpr double horizontal_min_theta = (-180.0 / 180.0) * M_PI;\n+static constexpr double horizontal_max_theta = (180.0 / 180.0) * M_PI;\n+\n pcl::PointXYZ getPointWrtBaseLink(\n   const tf2::Transform & tf_base_link2moved_object, double x, double y, double z)\n {\n   const auto p_wrt_base = tf_base_link2moved_object(tf2::Vector3(x, y, z));\n   return pcl::PointXYZ(p_wrt_base.x(), p_wrt_base.y(), p_wrt_base.z());\n }\n \n+}  // namespace\n+\n void ObjectCentricPointCloudCreator::create_object_pointcloud(\n   const ObjectInfo & obj_info, const tf2::Transform & tf_base_link2map,\n   std::mt19937 & random_generator, pcl::PointCloud<pcl::PointXYZ>::Ptr pointcloud) const\n {\n   std::normal_distribution<> x_random(0.0, obj_info.std_dev_x);\n   std::normal_distribution<> y_random(0.0, obj_info.std_dev_y);\n   std::normal_distribution<> z_random(0.0, obj_info.std_dev_z);\n-  const double epsilon = 0.001;\n-  const double step = 0.05;\n-  const double vertical_theta_step = (1.0 / 180.0) * M_PI;\n-  const double vertical_min_theta = (-15.0 / 180.0) * M_PI;\n-  const double vertical_max_theta = (15.0 / 180.0) * M_PI;\n-  const double horizontal_theta_step = (0.1 / 180.0) * M_PI;\n-  const double horizontal_min_theta = (-180.0 / 180.0) * M_PI;\n-  const double horizontal_max_theta = (180.0 / 180.0) * M_PI;\n \n   const auto tf_base_link2moved_object = tf_base_link2map * obj_info.tf_map2moved_object;\n \n@@ -206,7 +212,18 @@ std::vector<pcl::PointCloud<pcl::PointXYZ>::Ptr> EgoCentricPointCloudCreator::cr\n     pointclouds.at(i) = (pcl::PointCloud<pcl::PointXYZ>::Ptr(new pcl::PointCloud<pcl::PointXYZ>));\n   }\n \n-  const double horizontal_theta_step = 0.25 * M_PI / 180.0;\n+  std::vector<double> min_zs(obj_infos.size());\n+  std::vector<double> max_zs(obj_infos.size());\n+\n+  for (size_t idx = 0; idx < obj_infos.size(); ++idx) {\n+    const auto & obj_info = obj_infos.at(idx);\n+    const auto tf_base_link2moved_object = tf_base_link2map * obj_info.tf_map2moved_object;\n+    const double min_z = -1.0 * (obj_info.height / 2.0) + tf_base_link2moved_object.getOrigin().z();\n+    const double max_z = 1.0 * (obj_info.height / 2.0) + tf_base_link2moved_object.getOrigin().z();\n+    min_zs.at(idx) = min_z;\n+    max_zs.at(idx) = max_z;\n+  }\n+\n   double angle = 0.0;\n   const auto n_scan = static_cast<size_t>(std::floor(2 * M_PI / horizontal_theta_step));\n   for (size_t i = 0; i < n_scan; ++i) {\n@@ -217,13 +234,22 @@ std::vector<pcl::PointCloud<pcl::PointXYZ>::Ptr> EgoCentricPointCloudCreator::cr\n       const auto x_hit = dist * cos(angle);\n       const auto y_hit = dist * sin(angle);\n       const auto idx_hit = composite_sdf.nearest_sdf_index(x_hit, y_hit);\n+      const auto obj_info_here = obj_infos.at(idx_hit);\n+      const auto min_z_here = min_zs.at(idx_hit);\n+      const auto max_z_here = max_zs.at(idx_hit);\n+      std::normal_distribution<> x_random(0.0, obj_info_here.std_dev_x);\n+      std::normal_distribution<> y_random(0.0, obj_info_here.std_dev_y);\n+      std::normal_distribution<> z_random(0.0, obj_info_here.std_dev_z);\n \n-      std::normal_distribution<> x_random(0.0, obj_infos.at(idx_hit).std_dev_x);\n-      std::normal_distribution<> y_random(0.0, obj_infos.at(idx_hit).std_dev_y);\n-      std::normal_distribution<> z_random(0.0, obj_infos.at(idx_hit).std_dev_z);\n-      pointclouds.at(idx_hit)->push_back(pcl::PointXYZ(\n-        x_hit + x_random(random_generator), y_hit + y_random(random_generator),\n-        z_random(random_generator)));\n+      for (double vertical_theta = vertical_min_theta;\n+           vertical_theta <= vertical_max_theta + epsilon; vertical_theta += vertical_theta_step) {\n+        const double z = dist * std::tan(vertical_theta);\n+        if (min_z_here <= z && z <= max_z_here + epsilon) {\n+          pointclouds.at(idx_hit)->push_back(pcl::PointXYZ(\n+            x_hit + x_random(random_generator), y_hit + y_random(random_generator),\n+            z + z_random(random_generator)));\n+        }\n+      }\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/886": [
        {
            "sha": "821e2de462bdc05b33ac9464074b0e232610e11a",
            "filename": "sensing/pointcloud_preprocessor/src/blockage_diag/blockage_diag_nodelet.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/da5479cd7c32359ee50d401b071afebf961e24d9/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fblockage_diag%2Fblockage_diag_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/da5479cd7c32359ee50d401b071afebf961e24d9/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fblockage_diag%2Fblockage_diag_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fblockage_diag%2Fblockage_diag_nodelet.cpp?ref=da5479cd7c32359ee50d401b071afebf961e24d9",
            "patch": "@@ -42,7 +42,7 @@ BlockageDiagComponent::BlockageDiagComponent(const rclcpp::NodeOptions & options\n \n   updater_.setHardwareID(\"blockage_diag\");\n   updater_.add(\n-    std::string(this->get_namespace()) + \": ground_blockage_validation\", this,\n+    std::string(this->get_namespace()) + \": blockage_validation\", this,\n     &BlockageDiagComponent::onBlockageChecker);\n   updater_.setPeriod(0.1);\n \n@@ -93,9 +93,9 @@ void BlockageDiagComponent::onBlockageChecker(DiagnosticStatusWrapper & stat)\n   if (level == DiagnosticStatus::OK) {\n     msg = \"OK\";\n   } else if (level == DiagnosticStatus::WARN) {\n-    msg = \"WARNING: LiDAR ground blockage\";\n+    msg = \"WARNING: LiDAR blockage\";\n   } else if (level == DiagnosticStatus::ERROR) {\n-    msg = \"ERROR: LiDAR ground blockage\";\n+    msg = \"ERROR: LiDAR blockage\";\n   } else if (level == DiagnosticStatus::STALE) {\n     msg = \"STALE\";\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/898": [
        {
            "sha": "398994b4cde2bdc0fd98f8dae932bb0ceb0aefd9",
            "filename": "planning/behavior_velocity_planner/include/scene_module/scene_module_interface.hpp",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/36a22223d199a8e2a1f2f4c454f532341d5f403a/planning%2Fbehavior_velocity_planner%2Finclude%2Fscene_module%2Fscene_module_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/36a22223d199a8e2a1f2f4c454f532341d5f403a/planning%2Fbehavior_velocity_planner%2Finclude%2Fscene_module%2Fscene_module_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Finclude%2Fscene_module%2Fscene_module_interface.hpp?ref=36a22223d199a8e2a1f2f4c454f532341d5f403a",
            "patch": "@@ -123,7 +123,10 @@ class SceneModuleManagerInterface\n       tier4_planning_msgs::msg::StopReason stop_reason;\n       scene_module->setPlannerData(planner_data_);\n       scene_module->modifyPathVelocity(path, &stop_reason);\n-      stop_reason_array.stop_reasons.emplace_back(stop_reason);\n+\n+      if (stop_reason.reason != \"\") {\n+        stop_reason_array.stop_reasons.emplace_back(stop_reason);\n+      }\n \n       if (const auto command = scene_module->getInfrastructureCommand()) {\n         infrastructure_command_array.commands.push_back(*command);"
        }
    ],
    "autowarefoundation/autoware.universe/917": [
        {
            "sha": "1c26ef601aa428a9f881c1ef7436327941d051af",
            "filename": "planning/behavior_velocity_planner/src/scene_module/stop_line/scene.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/48554ac190e8b4b093977a4f1ad92584c7774259/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/48554ac190e8b4b093977a4f1ad92584c7774259/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fscene.cpp?ref=48554ac190e8b4b093977a4f1ad92584c7774259",
            "patch": "@@ -207,14 +207,19 @@ bool StopLineModule::modifyPathVelocity(\n   const auto & current_position = planner_data_->current_pose.pose.position;\n   const PointWithSearchRangeIndex src_point_with_search_range_index =\n     planning_utils::findFirstNearSearchRangeIndex(path->points, current_position);\n-  const SearchRangeIndex dst_search_range =\n+  SearchRangeIndex dst_search_range =\n     planning_utils::getPathIndexRangeIncludeLaneId(*path, lane_id_);\n \n+  // extend following and previous search range to avoid no collision\n+  if (dst_search_range.max_idx < path->points.size() - 1) dst_search_range.max_idx++;\n+  if (dst_search_range.min_idx > 0) dst_search_range.min_idx--;\n+\n   // Find collision\n   const auto collision = findCollision(*path, stop_line, dst_search_range);\n \n   // If no collision found, do nothing\n   if (!collision) {\n+    RCLCPP_WARN(logger_, \"is no collision\");\n     return true;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/933": [
        {
            "sha": "a8176716d38d803baf6342d727580999b270f30d",
            "filename": "sensing/pointcloud_preprocessor/src/concatenate_data/concatenate_data_nodelet.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/662478ebde7050bd6d14e3769d09f5a09998e977/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fconcatenate_data%2Fconcatenate_data_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/662478ebde7050bd6d14e3769d09f5a09998e977/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fconcatenate_data%2Fconcatenate_data_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fconcatenate_data%2Fconcatenate_data_nodelet.cpp?ref=662478ebde7050bd6d14e3769d09f5a09998e977",
            "patch": "@@ -112,6 +112,12 @@ PointCloudConcatenateDataSynchronizerComponent::PointCloudConcatenateDataSynchro\n     }\n   }\n \n+  // tf2 listener\n+  {\n+    tf2_buffer_ = std::make_shared<tf2_ros::Buffer>(this->get_clock());\n+    tf2_listener_ = std::make_shared<tf2_ros::TransformListener>(*tf2_buffer_);\n+  }\n+\n   // Publishers\n   {\n     pub_output_ = this->create_publisher<PointCloud2>("
        }
    ],
    "autowarefoundation/autoware.universe/942": [
        {
            "sha": "99f46ab58fa716a8ff887755630d295f3d91267a",
            "filename": "map/map_loader/src/pointcloud_map_loader/pointcloud_map_loader_node.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 11,
            "changes": 24,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0b1e4c2714dd4524a984b0ba0b782a1985645554/map%2Fmap_loader%2Fsrc%2Fpointcloud_map_loader%2Fpointcloud_map_loader_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0b1e4c2714dd4524a984b0ba0b782a1985645554/map%2Fmap_loader%2Fsrc%2Fpointcloud_map_loader%2Fpointcloud_map_loader_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2Fsrc%2Fpointcloud_map_loader%2Fpointcloud_map_loader_node.cpp?ref=0b1e4c2714dd4524a984b0ba0b782a1985645554",
            "patch": "@@ -33,22 +33,24 @@\n #include <glob.h>\n #include <pcl/io/pcd_io.h>\n #include <pcl_conversions/pcl_conversions.h>\n-#include <rcutils/filesystem.h>  // To be replaced by std::filesystem in C++17\n \n+#include <filesystem>\n #include <string>\n #include <vector>\n \n+namespace fs = std::filesystem;\n+\n namespace\n {\n bool isPcdFile(const std::string & p)\n {\n-  if (!rcutils_is_file(p.c_str())) {\n+  if (fs::is_directory(p)) {\n     return false;\n   }\n \n-  const auto ext = p.substr(p.find_last_of(\".\") + 1);\n+  const std::string ext = fs::path(p).extension();\n \n-  if (ext != \"pcd\" && ext != \"PCD\") {\n+  if (ext != \".pcd\" && ext != \".PCD\") {\n     return false;\n   }\n \n@@ -70,21 +72,21 @@ PointCloudMapLoaderNode::PointCloudMapLoaderNode(const rclcpp::NodeOptions & opt\n   std::vector<std::string> pcd_paths{};\n \n   for (const auto & p : pcd_paths_or_directory) {\n-    if (!rcutils_exists(p.c_str())) {\n+    if (!fs::exists(p)) {\n       RCLCPP_ERROR_STREAM(get_logger(), \"invalid path: \" << p);\n     }\n \n     if (isPcdFile(p)) {\n       pcd_paths.push_back(p);\n     }\n \n-    if (rcutils_is_directory(p.c_str())) {\n-      glob_t glob_buf;\n-      glob((p + \"/*.pcd\").c_str(), 0, NULL, &glob_buf);\n-      for (size_t i = 0; i < glob_buf.gl_pathc; ++i) {\n-        pcd_paths.push_back(glob_buf.gl_pathv[i]);\n+    if (fs::is_directory(p)) {\n+      for (const auto & file : fs::directory_iterator(p)) {\n+        const auto filename = file.path().string();\n+        if (isPcdFile(filename)) {\n+          pcd_paths.push_back(filename);\n+        }\n       }\n-      globfree(&glob_buf);\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/951": [
        {
            "sha": "959c94b70c12ca1d6070618ba225f8d4f7fb8e48",
            "filename": "sensing/pointcloud_preprocessor/src/crop_box_filter/crop_box_filter_nodelet.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0ea87d97a4580d831418b58962c8f204dfbc2e6a/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0ea87d97a4580d831418b58962c8f204dfbc2e6a/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp?ref=0ea87d97a4580d831418b58962c8f204dfbc2e6a",
            "patch": "@@ -123,7 +123,7 @@ void CropBoxFilterComponent::filter(\n \n   output.data.resize(j);\n   output.header.frame_id = input->header.frame_id;\n-  output.height = input->height;\n+  output.height = 1;\n   output.fields = input->fields;\n   output.is_bigendian = input->is_bigendian;\n   output.point_step = input->point_step;"
        }
    ],
    "autowarefoundation/autoware.universe/958": [
        {
            "sha": "b0306b38fe3fde2ec336dfd4c428511befe86cc6",
            "filename": "simulator/fault_injection/src/fault_injection_node/fault_injection_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f474bff5927385d279d96b0b3821b64e2fd1e46c/simulator%2Ffault_injection%2Fsrc%2Ffault_injection_node%2Ffault_injection_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f474bff5927385d279d96b0b3821b64e2fd1e46c/simulator%2Ffault_injection%2Fsrc%2Ffault_injection_node%2Ffault_injection_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Ffault_injection%2Fsrc%2Ffault_injection_node%2Ffault_injection_node.cpp?ref=f474bff5927385d279d96b0b3821b64e2fd1e46c",
            "patch": "@@ -62,7 +62,7 @@ FaultInjectionNode::FaultInjectionNode(rclcpp::NodeOptions node_options)\n   for (const auto & diag : readEventDiagList()) {\n     diagnostic_storage_.registerEvent(diag);\n     updater_.add(\n-      diag.sim_name, std::bind(&FaultInjectionNode::updateEventDiag, this, _1, diag.sim_name));\n+      diag.diag_name, std::bind(&FaultInjectionNode::updateEventDiag, this, _1, diag.sim_name));\n   }\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/972": [
        {
            "sha": "bba1a1b1c6a8cf48e048472ac87eba1e319a84b2",
            "filename": "sensing/pointcloud_preprocessor/launch/preprocessor.launch.xml",
            "status": "modified",
            "additions": 6,
            "deletions": 6,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ccb0081ee5c575b61f54d9acbd9e5fe0413f0828/sensing%2Fpointcloud_preprocessor%2Flaunch%2Fpreprocessor.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ccb0081ee5c575b61f54d9acbd9e5fe0413f0828/sensing%2Fpointcloud_preprocessor%2Flaunch%2Fpreprocessor.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Flaunch%2Fpreprocessor.launch.xml?ref=ccb0081ee5c575b61f54d9acbd9e5fe0413f0828",
            "patch": "@@ -4,14 +4,14 @@\n      To subscribe multiple topics, write as:\n      \"['/points_raw0', '/points_raw1', '/points_raw2', ...]\"\n      This syntax is also available from command line -->\n-  <arg name=\"input_points_raw_list\" default=\"['/points_raw']\" desc=\"define as string_array\"/>\n+  <arg name=\"input_points_raw_list\" default=\"['/points_raw']\" description=\"define as string_array\"/>\n \n-  <arg name=\"output_points_raw\" default=\"/points_raw/cropbox/filtered\" desc=\"\"/>\n-  <arg name=\"tf_output_frame\" default=\"base_link\" desc=\"\"/>\n+  <arg name=\"output_points_raw\" default=\"/points_raw/cropbox/filtered\" description=\"\"/>\n+  <arg name=\"tf_output_frame\" default=\"base_link\" description=\"\"/>\n \n   <include file=\"$(find-pkg-share pointcloud_preprocessor)/launch/preprocessor.launch.py\">\n-    <param name=\"input_points_raw_list\" value=\"$(var input_points_raw_list)\"/>\n-    <param name=\"output_points_raw\" value=\"$(var output_points_raw)\"/>\n-    <param name=\"tf_output_frame\" value=\"$(var tf_output_frame)\"/>\n+    <arg name=\"input_points_raw_list\" value=\"$(var input_points_raw_list)\"/>\n+    <arg name=\"output_points_raw\" value=\"$(var output_points_raw)\"/>\n+    <arg name=\"tf_output_frame\" value=\"$(var tf_output_frame)\"/>\n   </include>\n </launch>"
        }
    ],
    "autowarefoundation/autoware.universe/975": [
        {
            "sha": "71c7719c9f536656eff059d510fc717053bd92ec",
            "filename": "common/path_distance_calculator/src/path_distance_calculator.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/060dabd2d17f1fa6d64563f5310bcbc8462df2b3/common%2Fpath_distance_calculator%2Fsrc%2Fpath_distance_calculator.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/060dabd2d17f1fa6d64563f5310bcbc8462df2b3/common%2Fpath_distance_calculator%2Fsrc%2Fpath_distance_calculator.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fpath_distance_calculator%2Fsrc%2Fpath_distance_calculator.cpp?ref=060dabd2d17f1fa6d64563f5310bcbc8462df2b3",
            "patch": "@@ -47,6 +47,10 @@ PathDistanceCalculator::PathDistanceCalculator(const rclcpp::NodeOptions & optio\n       RCLCPP_WARN_THROTTLE(get_logger(), *get_clock(), 5000, \"path empty\");\n     }\n \n+    if (path->points.size() == 1) {\n+      RCLCPP_WARN_THROTTLE(get_logger(), *get_clock(), 5000, \"too short path\");\n+    }\n+\n     const double distance = tier4_autoware_utils::calcSignedArcLength(\n       path->points, pose->pose.position, path->points.size() - 1);\n "
        }
    ],
    "autowarefoundation/autoware.universe/976": [
        {
            "sha": "85d8f5e828efa5e1772df139d19e6880fc1b9d7e",
            "filename": "planning/obstacle_stop_planner/src/node.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 6,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/47b031887e90789467a8aac3056c916cde21df45/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/47b031887e90789467a8aac3056c916cde21df45/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp?ref=47b031887e90789467a8aac3056c916cde21df45",
            "patch": "@@ -831,12 +831,14 @@ void ObstacleStopPlannerNode::insertVelocity(\n     }\n   }\n \n-  for (size_t i = 0; i < output.size() - 2; ++i) {\n-    const auto & p_base = output.at(i).pose;\n-    const auto & p_target = output.at(i + 1).pose;\n-    const auto & p_next = output.at(i + 2).pose;\n-    if (!checkValidIndex(p_base, p_next, p_target)) {\n-      RCLCPP_ERROR(get_logger(), \"detect bad index\");\n+  if (output.size() >= 2) {\n+    for (size_t i = 0; i < output.size() - 2; ++i) {\n+      const auto & p_base = output.at(i).pose;\n+      const auto & p_target = output.at(i + 1).pose;\n+      const auto & p_next = output.at(i + 2).pose;\n+      if (!checkValidIndex(p_base, p_next, p_target)) {\n+        RCLCPP_ERROR(get_logger(), \"detect bad index\");\n+      }\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/982": [
        {
            "sha": "fa803c4afab0bd4ab58cf53bcae36526fa33e56b",
            "filename": "perception/ground_segmentation/src/scan_ground_filter_nodelet.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 8,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6c9f6ddb26ccb94516b839c29e92f12a13a09d7b/perception%2Fground_segmentation%2Fsrc%2Fscan_ground_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6c9f6ddb26ccb94516b839c29e92f12a13a09d7b/perception%2Fground_segmentation%2Fsrc%2Fscan_ground_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fground_segmentation%2Fsrc%2Fscan_ground_filter_nodelet.cpp?ref=6c9f6ddb26ccb94516b839c29e92f12a13a09d7b",
            "patch": "@@ -166,8 +166,12 @@ void ScanGroundFilterComponent::classifyPointCloud(\n         (points_distance <\n          (p->radius * radial_divider_angle_rad_ + split_points_distance_tolerance_));\n \n+      float global_slope = std::atan2(p->orig_point->z, p->radius);\n       // check points which is far enough from previous point\n-      if (\n+      if (global_slope > global_slope_max_angle) {\n+        p->point_state = PointLabel::NON_GROUND;\n+        calculate_slope = false;\n+      } else if (\n         (prev_point_label == PointLabel::NON_GROUND) &&\n         (std::abs(height_from_obj) >= split_height_distance_)) {\n         calculate_slope = true;\n@@ -184,14 +188,8 @@ void ScanGroundFilterComponent::classifyPointCloud(\n       }\n       if (calculate_slope) {\n         // far from the previous point\n-\n-        float global_slope = std::atan2(p->orig_point->z, p->radius);\n         local_slope = std::atan2(height_from_gnd, radius_distance_from_gnd);\n-\n-        if (global_slope > global_slope_max_angle) {\n-          // the point is outside of the global slope threshold\n-          p->point_state = PointLabel::NON_GROUND;\n-        } else if (local_slope - prev_gnd_slope > local_slope_max_angle) {\n+        if (local_slope - prev_gnd_slope > local_slope_max_angle) {\n           // the point is outside of the local slope threshold\n           p->point_state = PointLabel::NON_GROUND;\n         } else {"
        }
    ],
    "autowarefoundation/autoware.universe/985": [
        {
            "sha": "7083e74b94bf7af5bee843497189f6cebbc0fabe",
            "filename": "planning/freespace_planning_algorithms/src/abstract_algorithm.cpp",
            "status": "modified",
            "additions": 22,
            "deletions": 13,
            "changes": 35,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6771510e482622bbb53e512ddf34ee4c5f97eaf2/planning%2Ffreespace_planning_algorithms%2Fsrc%2Fabstract_algorithm.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6771510e482622bbb53e512ddf34ee4c5f97eaf2/planning%2Ffreespace_planning_algorithms%2Fsrc%2Fabstract_algorithm.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Ffreespace_planning_algorithms%2Fsrc%2Fabstract_algorithm.cpp?ref=6771510e482622bbb53e512ddf34ee4c5f97eaf2",
            "patch": "@@ -132,21 +132,30 @@ void AbstractPlanningAlgorithm::computeCollisionIndexes(\n   const auto base_theta = tf2::getYaw(base_pose.orientation);\n \n   // Convert each point to index and check if the node is Obstacle\n-  for (double x = back; x <= front; x += costmap_.info.resolution) {\n-    for (double y = right; y <= left; y += costmap_.info.resolution) {\n-      // Calculate offset in rotated frame\n-      const double offset_x = std::cos(base_theta) * x - std::sin(base_theta) * y;\n-      const double offset_y = std::sin(base_theta) * x + std::cos(base_theta) * y;\n-\n-      geometry_msgs::msg::Pose pose_local;\n-      pose_local.position.x = base_pose.position.x + offset_x;\n-      pose_local.position.y = base_pose.position.y + offset_y;\n-\n-      const auto index = pose2index(costmap_, pose_local, planner_common_param_.theta_size);\n-      const auto index_2d = IndexXY{index.x, index.y};\n-      indexes_2d.push_back(index_2d);\n+  const auto addIndex2d = [&](const double x, const double y) {\n+    // Calculate offset in rotated frame\n+    const double offset_x = std::cos(base_theta) * x - std::sin(base_theta) * y;\n+    const double offset_y = std::sin(base_theta) * x + std::cos(base_theta) * y;\n+\n+    geometry_msgs::msg::Pose pose_local;\n+    pose_local.position.x = base_pose.position.x + offset_x;\n+    pose_local.position.y = base_pose.position.y + offset_y;\n+\n+    const auto index = pose2index(costmap_, pose_local, planner_common_param_.theta_size);\n+    const auto index_2d = IndexXY{index.x, index.y};\n+    indexes_2d.push_back(index_2d);\n+  };\n+\n+  for (double x = back; x <= front; x += costmap_.info.resolution / 2) {\n+    for (double y = right; y <= left; y += costmap_.info.resolution / 2) {\n+      addIndex2d(x, y);\n     }\n+    addIndex2d(x, left);\n+  }\n+  for (double y = right; y <= left; y += costmap_.info.resolution / 2) {\n+    addIndex2d(front, y);\n   }\n+  addIndex2d(front, left);\n }\n \n bool AbstractPlanningAlgorithm::detectCollision(const IndexXYT & base_index)"
        }
    ],
    "autowarefoundation/autoware.universe/999": [
        {
            "sha": "fb90b2f99adeb70e51eb869bf01222dd83879dd0",
            "filename": "sensing/pointcloud_preprocessor/src/filter.cpp",
            "status": "modified",
            "additions": 17,
            "deletions": 17,
            "changes": 34,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6e442290aabdab836e2a7e51e5bb9ab493d2988d/sensing%2Fpointcloud_preprocessor%2Fsrc%2Ffilter.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6e442290aabdab836e2a7e51e5bb9ab493d2988d/sensing%2Fpointcloud_preprocessor%2Fsrc%2Ffilter.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Ffilter.cpp?ref=6e442290aabdab836e2a7e51e5bb9ab493d2988d",
            "patch": "@@ -162,48 +162,48 @@ void pointcloud_preprocessor::Filter::unsubscribe()\n void pointcloud_preprocessor::Filter::computePublish(\n   const PointCloud2ConstPtr & input, const IndicesPtr & indices)\n {\n-  PointCloud2 output;\n+  auto output = std::make_unique<PointCloud2>();\n+\n   // Call the virtual method in the child\n-  filter(input, indices, output);\n+  filter(input, indices, *output);\n \n-  auto cloud_tf = std::make_unique<PointCloud2>(output);  // set the output by default\n   // Check whether the user has given a different output TF frame\n-  if (!tf_output_frame_.empty() && output.header.frame_id != tf_output_frame_) {\n+  if (!tf_output_frame_.empty() && output->header.frame_id != tf_output_frame_) {\n     RCLCPP_DEBUG(\n       this->get_logger(), \"[computePublish] Transforming output dataset from %s to %s.\",\n-      output.header.frame_id.c_str(), tf_output_frame_.c_str());\n+      output->header.frame_id.c_str(), tf_output_frame_.c_str());\n     // Convert the cloud into the different frame\n-    PointCloud2 cloud_transformed;\n-    if (!pcl_ros::transformPointCloud(tf_output_frame_, output, cloud_transformed, *tf_buffer_)) {\n+    auto cloud_transformed = std::make_unique<PointCloud2>();\n+    if (!pcl_ros::transformPointCloud(tf_output_frame_, *output, *cloud_transformed, *tf_buffer_)) {\n       RCLCPP_ERROR(\n         this->get_logger(), \"[computePublish] Error converting output dataset from %s to %s.\",\n-        output.header.frame_id.c_str(), tf_output_frame_.c_str());\n+        output->header.frame_id.c_str(), tf_output_frame_.c_str());\n       return;\n     }\n-    cloud_tf.reset(new PointCloud2(cloud_transformed));\n+    output = std::move(cloud_transformed);\n   }\n-  if (tf_output_frame_.empty() && output.header.frame_id != tf_input_orig_frame_) {\n+  if (tf_output_frame_.empty() && output->header.frame_id != tf_input_orig_frame_) {\n     // no tf_output_frame given, transform the dataset to its original frame\n     RCLCPP_DEBUG(\n       this->get_logger(), \"[computePublish] Transforming output dataset from %s back to %s.\",\n-      output.header.frame_id.c_str(), tf_input_orig_frame_.c_str());\n+      output->header.frame_id.c_str(), tf_input_orig_frame_.c_str());\n     // Convert the cloud into the different frame\n-    PointCloud2 cloud_transformed;\n+    auto cloud_transformed = std::make_unique<PointCloud2>();\n     if (!pcl_ros::transformPointCloud(\n-          tf_input_orig_frame_, output, cloud_transformed, *tf_buffer_)) {\n+          tf_input_orig_frame_, *output, *cloud_transformed, *tf_buffer_)) {\n       RCLCPP_ERROR(\n         this->get_logger(), \"[computePublish] Error converting output dataset from %s back to %s.\",\n-        output.header.frame_id.c_str(), tf_input_orig_frame_.c_str());\n+        output->header.frame_id.c_str(), tf_input_orig_frame_.c_str());\n       return;\n     }\n-    cloud_tf.reset(new PointCloud2(cloud_transformed));\n+    output = std::move(cloud_transformed);\n   }\n \n   // Copy timestamp to keep it\n-  cloud_tf->header.stamp = input->header.stamp;\n+  output->header.stamp = input->header.stamp;\n \n   // Publish a boost shared ptr\n-  pub_output_->publish(std::move(cloud_tf));\n+  pub_output_->publish(std::move(output));\n }\n \n //////////////////////////////////////////////////////////////////////////////////////////////"
        }
    ],
    "autowarefoundation/autoware.universe/1000": [
        {
            "sha": "1f83694e044602bfce923dd671f5ed7c5684ffea",
            "filename": "planning/behavior_velocity_planner/include/utilization/util.hpp",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/be72605b77afff86e6e209f50988988b175daa6a/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Futil.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/be72605b77afff86e6e209f50988988b175daa6a/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Futil.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Futil.hpp?ref=be72605b77afff86e6e209f50988988b175daa6a",
            "patch": "@@ -222,6 +222,7 @@ PointWithSearchRangeIndex findFirstNearSearchRangeIndex(\n   tier4_autoware_utils::validateNonEmpty(points);\n \n   bool min_idx_found = false;\n+  bool max_idx_found = false;\n   PointWithSearchRangeIndex point_with_range = {point, {static_cast<size_t>(0), points.size() - 1}};\n   for (size_t i = 0; i < points.size(); i++) {\n     const auto & p = points.at(i).point.pose.position;\n@@ -231,7 +232,10 @@ PointWithSearchRangeIndex findFirstNearSearchRangeIndex(\n         point_with_range.index.min_idx = i;\n         min_idx_found = true;\n       }\n-      point_with_range.index.max_idx = i;\n+      if (!max_idx_found) point_with_range.index.max_idx = i;\n+    } else if (min_idx_found) {\n+      // found close index and farther than distance_thresh, stop update max index\n+      max_idx_found = true;\n     }\n   }\n   return point_with_range;"
        }
    ],
    "autowarefoundation/autoware.universe/1003": [
        {
            "sha": "58406a609c154660fdfd423842cfbd41a2ab0b0e",
            "filename": "perception/traffic_light_ssd_fine_detector/CMakeLists.txt",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/53c689ac783a75f004b61d6c7991b423a51846df/perception%2Ftraffic_light_ssd_fine_detector%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/53c689ac783a75f004b61d6c7991b423a51846df/perception%2Ftraffic_light_ssd_fine_detector%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_ssd_fine_detector%2FCMakeLists.txt?ref=53c689ac783a75f004b61d6c7991b423a51846df",
            "patch": "@@ -154,4 +154,8 @@ if(TRT_AVAIL AND CUDA_AVAIL AND CUDNN_AVAIL)\n \n else()\n   message(STATUS \"TrafficLightSSDFineDetector won't be built, CUDA and/or TensorRT were not found.\")\n+  # to avoid launch file missing without a gpu\n+  ament_auto_package(INSTALL_TO_SHARE\n+    launch\n+  )\n endif()"
        }
    ],
    "autowarefoundation/autoware.universe/1005": [
        {
            "sha": "3ae3a3f78c98f204d717b190ef30f3414ca9c37e",
            "filename": "planning/behavior_path_planner/src/behavior_path_planner_node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5db3e1f3fa9857f840a4832ab30c6470623f8ffe/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5db3e1f3fa9857f840a4832ab30c6470623f8ffe/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp?ref=5db3e1f3fa9857f840a4832ab30c6470623f8ffe",
            "patch": "@@ -521,6 +521,8 @@ void BehaviorPathPlannerNode::run()\n \n   // behavior_path_planner runs only in LANE DRIVING scenario.\n   if (current_scenario_->current_scenario != Scenario::LANEDRIVING) {\n+    mutex_bt_.unlock();  // for bt_manager_\n+    mutex_pd_.unlock();  // for planner_data_\n     return;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1013": [
        {
            "sha": "3c556d0398735e51b101b6f58b24c4a2801705cc",
            "filename": "planning/behavior_velocity_planner/docs/intersection/merge_from_private.png",
            "status": "modified",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b14bc8b4ca31d44e72b9226e61db7495670059ef/planning%2Fbehavior_velocity_planner%2Fdocs%2Fintersection%2Fmerge_from_private.png",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b14bc8b4ca31d44e72b9226e61db7495670059ef/planning%2Fbehavior_velocity_planner%2Fdocs%2Fintersection%2Fmerge_from_private.png",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fdocs%2Fintersection%2Fmerge_from_private.png?ref=b14bc8b4ca31d44e72b9226e61db7495670059ef"
        }
    ],
    "autowarefoundation/autoware.universe/1017": [
        {
            "sha": "9aefdfa8fb8ea666b0ae83ae75dbd961cfcabd9f",
            "filename": "control/trajectory_follower_nodes/config/plot_juggler_trajectory_follower.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4a77f823e6b65391496521d94e144e8ac2d389a2/control%2Ftrajectory_follower_nodes%2Fconfig%2Fplot_juggler_trajectory_follower.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4a77f823e6b65391496521d94e144e8ac2d389a2/control%2Ftrajectory_follower_nodes%2Fconfig%2Fplot_juggler_trajectory_follower.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Ftrajectory_follower_nodes%2Fconfig%2Fplot_juggler_trajectory_follower.xml?ref=4a77f823e6b65391496521d94e144e8ac2d389a2",
            "patch": "@@ -126,7 +126,7 @@\n        <plot mode=\"TimeSeries\" style=\"Lines\">\n         <range bottom=\"0.900000\" top=\"1.100000\" right=\"118.791728\" left=\"76.166273\"/>\n         <limitY/>\n-        <curve name=\"/vehicle/state_report/mode\" color=\"#1f77b4\"/>\n+        <curve name=\"/vehicle/status/control_mode/mode\" color=\"#1f77b4\"/>\n        </plot>\n       </DockArea>\n      </DockSplitter>\n@@ -256,7 +256,7 @@\n    <selected_topics>\n     <topic name=\"/control/trajectory_follower/longitudinal/diagnostic\"/>\n     <topic name=\"/control/trajectory_follower/lateral/diagnostic\"/>\n-    <topic name=\"/vehicle/state_report\"/>\n+    <topic name=\"/vehicle/status/control_mode\"/>\n    </selected_topics>\n   </plugin>\n   <plugin ID=\"UDP Server\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/1024": [
        {
            "sha": "3253c1db4d1d66e97262a4aa083aeefb512f1590",
            "filename": "launch/tier4_perception_launch/package.xml",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4927725218b64147a93bec493e51eb5bb7d1a172/launch%2Ftier4_perception_launch%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4927725218b64147a93bec493e51eb5bb7d1a172/launch%2Ftier4_perception_launch%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Fpackage.xml?ref=4927725218b64147a93bec493e51eb5bb7d1a172",
            "patch": "@@ -12,6 +12,9 @@\n   <build_depend>autoware_cmake</build_depend>\n \n   <exec_depend>compare_map_segmentation</exec_depend>\n+  <exec_depend>detected_object_feature_remover</exec_depend>\n+  <exec_depend>detected_object_validation</exec_depend>\n+  <exec_depend>detection_by_tracker</exec_depend>\n   <exec_depend>euclidean_cluster</exec_depend>\n   <exec_depend>ground_segmentation</exec_depend>\n   <exec_depend>image_projection_based_fusion</exec_depend>"
        }
    ],
    "autowarefoundation/autoware.universe/1025": [
        {
            "sha": "5399fe67bdf869ce8a12c5dc106767bda441d526",
            "filename": "simulator/simple_planning_simulator/design/simple_planning_simulator-design.md",
            "status": "modified",
            "additions": 16,
            "deletions": 19,
            "changes": 35,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d3ad9f970e27dd91e106a0fdeb0d04c0bbf9ae81/simulator%2Fsimple_planning_simulator%2Fdesign%2Fsimple_planning_simulator-design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d3ad9f970e27dd91e106a0fdeb0d04c0bbf9ae81/simulator%2Fsimple_planning_simulator%2Fdesign%2Fsimple_planning_simulator-design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Fdesign%2Fsimple_planning_simulator-design.md?ref=d3ad9f970e27dd91e106a0fdeb0d04c0bbf9ae81",
            "patch": "@@ -33,10 +33,10 @@ The purpose of this simulator is for the integration test of planning and contro\n ### Common Parameters\n \n | Name                  | Type   | Description                                                                                                                           | Default value        |\n-| :-------------------- | :----- | :------------------------------------------------------------------------------------------------------------------------------------ | :------------------- | -------------------- |\n+| :-------------------- | :----- | :------------------------------------------------------------------------------------------------------------------------------------ | :------------------- |\n | simulated_frame_id    | string | set to the child_frame_id in output tf                                                                                                | \"base_link\"          |\n | origin_frame_id       | string | set to the frame_id in output tf                                                                                                      | \"odom\"               |\n-| initialize_source     | string | If \"ORIGIN\", the initial pose is set at (0,0,0). If \"INITIAL_POSE_TOPIC\", node will wait until the `/initialpose` topic is published. | \"INITIAL_POSE_TOPIC\" | \"INITIAL_POSE_TOPIC\" |\n+| initialize_source     | string | If \"ORIGIN\", the initial pose is set at (0,0,0). If \"INITIAL_POSE_TOPIC\", node will wait until the `/initialpose` topic is published. | \"INITIAL_POSE_TOPIC\" |\n | add_measurement_noise | bool   | If true, the Gaussian noise is added to the simulated results.                                                                        | true                 |\n | pos_noise_stddev      | double | Standard deviation for position noise                                                                                                 | 0.01                 |\n | rpy_noise_stddev      | double | Standard deviation for Euler angle noise                                                                                              | 0.0001               |\n@@ -59,19 +59,20 @@ The `IDEAL` model moves ideally as commanded, while the `DELAY` model moves base\n \n The table below shows which models correspond to what parameters. The model names are written in abbreviated form (e.g. IDEAL_STEER_VEL = I_ST_V).\n \n-| Name                | Type                 | Description                                          | I_ST_V                              | I_ST_A | I_ST_A_G | D_ST_V | D_ST_A | D_ST_A_G | Default value | unit    |\n-| :------------------ | :------------------- | :--------------------------------------------------- | :---------------------------------- | :----- | :------- | :----- | :----- | :------- | :------------ | :------ | --- |\n-| acc_time_delay      | double               | dead time for the acceleration input                 | x                                   | x      | x        | x      | o      | o        | 0.1           | [s]     |\n-| steer_time_delay    | double               | dead time for the steering input                     | x                                   | x      | x        | o      | o      | o        | 0.24          | [s]     |\n-| vel_time_delay      | double               | dead time for the velocity input                     | x                                   | x      | x        | o      | x      | x        | 0.25          | [s]     |\n-| acc_time_constant   | double               | time constant of the 1st-order acceleration dynamics | x                                   | x      | x        | x      | o      | o        | 0.1           | [s]     |\n-| steer_time_constant | double               | time constant of the 1st-order steering dynamics     | x                                   | x      | x        | o      | o      | o        | 0.27          | [s]     |\n-| vel_time_constant   | double               | time constant of the 1st-order velocity dynamics     | x                                   | x      | x        | o      | x      | x        | 0.5           | [s]     |\n-| vel_lim             | double               | limit of velocity                                    | x                                   | x      | x        | o      | o      | o        | 50.0          | [m/s]   |\n-| vel_rate_lim        | double               | limit of acceleration                                | x                                   | x      | x        | o      | o      | o        | 7.0           | [m/ss]  |\n-| steer_lim           | double               | limit of steering angle                              | x                                   | x      | x        | o      | o      | o        | 1.0           | [rad]   |\n-| steer_rate_lim      | double               | limit of steering angle change rate                  | x                                   | x      | x        | o      | o      | o        | 5.0           | [rad/s] |\n-| <!--                | deadzone_delta_steer | double                                               | dead zone for the steering dynamics | x      | x        | x      | o      | o        | 0.0           | [rad]   | --> |\n+| Name                | Type   | Description                                          | I_ST_V | I_ST_A | I_ST_A_G | D_ST_V | D_ST_A | D_ST_A_G | Default value | unit    |\n+| :------------------ | :----- | :--------------------------------------------------- | :----- | :----- | :------- | :----- | :----- | :------- | :------------ | :------ |\n+| acc_time_delay      | double | dead time for the acceleration input                 | x      | x      | x        | x      | o      | o        | 0.1           | [s]     |\n+| steer_time_delay    | double | dead time for the steering input                     | x      | x      | x        | o      | o      | o        | 0.24          | [s]     |\n+| vel_time_delay      | double | dead time for the velocity input                     | x      | x      | x        | o      | x      | x        | 0.25          | [s]     |\n+| acc_time_constant   | double | time constant of the 1st-order acceleration dynamics | x      | x      | x        | x      | o      | o        | 0.1           | [s]     |\n+| steer_time_constant | double | time constant of the 1st-order steering dynamics     | x      | x      | x        | o      | o      | o        | 0.27          | [s]     |\n+| vel_time_constant   | double | time constant of the 1st-order velocity dynamics     | x      | x      | x        | o      | x      | x        | 0.5           | [s]     |\n+| vel_lim             | double | limit of velocity                                    | x      | x      | x        | o      | o      | o        | 50.0          | [m/s]   |\n+| vel_rate_lim        | double | limit of acceleration                                | x      | x      | x        | o      | o      | o        | 7.0           | [m/ss]  |\n+| steer_lim           | double | limit of steering angle                              | x      | x      | x        | o      | o      | o        | 1.0           | [rad]   |\n+| steer_rate_lim      | double | limit of steering angle change rate                  | x      | x      | x        | o      | o      | o        | 5.0           | [rad/s] |\n+\n+<!-- deadzone_delta_steer | double | dead zone for the steering dynamics                  | x      | x      | x        | o      | o      | 0.0      | [rad]         |         | -->\n \n _Note_: The steering/velocity/acceleration dynamics is modeled by a first order system with a deadtime in a _delay_ model. The definition of the _time constant_ is the time it takes for the step response to rise up to 63% of its final value. The _deadtime_ is a delay in the response to a control input.\n \n@@ -105,7 +106,3 @@ This is originally developed in the Autoware.AI. See the link below.\n \n - Improving the accuracy of vehicle models (e.g., adding steering dead zones and slip behavior)\n - Cooperation with modules that output pseudo pointcloud or pseudo perception results\n-\n-## Related issues\n-\n-- #1142: Follow-up to #570 - Integrate simple_planning_simulator Into CI"
        }
    ],
    "autowarefoundation/autoware.universe/1029": [
        {
            "sha": "8ea35aa4833cf7383a52b8da61f4f63063c5d96b",
            "filename": "planning/behavior_velocity_planner/src/scene_module/stop_line/debug.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 3,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/97d0a5320df4ac8f25235140ccd79bf6eb6ba760/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/97d0a5320df4ac8f25235140ccd79bf6eb6ba760/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fdebug.cpp?ref=97d0a5320df4ac8f25235140ccd79bf6eb6ba760",
            "patch": "@@ -96,9 +96,11 @@ visualization_msgs::msg::MarkerArray StopLineModule::createVirtualWallMarkerArra\n   visualization_msgs::msg::MarkerArray wall_marker;\n   const auto p_front = tier4_autoware_utils::calcOffsetPose(\n     *debug_data_.stop_pose, debug_data_.base_link2front, 0.0, 0.0);\n-  appendMarkerArray(\n-    tier4_autoware_utils::createStopVirtualWallMarker(p_front, \"stopline\", now, module_id_), now,\n-    &wall_marker);\n+  if (state_ == State::APPROACH) {\n+    appendMarkerArray(\n+      tier4_autoware_utils::createStopVirtualWallMarker(p_front, \"stopline\", now, module_id_), now,\n+      &wall_marker);\n+  }\n   return wall_marker;\n }\n }  // namespace behavior_velocity_planner"
        }
    ],
    "autowarefoundation/autoware.universe/1035": [
        {
            "sha": "73312db98dea358ea2953997ce371dba9fbc6eb7",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 16,
            "changes": 30,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5b8b8194d134a26abcd20e94d0c01085a3513495/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5b8b8194d134a26abcd20e94d0c01085a3513495/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=5b8b8194d134a26abcd20e94d0c01085a3513495",
            "patch": "@@ -100,17 +100,16 @@ std::array<double, 4> getLaneletScope(\n       p.y = point.y();\n       points.push_back(p);\n     }\n-    const size_t nearest_point_idx =\n-      tier4_autoware_utils::findNearestIndex(points, current_pose.position);\n-\n-    drivable_area_utils::updateMinMaxPosition(\n-      nearest_bound[nearest_point_idx].basicPoint(), min_x, min_y, max_x, max_y);\n+    const size_t nearest_segment_idx =\n+      tier4_autoware_utils::findNearestSegmentIndex(points, current_pose.position);\n \n     // forward lanelet\n-    double sum_length = 0.0;\n+    const auto forward_offset_length =\n+      tier4_autoware_utils::calcSignedArcLength(points, current_pose.position, nearest_segment_idx);\n+    double sum_length = std::min(forward_offset_length, 0.0);\n     size_t current_lane_idx = nearest_lane_idx;\n     auto current_lane = lanes.at(current_lane_idx);\n-    size_t current_point_idx = nearest_point_idx;\n+    size_t current_point_idx = nearest_segment_idx;\n     while (true) {\n       const auto & bound = get_bound_func(current_lane);\n       if (current_point_idx != bound.size() - 1) {\n@@ -140,10 +139,8 @@ std::array<double, 4> getLaneletScope(\n         current_point_idx = 0;\n         const auto & current_bound = get_bound_func(current_lane);\n \n-        const Eigen::Vector2d & prev_point =\n-          get_bound_func(previous_lane)[previous_point_idx].basicPoint();\n-        const Eigen::Vector2d & current_point =\n-          get_bound_func(current_lane)[current_point_idx].basicPoint();\n+        const Eigen::Vector2d & prev_point = previous_bound[previous_point_idx].basicPoint();\n+        const Eigen::Vector2d & current_point = current_bound[current_point_idx].basicPoint();\n         const bool is_end_lane = drivable_area_utils::sumLengthFromTwoPoints(\n           prev_point, current_point, forward_lane_length + lane_margin, sum_length, min_x, min_y,\n           max_x, max_y);\n@@ -154,8 +151,10 @@ std::array<double, 4> getLaneletScope(\n     }\n \n     // backward lanelet\n-    current_point_idx = nearest_point_idx;\n-    sum_length = 0.0;\n+    current_point_idx = nearest_segment_idx + 1;\n+    const auto backward_offset_length = tier4_autoware_utils::calcSignedArcLength(\n+      points, nearest_segment_idx + 1, current_pose.position);\n+    sum_length = std::min(backward_offset_length, 0.0);\n     current_lane_idx = nearest_lane_idx;\n     current_lane = lanes.at(current_lane_idx);\n     while (true) {\n@@ -187,9 +186,8 @@ std::array<double, 4> getLaneletScope(\n         const auto & current_bound = get_bound_func(current_lane);\n         current_point_idx = current_bound.size() - 1;\n \n-        const Eigen::Vector2d & next_point = get_bound_func(next_lane)[next_point_idx].basicPoint();\n-        const Eigen::Vector2d & current_point =\n-          get_bound_func(current_lane)[current_point_idx].basicPoint();\n+        const Eigen::Vector2d & next_point = next_bound[next_point_idx].basicPoint();\n+        const Eigen::Vector2d & current_point = current_bound[current_point_idx].basicPoint();\n         const bool is_end_lane = drivable_area_utils::sumLengthFromTwoPoints(\n           next_point, current_point, backward_lane_length + lane_margin, sum_length, min_x, min_y,\n           max_x, max_y);"
        }
    ],
    "autowarefoundation/autoware.universe/1040": [
        {
            "sha": "433f4e75042f825ac3d0badd2a80bd4ae365c402",
            "filename": "common/tier4_debug_tools/scripts/stop_reason2pose.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a2f8b1bfc19194f6190d650440282d99c04a9993/common%2Ftier4_debug_tools%2Fscripts%2Fstop_reason2pose.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a2f8b1bfc19194f6190d650440282d99c04a9993/common%2Ftier4_debug_tools%2Fscripts%2Fstop_reason2pose.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_debug_tools%2Fscripts%2Fstop_reason2pose.py?ref=a2f8b1bfc19194f6190d650440282d99c04a9993",
            "patch": "@@ -93,7 +93,7 @@ def _get_nearest_pose_in_array(self, stop_reason, self_pose):\n         if not poses:\n             return None\n \n-        distances = map(lambda p: StopReason2PoseNode.calc_distance2d(p, self_pose), poses)\n+        distances = [StopReason2PoseNode.calc_distance2d(p, self_pose.pose) for p in poses]\n         nearest_idx = np.argmin(distances)\n \n         return poses[nearest_idx]"
        }
    ],
    "autowarefoundation/autoware.universe/1043": [
        {
            "sha": "450da120e137fc1d94ae97f6b8d8d92c27744223",
            "filename": "map/lanelet2_extension/lib/utilities.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 11,
            "changes": 22,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f17cb360289a4d22f7b08cd60c71ff7ff07a1c5f/map%2Flanelet2_extension%2Flib%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f17cb360289a4d22f7b08cd60c71ff7ff07a1c5f/map%2Flanelet2_extension%2Flib%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Flanelet2_extension%2Flib%2Futilities.cpp?ref=f17cb360289a4d22f7b08cd60c71ff7ff07a1c5f",
            "patch": "@@ -318,6 +318,17 @@ lanelet::ConstLanelet getExpandedLanelet(\n   auto expanded_left_bound_2d = offsetNoThrow(orig_left_bound_2d, left_offset);\n   auto expanded_right_bound_2d = offsetNoThrow(orig_right_bound_2d, right_offset);\n \n+  rclcpp::Clock clock{RCL_ROS_TIME};\n+  try {\n+    checkForInversion(orig_left_bound_2d, expanded_left_bound_2d, left_offset);\n+    checkForInversion(orig_right_bound_2d, expanded_right_bound_2d, right_offset);\n+  } catch (const lanelet::GeometryError & e) {\n+    RCLCPP_ERROR_THROTTLE(\n+      rclcpp::get_logger(\"lanelet2_extension\"), clock, 1000,\n+      \"Fail to expand lanelet. output may be undesired. Lanelet points interval in map data could \"\n+      \"be too narrow.\");\n+  }\n+\n   // Note: modify front and back points so that the successive lanelets will not have any\n   // longitudinal space between them.\n   {  // front\n@@ -347,17 +358,6 @@ lanelet::ConstLanelet getExpandedLanelet(\n       orig_left_bound_2d.back().y() - left_offset * std::sin(theta);\n   }\n \n-  rclcpp::Clock clock{RCL_ROS_TIME};\n-  try {\n-    checkForInversion(orig_left_bound_2d, expanded_left_bound_2d, left_offset);\n-    checkForInversion(orig_right_bound_2d, expanded_right_bound_2d, right_offset);\n-  } catch (const lanelet::GeometryError & e) {\n-    RCLCPP_ERROR_THROTTLE(\n-      rclcpp::get_logger(\"lanelet2_extension\"), clock, 1000,\n-      \"Fail to expand lanelet. output may be undesired. Lanelet points interval in map data could \"\n-      \"be too narrow.\");\n-  }\n-\n   const auto toPoints3d = [](const lanelet::BasicLineString2d & ls2d, const double z) {\n     lanelet::Points3d output;\n     for (const auto & pt : ls2d) {"
        }
    ],
    "autowarefoundation/autoware.universe/1044": [
        {
            "sha": "11dee5effe28bf9817a74e055c53ef8422d49636",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 21,
            "changes": 32,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/60865b8ebbc5ea923ad0e7e2e4b17c17d586eab5/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/60865b8ebbc5ea923ad0e7e2e4b17c17d586eab5/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=60865b8ebbc5ea923ad0e7e2e4b17c17d586eab5",
            "patch": "@@ -201,7 +201,7 @@ std::tuple<std::vector<double>, std::vector<double>> calcVehicleCirclesInfo(\n   }\n }\n \n-size_t findNearestIndexWithSoftYawConstraints(\n+[[maybe_unused]] size_t findNearestIndexWithSoftYawConstraints(\n   const std::vector<geometry_msgs::msg::Point> & points, const geometry_msgs::msg::Pose & pose,\n   const double dist_threshold, const double yaw_threshold)\n {\n@@ -1081,33 +1081,23 @@ void ObstacleAvoidancePlanner::calcVelocity(\n   std::vector<autoware_auto_planning_msgs::msg::TrajectoryPoint> & traj_points) const\n {\n   for (size_t i = 0; i < traj_points.size(); i++) {\n-    const size_t nearest_path_idx = findNearestIndexWithSoftYawConstraints(\n-      points_utils::convertToPoints(path_points), traj_points.at(i).pose,\n-      traj_param_.delta_dist_threshold_for_closest_point,\n-      traj_param_.delta_yaw_threshold_for_closest_point);\n-    const size_t second_nearest_path_idx = [&]() -> size_t {\n-      if (nearest_path_idx == 0) {\n-        return 1;\n-      } else if (nearest_path_idx == path_points.size() - 1) {\n-        return path_points.size() - 2;\n-      }\n-\n-      const double prev_dist = tier4_autoware_utils::calcDistance2d(\n-        traj_points.at(i), path_points.at(nearest_path_idx - 1));\n-      const double next_dist = tier4_autoware_utils::calcDistance2d(\n-        traj_points.at(i), path_points.at(nearest_path_idx + 1));\n-      if (prev_dist < next_dist) {\n-        return nearest_path_idx - 1;\n+    const size_t nearest_seg_idx = [&]() {\n+      const auto opt_seg_idx = tier4_autoware_utils::findNearestSegmentIndex(\n+        path_points, traj_points.at(i).pose, traj_param_.delta_dist_threshold_for_closest_point,\n+        traj_param_.delta_yaw_threshold_for_closest_point);\n+      if (opt_seg_idx) {\n+        return opt_seg_idx.get();\n       }\n-      return nearest_path_idx + 1;\n+      return tier4_autoware_utils::findNearestSegmentIndex(\n+        path_points, traj_points.at(i).pose.position);\n     }();\n \n     // NOTE: std::max, not std::min, is used here since traj_points' sampling width may be longer\n     // than path_points' sampling width. A zero velocity point is guaranteed to be inserted in an\n     // output trajectory in the alignVelocity function\n     traj_points.at(i).longitudinal_velocity_mps = std::max(\n-      path_points.at(nearest_path_idx).longitudinal_velocity_mps,\n-      path_points.at(second_nearest_path_idx).longitudinal_velocity_mps);\n+      path_points.at(nearest_seg_idx).longitudinal_velocity_mps,\n+      path_points.at(nearest_seg_idx + 1).longitudinal_velocity_mps);\n   }\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1047": [
        {
            "sha": "0f63be1a174b9ed71b390288cb5233b89219336f",
            "filename": "launch/tier4_autoware_api_launch/launch/autoware_api.launch.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8ddd7feafc5323d3ada17aa57fe24a2efff639fa/launch%2Ftier4_autoware_api_launch%2Flaunch%2Fautoware_api.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8ddd7feafc5323d3ada17aa57fe24a2efff639fa/launch%2Ftier4_autoware_api_launch%2Flaunch%2Fautoware_api.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_autoware_api_launch%2Flaunch%2Fautoware_api.launch.xml?ref=8ddd7feafc5323d3ada17aa57fe24a2efff639fa",
            "patch": "@@ -17,6 +17,6 @@\n   <!-- rosbridge -->\n   <!-- TODO: respawn will work once https://github.com/ros2/launch/pull/569 is released. I'll delete this comment when it's done. -->\n   <include file=\"$(find-pkg-share rosbridge_server)/launch/rosbridge_websocket_launch.xml\">\n-    <arg name=\"respawn\" value=\"$(var respawn)\"/>\n+    <arg name=\"respawn\" value=\"$(var respawn_rosbridge)\"/>\n   </include>\n </launch>"
        }
    ],
    "autowarefoundation/autoware.universe/1052": [
        {
            "sha": "1e11645d01bba458835cf53f0cd46649a83e84bb",
            "filename": "planning/behavior_velocity_planner/src/scene_module/run_out/scene.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 5,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/26a63fd988ee35bae88e63f18829265b909bbdb3/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/26a63fd988ee35bae88e63f18829265b909bbdb3/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fscene.cpp?ref=26a63fd988ee35bae88e63f18829265b909bbdb3",
            "patch": "@@ -55,7 +55,7 @@ bool RunOutModule::modifyPathVelocity(\n   const auto current_acc = planner_data_->current_accel.get();\n   const auto & current_pose = planner_data_->current_pose.pose;\n \n-  // smooth velocity of the path to calcute time to collision accurately\n+  // smooth velocity of the path to calculate time to collision accurately\n   PathWithLaneId smoothed_path;\n   if (!smoothPath(*path, smoothed_path, planner_data_)) {\n     return true;\n@@ -505,10 +505,15 @@ std::vector<geometry_msgs::msg::Point> RunOutModule::createBoundingBoxForRangedP\n     tier4_autoware_utils::calcDistance2d(pose_with_range.pose_min, pose_with_range.pose_max);\n \n   geometry_msgs::msg::Pose p_min_to_p_max;\n-  const auto azimuth_angle = tier4_autoware_utils::calcAzimuthAngle(\n-    pose_with_range.pose_min.position, pose_with_range.pose_max.position);\n-  p_min_to_p_max.position = pose_with_range.pose_min.position;\n-  p_min_to_p_max.orientation = tier4_autoware_utils::createQuaternionFromYaw(azimuth_angle);\n+  if (dist_p1_p2 < std::numeric_limits<double>::epsilon()) {\n+    // can't calculate the angle if two points are the same\n+    p_min_to_p_max = pose_with_range.pose_min;\n+  } else {\n+    const auto azimuth_angle = tier4_autoware_utils::calcAzimuthAngle(\n+      pose_with_range.pose_min.position, pose_with_range.pose_max.position);\n+    p_min_to_p_max.position = pose_with_range.pose_min.position;\n+    p_min_to_p_max.orientation = tier4_autoware_utils::createQuaternionFromYaw(azimuth_angle);\n+  }\n \n   std::vector<geometry_msgs::msg::Point> poly;\n   poly.emplace_back("
        }
    ],
    "autowarefoundation/autoware.universe/1055": [
        {
            "sha": "eaea06a8bd4c6eeebcc9d9605a02d85cf1c84bf4",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 15,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2b5c9eecb3a3605611964f4cf2734c7d5de7d1e7/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2b5c9eecb3a3605611964f4cf2734c7d5de7d1e7/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=2b5c9eecb3a3605611964f4cf2734c7d5de7d1e7",
            "patch": "@@ -465,8 +465,8 @@ AvoidPointArray AvoidanceModule::calcRawShiftPointsFromObjects(\n   const auto & lat_collision_margin = parameters_.lateral_collision_margin;\n   const auto & vehicle_width = planner_data_->parameters.vehicle_width;\n   const auto & road_shoulder_safety_margin = parameters_.road_shoulder_safety_margin;\n-  const auto max_allowable_lateral_distance =\n-    lat_collision_safety_buffer + lat_collision_margin + vehicle_width;\n+  const auto max_allowable_lateral_distance = lat_collision_safety_buffer + lat_collision_margin +\n+                                              vehicle_width - road_shoulder_safety_margin;\n \n   const auto avoid_margin =\n     lat_collision_safety_buffer + lat_collision_margin + 0.5 * vehicle_width;\n@@ -494,20 +494,9 @@ AvoidPointArray AvoidanceModule::calcRawShiftPointsFromObjects(\n       continue;\n     }\n \n-    const auto max_shift_length =\n-      o.to_road_shoulder_distance - road_shoulder_safety_margin - 0.5 * vehicle_width;\n-\n-    const auto max_left_shift_limit = [&max_shift_length, this]() noexcept {\n-      return std::min(getLeftShiftBound(), max_shift_length);\n-    };\n-\n-    const auto max_right_shift_limit = [&max_shift_length, this]() noexcept {\n-      return std::max(getRightShiftBound(), -max_shift_length);\n-    };\n-\n     const auto shift_length = isOnRight(o)\n-                                ? std::min(o.overhang_dist + avoid_margin, max_left_shift_limit())\n-                                : std::max(o.overhang_dist - avoid_margin, max_right_shift_limit());\n+                                ? std::min(o.overhang_dist + avoid_margin, getLeftShiftBound())\n+                                : std::max(o.overhang_dist - avoid_margin, getRightShiftBound());\n     const auto avoiding_shift = shift_length - current_ego_shift;\n     const auto return_shift = shift_length;\n "
        }
    ],
    "autowarefoundation/autoware.universe/1057": [
        {
            "sha": "d3b61e13eba594fc20bb7bf9477b907f36a538a0",
            "filename": "perception/map_based_prediction/src/map_based_prediction_node.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1ada03d6205a9cad023fb75df3ac101dd5952b3a/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1ada03d6205a9cad023fb75df3ac101dd5952b3a/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp?ref=1ada03d6205a9cad023fb75df3ac101dd5952b3a",
            "patch": "@@ -426,10 +426,12 @@ bool MapBasedPredictionNode::checkCloseLaneletCondition(\n \n   // Step4. Check if the closest lanelet is valid, and add all\n   // of the lanelets that are below max_dist and max_delta_yaw\n+  const double object_vel = object.kinematics.twist_with_covariance.twist.linear.x;\n+  const bool is_yaw_reversed =\n+    M_PI - delta_yaw_threshold_for_searching_lanelet_ < abs_norm_delta && object_vel < 0.0;\n   if (\n     lanelet.first < dist_threshold_for_searching_lanelet_ &&\n-    (M_PI - delta_yaw_threshold_for_searching_lanelet_ < abs_norm_delta ||\n-     abs_norm_delta < delta_yaw_threshold_for_searching_lanelet_)) {\n+    (is_yaw_reversed || abs_norm_delta < delta_yaw_threshold_for_searching_lanelet_)) {\n     return true;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1065": [
        {
            "sha": "bfb3a8b250789f9f1658ec607cfc9226e688c4f1",
            "filename": "planning/behavior_velocity_planner/run-out-design.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e59721563c1abd814db2a9c1185cf68d6e6a0855/planning%2Fbehavior_velocity_planner%2Frun-out-design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e59721563c1abd814db2a9c1185cf68d6e6a0855/planning%2Fbehavior_velocity_planner%2Frun-out-design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Frun-out-design.md?ref=e59721563c1abd814db2a9c1185cf68d6e6a0855",
            "patch": "@@ -80,7 +80,7 @@ Abstracted obstacle data has following information.\n | min_velocity_mps | `float`                                                                 | minimum velocity of the obstacle. specified by parameter of `dynamic_obstacle.min_vel_kmph`                            |\n | max_velocity_mps | `float`                                                                 | maximum velocity of the obstacle. specified by parameter of `dynamic_obstacle.max_vel_kmph`                            |\n \n-Enter the maximum/minimum velocity of the object as a parameter, adding enough margin to the expected velocity. This parameter is used to create polygons for [collision detection](#Collision-detection).\n+Enter the maximum/minimum velocity of the object as a parameter, adding enough margin to the expected velocity. This parameter is used to create polygons for [collision detection](./run-out-design.md#Collision-detection).\n \n Future work: Determine the maximum/minimum velocity from the estimated velocity with covariance of the object\n \n@@ -114,7 +114,7 @@ You can choose whether to use this feature by parameter of `use_partition_lanele\n \n Along the ego vehicle path, determine the points where collision detection is to be performed for each `detection_span`.\n \n-The travel times to the each points are calculated from [the expected target velocity](#Calculate-the-expected-target-velocity-for-ego-vehicle).\n+The travel times to the each points are calculated from [the expected target velocity](./run-out-design.md#Calculate-the-expected-target-velocity-for-ego-vehicle).\n \n ![brief](./docs/run_out/create_polygon_on_path_point.svg)\n "
        }
    ],
    "autowarefoundation/autoware.universe/1067": [
        {
            "sha": "609b8115d67564e33af3d9c0e6d2aa19e1ca9b5f",
            "filename": "planning/behavior_velocity_planner/include/utilization/trajectory_utils.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 21,
            "changes": 23,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/af215340b8df38bb6137c2c6947da6f95f8589e8/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/af215340b8df38bb6137c2c6947da6f95f8589e8/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Finclude%2Futilization%2Ftrajectory_utils.hpp?ref=af215340b8df38bb6137c2c6947da6f95f8589e8",
            "patch": "@@ -146,28 +146,9 @@ inline bool smoothPath(\n   const auto traj_lateral_acc_filtered = smoother->applyLateralAccelerationFilter(trajectory);\n   auto nearest_idx =\n     tier4_autoware_utils::findNearestIndex(*traj_lateral_acc_filtered, current_pose.position);\n-  const auto dist_to_nearest = tier4_autoware_utils::calcSignedArcLength(\n-    *traj_lateral_acc_filtered, current_pose.position, nearest_idx);\n-\n-  // if trajectory has the almost same point as ego, don't insert the ego point\n-  constexpr double epsilon = 1e-2;\n-  TrajectoryPoints traj_with_ego_point_on_path = *traj_lateral_acc_filtered;\n-  if (std::fabs(dist_to_nearest) > epsilon) {\n-    // calc ego internal division point on path\n-    const auto traj_with_ego_point_with_idx =\n-      getLerpTrajectoryPointWithIdx(*traj_lateral_acc_filtered, current_pose.position);\n-    if (traj_with_ego_point_with_idx == boost::none) return false;\n-    TrajectoryPoint ego_point_on_path = traj_with_ego_point_with_idx->first;\n-    const size_t nearest_seg_idx = traj_with_ego_point_with_idx->second;\n-    //! insert ego projected pose on path so new nearest segment will be nearest_seg_idx + 1\n-    traj_with_ego_point_on_path.insert(\n-      traj_with_ego_point_on_path.begin() + nearest_seg_idx, ego_point_on_path);\n-\n-    // ego point inserted is new nearest point\n-    nearest_idx = nearest_seg_idx + 1;\n-  }\n+\n   // Resample trajectory with ego-velocity based interval distances\n-  auto traj_resampled = smoother->resampleTrajectory(traj_with_ego_point_on_path, v0, nearest_idx);\n+  auto traj_resampled = smoother->resampleTrajectory(*traj_lateral_acc_filtered, v0, nearest_idx);\n   const auto traj_resampled_closest = findNearestIndex(*traj_resampled, current_pose, max, M_PI_4);\n   if (!traj_resampled_closest) {\n     return false;"
        }
    ],
    "autowarefoundation/autoware.universe/1070": [
        {
            "sha": "0102265d534dc99bfb36206b72b7bd792bb683a6",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3027e39d022b60816430974ad36573655ef75fad/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3027e39d022b60816430974ad36573655ef75fad/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=3027e39d022b60816430974ad36573655ef75fad",
            "patch": "@@ -1105,6 +1105,10 @@ void ObstacleAvoidancePlanner::insertZeroVelocityOutsideDrivableArea(\n   std::vector<autoware_auto_planning_msgs::msg::TrajectoryPoint> & traj_points,\n   const CVMaps & cv_maps)\n {\n+  if (traj_points.empty()) {\n+    return;\n+  }\n+\n   stop_watch_.tic(__func__);\n \n   const auto & map_info = cv_maps.map_info;"
        }
    ],
    "autowarefoundation/autoware.universe/1072": [
        {
            "sha": "fe4082027d6f18c7fcc260135d57faadf95df2b2",
            "filename": "planning/obstacle_avoidance_planner/src/mpt_optimizer.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/832f63eaa23de2012ee8622928f65e7d84e1d79c/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/832f63eaa23de2012ee8622928f65e7d84e1d79c/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp?ref=832f63eaa23de2012ee8622928f65e7d84e1d79c",
            "patch": "@@ -377,6 +377,9 @@ std::vector<ReferencePoint> MPTOptimizer::getReferencePoints(\n       traj_param_.num_sampling_points * mpt_param_.delta_arc_length_for_mpt_points +\n       tmp_ref_points_margin;\n     ref_points = points_utils::clipForwardPoints(ref_points, 0, ref_length_with_margin);\n+    if (ref_points.empty()) {\n+      return std::vector<ReferencePoint>{};\n+    }\n \n     // set bounds information\n     calcBounds(ref_points, enable_avoidance, maps, prev_trajs, debug_data_ptr);"
        }
    ],
    "autowarefoundation/autoware.universe/1083": [
        {
            "sha": "6c1ce704805100a7dfd988faa831d230bc43d338",
            "filename": "planning/obstacle_cruise_planner/src/node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f99306c29a8aa82398e4f3ca6c40b67531217501/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f99306c29a8aa82398e4f3ca6c40b67531217501/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp?ref=f99306c29a8aa82398e4f3ca6c40b67531217501",
            "patch": "@@ -533,7 +533,9 @@ std::vector<TargetObstacle> ObstacleCruisePlannerNode::filterObstacles(\n     const double dist_from_obstacle_to_traj = [&]() {\n       return tier4_autoware_utils::calcLateralOffset(decimated_traj.points, object_pose.position);\n     }();\n-    if (dist_from_obstacle_to_traj > obstacle_filtering_param_.rough_detection_area_expand_width) {\n+    if (\n+      std::fabs(dist_from_obstacle_to_traj) >\n+      obstacle_filtering_param_.rough_detection_area_expand_width) {\n       RCLCPP_INFO_EXPRESSION(\n         get_logger(), is_showing_debug_info_,\n         \"Ignore obstacles since it is far from the trajectory.\");"
        }
    ],
    "autowarefoundation/autoware.universe/1085": [
        {
            "sha": "585ea34a9120dd5cf937a4fdf8e47685eb4cb0be",
            "filename": "common/tier4_state_rviz_plugin/src/autoware_state_panel.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e82fe8b890f82b1e9c2a5b6d79ea811c762a939c/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e82fe8b890f82b1e9c2a5b6d79ea811c762a939c/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp?ref=e82fe8b890f82b1e9c2a5b6d79ea811c762a939c",
            "patch": "@@ -155,15 +155,15 @@ void AutowareStatePanel::onInitialize()\n     \"/api/autoware/set/emergency\", rmw_qos_profile_services_default);\n \n   pub_velocity_limit_ = raw_node_->create_publisher<tier4_planning_msgs::msg::VelocityLimit>(\n-    \"/planning/scenario_planning/max_velocity_default\", rclcpp::QoS(1));\n+    \"/planning/scenario_planning/max_velocity_default\", rclcpp::QoS{1}.transient_local());\n \n   pub_gate_mode_ = raw_node_->create_publisher<tier4_control_msgs::msg::GateMode>(\n-    \"/control/gate_mode_cmd\", rclcpp::QoS(1));\n+    \"/control/gate_mode_cmd\", rclcpp::QoS{1}.transient_local());\n \n   pub_path_change_approval_ = raw_node_->create_publisher<tier4_planning_msgs::msg::Approval>(\n     \"/planning/scenario_planning/lane_driving/behavior_planning/behavior_path_planner/\"\n     \"path_change_approval\",\n-    rclcpp::QoS(1));\n+    rclcpp::QoS{1}.transient_local());\n }\n \n void AutowareStatePanel::onGateMode(const tier4_control_msgs::msg::GateMode::ConstSharedPtr msg)"
        }
    ],
    "autowarefoundation/autoware.universe/1095": [
        {
            "sha": "ae8fca491cdc5f1e976c18d19212c2f952fd75ce",
            "filename": "planning/behavior_velocity_planner/src/node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9ed81c7663f6cf99bd9814ad0338b6dc8671e670/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9ed81c7663f6cf99bd9814ad0338b6dc8671e670/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp?ref=9ed81c7663f6cf99bd9814ad0338b6dc8671e670",
            "patch": "@@ -131,7 +131,7 @@ BehaviorVelocityPlannerNode::BehaviorVelocityPlannerNode(const rclcpp::NodeOptio\n       \"~/input/external_intersection_states\", 10,\n       std::bind(&BehaviorVelocityPlannerNode::onExternalIntersectionStates, this, _1));\n   sub_external_velocity_limit_ = this->create_subscription<VelocityLimit>(\n-    \"~/input/external_velocity_limit_mps\", 1,\n+    \"~/input/external_velocity_limit_mps\", rclcpp::QoS{1}.transient_local(),\n     std::bind(&BehaviorVelocityPlannerNode::onExternalVelocityLimit, this, _1));\n   sub_external_traffic_signals_ =\n     this->create_subscription<autoware_auto_perception_msgs::msg::TrafficSignalArray>("
        }
    ],
    "autowarefoundation/autoware.universe/1098": [
        {
            "sha": "718ec34e1fb900fd976529651a785c4c88aa3a29",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a915fcbe6b7ed3b953eb4e0cc41c8b670e6f33cb/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a915fcbe6b7ed3b953eb4e0cc41c8b670e6f33cb/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=a915fcbe6b7ed3b953eb4e0cc41c8b670e6f33cb",
            "patch": "@@ -938,6 +938,9 @@ lanelet::ConstLanelets RouteHandler::getAllLeftSharedLinestringLanelets(\n   while (lanelet_at_left) {\n     linestring_shared.push_back(lanelet_at_left.get());\n     lanelet_at_left = getLeftLanelet(lanelet_at_left.get());\n+    if (!lanelet_at_left) {\n+      break;\n+    }\n     lanelet_at_left_opposite = getLeftOppositeLanelets(lanelet_at_left.get());\n   }\n \n@@ -961,6 +964,9 @@ lanelet::ConstLanelets RouteHandler::getAllRightSharedLinestringLanelets(\n   while (lanelet_at_right) {\n     linestring_shared.push_back(lanelet_at_right.get());\n     lanelet_at_right = getRightLanelet(lanelet_at_right.get());\n+    if (!lanelet_at_right) {\n+      break;\n+    }\n     lanelet_at_right_opposite = getRightOppositeLanelets(lanelet_at_right.get());\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1108": [
        {
            "sha": "125ee9675a7383eea2c11753916512ec34038ea4",
            "filename": "planning/behavior_velocity_planner/src/scene_module/virtual_traffic_light/scene.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cf95e1307cfe3860000ad5f5ef9e09ca6ce453d7/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fvirtual_traffic_light%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cf95e1307cfe3860000ad5f5ef9e09ca6ce453d7/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fvirtual_traffic_light%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fvirtual_traffic_light%2Fscene.cpp?ref=cf95e1307cfe3860000ad5f5ef9e09ca6ce453d7",
            "patch": "@@ -372,7 +372,7 @@ bool VirtualTrafficLightModule::modifyPathVelocity(\n   }\n \n   // Do nothing if vehicle is after any end line\n-  if (isAfterAnyEndLine()) {\n+  if (isAfterAnyEndLine() || state_ == State::FINALIZED) {\n     RCLCPP_DEBUG(logger_, \"after end_line\");\n     state_ = State::FINALIZED;\n     updateInfrastructureCommand();"
        }
    ],
    "autowarefoundation/autoware.universe/1132": [
        {
            "sha": "afff72edb0ed91b4e395e9e3767853685004c261",
            "filename": "system/emergency_handler/src/emergency_handler/emergency_handler_core.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 2,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/caeede3dad92116a3ad2ac270992bf3b391c47ed/system%2Femergency_handler%2Fsrc%2Femergency_handler%2Femergency_handler_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/caeede3dad92116a3ad2ac270992bf3b391c47ed/system%2Femergency_handler%2Fsrc%2Femergency_handler%2Femergency_handler_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Femergency_handler%2Fsrc%2Femergency_handler%2Femergency_handler_core.cpp?ref=caeede3dad92116a3ad2ac270992bf3b391c47ed",
            "patch": "@@ -141,10 +141,14 @@ void EmergencyHandler::publishControlCommands()\n   pub_hazard_cmd_->publish(createHazardCmdMsg());\n \n   // Publish gear\n-  if (param_.use_parking_after_stopped && isStopped()) {\n+  {\n     GearCommand msg;\n     msg.stamp = stamp;\n-    msg.command = GearCommand::PARK;\n+    if (param_.use_parking_after_stopped && isStopped()) {\n+      msg.command = GearCommand::PARK;\n+    } else {\n+      msg.command = GearCommand::DRIVE;\n+    }\n     pub_gear_cmd_->publish(msg);\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1141": [
        {
            "sha": "93ced819886a51705d03a4fb18d29ea467b60813",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/aab087625a77c4ca98543aef083caef52c41d840/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/aab087625a77c4ca98543aef083caef52c41d840/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=aab087625a77c4ca98543aef083caef52c41d840",
            "patch": "@@ -539,6 +539,8 @@ bool IntersectionModule::isTargetCollisionVehicleType(\n       autoware_auto_perception_msgs::msg::ObjectClassification::BUS ||\n     object.classification.at(0).label ==\n       autoware_auto_perception_msgs::msg::ObjectClassification::TRUCK ||\n+    object.classification.at(0).label ==\n+      autoware_auto_perception_msgs::msg::ObjectClassification::TRAILER ||\n     object.classification.at(0).label ==\n       autoware_auto_perception_msgs::msg::ObjectClassification::MOTORCYCLE ||\n     object.classification.at(0).label ==\n@@ -558,6 +560,8 @@ bool IntersectionModule::isTargetStuckVehicleType(\n       autoware_auto_perception_msgs::msg::ObjectClassification::BUS ||\n     object.classification.at(0).label ==\n       autoware_auto_perception_msgs::msg::ObjectClassification::TRUCK ||\n+    object.classification.at(0).label ==\n+      autoware_auto_perception_msgs::msg::ObjectClassification::TRAILER ||\n     object.classification.at(0).label ==\n       autoware_auto_perception_msgs::msg::ObjectClassification::MOTORCYCLE) {\n     return true;"
        }
    ],
    "autowarefoundation/autoware.universe/1143": [
        {
            "sha": "fcd9c8e3d9eb0fca6bf64180577b219e38cdb636",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 12,
            "changes": 24,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/07af7b2d04217c02e7e59f59ede2ef02368af853/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/07af7b2d04217c02e7e59f59ede2ef02368af853/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=07af7b2d04217c02e7e59f59ede2ef02368af853",
            "patch": "@@ -707,7 +707,7 @@ void AvoidanceModule::generateTotalShiftLine(\n   const AvoidPointArray & avoid_points, ShiftLineData & shift_line_data) const\n {\n   const auto & path = avoidance_data_.reference_path;\n-  const auto & arclengths = avoidance_data_.arclength_from_ego;\n+  const auto & arcs = avoidance_data_.arclength_from_ego;\n   const auto N = path.points.size();\n \n   auto & sl = shift_line_data;\n@@ -729,7 +729,7 @@ void AvoidanceModule::generateTotalShiftLine(\n     const auto & ap = avoid_points.at(j);\n     for (size_t i = 0; i < N; ++i) {\n       // calc current interpolated shift\n-      const auto i_shift = lerpShiftLengthOnArc(arclengths.at(i), ap);\n+      const auto i_shift = lerpShiftLengthOnArc(arcs.at(i), ap);\n \n       // update maximum shift for positive direction\n       if (i_shift > sl.pos_shift_line.at(i)) {\n@@ -781,7 +781,7 @@ void AvoidanceModule::generateTotalShiftLine(\n AvoidPointArray AvoidanceModule::extractShiftPointsFromLine(ShiftLineData & shift_line_data) const\n {\n   const auto & path = avoidance_data_.reference_path;\n-  const auto & arclengths = avoidance_data_.arclength_from_ego;\n+  const auto & arcs = avoidance_data_.arclength_from_ego;\n   const auto N = path.points.size();\n \n   auto & sl = shift_line_data;\n@@ -790,18 +790,18 @@ AvoidPointArray AvoidanceModule::extractShiftPointsFromLine(ShiftLineData & shif\n     if (i == 0) {\n       return sl.shift_line_grad.at(i);\n     }\n-    const double ds = arclengths.at(i) - arclengths.at(i - 1);\n+    const double ds = arcs.at(i) - arcs.at(i - 1);\n     if (ds < 1.0e-5) {\n       return sl.shift_line_grad.at(i);\n     }  // use theoretical value when ds is too small.\n     return (sl.shift_line.at(i) - sl.shift_line.at(i - 1)) / ds;\n   };\n \n   const auto getFwdGrad = [&](const size_t i) {\n-    if (i == arclengths.size() - 1) {\n+    if (i == arcs.size() - 1) {\n       return sl.shift_line_grad.at(i);\n     }\n-    const double ds = arclengths.at(i + 1) - arclengths.at(i);\n+    const double ds = arcs.at(i + 1) - arcs.at(i);\n     if (ds < 1.0e-5) {\n       return sl.shift_line_grad.at(i);\n     }  // use theoretical value when ds is too small.\n@@ -829,7 +829,7 @@ AvoidPointArray AvoidanceModule::extractShiftPointsFromLine(ShiftLineData & shif\n     // If the vehicle is already on the avoidance (checked by the first point has shift),\n     // set a start point at the first path point.\n     if (!found_first_start && std::abs(shift) > IS_ALREADY_SHIFTING_THR) {\n-      setStartData(ap, 0.0, p, i, arclengths.at(i));  // start length is overwritten later.\n+      setStartData(ap, 0.0, p, i, arcs.at(i));  // start length is overwritten later.\n       found_first_start = true;\n       DEBUG_PRINT(\"shift (= %f) is not zero at i = %lu. set start shift here.\", shift, i);\n     }\n@@ -843,14 +843,14 @@ AvoidPointArray AvoidanceModule::extractShiftPointsFromLine(ShiftLineData & shif\n     }\n \n     if (!found_first_start) {\n-      setStartData(ap, 0.0, p, i, arclengths.at(i));  // start length is overwritten later.\n+      setStartData(ap, 0.0, p, i, arcs.at(i));  // start length is overwritten later.\n       found_first_start = true;\n       DEBUG_PRINT(\"grad change detected. start at i = %lu\", i);\n     } else {\n-      setEndData(ap, shift, p, i, arclengths.at(i));\n+      setEndData(ap, shift, p, i, arcs.at(i));\n       ap.id = getOriginalShiftPointUniqueId();\n       merged_avoid_points.push_back(ap);\n-      setStartData(ap, 0.0, p, i, arclengths.at(i));  // start length is overwritten later.\n+      setStartData(ap, 0.0, p, i, arcs.at(i));  // start length is overwritten later.\n       DEBUG_PRINT(\"end and start point found at i = %lu\", i);\n     }\n   }\n@@ -1011,7 +1011,7 @@ AvoidPointArray AvoidanceModule::trimShiftPoint(\n }\n \n void AvoidanceModule::alignShiftPointsOrder(\n-  AvoidPointArray & shift_points, const bool recalc_start_length) const\n+  AvoidPointArray & shift_points, const bool recalculate_start_length) const\n {\n   if (shift_points.empty()) {\n     return;\n@@ -1025,7 +1025,7 @@ void AvoidanceModule::alignShiftPointsOrder(\n   // calc relative length\n   // NOTE: the input shift point must not have conflict range. Otherwise relative\n   // length value will be broken.\n-  if (recalc_start_length) {\n+  if (recalculate_start_length) {\n     shift_points.front().start_length = getCurrentLinearShift();\n     for (size_t i = 1; i < shift_points.size(); ++i) {\n       shift_points.at(i).start_length = shift_points.at(i - 1).length;"
        }
    ],
    "autowarefoundation/autoware.universe/1166": [
        {
            "sha": "a24479a2ac0eb86accb9ec80f5ce57da40a142f0",
            "filename": "simulator/dummy_perception_publisher/src/node.cpp",
            "status": "modified",
            "additions": 18,
            "deletions": 9,
            "changes": 27,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/92905fb2d60f8625c31f7e83c4ce739b555079c0/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/92905fb2d60f8625c31f7e83c4ce739b555079c0/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp?ref=92905fb2d60f8625c31f7e83c4ce739b555079c0",
            "patch": "@@ -133,28 +133,37 @@ void DummyPerceptionPublisherNode::timerCallback()\n   }\n \n   std::vector<size_t> selected_indices{};\n+  std::vector<ObjectInfo> obj_infos;\n   static std::uniform_real_distribution<> detection_successful_random(0.0, 1.0);\n   for (size_t i = 0; i < objects_.size(); ++i) {\n     if (detection_successful_rate_ >= detection_successful_random(random_generator_)) {\n       selected_indices.push_back(i);\n     }\n+    const auto obj_info = ObjectInfo(objects_.at(i), current_time);\n+    obj_infos.push_back(obj_info);\n   }\n \n-  if (selected_indices.empty()) {\n-    pcl::PointCloud<pcl::PointXYZ>::Ptr merged_pointcloud_ptr(new pcl::PointCloud<pcl::PointXYZ>);\n+  pcl::PointCloud<pcl::PointXYZ>::Ptr merged_pointcloud_ptr(new pcl::PointCloud<pcl::PointXYZ>);\n+  pcl::PointCloud<pcl::PointXYZ>::Ptr detected_merged_pointcloud_ptr(\n+    new pcl::PointCloud<pcl::PointXYZ>);\n+\n+  if (objects_.empty()) {\n     pcl::toROSMsg(*merged_pointcloud_ptr, output_pointcloud_msg);\n   } else {\n-    std::vector<ObjectInfo> obj_infos;\n+    pointcloud_creator_->create_pointclouds(\n+      obj_infos, tf_base_link2map, random_generator_, merged_pointcloud_ptr);\n+    pcl::toROSMsg(*merged_pointcloud_ptr, output_pointcloud_msg);\n+  }\n+  if (!selected_indices.empty()) {\n+    std::vector<ObjectInfo> detected_obj_infos;\n     for (const auto selected_idx : selected_indices) {\n-      const auto obj_info = ObjectInfo(objects_.at(selected_idx), current_time);\n-      tf2::toMsg(obj_info.tf_map2moved_object, output_moved_object_pose.pose);\n-      obj_infos.push_back(obj_info);\n+      const auto detected_obj_info = ObjectInfo(objects_.at(selected_idx), current_time);\n+      tf2::toMsg(detected_obj_info.tf_map2moved_object, output_moved_object_pose.pose);\n+      detected_obj_infos.push_back(detected_obj_info);\n     }\n \n-    pcl::PointCloud<pcl::PointXYZ>::Ptr merged_pointcloud_ptr(new pcl::PointCloud<pcl::PointXYZ>);\n     const auto pointclouds = pointcloud_creator_->create_pointclouds(\n-      obj_infos, tf_base_link2map, random_generator_, merged_pointcloud_ptr);\n-    pcl::toROSMsg(*merged_pointcloud_ptr, output_pointcloud_msg);\n+      detected_obj_infos, tf_base_link2map, random_generator_, detected_merged_pointcloud_ptr);\n \n     std::vector<size_t> delete_idxs;\n     for (size_t i = 0; i < selected_indices.size(); ++i) {"
        }
    ],
    "autowarefoundation/autoware.universe/1169": [
        {
            "sha": "5431f32acce191c9168f6c05cb29a3935660b63c",
            "filename": "system/ad_service_state_monitor/launch/ad_service_state_monitor.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a5e9969715ad73332274db69132f9b45fe8df9f1/system%2Fad_service_state_monitor%2Flaunch%2Fad_service_state_monitor.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a5e9969715ad73332274db69132f9b45fe8df9f1/system%2Fad_service_state_monitor%2Flaunch%2Fad_service_state_monitor.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fad_service_state_monitor%2Flaunch%2Fad_service_state_monitor.launch.xml?ref=a5e9969715ad73332274db69132f9b45fe8df9f1",
            "patch": "@@ -2,6 +2,7 @@\n   <!-- Input -->\n   <arg name=\"input_autoware_engage\" default=\"/api/autoware/get/engage\"/>\n   <arg name=\"input_control_mode\" default=\"/vehicle/status/control_mode\"/>\n+  <arg name=\"input_vector_map\" default=\"/map/vector_map\"/>\n   <arg name=\"input_route\" default=\"/planning/mission_planning/route\"/>\n   <arg name=\"input_odometry\" default=\"/localization/kinematic_state\"/>\n \n@@ -28,6 +29,7 @@\n   <node pkg=\"ad_service_state_monitor\" exec=\"ad_service_state_monitor\" name=\"ad_service_state_monitor\" output=\"screen\">\n     <remap from=\"input/autoware_engage\" to=\"$(var input_autoware_engage)\"/>\n     <remap from=\"input/control_mode\" to=\"$(var input_control_mode)\"/>\n+    <remap from=\"input/vector_map\" to=\"$(var input_vector_map)\"/>\n     <remap from=\"input/route\" to=\"$(var input_route)\"/>\n     <remap from=\"input/odometry\" to=\"$(var input_odometry)\"/>\n "
        }
    ],
    "autowarefoundation/autoware.universe/1172": [
        {
            "sha": "1c85eb328d727c86cc37f8b0610298d3f88ab148",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/util.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4710803f90de1c0fe1fbb31b2e457360d5ad741a/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4710803f90de1c0fe1fbb31b2e457360d5ad741a/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp?ref=4710803f90de1c0fe1fbb31b2e457360d5ad741a",
            "patch": "@@ -405,6 +405,9 @@ bool getObjectiveLanelets(\n   *objective_lanelets_result = objective_lanelets_sequences;\n   *objective_lanelets_with_margin_result = objective_lanelets_with_margin;\n \n+  // set this flag true when debugging\n+  const bool is_debug = false;\n+  if (!is_debug) return true;\n   std::stringstream ss_c, ss_y, ss_e, ss_o, ss_os;\n   for (const auto & l : conflicting_lanelets) {\n     ss_c << l.id() << \", \";\n@@ -423,10 +426,10 @@ bool getObjectiveLanelets(\n       ss_os << ll.id() << \", \";\n     }\n   }\n-  RCLCPP_DEBUG(\n+  RCLCPP_INFO(\n     logger, \"getObjectiveLanelets() conflict = %s yield = %s ego = %s\", ss_c.str().c_str(),\n     ss_y.str().c_str(), ss_e.str().c_str());\n-  RCLCPP_DEBUG(\n+  RCLCPP_INFO(\n     logger, \"getObjectiveLanelets() object = %s object_sequences = %s\", ss_o.str().c_str(),\n     ss_os.str().c_str());\n   return true;"
        }
    ],
    "autowarefoundation/autoware.universe/1175": [
        {
            "sha": "3e262928e46c93b4038f6edbb6b4a15c23c8a916",
            "filename": "simulator/simple_planning_simulator/src/simple_planning_simulator/simple_planning_simulator_core.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bf98b5d541614c6dfc8a3ae5bde310449ef40ad7/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bf98b5d541614c6dfc8a3ae5bde310449ef40ad7/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp?ref=bf98b5d541614c6dfc8a3ae5bde310449ef40ad7",
            "patch": "@@ -74,9 +74,7 @@ namespace simple_planning_simulator\n {\n \n SimplePlanningSimulator::SimplePlanningSimulator(const rclcpp::NodeOptions & options)\n-: Node(\"simple_planning_simulator\", options),\n-  tf_buffer_(get_clock()),\n-  tf_listener_(tf_buffer_, std::shared_ptr<rclcpp::Node>(this, [](auto) {}), false)\n+: Node(\"simple_planning_simulator\", options), tf_buffer_(get_clock()), tf_listener_(tf_buffer_)\n {\n   simulated_frame_id_ = declare_parameter(\"simulated_frame_id\", \"base_link\");\n   origin_frame_id_ = declare_parameter(\"origin_frame_id\", \"odom\");"
        }
    ],
    "autowarefoundation/autoware.universe/1180": [
        {
            "sha": "905b9601aa1dc206de5bb71b277c9ea6da700f9a",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1edf870f36c8368868c102649d95f2a3fe7831e9/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1edf870f36c8368868c102649d95f2a3fe7831e9/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=1edf870f36c8368868c102649d95f2a3fe7831e9",
            "patch": "@@ -185,7 +185,7 @@ bool IntersectionModule::modifyPathVelocity(\n   const bool is_stop_required = is_stuck || !has_traffic_light_ || turn_direction_ != \"straight\";\n   const double base_link2front = planner_data_->vehicle_info_.max_longitudinal_offset_m;\n \n-  setSafe(!(is_stop_required && is_entry_prohibited) || (state_machine_.getState() == State::GO));\n+  setSafe(!(is_stop_required && is_entry_prohibited));\n   setDistance(tier4_autoware_utils::calcSignedArcLength(\n     input_path.points, planner_data_->current_pose.pose.position,\n     input_path.points.at(stop_line_idx).point.pose.position));"
        }
    ],
    "autowarefoundation/autoware.universe/1183": [
        {
            "sha": "a98ce2c6bb4799abbd21e61a63bb6f33a7cc5e21",
            "filename": "planning/behavior_velocity_planner/src/scene_module/run_out/dynamic_obstacle.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/699cd450c5e02e4c9bef528621ea4553fc6a6dcc/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fdynamic_obstacle.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/699cd450c5e02e4c9bef528621ea4553fc6a6dcc/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fdynamic_obstacle.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fdynamic_obstacle.cpp?ref=699cd450c5e02e4c9bef528621ea4553fc6a6dcc",
            "patch": "@@ -61,7 +61,6 @@ pcl::PointCloud<pcl::PointXYZ> applyVoxelGridFilter(\n     p.z = 0.0;\n   }\n \n-  // use boost::makeshared instead of std beacause filter.setInputCloud requires boost shared ptr\n   pcl::VoxelGrid<pcl::PointXYZ> filter;\n   filter.setInputCloud(pcl::make_shared<pcl::PointCloud<pcl::PointXYZ>>(no_height_points));\n   filter.setLeafSize(0.05f, 0.05f, 100000.0f);\n@@ -197,6 +196,12 @@ std::vector<DynamicObstacle> DynamicObstacleCreatorForPoints::createDynamicObsta\n void DynamicObstacleCreatorForPoints::onCompareMapFilteredPointCloud(\n   const sensor_msgs::msg::PointCloud2::ConstSharedPtr msg)\n {\n+  if (msg->data.empty()) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    dynamic_obstacle_data_.compare_map_filtered_pointcloud.clear();\n+    return;\n+  }\n+\n   geometry_msgs::msg::TransformStamped transform;\n   try {\n     transform = tf_buffer_.lookupTransform("
        }
    ],
    "autowarefoundation/autoware.universe/1193": [
        {
            "sha": "c59c084120cf4ddb784402d3db0b0191224f31a6",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 2,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ca3294a4adcc89600851128805d70c894f9f7dba/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ca3294a4adcc89600851128805d70c894f9f7dba/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=ca3294a4adcc89600851128805d70c894f9f7dba",
            "patch": "@@ -1368,6 +1368,9 @@ lanelet::Polygon3d getVehiclePolygon(\n PathPointWithLaneId insertStopPoint(double length, PathWithLaneId * path)\n {\n   if (path->points.empty()) {\n+    RCLCPP_ERROR_STREAM(\n+      rclcpp::get_logger(\"behavior_path_planner\").get_child(\"utilities\"),\n+      \"failed to insert stop point. path points is empty.\");\n     return PathPointWithLaneId();\n   }\n \n@@ -1386,14 +1389,20 @@ PathPointWithLaneId insertStopPoint(double length, PathWithLaneId * path)\n       break;\n     }\n   }\n+  if (accumulated_length <= length) {\n+    RCLCPP_ERROR_STREAM(\n+      rclcpp::get_logger(\"behavior_path_planner\").get_child(\"utilities\"),\n+      \"failed to insert stop point. length is longer than path length\");\n+    return PathPointWithLaneId();\n+  }\n \n   PathPointWithLaneId stop_point;\n   stop_point.lane_ids = path->points.at(insert_idx).lane_ids;\n   stop_point.point.pose = stop_pose;\n   path->points.insert(path->points.begin() + insert_idx, stop_point);\n   for (size_t i = insert_idx; i < path->points.size(); i++) {\n-    path->points.at(insert_idx).point.longitudinal_velocity_mps = 0.0;\n-    path->points.at(insert_idx).point.lateral_velocity_mps = 0.0;\n+    path->points.at(i).point.longitudinal_velocity_mps = 0.0;\n+    path->points.at(i).point.lateral_velocity_mps = 0.0;\n   }\n   return stop_point;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/1220": [
        {
            "sha": "aa93e4d1c7e97a072a8a8542b3268f18980e6ac1",
            "filename": "planning/behavior_velocity_planner/src/scene_module/run_out/scene.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0c3c84a5134333aef6d3f76277a6facd1e433944/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0c3c84a5134333aef6d3f76277a6facd1e433944/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fscene.cpp?ref=0c3c84a5134333aef6d3f76277a6facd1e433944",
            "patch": "@@ -672,6 +672,13 @@ void RunOutModule::insertStopPoint(\n     tier4_autoware_utils::findNearestSegmentIndex(path.points, stop_point->position);\n   auto insert_idx = nearest_seg_idx + 1;\n \n+  // if stop point is ahead of the end of the path, don't insert\n+  if (\n+    insert_idx == path.points.size() - 1 &&\n+    planning_utils::isAheadOf(*stop_point, path.points.at(insert_idx).point.pose)) {\n+    return;\n+  }\n+\n   // to PathPointWithLaneId\n   autoware_auto_planning_msgs::msg::PathPointWithLaneId stop_point_with_lane_id;\n   stop_point_with_lane_id = path.points.at(nearest_seg_idx);"
        }
    ],
    "autowarefoundation/autoware.universe/1224": [
        {
            "sha": "3aaafe9ac2254071469eb75fbd7a5970fcbcac21",
            "filename": "launch/tier4_localization_launch/launch/pose_twist_fusion_filter/pose_twist_fusion_filter.launch.xml",
            "status": "modified",
            "additions": 0,
            "deletions": 2,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4c450b9e4a71c3a11c16488bf8761b261c0e3e96/launch%2Ftier4_localization_launch%2Flaunch%2Fpose_twist_fusion_filter%2Fpose_twist_fusion_filter.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4c450b9e4a71c3a11c16488bf8761b261c0e3e96/launch%2Ftier4_localization_launch%2Flaunch%2Fpose_twist_fusion_filter%2Fpose_twist_fusion_filter.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_localization_launch%2Flaunch%2Fpose_twist_fusion_filter%2Fpose_twist_fusion_filter.launch.xml?ref=4c450b9e4a71c3a11c16488bf8761b261c0e3e96",
            "patch": "@@ -16,8 +16,6 @@\n     <arg name=\"output_twist_name\" value=\"twist\"/>\n     <arg name=\"output_twist_with_covariance_name\" value=\"twist_with_covariance\"/>\n \n-    <arg name=\"twist_stddev_wz\" value=\"0.003 \"/>\n-\n     <arg name=\"proc_stddev_vx_c\" value=\"10.0\"/>\n     <arg name=\"proc_stddev_wz_c\" value=\"5.0\"/>\n   </include>"
        }
    ],
    "autowarefoundation/autoware.universe/1226": [
        {
            "sha": "3be49f4d5cbb6dec277e2214feaf00b01a90bc4f",
            "filename": "planning/obstacle_cruise_planner/src/polygon_utils.cpp",
            "status": "modified",
            "additions": 23,
            "deletions": 11,
            "changes": 34,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5cc0ddd0356a21bdf67bac3f382a1b008270622b/planning%2Fobstacle_cruise_planner%2Fsrc%2Fpolygon_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5cc0ddd0356a21bdf67bac3f382a1b008270622b/planning%2Fobstacle_cruise_planner%2Fsrc%2Fpolygon_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Fsrc%2Fpolygon_utils.cpp?ref=5cc0ddd0356a21bdf67bac3f382a1b008270622b",
            "patch": "@@ -29,15 +29,6 @@ void appendPointToPolygon(Polygon2d & polygon, const geometry_msgs::msg::Point &\n   bg::append(polygon.outer(), point);\n }\n \n-void appendPointToPolygon(Polygon2d & polygon, const geometry_msgs::msg::Point32 & geom_point)\n-{\n-  Point2d point;\n-  point.x() = geom_point.x;\n-  point.y() = geom_point.y;\n-\n-  bg::append(polygon.outer(), point);\n-}\n-\n void appendPointToPolygon(Polygon2d & polygon, const Point2d point)\n {\n   bg::append(polygon.outer(), point);\n@@ -116,6 +107,21 @@ Polygon2d createOneStepPolygon(\n \n   return hull_polygon;\n }\n+\n+geometry_msgs::msg::Polygon rotatePolygon(\n+  const geometry_msgs::msg::Polygon & polygon, const double & angle)\n+{\n+  const double cos = std::cos(angle);\n+  const double sin = std::sin(angle);\n+  geometry_msgs::msg::Polygon rotated_polygon;\n+  for (const auto & point : polygon.points) {\n+    auto rotated_point = point;\n+    rotated_point.x = cos * point.x - sin * point.y;\n+    rotated_point.y = sin * point.x + cos * point.y;\n+    rotated_polygon.points.push_back(rotated_point);\n+  }\n+  return rotated_polygon;\n+}\n }  // namespace\n \n namespace polygon_utils\n@@ -167,8 +173,14 @@ Polygon2d convertObstacleToPolygon(\n     // NOTE: push back the first point in order to close polygon\n     appendPointToPolygon(polygon, polygon.outer().front());\n   } else if (shape.type == autoware_auto_perception_msgs::msg::Shape::POLYGON) {\n-    for (const auto point : shape.footprint.points) {\n-      appendPointToPolygon(polygon, point);\n+    const double poly_yaw = tf2::getYaw(pose.orientation);\n+    const auto rotated_footprint = rotatePolygon(shape.footprint, poly_yaw);\n+    for (const auto rel_point : rotated_footprint.points) {\n+      geometry_msgs::msg::Point abs_point;\n+      abs_point.x = pose.position.x + rel_point.x;\n+      abs_point.y = pose.position.y + rel_point.y;\n+\n+      appendPointToPolygon(polygon, abs_point);\n     }\n     if (polygon.outer().size() > 0) {\n       // NOTE: push back the first point in order to close polygon"
        }
    ],
    "autowarefoundation/autoware.universe/1232": [
        {
            "sha": "79275858ee0eeb3c255f13e00bf4df869538d01a",
            "filename": "perception/radar_tracks_msgs_converter/README.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c0c804c806526fad9e6386035628f48dfdfbe3ae/perception%2Fradar_tracks_msgs_converter%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c0c804c806526fad9e6386035628f48dfdfbe3ae/perception%2Fradar_tracks_msgs_converter%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fradar_tracks_msgs_converter%2FREADME.md?ref=c0c804c806526fad9e6386035628f48dfdfbe3ae",
            "patch": "@@ -10,10 +10,10 @@ This package convert from [radar_msgs/msg/RadarTracks](https://github.com/ros-pe\n ### Input / Output\n \n - Input\n-  - `~/input/radar_objects` (radar_msgs/msg/RadarTracks.msg): Converted topic\n-  - `~/input/twist` (geometry_msgs/msg/TwistStamped.msg): Ego vehicle twist\n+  - `~/input/radar_objects` (radar_msgs/msg/RadarTracks.msg): Input radar topic\n+  - `~/input/odometry` (nav_msgs/msg/Odometry.msg): Ego vehicle odometry topic\n - Output\n-  - `~/output/radar_objects` (autoware_auto_perception_msgs/msg/TrackedObject.msg): Converted topic\n+  - `~/output/radar_objects` (autoware_auto_perception_msgs/msg/TrackedObject.msg): The topic converted to Autoware's message\n \n ### Parameters\n "
        }
    ],
    "autowarefoundation/autoware.universe/1235": [
        {
            "sha": "0dcee1f610401cfafc71800234f14956bcf029e8",
            "filename": "launch/tier4_autoware_api_launch/launch/autoware_api.launch.xml",
            "status": "modified",
            "additions": 5,
            "deletions": 3,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e81c8eb8175e2ef5c2eca14f7b81854b77fd916a/launch%2Ftier4_autoware_api_launch%2Flaunch%2Fautoware_api.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e81c8eb8175e2ef5c2eca14f7b81854b77fd916a/launch%2Ftier4_autoware_api_launch%2Flaunch%2Fautoware_api.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_autoware_api_launch%2Flaunch%2Fautoware_api.launch.xml?ref=e81c8eb8175e2ef5c2eca14f7b81854b77fd916a",
            "patch": "@@ -16,7 +16,9 @@\n \n   <!-- rosbridge -->\n   <!-- TODO: respawn will work once https://github.com/ros2/launch/pull/569 is released. I'll delete this comment when it's done. -->\n-  <include file=\"$(find-pkg-share rosbridge_server)/launch/rosbridge_websocket_launch.xml\">\n-    <arg name=\"respawn\" value=\"$(var respawn_rosbridge)\"/>\n-  </include>\n+  <group>\n+    <include file=\"$(find-pkg-share rosbridge_server)/launch/rosbridge_websocket_launch.xml\">\n+      <arg name=\"respawn\" value=\"$(var respawn_rosbridge)\"/>\n+    </include>\n+  </group>\n </launch>"
        }
    ],
    "autowarefoundation/autoware.universe/1240": [
        {
            "sha": "88cc46c2ab08c3d730b0b911915e320b6f653809",
            "filename": "launch/tier4_system_launch/launch/system.launch.xml",
            "status": "modified",
            "additions": 30,
            "deletions": 24,
            "changes": 54,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fa941ebc6edea3a973871f525ab0241c15d4b171/launch%2Ftier4_system_launch%2Flaunch%2Fsystem.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fa941ebc6edea3a973871f525ab0241c15d4b171/launch%2Ftier4_system_launch%2Flaunch%2Fsystem.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_system_launch%2Flaunch%2Fsystem.launch.xml?ref=fa941ebc6edea3a973871f525ab0241c15d4b171",
            "patch": "@@ -23,33 +23,39 @@\n     </group>\n \n     <!-- State Monitor -->\n-    <let name=\"config_file\" value=\"$(find-pkg-share ad_service_state_monitor)/config/ad_service_state_monitor.param.yaml\" if=\"$(eval &quot;'$(var run_mode)'=='online'&quot;)\"/>\n-    <let\n-      name=\"config_file\"\n-      value=\"$(find-pkg-share ad_service_state_monitor)/config/ad_service_state_monitor.planning_simulation.param.yaml\"\n-      if=\"$(eval &quot;'$(var run_mode)'=='planning_simulation'&quot;)\"\n-    />\n-    <include file=\"$(find-pkg-share ad_service_state_monitor)/launch/ad_service_state_monitor.launch.xml\">\n-      <arg name=\"config_file\" value=\"$(var config_file)\"/>\n-    </include>\n+    <group>\n+      <let name=\"config_file\" value=\"$(find-pkg-share ad_service_state_monitor)/config/ad_service_state_monitor.param.yaml\" if=\"$(eval &quot;'$(var run_mode)'=='online'&quot;)\"/>\n+      <let\n+        name=\"config_file\"\n+        value=\"$(find-pkg-share ad_service_state_monitor)/config/ad_service_state_monitor.planning_simulation.param.yaml\"\n+        if=\"$(eval &quot;'$(var run_mode)'=='planning_simulation'&quot;)\"\n+      />\n+      <include file=\"$(find-pkg-share ad_service_state_monitor)/launch/ad_service_state_monitor.launch.xml\">\n+        <arg name=\"config_file\" value=\"$(var config_file)\"/>\n+      </include>\n+    </group>\n \n     <!-- Error Monitor -->\n-    <let name=\"config_file\" value=\"$(find-pkg-share system_error_monitor)/config/system_error_monitor.param.yaml\" if=\"$(eval &quot;'$(var run_mode)'=='online'&quot;)\"/>\n-    <let\n-      name=\"config_file\"\n-      value=\"$(find-pkg-share system_error_monitor)/config/system_error_monitor.planning_simulation.param.yaml\"\n-      if=\"$(eval &quot;'$(var run_mode)'=='planning_simulation'&quot;)\"\n-    />\n-    <include file=\"$(find-pkg-share system_error_monitor)/launch/system_error_monitor.launch.xml\">\n-      <arg name=\"config_file\" value=\"$(var config_file)\"/>\n-      <arg name=\"extra_agg_config_file_sensing\" value=\"$(var sensor_launch_pkg)/config/diagnostic_aggregator/sensor_kit.param.yaml\"/>\n-      <arg name=\"extra_agg_config_file_vehicle\" value=\"$(find-pkg-share tier4_system_launch)/config/diagnostic_aggregator/vehicle.param.yaml\"/>\n-      <arg name=\"use_emergency_hold\" value=\"false\"/>\n-    </include>\n+    <group>\n+      <let name=\"config_file\" value=\"$(find-pkg-share system_error_monitor)/config/system_error_monitor.param.yaml\" if=\"$(eval &quot;'$(var run_mode)'=='online'&quot;)\"/>\n+      <let\n+        name=\"config_file\"\n+        value=\"$(find-pkg-share system_error_monitor)/config/system_error_monitor.planning_simulation.param.yaml\"\n+        if=\"$(eval &quot;'$(var run_mode)'=='planning_simulation'&quot;)\"\n+      />\n+      <include file=\"$(find-pkg-share system_error_monitor)/launch/system_error_monitor.launch.xml\">\n+        <arg name=\"config_file\" value=\"$(var config_file)\"/>\n+        <arg name=\"extra_agg_config_file_sensing\" value=\"$(var sensor_launch_pkg)/config/diagnostic_aggregator/sensor_kit.param.yaml\"/>\n+        <arg name=\"extra_agg_config_file_vehicle\" value=\"$(find-pkg-share tier4_system_launch)/config/diagnostic_aggregator/vehicle.param.yaml\"/>\n+        <arg name=\"use_emergency_hold\" value=\"false\"/>\n+      </include>\n+    </group>\n \n     <!-- Emergency Handler -->\n-    <include file=\"$(find-pkg-share emergency_handler)/launch/emergency_handler.launch.xml\">\n-      <arg name=\"config_file\" value=\"$(find-pkg-share emergency_handler)/config/emergency_handler.param.yaml\"/>\n-    </include>\n+    <group>\n+      <include file=\"$(find-pkg-share emergency_handler)/launch/emergency_handler.launch.xml\">\n+        <arg name=\"config_file\" value=\"$(find-pkg-share emergency_handler)/config/emergency_handler.param.yaml\"/>\n+      </include>\n+    </group>\n   </group>\n </launch>"
        }
    ],
    "autowarefoundation/autoware.universe/1245": [
        {
            "sha": "844801bfd9d928bc628402c6f030c8e1e7607aa0",
            "filename": "planning/behavior_velocity_planner/src/scene_module/stop_line/debug.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a90d8b0fe5805f08502b25bb5e73db83e37b3f46/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a90d8b0fe5805f08502b25bb5e73db83e37b3f46/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fdebug.cpp?ref=a90d8b0fe5805f08502b25bb5e73db83e37b3f46",
            "patch": "@@ -94,6 +94,9 @@ visualization_msgs::msg::MarkerArray StopLineModule::createVirtualWallMarkerArra\n {\n   const auto now = this->clock_->now();\n   visualization_msgs::msg::MarkerArray wall_marker;\n+  if (!debug_data_.stop_pose) {\n+    return wall_marker;\n+  }\n   const auto p_front = tier4_autoware_utils::calcOffsetPose(\n     *debug_data_.stop_pose, debug_data_.base_link2front, 0.0, 0.0);\n   if (state_ == State::APPROACH) {"
        }
    ],
    "autowarefoundation/autoware.universe/1262": [
        {
            "sha": "67add65354205f62edac6785899730962bfe29cd",
            "filename": "common/tier4_screen_capture_rviz_plugin/src/screen_capture_panel.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9fa99486fcd6661520bceb3386d91cc4f4cc321d/common%2Ftier4_screen_capture_rviz_plugin%2Fsrc%2Fscreen_capture_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9fa99486fcd6661520bceb3386d91cc4f4cc321d/common%2Ftier4_screen_capture_rviz_plugin%2Fsrc%2Fscreen_capture_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_screen_capture_rviz_plugin%2Fsrc%2Fscreen_capture_panel.cpp?ref=9fa99486fcd6661520bceb3386d91cc4f4cc321d",
            "patch": "@@ -110,7 +110,7 @@ void AutowareScreenCapturePanel::convertPNGImagesToMP4()\n   if (!capture.isOpened()) {\n     return;\n   }\n-  int fourcc = cv::VideoWriter::fourcc('m', 'p', '4', 'v');  // mp4\n+  int fourcc = cv::VideoWriter::fourcc('h', '2', '6', '4');  // mp4\n   cv::VideoWriter writer;\n   cv::Size size = cv::Size(width_, height_);\n   writer.open(\"capture/\" + root_folder_ + \".mp4\", fourcc, capture_hz_->value(), size);"
        }
    ],
    "autowarefoundation/autoware.universe/1264": [
        {
            "sha": "15b8e13dd745969ff0fae0c65f09a0817707c427",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9eebef7785b658095d8d31d83cc2385ce228e3fe/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9eebef7785b658095d8d31d83cc2385ce228e3fe/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=9eebef7785b658095d8d31d83cc2385ce228e3fe",
            "patch": "@@ -956,6 +956,14 @@ bool ObstacleAvoidancePlanner::checkReplan(\n     return true;\n   }\n \n+  if (prev_optimal_trajs_ptr_->model_predictive_trajectory.empty()) {\n+    RCLCPP_INFO(\n+      get_logger(),\n+      \"Replan with resetting optimization since previous optimized trajectory is empty.\");\n+    resetPrevOptimization();\n+    return true;\n+  }\n+\n   const double max_mpt_length =\n     traj_param_.num_sampling_points * mpt_param_.delta_arc_length_for_mpt_points;\n   if (isPathShapeChanged("
        }
    ],
    "autowarefoundation/autoware.universe/1270": [
        {
            "sha": "de81e32c2e4e099187939a841e450224a868a313",
            "filename": "planning/behavior_velocity_planner/src/scene_module/run_out/scene.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7c839884d8c02fc648621f4fdb40a1eee2783659/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7c839884d8c02fc648621f4fdb40a1eee2783659/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fscene.cpp?ref=7c839884d8c02fc648621f4fdb40a1eee2783659",
            "patch": "@@ -141,7 +141,7 @@ Polygons2d RunOutModule::createDetectionAreaPolygon(const PathWithLaneId & smoot\n     initial_vel, target_vel, initial_acc, planning_dec, jerk_acc, jerk_dec);\n \n   if (!stop_dist) {\n-    *stop_dist = 0;\n+    stop_dist = boost::make_optional<double>(0.0);\n   }\n \n   // create detection area polygon"
        }
    ],
    "autowarefoundation/autoware.universe/1277": [
        {
            "sha": "be1d7bf1157c79305841cbf491a71dee1fe6655f",
            "filename": "planning/behavior_path_planner/src/scene_module/side_shift/side_shift_module.cpp",
            "status": "modified",
            "additions": 39,
            "deletions": 8,
            "changes": 47,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/349cc49c6999f3b466021c19564d377720d45271/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/349cc49c6999f3b466021c19564d377720d45271/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp?ref=349cc49c6999f3b466021c19564d377720d45271",
            "patch": "@@ -206,15 +206,20 @@ bool SideShiftModule::addShiftPoint()\n {\n   auto shift_points = path_shifter_.getShiftPoints();\n \n-  const auto calcLongitudinal = [this](const auto & sp) {\n+  const auto calcLongitudinal_to_shift_start = [this](const auto & sp) {\n     return tier4_autoware_utils::calcSignedArcLength(\n       reference_path_->points, getEgoPose().pose.position, sp.start.position);\n   };\n+  const auto calcLongitudinal_to_shift_end = [this](const auto & sp) {\n+    return tier4_autoware_utils::calcSignedArcLength(\n+      reference_path_->points, getEgoPose().pose.position, sp.end.position);\n+  };\n \n   // remove shift points on a far position.\n-  const auto remove_iter = std::remove_if(\n-    shift_points.begin(), shift_points.end(), [this, calcLongitudinal](const ShiftPoint & sp) {\n-      const auto dist_to_start = calcLongitudinal(sp);\n+  const auto remove_far_iter = std::remove_if(\n+    shift_points.begin(), shift_points.end(),\n+    [this, calcLongitudinal_to_shift_start](const ShiftPoint & sp) {\n+      const auto dist_to_start = calcLongitudinal_to_shift_start(sp);\n       constexpr double max_remove_threshold_time = 1.0;  // [s]\n       constexpr double max_remove_threshold_dist = 2.0;  // [m]\n       const auto ego_current_speed = planner_data_->self_odometry->twist.twist.linear.x;\n@@ -223,13 +228,39 @@ bool SideShiftModule::addShiftPoint()\n       return (dist_to_start > remove_threshold);\n     });\n \n-  shift_points.erase(remove_iter, shift_points.end());\n+  shift_points.erase(remove_far_iter, shift_points.end());\n \n-  // check if the new_shift_point has conflicts with existing shift points.\n+  // check if the new_shift_points overlap with existing shift points.\n   const auto new_sp = calcShiftPoint();\n-  const auto new_sp_longitudinal = calcLongitudinal(new_sp);\n+  const auto new_sp_longitudinal_to_shift_start = calcLongitudinal_to_shift_start(new_sp);\n+  const auto new_sp_longitudinal_to_shift_end = calcLongitudinal_to_shift_end(new_sp);\n+\n+  const auto remove_overlap_iter = std::remove_if(\n+    shift_points.begin(), shift_points.end(),\n+    [this, calcLongitudinal_to_shift_start, calcLongitudinal_to_shift_end,\n+     new_sp_longitudinal_to_shift_start, new_sp_longitudinal_to_shift_end](const ShiftPoint & sp) {\n+      const auto old_sp_longitudinal_to_shift_start = calcLongitudinal_to_shift_start(sp);\n+      const auto old_sp_longitudinal_to_shift_end = calcLongitudinal_to_shift_end(sp);\n+      const bool sp_overlap_front =\n+        ((new_sp_longitudinal_to_shift_start <= old_sp_longitudinal_to_shift_start) &&\n+         (old_sp_longitudinal_to_shift_start <= new_sp_longitudinal_to_shift_end));\n+      const bool sp_overlap_back =\n+        ((new_sp_longitudinal_to_shift_start <= old_sp_longitudinal_to_shift_end) &&\n+         (old_sp_longitudinal_to_shift_end <= new_sp_longitudinal_to_shift_end));\n+      const bool sp_new_contain_old =\n+        ((new_sp_longitudinal_to_shift_start <= old_sp_longitudinal_to_shift_start) &&\n+         (old_sp_longitudinal_to_shift_end <= new_sp_longitudinal_to_shift_end));\n+      const bool sp_old_contain_new =\n+        ((old_sp_longitudinal_to_shift_start <= new_sp_longitudinal_to_shift_start) &&\n+         (new_sp_longitudinal_to_shift_end <= old_sp_longitudinal_to_shift_end));\n+      return (sp_overlap_front || sp_overlap_back || sp_new_contain_old || sp_old_contain_new);\n+    });\n+\n+  shift_points.erase(remove_overlap_iter, shift_points.end());\n+\n+  // check if the new_shift_point has conflicts with existing shift points.\n   for (const auto & sp : shift_points) {\n-    if (calcLongitudinal(sp) >= new_sp_longitudinal) {\n+    if (calcLongitudinal_to_shift_start(sp) >= new_sp_longitudinal_to_shift_start) {\n       RCLCPP_WARN(\n         getLogger(),\n         \"try to add shift point, but shift point already exists behind the proposed point. \""
        }
    ],
    "autowarefoundation/autoware.universe/1283": [
        {
            "sha": "73970896b19ddd798235f9ab9564224be01c7a4f",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 7,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/929dd80d3c406c90156ea220a8b66d47e3b69ac0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/929dd80d3c406c90156ea220a8b66d47e3b69ac0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=929dd80d3c406c90156ea220a8b66d47e3b69ac0",
            "patch": "@@ -76,8 +76,7 @@ bool IntersectionModule::modifyPathVelocity(\n   *stop_reason =\n     planning_utils::initializeStopReason(tier4_planning_msgs::msg::StopReason::INTERSECTION);\n \n-  const auto input_path = *path;\n-  debug_data_.path_raw = input_path;\n+  debug_data_.path_raw = *path;\n \n   State current_state = state_machine_.getState();\n   RCLCPP_DEBUG(logger_, \"lane_id = %ld, state = %s\", lane_id_, toString(current_state).c_str());\n@@ -142,7 +141,7 @@ bool IntersectionModule::modifyPathVelocity(\n \n   /* calc closest index */\n   int closest_idx = -1;\n-  if (!planning_utils::calcClosestIndex(input_path, current_pose.pose, closest_idx)) {\n+  if (!planning_utils::calcClosestIndex(*path, current_pose.pose, closest_idx)) {\n     RCLCPP_WARN_SKIPFIRST_THROTTLE(logger_, *clock_, 1000 /* ms */, \"calcClosestIndex fail\");\n     RCLCPP_DEBUG(logger_, \"===== plan end =====\");\n     return false;\n@@ -159,8 +158,8 @@ bool IntersectionModule::modifyPathVelocity(\n     RCLCPP_DEBUG(logger_, \"===== plan end =====\");\n     setSafe(true);\n     setDistance(tier4_autoware_utils::calcSignedArcLength(\n-      input_path.points, planner_data_->current_pose.pose.position,\n-      input_path.points.at(stop_line_idx).point.pose.position));\n+      path->points, planner_data_->current_pose.pose.position,\n+      path->points.at(stop_line_idx).point.pose.position));\n     return true;  // no plan needed.\n   }\n \n@@ -185,8 +184,8 @@ bool IntersectionModule::modifyPathVelocity(\n \n   setSafe(!is_entry_prohibited);\n   setDistance(tier4_autoware_utils::calcSignedArcLength(\n-    input_path.points, planner_data_->current_pose.pose.position,\n-    input_path.points.at(stop_line_idx).point.pose.position));\n+    path->points, planner_data_->current_pose.pose.position,\n+    path->points.at(stop_line_idx).point.pose.position));\n \n   if (!isActivated()) {\n     const double v = 0.0;"
        }
    ],
    "autowarefoundation/autoware.universe/1287": [
        {
            "sha": "7b034374cfd122be10960234e94ff57e06435779",
            "filename": "planning/behavior_velocity_planner/src/scene_module/crosswalk/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 8,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/808bdc3e9cff9fc7d28aeb69f6e953eb4f50a787/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/808bdc3e9cff9fc7d28aeb69f6e953eb4f50a787/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp?ref=808bdc3e9cff9fc7d28aeb69f6e953eb4f50a787",
            "patch": "@@ -731,16 +731,18 @@ void CrosswalkModule::clampAttentionRangeByNeighborCrosswalks(\n   boost::optional<lanelet::ConstLanelet> prev_crosswalk{boost::none};\n   boost::optional<lanelet::ConstLanelet> next_crosswalk{boost::none};\n \n-  for (size_t i = 0; i < crosswalks.size() - 1; ++i) {\n-    const auto ll_front = crosswalks.at(i);\n-    const auto ll_back = crosswalks.at(i + 1);\n+  if (!crosswalks.empty()) {\n+    for (size_t i = 0; i < crosswalks.size() - 1; ++i) {\n+      const auto ll_front = crosswalks.at(i);\n+      const auto ll_back = crosswalks.at(i + 1);\n \n-    if (ll_front.id() == module_id_ && ll_back.id() != module_id_) {\n-      next_crosswalk = ll_back;\n-    }\n+      if (ll_front.id() == module_id_ && ll_back.id() != module_id_) {\n+        next_crosswalk = ll_back;\n+      }\n \n-    if (ll_front.id() != module_id_ && ll_back.id() == module_id_) {\n-      prev_crosswalk = ll_front;\n+      if (ll_front.id() != module_id_ && ll_back.id() == module_id_) {\n+        prev_crosswalk = ll_front;\n+      }\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1289": [
        {
            "sha": "f63277e410ee6d5624b59b55efa65f521542d54f",
            "filename": "planning/behavior_velocity_planner/src/node.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0f8b536dcbe9fb89d104ab885f78de62a18e4574/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0f8b536dcbe9fb89d104ab885f78de62a18e4574/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp?ref=0f8b536dcbe9fb89d104ab885f78de62a18e4574",
            "patch": "@@ -397,6 +397,10 @@ void BehaviorVelocityPlannerNode::onTrigger(\n   const auto planner_data = planner_data_;\n   mutex_.unlock();\n \n+  if (input_path_msg->points.empty()) {\n+    return;\n+  }\n+\n   // Plan path velocity\n   const auto velocity_planned_path = planner_manager_.planPathVelocity(\n     std::make_shared<const PlannerData>(planner_data), *input_path_msg);"
        }
    ],
    "autowarefoundation/autoware.universe/1290": [
        {
            "sha": "f34ceee1178a57110b9d4f43ed5b1c794defdc50",
            "filename": "planning/behavior_velocity_planner/src/scene_module/crosswalk/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c9b8abdb623907629eb1dc27e1d1c7460d28cb97/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c9b8abdb623907629eb1dc27e1d1c7460d28cb97/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp?ref=c9b8abdb623907629eb1dc27e1d1c7460d28cb97",
            "patch": "@@ -637,7 +637,7 @@ void CrosswalkModule::insertDecelPoint(\n   const auto & ego_pos = planner_data_->current_pose.pose.position;\n   const auto & stop_point_distance =\n     calcSignedArcLength(output.points, ego_pos, getPoint(stop_point.second));\n-  setDistance(std::abs(stop_point_distance));\n+  setDistance(stop_point_distance);\n \n   debug_data_.first_stop_pose = stop_point.second.point.pose;\n   debug_data_.stop_poses.push_back(stop_point.second.point.pose);"
        }
    ],
    "autowarefoundation/autoware.universe/1291": [
        {
            "sha": "4b2748df62b074ced0be989eb10d9266f1bcfda7",
            "filename": "planning/obstacle_cruise_planner/src/node.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 2,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3625370e85e14a1c534ab132f7fd43616192df4f/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3625370e85e14a1c534ab132f7fd43616192df4f/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp?ref=3625370e85e14a1c534ab132f7fd43616192df4f",
            "patch": "@@ -101,10 +101,10 @@ Trajectory decimateTrajectory(const Trajectory & input, const double step_length\n   double trajectory_length_sum = 0.0;\n   double next_length = 0.0;\n \n+  constexpr double epsilon = 1e-3;\n   for (int i = 0; i < static_cast<int>(input.points.size()) - 1; ++i) {\n     const auto & p_front = input.points.at(i);\n     const auto & p_back = input.points.at(i + 1);\n-    constexpr double epsilon = 1e-3;\n \n     if (next_length <= trajectory_length_sum + epsilon) {\n       const auto p_interpolate =\n@@ -117,7 +117,12 @@ Trajectory decimateTrajectory(const Trajectory & input, const double step_length\n     trajectory_length_sum += tier4_autoware_utils::calcDistance2d(p_front, p_back);\n   }\n \n-  output.points.push_back(input.points.back());\n+  // avoid \"Same points are given\"\n+  if (\n+    !input.points.empty() && !output.points.empty() &&\n+    epsilon < tier4_autoware_utils::calcDistance2d(input.points.back(), output.points.back())) {\n+    output.points.push_back(input.points.back());\n+  }\n \n   return output;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/1300": [
        {
            "sha": "52dad680ecc63eaecc22ab0eb7ca557c43cc9606",
            "filename": "planning/behavior_velocity_planner/src/node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/27275d81bdfbf50f26b48c78050d7433f6e1e678/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/27275d81bdfbf50f26b48c78050d7433f6e1e678/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp?ref=27275d81bdfbf50f26b48c78050d7433f6e1e678",
            "patch": "@@ -302,6 +302,9 @@ void BehaviorVelocityPlannerNode::onVehicleVelocity(\n       break;\n     }\n \n+    if (planner_data_.velocity_buffer.empty()) {\n+      break;\n+    }\n     // Remove old data\n     planner_data_.velocity_buffer.pop_back();\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/1306": [
        {
            "sha": "ad048abd4196213013facf35c744efe736615e37",
            "filename": "perception/image_projection_based_fusion/CMakeLists.txt",
            "status": "modified",
            "additions": 39,
            "deletions": 32,
            "changes": 71,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7e0e07b0e24ef865c0c46d24fa990e48df218f4b/perception%2Fimage_projection_based_fusion%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7e0e07b0e24ef865c0c46d24fa990e48df218f4b/perception%2Fimage_projection_based_fusion%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2FCMakeLists.txt?ref=7e0e07b0e24ef865c0c46d24fa990e48df218f4b",
            "patch": "@@ -7,6 +7,31 @@ find_package(OpenCV REQUIRED)\n find_package(Eigen3 REQUIRED)\n autoware_package()\n \n+# Build non-CUDA dependent nodes\n+ament_auto_add_library(${PROJECT_NAME} SHARED\n+  src/fusion_node.cpp\n+  src/debugger.cpp\n+  src/utils/geometry.cpp\n+  src/utils/utils.cpp\n+  src/roi_cluster_fusion/node.cpp\n+  src/roi_detected_object_fusion/node.cpp\n+)\n+\n+target_link_libraries(${PROJECT_NAME}\n+  ${OpenCV_LIBRARIES}\n+  ${EIGEN3_LIBRARIES}\n+)\n+\n+rclcpp_components_register_node(${PROJECT_NAME}\n+  PLUGIN \"image_projection_based_fusion::RoiDetectedObjectFusionNode\"\n+  EXECUTABLE roi_detected_object_fusion_node\n+)\n+\n+rclcpp_components_register_node(${PROJECT_NAME}\n+  PLUGIN \"image_projection_based_fusion::RoiClusterFusionNode\"\n+  EXECUTABLE roi_cluster_fusion_node\n+)\n+\n set(CUDA_VERBOSE OFF)\n \n # set flags for CUDA availability\n@@ -69,12 +94,15 @@ else()\n   set(CUDNN_AVAIL OFF)\n endif()\n \n-message(STATUS \"start to download\")\n+# Create folder to store trained models.\n+# NOTE: This must be created regardless of CUDA_AVAIL to be specified in ament_auto_package()\n+set(DATA_PATH ${CMAKE_CURRENT_SOURCE_DIR}/data)\n+execute_process(COMMAND mkdir -p ${DATA_PATH})\n+\n if(TRT_AVAIL AND CUDA_AVAIL AND CUDNN_AVAIL)\n-# Download trained models\n-  set(DATA_PATH ${CMAKE_CURRENT_SOURCE_DIR}/data)\n-  execute_process(COMMAND mkdir -p ${DATA_PATH})\n+  # Download trained models\n \n+  message(STATUS \"start to download\")\n   function(download FILE_NAME FILE_HASH)\n     message(STATUS \"Checking and downloading ${FILE_NAME}\")\n     set(FILE_PATH ${DATA_PATH}/${FILE_NAME})\n@@ -122,13 +150,7 @@ if(TRT_AVAIL AND CUDA_AVAIL AND CUDNN_AVAIL)\n     ${PCL_INCLUDE_DIRS}\n   )\n \n-  ament_auto_add_library(${PROJECT_NAME} SHARED\n-    src/fusion_node.cpp\n-    src/debugger.cpp\n-    src/utils/geometry.cpp\n-    src/utils/utils.cpp\n-    src/roi_cluster_fusion/node.cpp\n-    src/roi_detected_object_fusion/node.cpp\n+  ament_auto_add_library(pointpainting_lib SHARED\n     src/pointpainting_fusion/node.cpp\n     src/pointpainting_fusion/pointpainting_trt.cpp\n     src/pointpainting_fusion/voxel_generator.cpp\n@@ -138,7 +160,7 @@ if(TRT_AVAIL AND CUDA_AVAIL AND CUDNN_AVAIL)\n     src/pointpainting_fusion/preprocess_kernel.cu\n   )\n \n-  target_link_libraries(${PROJECT_NAME}\n+  target_link_libraries(pointpainting_lib\n     ${OpenCV_LIBRARIES}\n     ${EIGEN3_LIBRARIES}\n     ${PCL_LIBRARIES}\n@@ -150,30 +172,15 @@ if(TRT_AVAIL AND CUDA_AVAIL AND CUDNN_AVAIL)\n     pointpainting_cuda_lib\n   )\n \n-  rclcpp_components_register_node(${PROJECT_NAME}\n-    PLUGIN \"image_projection_based_fusion::RoiClusterFusionNode\"\n-    EXECUTABLE roi_cluster_fusion_node\n+  rclcpp_components_register_node(pointpainting_lib\n+    PLUGIN \"image_projection_based_fusion::PointpaintingFusionNode\"\n+    EXECUTABLE pointpainting_fusion_node\n   )\n-else()\n-  find_package(ament_cmake_auto REQUIRED)\n-  ament_auto_find_build_dependencies()\n \n-  ament_auto_package(\n-    INSTALL_TO_SHARE\n-      launch\n-  )\n+else()\n+  message(\"Skipping build of some nodes due to missing dependencies\")\n endif()\n \n-rclcpp_components_register_node(${PROJECT_NAME}\n-  PLUGIN \"image_projection_based_fusion::RoiDetectedObjectFusionNode\"\n-  EXECUTABLE roi_detected_object_fusion_node\n-)\n-\n-rclcpp_components_register_node(${PROJECT_NAME}\n-  PLUGIN \"image_projection_based_fusion::PointpaintingFusionNode\"\n-  EXECUTABLE pointpainting_fusion_node\n-)\n-\n ament_auto_package(INSTALL_TO_SHARE\n     launch\n     config"
        }
    ],
    "autowarefoundation/autoware.universe/1309": [
        {
            "sha": "c1a3d46e0679535316818b7303c73033efced342",
            "filename": "planning/obstacle_cruise_planner/src/node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5272e600806e9600aba75276728976fc7a205ae2/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5272e600806e9600aba75276728976fc7a205ae2/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp?ref=5272e600806e9600aba75276728976fc7a205ae2",
            "patch": "@@ -803,12 +803,12 @@ void ObstacleCruisePlannerNode::updateHasStopped(std::vector<TargetObstacle> & t\n         });\n       const bool has_already_stopped = (itr != prev_target_obstacles_.end()) && itr->has_stopped;\n       if (has_already_stopped) {\n-        if (std::abs(obstacle.velocity) < obstacle_velocity_threshold_from_stop_to_cruise_) {\n+        if (obstacle.velocity < obstacle_velocity_threshold_from_stop_to_cruise_) {\n           obstacle.has_stopped = true;\n           continue;\n         }\n       } else {\n-        if (std::abs(obstacle.velocity) < obstacle_velocity_threshold_from_cruise_to_stop_) {\n+        if (obstacle.velocity < obstacle_velocity_threshold_from_cruise_to_stop_) {\n           obstacle.has_stopped = true;\n           continue;\n         }"
        }
    ],
    "autowarefoundation/autoware.universe/1315": [
        {
            "sha": "b52f1f6b0c0c64470d7e0e638d203922275f636a",
            "filename": "planning/mission_planner/src/mission_planner_lanelet2/mission_planner_lanelet2.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2c2230b901d028cad33c9d4b1c964663f2cbebc9/planning%2Fmission_planner%2Fsrc%2Fmission_planner_lanelet2%2Fmission_planner_lanelet2.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2c2230b901d028cad33c9d4b1c964663f2cbebc9/planning%2Fmission_planner%2Fsrc%2Fmission_planner_lanelet2%2Fmission_planner_lanelet2.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmission_planner%2Fsrc%2Fmission_planner_lanelet2%2Fmission_planner_lanelet2.cpp?ref=2c2230b901d028cad33c9d4b1c964663f2cbebc9",
            "patch": "@@ -263,14 +263,14 @@ bool MissionPlannerLanelet2::isGoalValid() const\n \n autoware_auto_planning_msgs::msg::HADMapRoute MissionPlannerLanelet2::planRoute()\n {\n-  std::stringstream ss;\n+  std::stringstream log_ss;\n   for (const auto & checkpoint : checkpoints_) {\n-    ss << \"x: \" << checkpoint.pose.position.x << \" \"\n-       << \"y: \" << checkpoint.pose.position.y << std::endl;\n+    log_ss << \"x: \" << checkpoint.pose.position.x << \" \"\n+           << \"y: \" << checkpoint.pose.position.y << std::endl;\n   }\n   RCLCPP_INFO_STREAM(\n     get_logger(), \"start planning route with checkpoints: \" << std::endl\n-                                                            << ss.str());\n+                                                            << log_ss.str());\n \n   autoware_auto_planning_msgs::msg::HADMapRoute route_msg;\n   RouteSections route_sections;"
        }
    ],
    "autowarefoundation/autoware.universe/1318": [
        {
            "sha": "a110c106bb51ea6ee2b7b310d04a38b87112c075",
            "filename": "map/lanelet2_extension/lib/query.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/735c860b17765343012916b0647a0908366b1ea9/map%2Flanelet2_extension%2Flib%2Fquery.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/735c860b17765343012916b0647a0908366b1ea9/map%2Flanelet2_extension%2Flib%2Fquery.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Flanelet2_extension%2Flib%2Fquery.cpp?ref=735c860b17765343012916b0647a0908366b1ea9",
            "patch": "@@ -773,7 +773,7 @@ bool query::getCurrentLanelets(\n \n   lanelet::BasicPoint2d search_point(search_pose.position.x, search_pose.position.y);\n   for (const auto & llt : lanelets) {\n-    if (!lanelet::geometry::inside(llt, search_point)) {\n+    if (lanelet::geometry::inside(llt, search_point)) {\n       current_lanelets_ptr->push_back(llt);\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/1320": [
        {
            "sha": "bc6adde5fc9e6bad716d925f6a912db0bdc81c09",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fb0ff024ac5dd0ec0f9689e7ced5b5462ee5eea2/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fb0ff024ac5dd0ec0f9689e7ced5b5462ee5eea2/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=fb0ff024ac5dd0ec0f9689e7ced5b5462ee5eea2",
            "patch": "@@ -1135,12 +1135,14 @@ void ObstacleAvoidancePlanner::calcVelocity(\n         path_points, traj_points.at(i).pose.position);\n     }();\n \n+    // add this line not to exceed max index size\n+    const size_t max_idx = std::min(nearest_seg_idx + 1, path_points.size() - 1);\n     // NOTE: std::max, not std::min, is used here since traj_points' sampling width may be longer\n     // than path_points' sampling width. A zero velocity point is guaranteed to be inserted in an\n     // output trajectory in the alignVelocity function\n     traj_points.at(i).longitudinal_velocity_mps = std::max(\n       path_points.at(nearest_seg_idx).longitudinal_velocity_mps,\n-      path_points.at(nearest_seg_idx + 1).longitudinal_velocity_mps);\n+      path_points.at(max_idx).longitudinal_velocity_mps);\n   }\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1327": [
        {
            "sha": "993565c7c90a6e3842df7be3790779cb8545511e",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fc15e2e614d60861a6a68837bfd190e4fe2b480b/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fc15e2e614d60861a6a68837bfd190e4fe2b480b/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=fc15e2e614d60861a6a68837bfd190e4fe2b480b",
            "patch": "@@ -1688,7 +1688,7 @@ bool checkLaneIsInIntersection(\n   const RouteHandler & route_handler, const PathWithLaneId & reference_path,\n   const lanelet::ConstLanelets & lanelet_sequence, double & additional_length_to_add)\n {\n-  if (lanelet_sequence.size() < 2) {\n+  if (lanelet_sequence.size() < 2 || reference_path.points.empty()) {\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1332": [
        {
            "sha": "8c391df154bd81998409ebda87d2ded72d377faf",
            "filename": "planning/obstacle_cruise_planner/include/obstacle_cruise_planner/utils.hpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c33463078fa033653859c40a92f463881707a787/planning%2Fobstacle_cruise_planner%2Finclude%2Fobstacle_cruise_planner%2Futils.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c33463078fa033653859c40a92f463881707a787/planning%2Fobstacle_cruise_planner%2Finclude%2Fobstacle_cruise_planner%2Futils.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Finclude%2Fobstacle_cruise_planner%2Futils.hpp?ref=c33463078fa033653859c40a92f463881707a787",
            "patch": "@@ -96,8 +96,8 @@ size_t getIndexWithLongitudinalOffset(\n         tier4_autoware_utils::calcDistance2d(points.at(i), points.at(i + 1));\n       sum_length += segment_length;\n       if (sum_length >= longitudinal_offset) {\n-        const double front_length = segment_length;\n         const double back_length = sum_length - longitudinal_offset;\n+        const double front_length = segment_length - back_length;\n         if (front_length < back_length) {\n           return i;\n         } else {\n@@ -110,15 +110,15 @@ size_t getIndexWithLongitudinalOffset(\n \n   for (size_t i = start_idx.get(); i > 0; --i) {\n     const double segment_length =\n-      tier4_autoware_utils::calcDistance2d(points.at(i), points.at(i + 1));\n+      tier4_autoware_utils::calcDistance2d(points.at(i - 1), points.at(i));\n     sum_length += segment_length;\n     if (sum_length >= -longitudinal_offset) {\n-      const double front_length = segment_length;\n       const double back_length = sum_length + longitudinal_offset;\n+      const double front_length = segment_length - back_length;\n       if (front_length < back_length) {\n         return i;\n       } else {\n-        return i + 1;\n+        return i - 1;\n       }\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/1338": [
        {
            "sha": "7051cf31bc6a92f15992d4860abea4adc3be6eb4",
            "filename": "planning/motion_velocity_smoother/scripts/closest_velocity_checker.py",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2ae0d16ccf4c62c16ed58b0c1792911d9755867e/planning%2Fmotion_velocity_smoother%2Fscripts%2Fclosest_velocity_checker.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2ae0d16ccf4c62c16ed58b0c1792911d9755867e/planning%2Fmotion_velocity_smoother%2Fscripts%2Fclosest_velocity_checker.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fscripts%2Fclosest_velocity_checker.py?ref=2ae0d16ccf4c62c16ed58b0c1792911d9755867e",
            "patch": "@@ -69,6 +69,8 @@ def __init__(self):\n \n         # planning path and trajectories\n         profile = rclpy.qos.QoSProfile(depth=1)\n+        transien_local = rclpy.qos.QoSDurabilityPolicy.RMW_QOS_POLICY_DURABILITY_TRANSIENT_LOCAL\n+        transient_local_profile = rclpy.qos.QoSProfile(depth=1, durability=transien_local)\n         lane_drv = \"/planning/scenario_planning/lane_driving\"\n         scenario = \"/planning/scenario_planning\"\n         self.sub0 = self.create_subscription(\n@@ -123,7 +125,7 @@ def __init__(self):\n             VelocityLimit,\n             \"/planning/scenario_planning/current_max_velocity\",\n             self.CallBackExternalVelLim,\n-            profile,\n+            transient_local_profile,\n         )\n \n         # self twist"
        }
    ],
    "autowarefoundation/autoware.universe/1343": [
        {
            "sha": "a1b91bc85bc2309ef6d641e9e49c9b93a184f95f",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d8a7661dec4941ec66ae4752f16f3de22ea4cbff/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d8a7661dec4941ec66ae4752f16f3de22ea4cbff/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=d8a7661dec4941ec66ae4752f16f3de22ea4cbff",
            "patch": "@@ -520,8 +520,6 @@ ObstacleAvoidancePlanner::ObstacleAvoidancePlanner(const rclcpp::NodeOptions & n\n   // TODO(murooka) tune this param when avoiding with obstacle_avoidance_planner\n   traj_param_.center_line_width = vehicle_param_.width;\n \n-  objects_ptr_ = std::make_unique<autoware_auto_perception_msgs::msg::PredictedObjects>();\n-\n   // set parameter callback\n   set_param_res_ = this->add_on_set_parameters_callback(\n     std::bind(&ObstacleAvoidancePlanner::paramCallback, this, std::placeholders::_1));\n@@ -855,7 +853,9 @@ void ObstacleAvoidancePlanner::pathCallback(\n {\n   stop_watch_.tic(__func__);\n \n-  if (path_ptr->points.empty() || path_ptr->drivable_area.data.empty() || !current_twist_ptr_) {\n+  if (\n+    path_ptr->points.empty() || path_ptr->drivable_area.data.empty() || !current_twist_ptr_ ||\n+    !objects_ptr_) {\n     return;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1345": [
        {
            "sha": "d3aff939688813037bccf7d10bd1396bdcd6f02f",
            "filename": "perception/radar_fusion_to_detected_object/README.md",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/05481a84a567903094122fe5fb017e88fe675568/perception%2Fradar_fusion_to_detected_object%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/05481a84a567903094122fe5fb017e88fe675568/perception%2Fradar_fusion_to_detected_object%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fradar_fusion_to_detected_object%2FREADME.md?ref=05481a84a567903094122fe5fb017e88fe675568",
            "patch": "@@ -21,7 +21,7 @@ The document of core algorithm is [here](docs/algorithm.md)\n \n ### Weight parameters for velocity estimation\n \n-To tune these weight parameters, please see [docs/algorithm.md](document) in detail.\n+To tune these weight parameters, please see [document](docs/algorithm.md) in detail.\n \n | Name                                 | Type   | Description                                                                                                                                                                             | Default value |\n | :----------------------------------- | :----- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------ |\n@@ -34,10 +34,10 @@ To tune these weight parameters, please see [docs/algorithm.md](document) in det\n \n ### Parameters for fixed object information\n \n-| Name                     | Type  | Description                                                                                                                                             | Default value |\n-| :----------------------- | :---- | :------------------------------------------------------------------------------------------------------------------------------------------------------ | :------------ |\n-| convert_doppler_to_twist | bool  | Convert doppler velocity to twist using the yaw information of a detected object.                                                                       | false         |\n-| threshold_probability    | float | If the probability of an output object is lower than this parameter, and the output object doesn not have radar points/objects, then delete the object. | 0.4           |\n+| Name                     | Type  | Description                                                                                                                                            | Default value |\n+| :----------------------- | :---- | :----------------------------------------------------------------------------------------------------------------------------------------------------- | :------------ |\n+| convert_doppler_to_twist | bool  | Convert doppler velocity to twist using the yaw information of a detected object.                                                                      | false         |\n+| threshold_probability    | float | If the probability of an output object is lower than this parameter, and the output object does not have radar points/objects, then delete the object. | 0.4           |\n \n ## radar_object_fusion_to_detected_object\n "
        }
    ],
    "autowarefoundation/autoware.universe/1347": [
        {
            "sha": "4a4456ccac55368bf4d47ade246861a5b3427e56",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/60a9bc0188a777c5d4f620a020d6bffe06d9b5f2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/60a9bc0188a777c5d4f620a020d6bffe06d9b5f2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=60a9bc0188a777c5d4f620a020d6bffe06d9b5f2",
            "patch": "@@ -475,8 +475,6 @@ AvoidPointArray AvoidanceModule::calcRawShiftPointsFromObjects(\n   const auto & lat_collision_margin = parameters_.lateral_collision_margin;\n   const auto & vehicle_width = planner_data_->parameters.vehicle_width;\n   const auto & road_shoulder_safety_margin = parameters_.road_shoulder_safety_margin;\n-  const auto max_allowable_lateral_distance = lat_collision_safety_buffer + lat_collision_margin +\n-                                              vehicle_width - road_shoulder_safety_margin;\n \n   const auto avoid_margin =\n     lat_collision_safety_buffer + lat_collision_margin + 0.5 * vehicle_width;\n@@ -493,13 +491,16 @@ AvoidPointArray AvoidanceModule::calcRawShiftPointsFromObjects(\n         avoidance_debug_msg_array.push_back(avoidance_debug_msg);\n       };\n \n+    const auto max_allowable_lateral_distance =\n+      o.to_road_shoulder_distance - road_shoulder_safety_margin - 0.5 * vehicle_width;\n+\n     avoidance_debug_msg.object_id = getUuidStr(o);\n     avoidance_debug_msg.longitudinal_distance = o.longitudinal;\n     avoidance_debug_msg.lateral_distance_from_centerline = o.lateral;\n     avoidance_debug_msg.to_furthest_linestring_distance = o.to_road_shoulder_distance;\n     avoidance_debug_msg.max_shift_length = max_allowable_lateral_distance;\n \n-    if (!(o.to_road_shoulder_distance > max_allowable_lateral_distance)) {\n+    if (max_allowable_lateral_distance <= avoid_margin) {\n       avoidance_debug_array_false_and_push_back(AvoidanceDebugFactor::INSUFFICIENT_LATERAL_MARGIN);\n       continue;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/1348": [
        {
            "sha": "87a4d276512c096d311a204572472e17bddc7e27",
            "filename": "perception/map_based_prediction/src/map_based_prediction_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4aceef35374bae805fe8dadda1a137a85e7bea30/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4aceef35374bae805fe8dadda1a137a85e7bea30/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp?ref=4aceef35374bae805fe8dadda1a137a85e7bea30",
            "patch": "@@ -814,7 +814,7 @@ std::vector<PredictedRefPath> MapBasedPredictionNode::getPredictedReferencePath(\n   const double object_detected_time)\n {\n   const double delta_horizon = 1.0;\n-  const double obj_vel = object.kinematics.twist_with_covariance.twist.linear.x;\n+  const double obj_vel = std::fabs(object.kinematics.twist_with_covariance.twist.linear.x);\n \n   std::vector<PredictedRefPath> all_ref_paths;\n   for (const auto & current_lanelet_data : current_lanelets_data) {"
        }
    ],
    "autowarefoundation/autoware.universe/1353": [
        {
            "sha": "c760abdbfae5f1194f4905b345106989cb34872a",
            "filename": "perception/map_based_prediction/src/map_based_prediction_node.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 6,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7831a8353bc55ea08039fa32a76c21922806aafe/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7831a8353bc55ea08039fa32a76c21922806aafe/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp?ref=7831a8353bc55ea08039fa32a76c21922806aafe",
            "patch": "@@ -522,7 +522,7 @@ PredictedObject MapBasedPredictionNode::getPredictedObjectAsCrosswalkUser(\n     const auto entry_point = getCrosswalkEntryPoint(crossing_crosswalk.get());\n \n     if (hasPotentialToReach(\n-          object, entry_point.first, prediction_time_horizon_,\n+          object, entry_point.first, std::numeric_limits<double>::max(),\n           min_velocity_for_map_based_prediction_)) {\n       PredictedPath predicted_path =\n         path_generator_->generatePathToTargetPoint(object, entry_point.first);\n@@ -531,7 +531,7 @@ PredictedObject MapBasedPredictionNode::getPredictedObjectAsCrosswalkUser(\n     }\n \n     if (hasPotentialToReach(\n-          object, entry_point.second, prediction_time_horizon_,\n+          object, entry_point.second, std::numeric_limits<double>::max(),\n           min_velocity_for_map_based_prediction_)) {\n       PredictedPath predicted_path =\n         path_generator_->generatePathToTargetPoint(object, entry_point.second);\n@@ -540,11 +540,16 @@ PredictedObject MapBasedPredictionNode::getPredictedObjectAsCrosswalkUser(\n     }\n \n   } else if (withinRoadLanelet(object, lanelet_map_ptr_)) {\n-    for (const auto & crosswalk : crosswalks_) {\n-      const auto entry_point = getCrosswalkEntryPoint(crosswalk);\n+    lanelet::ConstLanelet closest_crosswalk{};\n+    const auto & obj_pose = object.kinematics.pose_with_covariance.pose;\n+    const auto found_closest_crosswalk =\n+      lanelet::utils::query::getClosestLanelet(crosswalks_, obj_pose, &closest_crosswalk);\n+\n+    if (found_closest_crosswalk) {\n+      const auto entry_point = getCrosswalkEntryPoint(closest_crosswalk);\n \n       if (hasPotentialToReach(\n-            object, entry_point.first, prediction_time_horizon_,\n+            object, entry_point.first, prediction_time_horizon_ * 2.0,\n             min_velocity_for_map_based_prediction_)) {\n         PredictedPath predicted_path =\n           path_generator_->generatePathToTargetPoint(object, entry_point.first);\n@@ -553,7 +558,7 @@ PredictedObject MapBasedPredictionNode::getPredictedObjectAsCrosswalkUser(\n       }\n \n       if (hasPotentialToReach(\n-            object, entry_point.second, prediction_time_horizon_,\n+            object, entry_point.second, prediction_time_horizon_ * 2.0,\n             min_velocity_for_map_based_prediction_)) {\n         PredictedPath predicted_path =\n           path_generator_->generatePathToTargetPoint(object, entry_point.second);"
        }
    ],
    "autowarefoundation/autoware.universe/1354": [
        {
            "sha": "aff97be9e2fbc68f43722052ae1c45837133394b",
            "filename": "localization/ndt_scan_matcher/src/ndt_scan_matcher_core.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a439f55feb02af45e42418355a601a13beaf8c57/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a439f55feb02af45e42418355a601a13beaf8c57/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp?ref=a439f55feb02af45e42418355a601a13beaf8c57",
            "patch": "@@ -763,6 +763,7 @@ geometry_msgs::msg::PoseWithCovarianceStamped NDTScanMatcher::alignUsingMonteCar\n     [](const Particle & lhs, const Particle & rhs) { return lhs.score < rhs.score; });\n \n   geometry_msgs::msg::PoseWithCovarianceStamped result_pose_with_cov_msg;\n+  result_pose_with_cov_msg.header.stamp = initial_pose_with_cov.header.stamp;\n   result_pose_with_cov_msg.header.frame_id = map_frame_;\n   result_pose_with_cov_msg.pose.pose = best_particle_ptr->result_pose;\n   // ndt_pose_with_covariance_pub_->publish(result_pose_with_cov_msg);"
        }
    ],
    "autowarefoundation/autoware.universe/1355": [
        {
            "sha": "8661c6964fec71aa64daf84331eccfdcb715b04e",
            "filename": "planning/behavior_velocity_planner/src/scene_module/crosswalk/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/33bd2da09ca98c7c03d273b7b5ba6c4b2a232aca/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/33bd2da09ca98c7c03d273b7b5ba6c4b2a232aca/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp?ref=33bd2da09ca98c7c03d273b7b5ba6c4b2a232aca",
            "patch": "@@ -638,7 +638,12 @@ void CrosswalkModule::insertDecelPoint(\n   setDistance(stop_point_distance);\n \n   debug_data_.first_stop_pose = stop_point.second.point.pose;\n-  debug_data_.stop_poses.push_back(stop_point.second.point.pose);\n+\n+  if (std::abs(target_velocity) < 1e-3) {\n+    debug_data_.stop_poses.push_back(stop_point.second.point.pose);\n+  } else {\n+    debug_data_.slow_poses.push_back(stop_point.second.point.pose);\n+  }\n }\n \n float CrosswalkModule::calcTargetVelocity("
        }
    ],
    "autowarefoundation/autoware.universe/1356": [
        {
            "sha": "d0ae2ce6e530aef7302a53c0ef38cd114a32ba3c",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fda5a14a01d940f968074ebaa156064c8db8346a/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fda5a14a01d940f968074ebaa156064c8db8346a/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=fda5a14a01d940f968074ebaa156064c8db8346a",
            "patch": "@@ -272,7 +272,6 @@ bool IntersectionModule::checkCollision(\n     const auto object_direction = getObjectPoseWithVelocityDirection(object.kinematics);\n     if (checkAngleForTargetLanelets(object_direction, detection_area_lanelet_ids)) {\n       target_objects.objects.push_back(object);\n-      break;\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1361": [
        {
            "sha": "f0f7eed251887fb89679534aa54fd18254250a1c",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 20,
            "deletions": 3,
            "changes": 23,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f8ad3aae33984948f0a5ca4c8c64ad52c1550afc/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f8ad3aae33984948f0a5ca4c8c64ad52c1550afc/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=f8ad3aae33984948f0a5ca4c8c64ad52c1550afc",
            "patch": "@@ -2096,9 +2096,17 @@ BehaviorModuleOutput AvoidanceModule::plan()\n     debug_data_.new_shift_points = *new_shift_points;\n     DEBUG_PRINT(\"new_shift_points size = %lu\", new_shift_points->size());\n     printShiftPoints(*new_shift_points, \"new_shift_points\");\n-    if (new_shift_points->back().getRelativeLength() > 0.0) {\n+    int i = new_shift_points->size() - 1;\n+    for (; i > 0; i--) {\n+      if (fabs(new_shift_points->at(i).getRelativeLength()) < 0.01) {\n+        continue;\n+      } else {\n+        break;\n+      }\n+    }\n+    if (new_shift_points->at(i).getRelativeLength() > 0.0) {\n       removePreviousRTCStatusRight();\n-    } else if (new_shift_points->back().getRelativeLength() < 0.0) {\n+    } else if (new_shift_points->at(i).getRelativeLength() < 0.0) {\n       removePreviousRTCStatusLeft();\n     } else {\n       RCLCPP_WARN_STREAM(getLogger(), \"Direction is UNKNOWN\");\n@@ -2165,7 +2173,16 @@ CandidateOutput AvoidanceModule::planCandidate() const\n \n   if (new_shift_points) {  // clip from shift start index for visualize\n     clipByMinStartIdx(*new_shift_points, shifted_path.path);\n-    output.lateral_shift = new_shift_points->back().getRelativeLength();\n+\n+    int i = new_shift_points->size() - 1;\n+    for (; i > 0; i--) {\n+      if (fabs(new_shift_points->at(i).getRelativeLength()) < 0.01) {\n+        continue;\n+      } else {\n+        break;\n+      }\n+    }\n+    output.lateral_shift = new_shift_points->at(i).getRelativeLength();\n     output.distance_to_path_change = new_shift_points->front().start_longitudinal;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1370": [
        {
            "sha": "01f479e0d9becdc98c6b4ef1eac048dbb47e4af5",
            "filename": "planning/behavior_velocity_planner/src/scene_module/crosswalk/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/af8aeedbba79fded960374de74d5d76342576856/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/af8aeedbba79fded960374de74d5d76342576856/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp?ref=af8aeedbba79fded960374de74d5d76342576856",
            "patch": "@@ -229,11 +229,13 @@ PathPointWithLaneId getBackwardPointFromBasePoint(\n   PathPointWithLaneId output;\n   const double dx = p_to.point.pose.position.x - p_from.point.pose.position.x;\n   const double dy = p_to.point.pose.position.y - p_from.point.pose.position.y;\n-  const double norm = std::hypot(dx, dy);\n+  const double dz = p_to.point.pose.position.z - p_from.point.pose.position.z;\n+  const double norm = std::hypot(dx, dy, dz);\n \n   output = p_base;\n   output.point.pose.position.x += backward_length * dx / norm;\n   output.point.pose.position.y += backward_length * dy / norm;\n+  output.point.pose.position.z += backward_length * dz / norm;\n \n   return output;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/1387": [
        {
            "sha": "9a9f804438f8851d4b057e897413dbd135a22629",
            "filename": "common/tier4_planning_rviz_plugin/src/tools/max_velocity.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/df3c3172da54c04f8d670a7f4558c54979a92be3/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Ftools%2Fmax_velocity.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/df3c3172da54c04f8d670a7f4558c54979a92be3/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Ftools%2Fmax_velocity.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Ftools%2Fmax_velocity.cpp?ref=df3c3172da54c04f8d670a7f4558c54979a92be3",
            "patch": "@@ -77,6 +77,7 @@ void MaxVelocityDisplay::onInitialize()\n   overlay_->updateTextureSize(property_length_->getInt(), property_length_->getInt());\n   overlay_->setPosition(property_left_->getInt(), property_top_->getInt());\n   overlay_->setDimensions(overlay_->getTextureWidth(), overlay_->getTextureHeight());\n+  processMessage(last_msg_ptr_);\n \n   // QColor background_color;\n   // background_color.setAlpha(0);\n@@ -126,9 +127,6 @@ void MaxVelocityDisplay::unsubscribe() { max_vel_sub_.reset(); }\n void MaxVelocityDisplay::processMessage(\n   const tier4_planning_msgs::msg::VelocityLimit::ConstSharedPtr msg_ptr)\n {\n-  if (!isEnabled()) {\n-    return;\n-  }\n   if (!overlay_->isVisible()) {\n     return;\n   }\n@@ -172,8 +170,12 @@ void MaxVelocityDisplay::processMessage(\n   font.setBold(true);\n   painter.setFont(font);\n   std::ostringstream velocity_ss;\n+  float velocity = 0.0;\n+  if (msg_ptr != nullptr) {\n+    velocity = msg_ptr->max_velocity;\n+  }\n   velocity_ss << std::fixed << std::setprecision(0) << \"limited\" << std::endl\n-              << msg_ptr->max_velocity * 3.6 << \"km/h\";\n+              << velocity * 3.6 << \"km/h\";\n   painter.drawText(\n     static_cast<int>(line_width * 0.5), std::min(static_cast<int>(line_width * 0.5), h - 1), w,\n     std::max(h, 1), Qt::AlignCenter | Qt::AlignVCenter, velocity_ss.str().c_str());"
        }
    ],
    "autowarefoundation/autoware.universe/1398": [
        {
            "sha": "e24a89905206a465232e51d8469b22b9910267b1",
            "filename": "planning/obstacle_cruise_planner/src/planner_interface.cpp",
            "status": "modified",
            "additions": 20,
            "deletions": 0,
            "changes": 20,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9a745688b773cd929e645eca9edcfc7a33e07ad4/planning%2Fobstacle_cruise_planner%2Fsrc%2Fplanner_interface.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9a745688b773cd929e645eca9edcfc7a33e07ad4/planning%2Fobstacle_cruise_planner%2Fsrc%2Fplanner_interface.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Fsrc%2Fplanner_interface.cpp?ref=9a745688b773cd929e645eca9edcfc7a33e07ad4",
            "patch": "@@ -51,6 +51,25 @@ tier4_planning_msgs::msg::StopReasonArray makeStopReasonArray(\n   return stop_reason_array;\n }\n \n+tier4_planning_msgs::msg::StopReasonArray makeEmptyStopReasonArray(\n+  const rclcpp::Time & current_time)\n+{\n+  // create header\n+  std_msgs::msg::Header header;\n+  header.frame_id = \"map\";\n+  header.stamp = current_time;\n+\n+  // create stop reason stamped\n+  tier4_planning_msgs::msg::StopReason stop_reason_msg;\n+  stop_reason_msg.reason = tier4_planning_msgs::msg::StopReason::OBSTACLE_STOP;\n+\n+  // create stop reason array\n+  tier4_planning_msgs::msg::StopReasonArray stop_reason_array;\n+  stop_reason_array.header = header;\n+  stop_reason_array.stop_reasons.emplace_back(stop_reason_msg);\n+  return stop_reason_array;\n+}\n+\n double calcMinimumDistanceToStop(\n   const double initial_vel, const double max_acc, const double min_acc)\n {\n@@ -70,6 +89,7 @@ Trajectory PlannerInterface::generateStopTrajectory(\n                                   : std::abs(vehicle_info_.min_longitudinal_offset_m);\n \n   if (planner_data.target_obstacles.empty()) {\n+    stop_reasons_pub_->publish(makeEmptyStopReasonArray(planner_data.current_time));\n     return planner_data.traj;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1400": [
        {
            "sha": "390326367dd48f627ecbd367a95a5f667d38a779",
            "filename": "planning/behavior_velocity_planner/src/scene_module/crosswalk/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a81c14c9d39a6265a32c91be0e30fcd2d288248a/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a81c14c9d39a6265a32c91be0e30fcd2d288248a/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp?ref=a81c14c9d39a6265a32c91be0e30fcd2d288248a",
            "patch": "@@ -370,6 +370,14 @@ bool CrosswalkModule::modifyPathVelocity(PathWithLaneId * path, StopReason * sto\n \n   if (isActivated()) {\n     if (!nearest_stop_point) {\n+      if (!rtc_stop_point) {\n+        setDistance(std::numeric_limits<double>::lowest());\n+        return true;\n+      }\n+\n+      const auto crosswalk_distance =\n+        calcSignedArcLength(ego_path.points, ego_pos, getPoint(rtc_stop_point.get().second));\n+      setDistance(crosswalk_distance);\n       return true;\n     }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1449": [
        {
            "sha": "cd84e59889d3d45d48581837086e7ee03867085d",
            "filename": "planning/behavior_velocity_planner/src/utilization/util.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 5,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d1986fa2c8cd2a4f6c99416b29311c27c6fb231c/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d1986fa2c8cd2a4f6c99416b29311c27c6fb231c/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Futil.cpp?ref=d1986fa2c8cd2a4f6c99416b29311c27c6fb231c",
            "patch": "@@ -559,12 +559,14 @@ std::vector<lanelet::ConstLanelet> getLaneletsOnPath(\n   }\n \n   // Add forward path lane_id\n-  const size_t start_idx = nearest_segment_idx ? *nearest_segment_idx + 1 : 0;\n+  const size_t start_idx = nearest_segment_idx ? *nearest_segment_idx : 0;\n   for (size_t i = start_idx; i < path.points.size(); i++) {\n-    const int64_t lane_id = path.points.at(i).lane_ids.at(0);\n-    if (\n-      std::find(unique_lane_ids.begin(), unique_lane_ids.end(), lane_id) == unique_lane_ids.end()) {\n-      unique_lane_ids.emplace_back(lane_id);\n+    for (const int64_t lane_id : path.points.at(i).lane_ids) {\n+      if (\n+        std::find(unique_lane_ids.begin(), unique_lane_ids.end(), lane_id) ==\n+        unique_lane_ids.end()) {\n+        unique_lane_ids.emplace_back(lane_id);\n+      }\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1450": [
        {
            "sha": "e1dbc769deab8842de41de01a8d75f6e3229b27d",
            "filename": "launch/tier4_control_launch/launch/control.launch.py",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/34eb31b0e3655f4a108fcf01cad7fbe8bdc229a0/launch%2Ftier4_control_launch%2Flaunch%2Fcontrol.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/34eb31b0e3655f4a108fcf01cad7fbe8bdc229a0/launch%2Ftier4_control_launch%2Flaunch%2Fcontrol.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_control_launch%2Flaunch%2Fcontrol.launch.py?ref=34eb31b0e3655f4a108fcf01cad7fbe8bdc229a0",
            "patch": "@@ -96,6 +96,7 @@ def launch_setup(context, *args, **kwargs):\n             },\n             lon_controller_param,\n             lat_controller_param,\n+            vehicle_info_param,\n         ],\n         extra_arguments=[{\"use_intra_process_comms\": LaunchConfiguration(\"use_intra_process\")}],\n     )"
        }
    ],
    "autowarefoundation/autoware.universe/1455": [
        {
            "sha": "516704d47be2221efad1e75e90648652086e330d",
            "filename": "planning/behavior_velocity_planner/src/scene_module/traffic_light/scene.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ea59cdd24c26a737a85d0b0351fc0a3db5f7f928/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Ftraffic_light%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ea59cdd24c26a737a85d0b0351fc0a3db5f7f928/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Ftraffic_light%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Ftraffic_light%2Fscene.cpp?ref=ea59cdd24c26a737a85d0b0351fc0a3db5f7f928",
            "patch": "@@ -228,6 +228,8 @@ bool TrafficLightModule::modifyPathVelocity(\n         planner_param_.stop_margin + planner_data_->vehicle_info_.max_longitudinal_offset_m,\n         planner_data_->stop_line_extend_length, stop_line_point, stop_line_point_idx)) {\n     RCLCPP_WARN_THROTTLE(logger_, *clock_, 5000, \"Failed to calculate stop point and insert index\");\n+    setSafe(true);\n+    setDistance(std::numeric_limits<double>::lowest());\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1461": [
        {
            "sha": "cb05a72c78acaf3951ed15eb4c52975eec150329",
            "filename": "map/lanelet2_extension/lib/visualization.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7ae58815f9fba59d4bc8aa2bbefb9df73198f291/map%2Flanelet2_extension%2Flib%2Fvisualization.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7ae58815f9fba59d4bc8aa2bbefb9df73198f291/map%2Flanelet2_extension%2Flib%2Fvisualization.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Flanelet2_extension%2Flib%2Fvisualization.cpp?ref=7ae58815f9fba59d4bc8aa2bbefb9df73198f291",
            "patch": "@@ -1175,14 +1175,14 @@ void visualization::pushLineStringMarker(\n     p.z = (*(i + 1)).z();\n     marker->points.push_back(p);\n     marker->colors.push_back(c);\n-    p.x = (*(i + 1)).x() + x_offset;\n-    p.y = (*(i + 1)).y() - y_offset;\n-    p.z = (*(i + 1)).z();\n-    marker->points.push_back(p);\n     p.x = (*(i + 1)).x() - x_offset;\n     p.y = (*(i + 1)).y() + y_offset;\n     p.z = (*(i + 1)).z();\n     marker->points.push_back(p);\n+    p.x = (*(i + 1)).x() + x_offset;\n+    p.y = (*(i + 1)).y() - y_offset;\n+    p.z = (*(i + 1)).z();\n+    marker->points.push_back(p);\n     p.x = (*i).x() - x_offset;\n     p.y = (*i).y() + y_offset;\n     p.z = (*i).z();"
        }
    ],
    "autowarefoundation/autoware.universe/1469": [
        {
            "sha": "ed20cfc4bb0aa7b47e01b5fb84a4d2e56c1bda58",
            "filename": "planning/motion_velocity_smoother/src/smoother/smoother_base.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fac9a1b3c4393750dde74f2614d9c93169ea5bd0/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fsmoother_base.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fac9a1b3c4393750dde74f2614d9c93169ea5bd0/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fsmoother_base.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fsmoother_base.cpp?ref=fac9a1b3c4393750dde74f2614d9c93169ea5bd0",
            "patch": "@@ -111,11 +111,13 @@ boost::optional<TrajectoryPoints> SmootherBase::applyLateralAccelerationFilter(\n     const size_t start = i > after_decel_index ? i - after_decel_index : 0;\n     const size_t end = std::min(output->size(), i + before_decel_index + 1);\n     for (size_t j = start; j < end; ++j) {\n+      if (j >= curvature_v.size()) return output;\n       curvature = std::max(curvature, std::fabs(curvature_v.at(j)));\n     }\n     double v_curvature_max = std::sqrt(max_lateral_accel_abs / std::max(curvature, 1.0E-5));\n     v_curvature_max = std::max(v_curvature_max, base_param_.min_curve_velocity);\n     if (enable_smooth_limit) {\n+      if (i >= latacc_min_vel_arr.size()) return output;\n       v_curvature_max = std::max(v_curvature_max, latacc_min_vel_arr.at(i));\n     }\n     if (output->at(i).longitudinal_velocity_mps > v_curvature_max) {"
        }
    ],
    "autowarefoundation/autoware.universe/1479": [
        {
            "sha": "a5a19979d3a5970608f9804cd75543d400e50cc0",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/lane_change_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/feac03d8e20a5430f71a5160c1ed3d39b71359ce/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/feac03d8e20a5430f71a5160c1ed3d39b71359ce/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp?ref=feac03d8e20a5430f71a5160c1ed3d39b71359ce",
            "patch": "@@ -330,8 +330,9 @@ lanelet::ConstLanelets LaneChangeModule::getLaneChangeLanes(\n   lanelet::ConstLanelet current_lane;\n   lanelet::utils::query::getClosestLanelet(\n     current_lanes, planner_data_->self_pose->pose, &current_lane);\n-  const double lane_change_prepare_length =\n-    current_twist.linear.x * parameters_.lane_change_prepare_duration;\n+  const double lane_change_prepare_length = std::max(\n+    current_twist.linear.x * parameters_.lane_change_prepare_duration,\n+    planner_data_->parameters.minimum_lane_change_length);\n   lanelet::ConstLanelets current_check_lanes =\n     route_handler->getLaneletSequence(current_lane, current_pose, 0.0, lane_change_prepare_length);\n   lanelet::ConstLanelet lane_change_lane;"
        }
    ],
    "autowarefoundation/autoware.universe/1490": [
        {
            "sha": "a1b960498ab520dca910f7eff1ae352facc08782",
            "filename": "planning/obstacle_cruise_planner/src/node.cpp",
            "status": "modified",
            "additions": 24,
            "deletions": 2,
            "changes": 26,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a0689d9b7d1982c159d272043ada6cfb1edaf256/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a0689d9b7d1982c159d272043ada6cfb1edaf256/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp?ref=a0689d9b7d1982c159d272043ada6cfb1edaf256",
            "patch": "@@ -172,6 +172,26 @@ double calcAlignedAdaptiveCruise(\n \n   return object_vel * std::cos(object_yaw - traj_yaw);\n }\n+\n+double calcObjectMaxLength(const autoware_auto_perception_msgs::msg::Shape & shape)\n+{\n+  if (shape.type == autoware_auto_perception_msgs::msg::Shape::BOUNDING_BOX) {\n+    return std::hypot(shape.dimensions.x / 2.0, shape.dimensions.y / 2.0);\n+  } else if (shape.type == autoware_auto_perception_msgs::msg::Shape::CYLINDER) {\n+    return shape.dimensions.x / 2.0;\n+  } else if (shape.type == autoware_auto_perception_msgs::msg::Shape::POLYGON) {\n+    double max_length_to_point = 0.0;\n+    for (const auto rel_point : shape.footprint.points) {\n+      const double length_to_point = std::hypot(rel_point.x, rel_point.y);\n+      if (max_length_to_point < length_to_point) {\n+        max_length_to_point = length_to_point;\n+      }\n+    }\n+    return max_length_to_point;\n+  }\n+\n+  throw std::logic_error(\"The shape type is not supported in obstacle_cruise_planner.\");\n+}\n }  // namespace\n \n namespace motion_planning\n@@ -682,9 +702,11 @@ std::vector<TargetObstacle> ObstacleCruisePlannerNode::filterObstacles(\n     const double dist_from_obstacle_to_traj = [&]() {\n       return motion_utils::calcLateralOffset(decimated_traj.points, object_pose.position);\n     }();\n+    const double obstacle_max_length = calcObjectMaxLength(predicted_object.shape);\n     if (\n       std::fabs(dist_from_obstacle_to_traj) >\n-      vehicle_info_.vehicle_width_m + obstacle_filtering_param_.rough_detection_area_expand_width) {\n+      vehicle_info_.vehicle_width_m + obstacle_max_length +\n+        obstacle_filtering_param_.rough_detection_area_expand_width) {\n       RCLCPP_INFO_EXPRESSION(\n         get_logger(), is_showing_debug_info_,\n         \"Ignore obstacle (%s) since it is far from the trajectory.\", object_id.c_str());\n@@ -741,7 +763,7 @@ std::vector<TargetObstacle> ObstacleCruisePlannerNode::filterObstacles(\n \n       if (\n         std::fabs(dist_from_obstacle_to_traj) >\n-        vehicle_info_.vehicle_width_m +\n+        vehicle_info_.vehicle_width_m + obstacle_max_length +\n           obstacle_filtering_param_.outside_rough_detection_area_expand_width) {\n         RCLCPP_INFO_EXPRESSION(\n           get_logger(), is_showing_debug_info_,"
        }
    ],
    "autowarefoundation/autoware.universe/1503": [
        {
            "sha": "5d124a50d8ced9995a189a1fd3a66f47f26b9c19",
            "filename": "perception/ground_segmentation/src/scan_ground_filter_nodelet.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9f89ea300cc06eb5990ee18800dc77bc65923a68/perception%2Fground_segmentation%2Fsrc%2Fscan_ground_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9f89ea300cc06eb5990ee18800dc77bc65923a68/perception%2Fground_segmentation%2Fsrc%2Fscan_ground_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fground_segmentation%2Fsrc%2Fscan_ground_filter_nodelet.cpp?ref=9f89ea300cc06eb5990ee18800dc77bc65923a68",
            "patch": "@@ -29,6 +29,7 @@ namespace ground_segmentation\n using pointcloud_preprocessor::get_param;\n using tier4_autoware_utils::calcDistance3d;\n using tier4_autoware_utils::deg2rad;\n+using tier4_autoware_utils::normalizeDegree;\n using tier4_autoware_utils::normalizeRadian;\n using vehicle_info_util::VehicleInfoUtil;\n \n@@ -87,7 +88,8 @@ void ScanGroundFilterComponent::convertPointcloud(\n   for (size_t i = 0; i < in_cloud->points.size(); ++i) {\n     auto radius{static_cast<float>(std::hypot(in_cloud->points[i].x, in_cloud->points[i].y))};\n     auto theta{normalizeRadian(std::atan2(in_cloud->points[i].x, in_cloud->points[i].y), 0.0)};\n-    auto radial_div{static_cast<size_t>(std::floor(theta / radial_divider_angle_rad_))};\n+    auto radial_div{\n+      static_cast<size_t>(std::floor(normalizeDegree(theta / radial_divider_angle_rad_, 0.0)))};\n \n     current_point.radius = radius;\n     current_point.theta = theta;"
        }
    ],
    "autowarefoundation/autoware.universe/1504": [
        {
            "sha": "3138190ceb70585b181be8aca4a9c1e30b1c0da4",
            "filename": "planning/freespace_planning_algorithms/src/astar_search.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8a36344764115ded63e3806af91e1b7385e49d05/planning%2Ffreespace_planning_algorithms%2Fsrc%2Fastar_search.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8a36344764115ded63e3806af91e1b7385e49d05/planning%2Ffreespace_planning_algorithms%2Fsrc%2Fastar_search.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Ffreespace_planning_algorithms%2Fsrc%2Fastar_search.cpp?ref=8a36344764115ded63e3806af91e1b7385e49d05",
            "patch": "@@ -274,13 +274,12 @@ bool AstarSearch::search()\n \n       // Compare cost\n       AstarNode * next_node = getNodeRef(next_index);\n-      const double next_gc = current_node->gc + move_cost;\n-      if (next_node->status == NodeStatus::None || next_gc < next_node->gc) {\n+      if (next_node->status == NodeStatus::None) {\n         next_node->status = NodeStatus::Open;\n         next_node->x = next_pose.position.x;\n         next_node->y = next_pose.position.y;\n         next_node->theta = tf2::getYaw(next_pose.orientation);\n-        next_node->gc = next_gc;\n+        next_node->gc = current_node->gc + move_cost;\n         next_node->hc = estimateCost(next_pose);\n         next_node->is_back = transition.is_back;\n         next_node->parent = current_node;"
        }
    ],
    "autowarefoundation/autoware.universe/1515": [
        {
            "sha": "c72e6a5b1ced1d460ff26ba0be5ee816cbc31d8d",
            "filename": "launch/tier4_planning_launch/config/scenario_planning/lane_driving/motion_planning/obstacle_cruise_planner/obstacle_cruise_planner.param.yaml",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1378871c6e54ff16cddb29b562b0545c44f0e8e2/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fmotion_planning%2Fobstacle_cruise_planner%2Fobstacle_cruise_planner.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1378871c6e54ff16cddb29b562b0545c44f0e8e2/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fmotion_planning%2Fobstacle_cruise_planner%2Fobstacle_cruise_planner.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fmotion_planning%2Fobstacle_cruise_planner%2Fobstacle_cruise_planner.param.yaml?ref=1378871c6e54ff16cddb29b562b0545c44f0e8e2",
            "patch": "@@ -53,6 +53,11 @@\n       ego_obstacle_overlap_time_threshold : 1.0 #  time threshold to decide cut-in obstacle for cruise or stop [s]\n       max_prediction_time_for_collision_check : 20.0 # prediction time to check collision between obstacle and ego\n \n+      prediction_resampling_time_interval: 0.1\n+      prediction_resampling_time_horizon: 10.0\n+\n+      stop_obstacle_hold_time_threshold : 1.0 # maximum time for holding closest stop obstacle\n+\n       ignored_outside_obstacle_type:\n         unknown: false\n         car: false"
        }
    ],
    "autowarefoundation/autoware.universe/1516": [
        {
            "sha": "d21db7df9c68efd8e075c34223a428a64aaded00",
            "filename": "planning/obstacle_cruise_planner/README.md",
            "status": "renamed",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0f7b4dbc6b6ce00710ac2b4d4e9a329a2848c4be/planning%2Fobstacle_cruise_planner%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0f7b4dbc6b6ce00710ac2b4d4e9a329a2848c4be/planning%2Fobstacle_cruise_planner%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2FREADME.md?ref=0f7b4dbc6b6ce00710ac2b4d4e9a329a2848c4be",
            "patch": "@@ -1,4 +1,4 @@\n-# Obstacle Velocity Planner\n+# Obstacle Cruise Planner\n \n ## Overview\n ",
            "previous_filename": "planning/obstacle_cruise_planner/obstacle_cruise_planner-design.md"
        }
    ],
    "autowarefoundation/autoware.universe/1519": [
        {
            "sha": "0c32fed8d5d87fda5fab595b56cc25bf43e3363c",
            "filename": "planning/behavior_path_planner/src/turn_signal_decider.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/df8a9f6ac1529ed67c362eb6f127c8c9008eef82/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/df8a9f6ac1529ed67c362eb6f127c8c9008eef82/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp?ref=df8a9f6ac1529ed67c362eb6f127c8c9008eef82",
            "patch": "@@ -98,14 +98,14 @@ std::pair<TurnIndicatorsCommand, double> TurnSignalDecider::getIntersectionTurnS\n           turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;\n         } else if (lane_attribute == std::string(\"right\")) {\n           turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n-        } else {\n-          // when lane_attribute is straight, return the turn signal with max distance\n-          return std::make_pair(turn_signal, std::numeric_limits<double>::max());\n         }\n         distance = distance_from_vehicle_front;\n       }\n     }\n   }\n+  if (turn_signal.command == TurnIndicatorsCommand::NO_COMMAND) {\n+    distance = std::numeric_limits<double>::max();\n+  }\n   return std::make_pair(turn_signal, distance);\n }\n }  // namespace behavior_path_planner"
        }
    ],
    "autowarefoundation/autoware.universe/1537": [
        {
            "sha": "4c36a36d476ec5e87c2bad0e9dfa15297b8a8487",
            "filename": "control/vehicle_cmd_gate/src/vehicle_cmd_gate.cpp",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d715e73bed479232f9549b7059a9ddd6374a80f6/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d715e73bed479232f9549b7059a9ddd6374a80f6/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp?ref=d715e73bed479232f9549b7059a9ddd6374a80f6",
            "patch": "@@ -370,7 +370,6 @@ void VehicleCmdGate::onTimer()\n   }\n \n   // Publish topics\n-  gate_mode_pub_->publish(current_gate_mode_);\n   turn_indicator_cmd_pub_->publish(turn_indicator);\n   hazard_light_cmd_pub_->publish(hazard_light);\n   gear_cmd_pub_->publish(gear);"
        }
    ],
    "autowarefoundation/autoware.universe/1538": [
        {
            "sha": "2d2d55d4fb2946efaf47ee9e296d4c404bcca443",
            "filename": "simulator/simple_planning_simulator/src/simple_planning_simulator/simple_planning_simulator_core.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f4a5eb8ceb2f7739f0dae5881ffd845a75f2b7ea/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f4a5eb8ceb2f7739f0dae5881ffd845a75f2b7ea/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp?ref=f4a5eb8ceb2f7739f0dae5881ffd845a75f2b7ea",
            "patch": "@@ -135,8 +135,8 @@ SimplePlanningSimulator::SimplePlanningSimulator(const rclcpp::NodeOptions & opt\n     std::bind(&SimplePlanningSimulator::on_parameter, this, _1));\n \n   timer_sampling_time_ms_ = static_cast<uint32_t>(declare_parameter(\"timer_sampling_time_ms\", 25));\n-  on_timer_ = create_wall_timer(\n-    std::chrono::milliseconds(timer_sampling_time_ms_),\n+  on_timer_ = rclcpp::create_timer(\n+    this, get_clock(), std::chrono::milliseconds(timer_sampling_time_ms_),\n     std::bind(&SimplePlanningSimulator::on_timer, this));\n \n   tier4_api_utils::ServiceProxyNodeInterface proxy(this);"
        }
    ],
    "autowarefoundation/autoware.universe/1539": [
        {
            "sha": "f42cdac7ee4362d90c23fd369509a097f615d9ff",
            "filename": "planning/behavior_path_planner/src/turn_signal_decider.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/380f15d64620ae65397374ef8ebdf9953584a970/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/380f15d64620ae65397374ef8ebdf9953584a970/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp?ref=380f15d64620ae65397374ef8ebdf9953584a970",
            "patch": "@@ -71,6 +71,9 @@ std::pair<TurnIndicatorsCommand, double> TurnSignalDecider::getIntersectionTurnS\n     const double distance_from_vehicle_front =\n       accumulated_distance - vehicle_pose_frenet.length - base_link2front_;\n     if (distance_from_vehicle_front > intersection_search_distance_) {\n+      if (turn_signal.command == TurnIndicatorsCommand::DISABLE) {\n+        distance = std::numeric_limits<double>::max();\n+      }\n       return std::make_pair(turn_signal, distance);\n     }\n     // TODO(Horibe): Route Handler should be a library.\n@@ -103,7 +106,7 @@ std::pair<TurnIndicatorsCommand, double> TurnSignalDecider::getIntersectionTurnS\n       }\n     }\n   }\n-  if (turn_signal.command == TurnIndicatorsCommand::NO_COMMAND) {\n+  if (turn_signal.command == TurnIndicatorsCommand::DISABLE) {\n     distance = std::numeric_limits<double>::max();\n   }\n   return std::make_pair(turn_signal, distance);"
        }
    ],
    "autowarefoundation/autoware.universe/1540": [
        {
            "sha": "6872d21fd9c46ec6a125f7a74e56b2d66922e3dc",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 5,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f9d9eb078069b1ef7149839563b0dccba935247b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f9d9eb078069b1ef7149839563b0dccba935247b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=f9d9eb078069b1ef7149839563b0dccba935247b",
            "patch": "@@ -2347,11 +2347,6 @@ boost::optional<AvoidPointArray> AvoidanceModule::findNewShiftPoint(\n     //   continue;\n     // }\n \n-    if (calcJerk(candidate) > parameters_.max_lateral_jerk) {\n-      DEBUG_PRINT(\"%s, this shift exceeds jerk limit (%f). skip.\", pfx, calcJerk(candidate));\n-      continue;\n-    }\n-\n     const auto current_shift = prev_linear_shift_path_.shift_length.at(\n       findNearestIndex(prev_reference_.points, candidate.end.position));\n \n@@ -2360,6 +2355,12 @@ boost::optional<AvoidPointArray> AvoidanceModule::findNewShiftPoint(\n \n     const auto new_point_threshold = parameters_.avoidance_execution_lateral_threshold;\n     if (std::abs(candidate.length - current_shift) > new_point_threshold) {\n+      if (calcJerk(candidate) > parameters_.max_lateral_jerk) {\n+        DEBUG_PRINT(\n+          \"%s, Failed to find new shift: jerk limit over (%f).\", pfx, calcJerk(candidate));\n+        break;\n+      }\n+\n       DEBUG_PRINT(\n         \"%s, New shift point is found!!! shift change: %f -> %f\", pfx, current_shift,\n         candidate.length);"
        }
    ],
    "autowarefoundation/autoware.universe/1551": [
        {
            "sha": "3d8bd32b88d83bd988d9d4bc0a15982e27084fca",
            "filename": "common/tier4_autoware_utils/include/tier4_autoware_utils/geometry/geometry.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/40687713c4f8a1565739c416bcd28dc1aa6eb16a/common%2Ftier4_autoware_utils%2Finclude%2Ftier4_autoware_utils%2Fgeometry%2Fgeometry.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/40687713c4f8a1565739c416bcd28dc1aa6eb16a/common%2Ftier4_autoware_utils%2Finclude%2Ftier4_autoware_utils%2Fgeometry%2Fgeometry.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_autoware_utils%2Finclude%2Ftier4_autoware_utils%2Fgeometry%2Fgeometry.hpp?ref=40687713c4f8a1565739c416bcd28dc1aa6eb16a",
            "patch": "@@ -199,7 +199,7 @@ inline double getLongitudinalVelocity(const autoware_auto_planning_msgs::msg::Tr\n }\n \n template <class T>\n-void setPose(const geometry_msgs::msg::Pose & pose, [[maybe_unused]] T & p)\n+void setPose([[maybe_unused]] const geometry_msgs::msg::Pose & pose, [[maybe_unused]] T & p)\n {\n   static_assert(sizeof(T) == 0, \"Only specializations of getPose can be used.\");\n   throw std::logic_error(\"Only specializations of getPose can be used.\");\n@@ -232,7 +232,7 @@ inline void setPose(\n }\n \n template <class T>\n-void setLongitudinalVelocity(const double velocity, [[maybe_unused]] T & p)\n+void setLongitudinalVelocity([[maybe_unused]] const double velocity, [[maybe_unused]] T & p)\n {\n   static_assert(sizeof(T) == 0, \"Only specializations of getLongitudinalVelocity can be used.\");\n   throw std::logic_error(\"Only specializations of getLongitudinalVelocity can be used.\");"
        }
    ],
    "autowarefoundation/autoware.universe/1555": [
        {
            "sha": "3015374f0f72d34b34d36643efa6d5715660e181",
            "filename": "perception/lidar_centerpoint/lib/postprocess/postprocess_kernel.cu",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bd6f472a6c59704c071452afc2a009e49fd057ef/perception%2Flidar_centerpoint%2Flib%2Fpostprocess%2Fpostprocess_kernel.cu",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bd6f472a6c59704c071452afc2a009e49fd057ef/perception%2Flidar_centerpoint%2Flib%2Fpostprocess%2Fpostprocess_kernel.cu",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_centerpoint%2Flib%2Fpostprocess%2Fpostprocess_kernel.cu?ref=bd6f472a6c59704c071452afc2a009e49fd057ef",
            "patch": "@@ -47,7 +47,7 @@ struct score_greater\n   __device__ bool operator()(const Box3D & lb, const Box3D & rb) { return lb.score > rb.score; }\n };\n \n-__device__ inline float sigmoid(float x) { return 1.0f / expf(-x); }\n+__device__ inline float sigmoid(float x) { return 1.0f / (1.0f + expf(-x)); }\n \n __global__ void generateBoxes3D_kernel(\n   const float * out_heatmap, const float * out_offset, const float * out_z, const float * out_dim,"
        }
    ],
    "autowarefoundation/autoware.universe/1571": [
        {
            "sha": "7c46baa7771b1775cbf826322c700141aaf230f4",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/pull_over_module.cpp",
            "status": "modified",
            "additions": 15,
            "deletions": 8,
            "changes": 23,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5c8dc6a1d163b1c67847d0e3aa2d67ea10971b38/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5c8dc6a1d163b1c67847d0e3aa2d67ea10971b38/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp?ref=5c8dc6a1d163b1c67847d0e3aa2d67ea10971b38",
            "patch": "@@ -157,16 +157,23 @@ bool PullOverModule::isExecutionRequested() const\n   if (current_state_ == BT::NodeStatus::RUNNING) {\n     return true;\n   }\n-\n-  const auto current_lanes = util::getCurrentLanes(planner_data_);\n-  const auto goal_pose = planner_data_->route_handler->getGoalPose();\n+  const auto & current_lanes = util::getCurrentLanes(planner_data_);\n+  const auto & current_pose = planner_data_->self_pose->pose;\n+  const auto & goal_pose = planner_data_->route_handler->getGoalPose();\n \n   // check if goal_pose is far\n-  const double goal_arc_length = lanelet::utils::getArcCoordinates(current_lanes, goal_pose).length;\n-  const double self_arc_length =\n-    lanelet::utils::getArcCoordinates(current_lanes, planner_data_->self_pose->pose).length;\n-  const double self_to_goal_arc_length = goal_arc_length - self_arc_length;\n-  if (self_to_goal_arc_length > parameters_.request_length) return false;\n+  const bool is_in_goal_route_section =\n+    planner_data_->route_handler->isInGoalRouteSection(current_lanes.back());\n+  // current_lanes does not have the goal\n+  if (!is_in_goal_route_section) {\n+    return false;\n+  }\n+  const double self_to_goal_arc_length =\n+    util::getSignedDistance(current_pose, goal_pose, current_lanes);\n+  // goal is away behind\n+  if (self_to_goal_arc_length > parameters_.request_length || self_to_goal_arc_length < 0.0) {\n+    return false;\n+  }\n \n   // check if goal_pose is in shoulder lane\n   bool goal_is_in_shoulder_lane = false;"
        }
    ],
    "autowarefoundation/autoware.universe/1602": [
        {
            "sha": "1a66bc09d040c6b68441f280d135e9db37d55e84",
            "filename": "launch/tier4_planning_launch/config/scenario_planning/lane_driving/behavior_planning/behavior_path_planner/lane_change/lane_change.param.yaml",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7ec9ec5ff0bb80dc4b38139d6650fba7756b20fe/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Fbehavior_path_planner%2Flane_change%2Flane_change.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7ec9ec5ff0bb80dc4b38139d6650fba7756b20fe/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Fbehavior_path_planner%2Flane_change%2Flane_change.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Fbehavior_path_planner%2Flane_change%2Flane_change.param.yaml?ref=7ec9ec5ff0bb80dc4b38139d6650fba7756b20fe",
            "patch": "@@ -12,8 +12,8 @@\n       prediction_time_resolution: 0.5\n       static_obstacle_velocity_thresh: 1.5\n       maximum_deceleration: 1.0\n-      enable_abort_lane_change: false\n-      enable_collision_check_at_prepare_phase: false\n-      use_predicted_path_outside_lanelet: false\n-      use_all_predicted_path: false\n+      enable_abort_lane_change: true\n+      enable_collision_check_at_prepare_phase: true\n+      use_predicted_path_outside_lanelet: true\n+      use_all_predicted_path: true\n       enable_blocked_by_obstacle: false"
        }
    ],
    "autowarefoundation/autoware.universe/1606": [
        {
            "sha": "b7a6ea72cf92a21ed7ea6f92428798066794dada",
            "filename": "planning/behavior_path_planner/src/turn_signal_decider.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 2,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bfc601818db63d69a96553809d6ff2d9cecfd1e5/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bfc601818db63d69a96553809d6ff2d9cecfd1e5/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp?ref=bfc601818db63d69a96553809d6ff2d9cecfd1e5",
            "patch": "@@ -36,7 +36,10 @@ TurnIndicatorsCommand TurnSignalDecider::getTurnSignal(\n   const auto intersection_turn_signal = intersection_result.first;\n   const auto intersection_distance = intersection_result.second;\n \n-  if (intersection_distance < plan_distance) {\n+  if (\n+    intersection_distance < plan_distance ||\n+    turn_signal_plan.command == TurnIndicatorsCommand::NO_COMMAND ||\n+    turn_signal_plan.command == TurnIndicatorsCommand::DISABLE) {\n     turn_signal.command = intersection_turn_signal.command;\n   }\n \n@@ -82,6 +85,7 @@ std::pair<TurnIndicatorsCommand, double> TurnSignalDecider::getIntersectionTurnS\n       bool lighting_turn_signal = false;\n       if (lane.attributeOr(\"turn_direction\", std::string(\"none\")) != lane_attribute) {\n         if (\n+          distance_from_vehicle_front >= 0.0 &&\n           distance_from_vehicle_front <\n             lane.attributeOr(\"turn_signal_distance\", intersection_search_distance_) &&\n           path_point_distance > 0.0) {\n@@ -99,10 +103,11 @@ std::pair<TurnIndicatorsCommand, double> TurnSignalDecider::getIntersectionTurnS\n       if (lighting_turn_signal) {\n         if (lane_attribute == std::string(\"left\")) {\n           turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;\n+          distance = distance_from_vehicle_front;\n         } else if (lane_attribute == std::string(\"right\")) {\n           turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n+          distance = distance_from_vehicle_front;\n         }\n-        distance = distance_from_vehicle_front;\n       }\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/1616": [
        {
            "sha": "4fe6aca6d49928fd54c77a1357d6230a3e270722",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 1,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3eee1abc048ffd7dc12c18846e5323cb4f385bf1/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3eee1abc048ffd7dc12c18846e5323cb4f385bf1/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=3eee1abc048ffd7dc12c18846e5323cb4f385bf1",
            "patch": "@@ -1483,7 +1483,13 @@ ObstacleAvoidancePlanner::alignVelocity(\n   auto fine_traj_points_with_vel = fine_traj_points_with_path_zero_vel;\n   size_t prev_begin_idx = 0;\n   for (size_t i = 0; i < fine_traj_points_with_vel.size(); ++i) {\n-    const auto truncated_points = points_utils::clipForwardPoints(path_points, prev_begin_idx, 5.0);\n+    auto truncated_points = points_utils::clipForwardPoints(path_points, prev_begin_idx, 5.0);\n+    if (truncated_points.size() < 2) {\n+      // NOTE: At least, two points must be contained in truncated_points\n+      truncated_points = std::vector<autoware_auto_planning_msgs::msg::PathPoint>(\n+        path_points.begin() + prev_begin_idx,\n+        path_points.begin() + std::min(path_points.size(), prev_begin_idx + 2));\n+    }\n \n     const auto & target_pose = fine_traj_points_with_vel[i].pose;\n     const auto closest_seg_idx_optional = motion_utils::findNearestSegmentIndex("
        }
    ],
    "autowarefoundation/autoware.universe/1627": [
        {
            "sha": "f6d367b25e9b5a243ee6ea80bdddc753a2839a4c",
            "filename": "planning/obstacle_stop_planner/src/node.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f267e6904061ef59b150c6d21984bd3ff5a82f9a/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f267e6904061ef59b150c6d21984bd3ff5a82f9a/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp?ref=f267e6904061ef59b150c6d21984bd3ff5a82f9a",
            "patch": "@@ -870,6 +870,10 @@ void ObstacleStopPlannerNode::insertVelocity(\n     }\n   } else if (!no_hunting_collision_point) {\n     if (latest_stop_point_) {\n+      // update stop point index with the current trajectory\n+      latest_stop_point_.get().index = findFirstNearestSegmentIndexWithSoftConstraints(\n+        output, getPose(latest_stop_point_.get().point), node_param_.ego_nearest_dist_threshold,\n+        node_param_.ego_nearest_yaw_threshold);\n       insertStopPoint(latest_stop_point_.get(), output, planner_data.stop_reason_diag);\n       debug_ptr_->pushPose(getPose(latest_stop_point_.get().point), PoseType::TargetStop);\n       debug_ptr_->pushPose(getPose(latest_stop_point_.get().point), PoseType::Stop);"
        }
    ],
    "autowarefoundation/autoware.universe/1629": [
        {
            "sha": "b6c6de71def0b6d20cccc11982592d7ca026a508",
            "filename": "perception/radar_tracks_msgs_converter/src/radar_tracks_msgs_converter_node/radar_tracks_msgs_converter_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a4751e030e582bbdfcbaee0f0944437dc6c41589/perception%2Fradar_tracks_msgs_converter%2Fsrc%2Fradar_tracks_msgs_converter_node%2Fradar_tracks_msgs_converter_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a4751e030e582bbdfcbaee0f0944437dc6c41589/perception%2Fradar_tracks_msgs_converter%2Fsrc%2Fradar_tracks_msgs_converter_node%2Fradar_tracks_msgs_converter_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fradar_tracks_msgs_converter%2Fsrc%2Fradar_tracks_msgs_converter_node%2Fradar_tracks_msgs_converter_node.cpp?ref=a4751e030e582bbdfcbaee0f0944437dc6c41589",
            "patch": "@@ -118,6 +118,7 @@ rcl_interfaces::msg::SetParametersResult RadarTracksMsgsConverterNode::onSetPara\n \n       // Update params\n       update_param(params, \"update_rate_hz\", p.update_rate_hz);\n+      update_param(params, \"new_frame_id\", p.new_frame_id);\n       update_param(params, \"use_twist_compensation\", p.use_twist_compensation);\n     }\n   } catch (const rclcpp::exceptions::InvalidParameterTypeException & e) {"
        }
    ],
    "autowarefoundation/autoware.universe/1644": [
        {
            "sha": "7910ffcce8e15e43b4a7d5e8e78527cc233cc810",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/manager.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1873dc69c62f008198b5acb61de9160d8cb408c4/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fmanager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1873dc69c62f008198b5acb61de9160d8cb408c4/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fmanager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fmanager.cpp?ref=1873dc69c62f008198b5acb61de9160d8cb408c4",
            "patch": "@@ -64,6 +64,10 @@ MergeFromPrivateModuleManager::MergeFromPrivateModuleManager(rclcpp::Node & node\n   mp.stop_duration_sec =\n     node.declare_parameter(ns + \".merge_from_private_area.stop_duration_sec\", 1.0);\n   mp.detection_area_length = node.get_parameter(\"intersection.detection_area_length\").as_double();\n+  mp.detection_area_right_margin =\n+    node.get_parameter(\"intersection.detection_area_right_margin\").as_double();\n+  mp.detection_area_left_margin =\n+    node.get_parameter(\"intersection.detection_area_left_margin\").as_double();\n   mp.stop_line_margin = node.get_parameter(\"intersection.stop_line_margin\").as_double();\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1655": [
        {
            "sha": "1a24caffd6dbe1a4f1e715d093fda6f58ef2c4cc",
            "filename": "launch/tier4_perception_launch/launch/object_recognition/detection/camera_lidar_fusion_based_detection.launch.xml",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8c62f3d9adddd3e7a6f6cb08a944b3d766cca4ea/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8c62f3d9adddd3e7a6f6cb08a944b3d766cca4ea/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml?ref=8c62f3d9adddd3e7a6f6cb08a944b3d766cca4ea",
            "patch": "@@ -132,9 +132,9 @@\n \n       <group>\n         <include file=\"$(find-pkg-share object_range_splitter)/launch/object_range_splitter.launch.xml\">\n-          <arg name=\"input/object\" value=\"camera_lidar_fusion/objects\"/>\n-          <arg name=\"output/long_range_object\" value=\"camera_lidar_fusion/long_range_objects\"/>\n-          <arg name=\"output/short_range_object\" value=\"camera_lidar_fusion/short_range_objects\"/>\n+          <arg name=\"input/object\" value=\"objects\"/>\n+          <arg name=\"output/long_range_object\" value=\"long_range_objects\"/>\n+          <arg name=\"output/short_range_object\" value=\"short_range_objects\"/>\n           <arg name=\"split_range\" value=\"30.0\"/>\n         </include>\n       </group>"
        }
    ],
    "autowarefoundation/autoware.universe/1670": [
        {
            "sha": "978bc0c2576f9bf43d66e1ca57fb496dc0efee9e",
            "filename": "common/tvm_utility/design/tvm-utility-design.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/841cc22d943318c2e8e6feb5e5578bbe47649f26/common%2Ftvm_utility%2Fdesign%2Ftvm-utility-design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/841cc22d943318c2e8e6feb5e5578bbe47649f26/common%2Ftvm_utility%2Fdesign%2Ftvm-utility-design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftvm_utility%2Fdesign%2Ftvm-utility-design.md?ref=841cc22d943318c2e8e6feb5e5578bbe47649f26",
            "patch": "@@ -67,4 +67,4 @@ Future packages will use tvm_utility as part of the perception stack to run mach\n \n ## Related issues\n \n-<https://github.com/autowarefoundation/autoware/discussions/226>\n+<https://github.com/autowarefoundation/autoware/discussions/2557>"
        }
    ],
    "autowarefoundation/autoware.universe/1674": [
        {
            "sha": "df9aa6c659fa46bbf9013209984028ba0f2c2031",
            "filename": "planning/behavior_velocity_planner/src/scene_module/blind_spot/scene.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 2,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/484c71dbf303c07dcab771f580981055f3a5cf08/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fblind_spot%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/484c71dbf303c07dcab771f580981055f3a5cf08/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fblind_spot%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fblind_spot%2Fscene.cpp?ref=484c71dbf303c07dcab771f580981055f3a5cf08",
            "patch": "@@ -318,8 +318,8 @@ int BlindSpotModule::insertPoint(\n   }\n   int insert_idx = -1;\n   // initialize with epsilon so that comparison with insert_point_s = 0.0 would work\n-  constexpr double eps = 1e-4;\n-  double accum_s = eps * 2.0;\n+  constexpr double eps = 1e-2;\n+  double accum_s = eps + std::numeric_limits<double>::epsilon();\n   for (size_t i = 1; i < inout_path->points.size(); i++) {\n     accum_s += tier4_autoware_utils::calcDistance2d(\n       inout_path->points[i].point.pose.position, inout_path->points[i - 1].point.pose.position);\n@@ -342,6 +342,15 @@ int BlindSpotModule::insertPoint(\n       inout_path->points.at(insert_idx).point.longitudinal_velocity_mps = 0.0;\n       is_point_inserted = false;\n       return insert_idx;\n+    } else if (\n+      insert_idx != 0 &&\n+      tier4_autoware_utils::calcDistance2d(\n+        inserted_point, inout_path->points.at(static_cast<size_t>(insert_idx - 1)).point) <\n+        min_dist) {\n+      inout_path->points.at(insert_idx - 1).point.longitudinal_velocity_mps = 0.0;\n+      insert_idx--;\n+      is_point_inserted = false;\n+      return insert_idx;\n     }\n     inout_path->points.insert(it, inserted_point);\n     is_point_inserted = true;"
        }
    ],
    "autowarefoundation/autoware.universe/1679": [
        {
            "sha": "06586ac3b8c7f0a2d23cd4e1fc02dbf73a635587",
            "filename": "planning/behavior_velocity_planner/include/scene_module/scene_module_interface.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e802b9ff18d4979ff8d76186b5757251cdf32e3c/planning%2Fbehavior_velocity_planner%2Finclude%2Fscene_module%2Fscene_module_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e802b9ff18d4979ff8d76186b5757251cdf32e3c/planning%2Fbehavior_velocity_planner%2Finclude%2Fscene_module%2Fscene_module_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Finclude%2Fscene_module%2Fscene_module_interface.hpp?ref=e802b9ff18d4979ff8d76186b5757251cdf32e3c",
            "patch": "@@ -209,6 +209,7 @@ class SceneModuleManagerInterface\n     pub_debug_->publish(debug_marker_array);\n     if (is_publish_debug_path_) {\n       autoware_auto_planning_msgs::msg::PathWithLaneId debug_path;\n+      debug_path.header = path->header;\n       debug_path.points = path->points;\n       pub_debug_path_->publish(debug_path);\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/1680": [
        {
            "sha": "1e0777ecf994af6fe993300c3e60a33c995d7949",
            "filename": "launch/tier4_planning_launch/config/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/behavior_velocity_planner.param.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7625777e05617609f52b0b9caf4c000804ce3e69/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Fbehavior_velocity_planner%2Fbehavior_velocity_planner.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7625777e05617609f52b0b9caf4c000804ce3e69/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Fbehavior_velocity_planner%2Fbehavior_velocity_planner.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Fbehavior_velocity_planner%2Fbehavior_velocity_planner.param.yaml?ref=7625777e05617609f52b0b9caf4c000804ce3e69",
            "patch": "@@ -16,4 +16,4 @@\n     max_jerk: -5.0\n     system_delay: 0.5\n     delay_response_time: 0.5\n-    is_publish_debug_path: true # publish all debug path with lane id in each module\n+    is_publish_debug_path: false # publish all debug path with lane id in each module"
        }
    ],
    "autowarefoundation/autoware.universe/1681": [
        {
            "sha": "05af344cffde43ce6005bfae7c043614df056937",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c8b18a01d4a4893c6ed91d3cf22a773647c86881/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c8b18a01d4a4893c6ed91d3cf22a773647c86881/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=c8b18a01d4a4893c6ed91d3cf22a773647c86881",
            "patch": "@@ -2255,6 +2255,7 @@ void AvoidanceModule::addShiftPointIfApproved(const AvoidPointArray & shift_poin\n \n     uuid_left_ = generateUUID();\n     uuid_right_ = generateUUID();\n+    candidate_uuid_ = generateUUID();\n \n     DEBUG_PRINT(\"shift_point size: %lu -> %lu\", prev_size, path_shifter_.getShiftPointsSize());\n   } else {"
        }
    ],
    "autowarefoundation/autoware.universe/1689": [
        {
            "sha": "d21c050caf9c54340579b1ef22cfe54c082366a3",
            "filename": "planning/motion_velocity_smoother/launch/motion_velocity_smoother.launch.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/38c944c3be03594622e499e5d22d9fa269ecb226/planning%2Fmotion_velocity_smoother%2Flaunch%2Fmotion_velocity_smoother.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/38c944c3be03594622e499e5d22d9fa269ecb226/planning%2Fmotion_velocity_smoother%2Flaunch%2Fmotion_velocity_smoother.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Flaunch%2Fmotion_velocity_smoother.launch.xml?ref=38c944c3be03594622e499e5d22d9fa269ecb226",
            "patch": "@@ -7,7 +7,7 @@\n   <arg name=\"output_trajectory\" default=\"/planning/scenario_planning/trajectory\"/>\n \n   <!-- debug flags -->\n-  <arg name=\"publish_debug_trajs\" default=\"true\"/>\n+  <arg name=\"publish_debug_trajs\" default=\"false\"/>\n   <arg name=\"smoother_type\" default=\"JerkFiltered\"/>\n   <!-- Analytical, JerkFiltered, L2, or Linf -->\n "
        }
    ],
    "autowarefoundation/autoware.universe/1694": [
        {
            "sha": "4f9aedfed0d49884f50eddaf7674cd03caf62d7b",
            "filename": "planning/motion_velocity_smoother/src/motion_velocity_smoother_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/123a55571b6c3074c9ef0178230f4976f7180e8c/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/123a55571b6c3074c9ef0178230f4976f7180e8c/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp?ref=123a55571b6c3074c9ef0178230f4976f7180e8c",
            "patch": "@@ -726,7 +726,7 @@ void MotionVelocitySmootherNode::overwriteStopPoint(\n     double optimized_stop_point_vel =\n       output.at(*nearest_output_point_idx).longitudinal_velocity_mps;\n     is_stop_velocity_exceeded = (optimized_stop_point_vel > over_stop_velocity_warn_thr_);\n-    input_stop_vel = input.at(*nearest_output_point_idx).longitudinal_velocity_mps;\n+    input_stop_vel = input.at(*stop_idx).longitudinal_velocity_mps;\n     output_stop_vel = output.at(*nearest_output_point_idx).longitudinal_velocity_mps;\n     trajectory_utils::applyMaximumVelocityLimit(\n       *nearest_output_point_idx, output.size(), 0.0, output);"
        }
    ],
    "autowarefoundation/autoware.universe/1707": [
        {
            "sha": "637a4d1bea335d8d5deeeaf33a67c75556581709",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 36,
            "deletions": 55,
            "changes": 91,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9b5aa2c37c1fe0db185337f4c434a32eef43e128/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9b5aa2c37c1fe0db185337f4c434a32eef43e128/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=9b5aa2c37c1fe0db185337f4c434a32eef43e128",
            "patch": "@@ -1704,31 +1704,30 @@ void AvoidanceModule::generateExtendedDrivableArea(ShiftedPath * shifted_path) c\n   const auto & current_lanes = avoidance_data_.current_lanelets;\n   lanelet::ConstLanelets extended_lanelets = current_lanes;\n \n-  const auto shared_linestring_lanelets = [this,\n-                                           &route_handler](const lanelet::ConstLanelet & lane) {\n-    const auto ignore_opposite = !parameters_.enable_avoidance_over_opposite_direction;\n-    if (ignore_opposite) {\n-      return route_handler->getAllSharedLineStringLanelets(lane, true, true, ignore_opposite);\n-    }\n-\n-    return route_handler->getAllSharedLineStringLanelets(lane);\n-  };\n-\n-  for (const auto & current_lane : avoidance_data_.current_lanelets) {\n+  for (const auto & current_lane : current_lanes) {\n     if (!parameters_.enable_avoidance_over_opposite_direction) {\n       break;\n     }\n \n-    const auto extend_from_current_lane = std::invoke(shared_linestring_lanelets, current_lane);\n+    const auto extend_from_current_lane = std::invoke(\n+      [this, &route_handler](const lanelet::ConstLanelet & lane) {\n+        const auto ignore_opposite = !parameters_.enable_avoidance_over_opposite_direction;\n+        if (ignore_opposite) {\n+          return route_handler->getAllSharedLineStringLanelets(lane, true, true, ignore_opposite);\n+        }\n+\n+        return route_handler->getAllSharedLineStringLanelets(lane);\n+      },\n+      current_lane);\n+    extended_lanelets.reserve(extended_lanelets.size() + extend_from_current_lane.size());\n     extended_lanelets.insert(\n       extended_lanelets.end(), extend_from_current_lane.begin(), extend_from_current_lane.end());\n \n     // 2. when there are multiple turning lanes whose previous lanelet is the same in\n     // intersection\n     const lanelet::ConstLanelets next_lanes_from_intersection = std::invoke(\n       [&route_handler](const lanelet::ConstLanelet & lane) {\n-        const std::string turn_direction = lane.attributeOr(\"turn_direction\", \"none\");\n-        if (turn_direction != \"right\" && turn_direction != \"left\") {\n+        if (!lane.hasAttribute(\"turn_direction\")) {\n           return lanelet::ConstLanelets{};\n         }\n \n@@ -1738,52 +1737,34 @@ void AvoidanceModule::generateExtendedDrivableArea(ShiftedPath * shifted_path) c\n           return lanelet::ConstLanelets{};\n         }\n \n-        // get next lanes from the previous lane, and return false if next lanes do not exist\n-        return route_handler->getNextLanelets(lane);\n+        lanelet::ConstLanelets next_lanes;\n+        for (const auto & prev_lane : prev_lanes) {\n+          const auto next_lanes_from_prev = route_handler->getNextLanelets(prev_lane);\n+          next_lanes.reserve(next_lanes.size() + next_lanes_from_prev.size());\n+          next_lanes.insert(\n+            next_lanes.end(), next_lanes_from_prev.begin(), next_lanes_from_prev.end());\n+        }\n+        return next_lanes;\n       },\n       current_lane);\n \n-    if (next_lanes_from_intersection.empty()) {\n-      continue;\n-    }\n-\n     // 2.1 look for neighbour lane, where end line of the lane is connected to end line of the\n     // original lane\n-    const lanelet::ConstLanelet next_lane_from_intersection = std::invoke(\n-      [&next_lanes_from_intersection](const auto & lane) {\n-        for (const auto & next_lane : next_lanes_from_intersection) {\n-          if (lane.id() == next_lane.id()) {\n-            continue;\n-          }\n-\n-          const Eigen::Vector2d & next_left_back_point_2d =\n-            next_lane.leftBound2d().back().basicPoint();\n-          const Eigen::Vector2d & next_right_back_point_2d =\n-            next_lane.rightBound2d().back().basicPoint();\n-\n-          const Eigen::Vector2d & orig_left_back_point_2d = lane.leftBound2d().back().basicPoint();\n-          const Eigen::Vector2d & orig_right_back_point_2d =\n-            lane.rightBound2d().back().basicPoint();\n-\n-          constexpr double epsilon = 1e-5;\n-          const bool is_neighbour_lane =\n-            (next_left_back_point_2d - orig_right_back_point_2d).norm() < epsilon ||\n-            (next_right_back_point_2d - orig_left_back_point_2d).norm() < epsilon;\n-          if (is_neighbour_lane) {\n-            return next_lane;\n-          }\n-        }\n-        return lanelet::ConstLanelet{};\n-      },\n-      current_lane);\n-\n-    if (next_lane_from_intersection.id()) {\n-      const auto extended_from_next =\n-        std::invoke(shared_linestring_lanelets, next_lane_from_intersection);\n-\n-      extended_lanelets.insert(\n-        extended_lanelets.end(), extended_from_next.begin(), extended_from_next.end());\n-    }\n+    std::copy_if(\n+      next_lanes_from_intersection.begin(), next_lanes_from_intersection.end(),\n+      std::back_inserter(extended_lanelets),\n+      [&current_lane](const lanelet::ConstLanelet & neighbor_lane) {\n+        const auto & next_left_back_point_2d = neighbor_lane.leftBound2d().back().basicPoint();\n+        const auto & next_right_back_point_2d = neighbor_lane.rightBound2d().back().basicPoint();\n+\n+        const auto & orig_left_back_point_2d = current_lane.leftBound2d().back().basicPoint();\n+        const auto & orig_right_back_point_2d = current_lane.rightBound2d().back().basicPoint();\n+        constexpr double epsilon = 1e-5;\n+        const bool is_neighbour_lane =\n+          (next_left_back_point_2d - orig_right_back_point_2d).norm() < epsilon ||\n+          (next_right_back_point_2d - orig_left_back_point_2d).norm() < epsilon;\n+        return (current_lane.id() != neighbor_lane.id() && is_neighbour_lane);\n+      });\n   }\n \n   {"
        }
    ],
    "autowarefoundation/autoware.universe/1721": [
        {
            "sha": "70971de206311273001ac84176203839201c371f",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 19,
            "deletions": 28,
            "changes": 47,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/036dac745e52db8efed10983a92131bba30ee130/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/036dac745e52db8efed10983a92131bba30ee130/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=036dac745e52db8efed10983a92131bba30ee130",
            "patch": "@@ -472,35 +472,19 @@ TimeDistanceArray IntersectionModule::calcIntersectionPassingTime(\n   const autoware_auto_planning_msgs::msg::PathWithLaneId & path, const int closest_idx,\n   const int objective_lane_id) const\n {\n-  double closest_vel =\n-    (std::max(1e-01, std::fabs(planner_data_->current_velocity->twist.linear.x)));\n+  static constexpr double k_minimum_velocity = 1e-01;\n+\n   double dist_sum = 0.0;\n   int assigned_lane_found = false;\n \n+  // crop intersection part of the path, and set the reference velocity to intersection_velocity for\n+  // ego's ttc\n   PathWithLaneId reference_path;\n-  reference_path.points.push_back(path.points.at(closest_idx));\n-  reference_path.points.at(0).point.longitudinal_velocity_mps = closest_vel;\n-  for (size_t i = closest_idx + 1; i < path.points.size(); ++i) {\n-    const double dist =\n-      tier4_autoware_utils::calcDistance2d(path.points.at(i - 1), path.points.at(i));\n-    dist_sum += dist;\n-    // calc vel in idx i+1 (v_{i+1}^2 - v_{i}^2 = 2ax)\n-    const double next_vel = std::min(\n-      std::sqrt(std::pow(closest_vel, 2.0) + 2.0 * planner_param_.intersection_max_acc * dist),\n-      planner_param_.intersection_velocity);\n-    // calc average vel in idx i~i+1\n-    const double average_vel =\n-      std::min((closest_vel + next_vel) / 2.0, planner_param_.intersection_velocity);\n-    // passing_time += dist / average_vel;\n-    // time_distance_array.emplace_back(passing_time, dist_sum);\n-    auto reference_point = path.points[i];\n-    reference_point.point.longitudinal_velocity_mps = average_vel;\n+  for (size_t i = closest_idx; i < path.points.size(); ++i) {\n+    auto reference_point = path.points.at(i);\n+    reference_point.point.longitudinal_velocity_mps = planner_param_.intersection_velocity;\n     reference_path.points.push_back(reference_point);\n-\n-    closest_vel = next_vel;\n-\n     bool has_objective_lane_id = util::hasLaneId(path.points.at(i), objective_lane_id);\n-\n     if (assigned_lane_found && !has_objective_lane_id) {\n       break;\n     }\n@@ -510,23 +494,30 @@ TimeDistanceArray IntersectionModule::calcIntersectionPassingTime(\n     return {{0.0, 0.0}};  // has already passed the intersection.\n   }\n \n+  // apply smoother to reference velocity\n   PathWithLaneId smoothed_reference_path = reference_path;\n   if (!smoothPath(reference_path, smoothed_reference_path, planner_data_)) {\n     RCLCPP_WARN(logger_, \"smoothPath failed\");\n   }\n \n+  // calculate when ego is going to reach each (interpolated) points on the path\n   TimeDistanceArray time_distance_array{};\n   dist_sum = 0.0;\n   double passing_time = 0.0;\n   time_distance_array.emplace_back(passing_time, dist_sum);\n   for (size_t i = 1; i < smoothed_reference_path.points.size(); ++i) {\n-    const double dist = tier4_autoware_utils::calcDistance2d(\n-      smoothed_reference_path.points.at(i - 1), smoothed_reference_path.points.at(i));\n+    const auto & p1 = smoothed_reference_path.points.at(i - 1);\n+    const auto & p2 = smoothed_reference_path.points.at(i);\n+\n+    const double dist = tier4_autoware_utils::calcDistance2d(p1, p2);\n     dist_sum += dist;\n-    // to avoid zero division\n+\n+    // use average velocity between p1 and p2\n+    const double average_velocity =\n+      (p1.point.longitudinal_velocity_mps + p2.point.longitudinal_velocity_mps) / 2.0;\n     passing_time +=\n-      (dist / std::max<double>(\n-                0.01, smoothed_reference_path.points.at(i - 1).point.longitudinal_velocity_mps));\n+      (dist / std::max<double>(k_minimum_velocity, average_velocity));  // to avoid zero-division\n+\n     time_distance_array.emplace_back(passing_time, dist_sum);\n   }\n   RCLCPP_DEBUG(logger_, \"intersection dist = %f, passing_time = %f\", dist_sum, passing_time);"
        }
    ],
    "autowarefoundation/autoware.universe/1731": [
        {
            "sha": "870013f45466a0c0ffd4dd7464e1375de0b70ce1",
            "filename": "planning/behavior_path_planner/src/scene_module/utils/geometric_parallel_parking.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/595cbaa0cd6ffc93b4be654ea18c0be441434342/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/595cbaa0cd6ffc93b4be654ea18c0be441434342/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp?ref=595cbaa0cd6ffc93b4be654ea18c0be441434342",
            "patch": "@@ -460,8 +460,8 @@ std::vector<PathWithLaneId> GeometricParallelParking::planOneTrial(\n   // debug\n   Cr_.pose = Cr;\n   Cr_.header = planner_data_->route_handler->getRouteHeader();\n-  Cr_.pose = Cr;\n-  Cr_.header = planner_data_->route_handler->getRouteHeader();\n+  Cl_.pose = Cl;\n+  Cl_.header = planner_data_->route_handler->getRouteHeader();\n   start_pose_.pose = start_pose;\n   start_pose_.header = planner_data_->route_handler->getRouteHeader();\n   arc_end_pose_.pose = arc_end_pose;"
        }
    ],
    "autowarefoundation/autoware.universe/1756": [
        {
            "sha": "6970d489ff340a8b8971ca3cf29cfa43a2d85667",
            "filename": "system/default_ad_api_helpers/automatic_pose_initializer/src/automatic_pose_initializer.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/394cc32b2cbfb2e18c43e0a5e9e751131edfa1ee/system%2Fdefault_ad_api_helpers%2Fautomatic_pose_initializer%2Fsrc%2Fautomatic_pose_initializer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/394cc32b2cbfb2e18c43e0a5e9e751131edfa1ee/system%2Fdefault_ad_api_helpers%2Fautomatic_pose_initializer%2Fsrc%2Fautomatic_pose_initializer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdefault_ad_api_helpers%2Fautomatic_pose_initializer%2Fsrc%2Fautomatic_pose_initializer.cpp?ref=394cc32b2cbfb2e18c43e0a5e9e751131edfa1ee",
            "patch": "@@ -35,13 +35,15 @@ AutomaticPoseInitializer::AutomaticPoseInitializer() : Node(\"automatic_pose_init\n \n void AutomaticPoseInitializer::on_timer()\n {\n+  timer_->cancel();\n   if (state_.state == State::Message::UNINITIALIZED) {\n     try {\n       const auto req = std::make_shared<Initialize::Service::Request>();\n       cli_initialize_->call(req);\n     } catch (const component_interface_utils::ServiceException & error) {\n     }\n   }\n+  timer_->reset();\n }\n \n }  // namespace automatic_pose_initializer"
        }
    ],
    "autowarefoundation/autoware.universe/1760": [
        {
            "sha": "e0ffe51d188fdb14a00b1f6ab255ac2cd4f9e1ef",
            "filename": "planning/mission_planner/src/mission_planner_lanelet2/utility_functions.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8744be07b3fd0dae0be3ef685a7168db7cf337ba/planning%2Fmission_planner%2Fsrc%2Fmission_planner_lanelet2%2Futility_functions.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8744be07b3fd0dae0be3ef685a7168db7cf337ba/planning%2Fmission_planner%2Fsrc%2Fmission_planner_lanelet2%2Futility_functions.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmission_planner%2Fsrc%2Fmission_planner_lanelet2%2Futility_functions.cpp?ref=8744be07b3fd0dae0be3ef685a7168db7cf337ba",
            "patch": "@@ -28,22 +28,22 @@ bool exists(const std::unordered_set<lanelet::Id> & set, const lanelet::Id & id)\n   return set.find(id) != set.end();\n }\n \n-std::string toString(const geometry_msgs::msg::Pose & pose)\n+std::string to_string(const geometry_msgs::msg::Pose & pose)\n {\n   std::stringstream ss;\n   ss << \"(\" << pose.position.x << \", \" << pose.position.y << \",\" << pose.position.z << \")\";\n   return ss.str();\n }\n \n-void setColor(std_msgs::msg::ColorRGBA * cl, double r, double g, double b, double a)\n+void set_color(std_msgs::msg::ColorRGBA * cl, double r, double g, double b, double a)\n {\n   cl->r = r;\n   cl->g = g;\n   cl->b = b;\n   cl->a = a;\n }\n \n-void insertMarkerArray(\n+void insert_marker_array(\n   visualization_msgs::msg::MarkerArray * a1, const visualization_msgs::msg::MarkerArray & a2)\n {\n   a1->markers.insert(a1->markers.end(), a2.markers.begin(), a2.markers.end());"
        }
    ],
    "autowarefoundation/autoware.universe/1768": [
        {
            "sha": "1ed17cd4be341ae6626813ad703902f92e37622e",
            "filename": "planning/behavior_velocity_planner/src/utilization/util.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b5b0e921aaaf2d7757926ed2414d87b6ddd62128/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b5b0e921aaaf2d7757926ed2414d87b6ddd62128/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Futilization%2Futil.cpp?ref=b5b0e921aaaf2d7757926ed2414d87b6ddd62128",
            "patch": "@@ -212,7 +212,7 @@ void insertVelocity(\n     std::min(static_cast<int>(insert_index + 1), static_cast<int>(path.points.size() - 1));\n   for (int i = min_idx; i <= max_idx; i++) {\n     if (calcDistance2d(path.points.at(static_cast<size_t>(i)), path_point) < min_distance) {\n-      path.points.at(i).point.longitudinal_velocity_mps = 0;\n+      path.points.at(i).point.longitudinal_velocity_mps = v;\n       already_has_path_point = true;\n       insert_index = static_cast<size_t>(i);\n       // set velocity from is going to insert min velocity later"
        }
    ],
    "autowarefoundation/autoware.universe/1774": [
        {
            "sha": "26ba30840b1784e97897260a0a4e0d7e43a7e05a",
            "filename": "common/autoware_auto_perception_rviz_plugin/src/object_detection/detected_objects_display.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7975668b6a3387c0ef8be628cf6ec72f9a77b581/common%2Fautoware_auto_perception_rviz_plugin%2Fsrc%2Fobject_detection%2Fdetected_objects_display.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7975668b6a3387c0ef8be628cf6ec72f9a77b581/common%2Fautoware_auto_perception_rviz_plugin%2Fsrc%2Fobject_detection%2Fdetected_objects_display.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fautoware_auto_perception_rviz_plugin%2Fsrc%2Fobject_detection%2Fdetected_objects_display.cpp?ref=7975668b6a3387c0ef8be628cf6ec72f9a77b581",
            "patch": "@@ -65,6 +65,7 @@ void DetectedObjectsDisplay::processMessage(DetectedObjects::ConstSharedPtr msg)\n     if (velocity_text_marker) {\n       auto velocity_text_marker_ptr = velocity_text_marker.value();\n       velocity_text_marker_ptr->header = msg->header;\n+      velocity_text_marker_ptr->id = id++;\n       add_marker(velocity_text_marker_ptr);\n     }\n \n@@ -74,6 +75,7 @@ void DetectedObjectsDisplay::processMessage(DetectedObjects::ConstSharedPtr msg)\n     if (twist_marker) {\n       auto twist_marker_ptr = twist_marker.value();\n       twist_marker_ptr->header = msg->header;\n+      twist_marker_ptr->id = id++;\n       add_marker(twist_marker_ptr);\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/1781": [
        {
            "sha": "9ffb3349435e55bc26a367a0068eaf88082493b6",
            "filename": "perception/heatmap_visualizer/include/heatmap_visualizer/heatmap_visualizer_node.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c578b87b8db54e7ff5b72b253cbd11cc50a31cab/perception%2Fheatmap_visualizer%2Finclude%2Fheatmap_visualizer%2Fheatmap_visualizer_node.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c578b87b8db54e7ff5b72b253cbd11cc50a31cab/perception%2Fheatmap_visualizer%2Finclude%2Fheatmap_visualizer%2Fheatmap_visualizer_node.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fheatmap_visualizer%2Finclude%2Fheatmap_visualizer%2Fheatmap_visualizer_node.hpp?ref=c578b87b8db54e7ff5b72b253cbd11cc50a31cab",
            "patch": "@@ -66,8 +66,8 @@ class HeatmapVisualizerNode : public rclcpp::Node\n   float map_length_;\n   float map_resolution_;\n   bool use_confidence_;\n-  std::vector<std::string> class_names_{\"CAR\",     \"TRUCK\",     \"BUS\",       \"TRAILER\",\n-                                        \"BICYCLE\", \"MOTORBIKE\", \"PEDESTRIAN\"};\n+  std::vector<std::string> class_names_{\"UNKNWON\", \"CAR\",     \"TRUCK\",     \"BUS\",\n+                                        \"TRAILER\", \"BICYCLE\", \"MOTORBIKE\", \"PEDESTRIAN\"};\n   bool rename_car_to_truck_and_bus_;\n \n   // Number of width and height cells"
        }
    ],
    "autowarefoundation/autoware.universe/1783": [
        {
            "sha": "fc29f0006938535b57a14d925c52e127e9cc2617",
            "filename": "system/system_monitor/src/cpu_monitor/cpu_monitor_base.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/05941990dcf1019d9214ba7eb087c8817e74f383/system%2Fsystem_monitor%2Fsrc%2Fcpu_monitor%2Fcpu_monitor_base.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/05941990dcf1019d9214ba7eb087c8817e74f383/system%2Fsystem_monitor%2Fsrc%2Fcpu_monitor%2Fcpu_monitor_base.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fsystem_monitor%2Fsrc%2Fcpu_monitor%2Fcpu_monitor_base.cpp?ref=05941990dcf1019d9214ba7eb087c8817e74f383",
            "patch": "@@ -298,7 +298,8 @@ int CPUMonitorBase::CpuUsageToLevel(const std::string & cpu_name, float usage)\n   if (usage >= usage_warn_) {\n     if (usage_warn_check_cnt_[idx] < usage_warn_count_) {\n       usage_warn_check_cnt_[idx]++;\n-    } else {\n+    }\n+    if (usage_warn_check_cnt_[idx] >= usage_warn_count_) {\n       level = DiagStatus::WARN;\n     }\n   } else {\n@@ -307,7 +308,8 @@ int CPUMonitorBase::CpuUsageToLevel(const std::string & cpu_name, float usage)\n   if (usage >= usage_error_) {\n     if (usage_error_check_cnt_[idx] < usage_error_count_) {\n       usage_error_check_cnt_[idx]++;\n-    } else {\n+    }\n+    if (usage_error_check_cnt_[idx] >= usage_error_count_) {\n       level = DiagStatus::ERROR;\n     }\n   } else {"
        }
    ],
    "autowarefoundation/autoware.universe/1790": [
        {
            "sha": "0c558ca802c6d43bf429fa323e8129a4231ee1e2",
            "filename": "common/tier4_screen_capture_rviz_plugin/src/screen_capture_panel.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 10,
            "changes": 22,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cf5cba75477d45d639a771bd9bbefd70ef41569e/common%2Ftier4_screen_capture_rviz_plugin%2Fsrc%2Fscreen_capture_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cf5cba75477d45d639a771bd9bbefd70ef41569e/common%2Ftier4_screen_capture_rviz_plugin%2Fsrc%2Fscreen_capture_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_screen_capture_rviz_plugin%2Fsrc%2Fscreen_capture_panel.cpp?ref=cf5cba75477d45d639a771bd9bbefd70ef41569e",
            "patch": "@@ -131,12 +131,12 @@ void AutowareScreenCapturePanel::onClickVideoCapture()\n       {\n         int fourcc = cv::VideoWriter::fourcc('h', '2', '6', '4');  // mp4\n         QScreen * screen = QGuiApplication::primaryScreen();\n-        const auto qsize = screen->grabWindow(main_window_->winId())\n-                             .toImage()\n-                             .convertToFormat(QImage::Format_RGB888)\n-                             .rgbSwapped()\n-                             .size();\n-        current_movie_size_ = cv::Size(qsize.width(), qsize.height());\n+        const auto q_size = screen->grabWindow(main_window_->winId())\n+                              .toImage()\n+                              .convertToFormat(QImage::Format_RGB888)\n+                              .rgbSwapped()\n+                              .size();\n+        current_movie_size_ = cv::Size(q_size.width(), q_size.height());\n         writer_.open(\n           \"capture/\" + capture_file_name_ + \".mp4\", fourcc, capture_hz_->value(),\n           current_movie_size_);\n@@ -160,12 +160,14 @@ void AutowareScreenCapturePanel::onTimer()\n   // this is deprecated but only way to capture nicely\n   QScreen * screen = QGuiApplication::primaryScreen();\n   QPixmap original_pixmap = screen->grabWindow(main_window_->winId());\n-  const auto qimage = original_pixmap.toImage().convertToFormat(QImage::Format_RGB888).rgbSwapped();\n-  const int h = qimage.height();\n-  const int w = qimage.width();\n+  const auto q_image =\n+    original_pixmap.toImage().convertToFormat(QImage::Format_RGB888).rgbSwapped();\n+  const int h = q_image.height();\n+  const int w = q_image.width();\n   cv::Size size = cv::Size(w, h);\n   cv::Mat image(\n-    size, CV_8UC3, const_cast<uchar *>(qimage.bits()), static_cast<size_t>(qimage.bytesPerLine()));\n+    size, CV_8UC3, const_cast<uchar *>(q_image.bits()),\n+    static_cast<size_t>(q_image.bytesPerLine()));\n   if (size != current_movie_size_) {\n     cv::Mat new_image;\n     cv::resize(image, new_image, current_movie_size_);"
        }
    ],
    "autowarefoundation/autoware.universe/1817": [
        {
            "sha": "7419a7e66a157666a6289ebe5f2015372ed59646",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 7,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/909b1235887c0e8994f1144731220089454d1b66/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/909b1235887c0e8994f1144731220089454d1b66/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=909b1235887c0e8994f1144731220089454d1b66",
            "patch": "@@ -1706,18 +1706,14 @@ void AvoidanceModule::generateExtendedDrivableArea(ShiftedPath * shifted_path) c\n   lanelet::ConstLanelets extended_lanelets = current_lanes;\n \n   for (const auto & current_lane : current_lanes) {\n-    if (!parameters_->enable_avoidance_over_opposite_direction) {\n+    if (!parameters_->enable_avoidance_over_same_direction) {\n       break;\n     }\n \n     const auto extend_from_current_lane = std::invoke(\n       [this, &route_handler](const lanelet::ConstLanelet & lane) {\n-        const auto ignore_opposite = !parameters_->enable_avoidance_over_opposite_direction;\n-        if (ignore_opposite) {\n-          return route_handler->getAllSharedLineStringLanelets(lane, true, true, ignore_opposite);\n-        }\n-\n-        return route_handler->getAllSharedLineStringLanelets(lane);\n+        const auto enable_opposite = parameters_->enable_avoidance_over_opposite_direction;\n+        return route_handler->getAllSharedLineStringLanelets(lane, true, true, enable_opposite);\n       },\n       current_lane);\n     extended_lanelets.reserve(extended_lanelets.size() + extend_from_current_lane.size());"
        }
    ],
    "autowarefoundation/autoware.universe/1822": [
        {
            "sha": "4bca890af3bb2391e02624cf6bbb3b14b92cfb75",
            "filename": "localization/ekf_localizer/src/ekf_localizer.cpp",
            "status": "modified",
            "additions": 28,
            "deletions": 27,
            "changes": 55,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cc3bcb7c03a3fa304d2c29de28517922dc613825/localization%2Fekf_localizer%2Fsrc%2Fekf_localizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cc3bcb7c03a3fa304d2c29de28517922dc613825/localization%2Fekf_localizer%2Fsrc%2Fekf_localizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fekf_localizer%2Fsrc%2Fekf_localizer.cpp?ref=cc3bcb7c03a3fa304d2c29de28517922dc613825",
            "patch": "@@ -197,46 +197,47 @@ void EKFLocalizer::timerCallback()\n     DEBUG_INFO(get_logger(), \"------------------------- end Twist -------------------------\\n\");\n   }\n \n-  /* set current pose, twist */\n-  setCurrentResult();\n+  const double x = ekf_.getXelement(IDX::X);\n+  const double y = ekf_.getXelement(IDX::Y);\n+  const double z = z_filter_.get_x();\n \n-  /* publish ekf result */\n-  publishEstimateResult();\n-}\n+  const double biased_yaw = ekf_.getXelement(IDX::YAW);\n+  const double yaw_bias = ekf_.getXelement(IDX::YAWB);\n \n-void EKFLocalizer::showCurrentX()\n-{\n-  if (show_debug_info_) {\n-    Eigen::MatrixXd X(dim_x_, 1);\n-    ekf_.getLatestX(X);\n-    DEBUG_PRINT_MAT(X.transpose());\n-  }\n-}\n+  const double roll = roll_filter_.get_x();\n+  const double pitch = pitch_filter_.get_x();\n+  const double yaw = biased_yaw + yaw_bias;\n+  const double vx = ekf_.getXelement(IDX::VX);\n+  const double wz = ekf_.getXelement(IDX::WZ);\n \n-/*\n- * setCurrentResult\n- */\n-void EKFLocalizer::setCurrentResult()\n-{\n   current_ekf_pose_.header.frame_id = pose_frame_id_;\n   current_ekf_pose_.header.stamp = this->now();\n-  current_ekf_pose_.pose.position.x = ekf_.getXelement(IDX::X);\n-  current_ekf_pose_.pose.position.y = ekf_.getXelement(IDX::Y);\n-  current_ekf_pose_.pose.position.z = z_filter_.get_x();\n-  double roll = roll_filter_.get_x();\n-  double pitch = pitch_filter_.get_x();\n-  double yaw = ekf_.getXelement(IDX::YAW) + ekf_.getXelement(IDX::YAWB);\n+  current_ekf_pose_.pose.position.x = x;\n+  current_ekf_pose_.pose.position.y = y;\n+  current_ekf_pose_.pose.position.z = z;\n   current_ekf_pose_.pose.orientation =\n     tier4_autoware_utils::createQuaternionFromRPY(roll, pitch, yaw);\n \n   current_biased_ekf_pose_ = current_ekf_pose_;\n   current_biased_ekf_pose_.pose.orientation =\n-    tier4_autoware_utils::createQuaternionFromRPY(roll, pitch, ekf_.getXelement(IDX::YAW));\n+    tier4_autoware_utils::createQuaternionFromRPY(roll, pitch, biased_yaw);\n \n   current_ekf_twist_.header.frame_id = \"base_link\";\n   current_ekf_twist_.header.stamp = this->now();\n-  current_ekf_twist_.twist.linear.x = ekf_.getXelement(IDX::VX);\n-  current_ekf_twist_.twist.angular.z = ekf_.getXelement(IDX::WZ);\n+  current_ekf_twist_.twist.linear.x = vx;\n+  current_ekf_twist_.twist.angular.z = wz;\n+\n+  /* publish ekf result */\n+  publishEstimateResult();\n+}\n+\n+void EKFLocalizer::showCurrentX()\n+{\n+  if (show_debug_info_) {\n+    Eigen::MatrixXd X(dim_x_, 1);\n+    ekf_.getLatestX(X);\n+    DEBUG_PRINT_MAT(X.transpose());\n+  }\n }\n \n /*"
        }
    ],
    "autowarefoundation/autoware.universe/1825": [
        {
            "sha": "cf0870a5806cfd335764bfc26cbe957049fd2f8a",
            "filename": "perception/crosswalk_traffic_light_estimator/src/node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/89c9d023c65486c7465da6c365062e2aa3514c35/perception%2Fcrosswalk_traffic_light_estimator%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/89c9d023c65486c7465da6c365062e2aa3514c35/perception%2Fcrosswalk_traffic_light_estimator%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fcrosswalk_traffic_light_estimator%2Fsrc%2Fnode.cpp?ref=89c9d023c65486c7465da6c365062e2aa3514c35",
            "patch": "@@ -203,13 +203,15 @@ void CrosswalkTrafficLightEstimatorNode::updateLastDetectedSignal(\n     last_detect_color_.at(id) = input_traffic_signal.second;\n   }\n \n+  std::vector<int32_t> erase_id_list;\n   for (auto & last_traffic_signal : last_detect_color_) {\n     const auto & id = last_traffic_signal.second.map_primitive_id;\n \n     if (traffic_light_id_map.count(id) == 0) {\n-      last_detect_color_.erase(id);\n+      erase_id_list.emplace_back(id);\n     }\n   }\n+  for (const auto id : erase_id_list) last_detect_color_.erase(id);\n }\n \n void CrosswalkTrafficLightEstimatorNode::setCrosswalkTrafficSignal("
        }
    ],
    "autowarefoundation/autoware.universe/1830": [
        {
            "sha": "af069c3732f5fdddc4c8f02d8ff0c67d54a3537e",
            "filename": "perception/lidar_centerpoint/include/lidar_centerpoint/centerpoint_config.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e9a8194b5806b5df4293746d7305413ce8c0133d/perception%2Flidar_centerpoint%2Finclude%2Flidar_centerpoint%2Fcenterpoint_config.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e9a8194b5806b5df4293746d7305413ce8c0133d/perception%2Flidar_centerpoint%2Finclude%2Flidar_centerpoint%2Fcenterpoint_config.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_centerpoint%2Finclude%2Flidar_centerpoint%2Fcenterpoint_config.hpp?ref=e9a8194b5806b5df4293746d7305413ce8c0133d",
            "patch": "@@ -57,7 +57,7 @@ class CenterPointConfig\n       circle_nms_dist_threshold_ = circle_nms_dist_threshold;\n     }\n \n-    if (yaw_norm_threshold > 0 && yaw_norm_threshold < 1) {\n+    if (yaw_norm_threshold >= 0 && yaw_norm_threshold < 1) {\n       yaw_norm_threshold_ = yaw_norm_threshold;\n     }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1833": [
        {
            "sha": "42278ec4f09e147a6dacbb8d798f8e582a9261e2",
            "filename": "launch/tier4_perception_launch/launch/obstacle_segmentation/ground_segmentation/ground_segmentation.launch.py",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/62eaf0d3686faeb876f5510e0317598387f5d8d1/launch%2Ftier4_perception_launch%2Flaunch%2Fobstacle_segmentation%2Fground_segmentation%2Fground_segmentation.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/62eaf0d3686faeb876f5510e0317598387f5d8d1/launch%2Ftier4_perception_launch%2Flaunch%2Fobstacle_segmentation%2Fground_segmentation%2Fground_segmentation.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobstacle_segmentation%2Fground_segmentation%2Fground_segmentation.launch.py?ref=62eaf0d3686faeb876f5510e0317598387f5d8d1",
            "patch": "@@ -465,7 +465,7 @@ def launch_setup(context, *args, **kwargs):\n     components = []\n     components.extend(\n         pipeline.create_single_frame_obstacle_segmentation_components(\n-            input_topic=\"/sensing/lidar/concatenated/pointcloud\",\n+            input_topic=LaunchConfiguration(\"input/pointcloud\"),\n             output_topic=pipeline.single_frame_obstacle_seg_output,\n         )\n     )\n@@ -521,6 +521,7 @@ def add_launch_arg(name: str, default_value=None):\n     add_launch_arg(\"use_pointcloud_container\", \"False\")\n     add_launch_arg(\"container_name\", \"perception_pipeline_container\")\n     add_launch_arg(\"tier4_perception_launch_param_path\", \"tier4_perception_launch parameter path\")\n+    add_launch_arg(\"input/pointcloud\", \"/sensing/lidar/concatenated/pointcloud\")\n \n     set_container_executable = SetLaunchConfiguration(\n         \"container_executable\","
        }
    ],
    "autowarefoundation/autoware.universe/1834": [
        {
            "sha": "4518de37b7034ffc0d63f3757b2db3899e747be3",
            "filename": "control/joy_controller/README.md",
            "status": "modified",
            "additions": 24,
            "deletions": 1,
            "changes": 25,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/46c58662716be3f137fc668f0cfcf2fa4f6547a5/control%2Fjoy_controller%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/46c58662716be3f137fc668f0cfcf2fa4f6547a5/control%2Fjoy_controller%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fjoy_controller%2FREADME.md?ref=46c58662716be3f137fc668f0cfcf2fa4f6547a5",
            "patch": "@@ -44,8 +44,9 @@\n \n ## P65 Joystick Key Map\n \n-| Acceleration         | R2                    |\n+| Action               | Button                |\n | -------------------- | --------------------- |\n+| Acceleration         | R2                    |\n | Brake                | L2                    |\n | Steering             | Left Stick Left Right |\n | Shift up             | Cursor Up             |\n@@ -62,3 +63,25 @@\n | Autoware Disengage   | Y                     |\n | Vehicle Engage       | PS                    |\n | Vehicle Disengage    | Right Trigger         |\n+\n+## DS4 Joystick Key Map\n+\n+| Action               | Button                     |\n+| -------------------- | -------------------------- |\n+| Acceleration         | R2, \u00d7, or Right Stick Up   |\n+| Brake                | L2, \u25a1, or Right Stick Down |\n+| Steering             | Left Stick Left Right      |\n+| Shift up             | Cursor Up                  |\n+| Shift down           | Cursor Down                |\n+| Shift Drive          | Cursor Left                |\n+| Shift Reverse        | Cursor Right               |\n+| Turn Signal Left     | L1                         |\n+| Turn Signal Right    | R1                         |\n+| Clear Turn Signal    | SHARE                      |\n+| Gate Mode            | OPTIONS                    |\n+| Emergency Stop       | PS                         |\n+| Clear Emergency Stop | PS                         |\n+| Autoware Engage      | \u25cb                          |\n+| Autoware Disengage   | \u25cb                          |\n+| Vehicle Engage       | \u25b3                          |\n+| Vehicle Disengage    | \u25b3                          |"
        }
    ],
    "autowarefoundation/autoware.universe/1860": [
        {
            "sha": "28dd33170ba6cc02f9a2a57634be0f057da26006",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/pull_over_module.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 12,
            "changes": 21,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/262a9fbcc3ae59dc09187ff8ae418b7e75830963/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/262a9fbcc3ae59dc09187ff8ae418b7e75830963/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp?ref=262a9fbcc3ae59dc09187ff8ae418b7e75830963",
            "patch": "@@ -139,17 +139,17 @@ void PullOverModule::onEntry()\n     *last_received_time_ != planner_data_->route_handler->getRouteHeader().stamp) {\n     // Initialize parallel parking planner status\n     parallel_parking_parameters_ = getGeometricPullOverParameters();\n-\n     resetStatus();\n   }\n   last_received_time_ =\n     std::make_unique<rclcpp::Time>(planner_data_->route_handler->getRouteHeader().stamp);\n \n   // Use refined goal as modified goal when disabling goal research\n+  refined_goal_pose_ = calcRefinedGoal();\n   if (!parameters_.enable_goal_research) {\n     goal_candidates_.clear();\n-    GoalCandidate goal_candidate;\n-    goal_candidate.goal_pose = calcRefinedGoal();\n+    GoalCandidate goal_candidate{};\n+    goal_candidate.goal_pose = refined_goal_pose_;\n     goal_candidate.distance_from_original_goal = 0.0;\n     goal_candidates_.push_back(goal_candidate);\n   }\n@@ -250,10 +250,9 @@ void PullOverModule::researchGoal()\n {\n   // Find goals in pull over areas.\n   goal_candidates_.clear();\n-  const Pose refined_goal_pose = calcRefinedGoal();\n   for (double dx = -parameters_.backward_goal_search_length;\n        dx <= parameters_.forward_goal_search_length; dx += parameters_.goal_search_interval) {\n-    const Pose search_pose = calcOffsetPose(refined_goal_pose, dx, 0, 0);\n+    const Pose search_pose = calcOffsetPose(refined_goal_pose_, dx, 0, 0);\n     if (checkCollisionWithPose(search_pose)) {\n       continue;\n     }\n@@ -267,7 +266,7 @@ void PullOverModule::researchGoal()\n     GoalCandidate goal_candidate;\n     goal_candidate.goal_pose = search_pose;\n     goal_candidate.distance_from_original_goal =\n-      std::abs(inverseTransformPose(search_pose, refined_goal_pose).position.x);\n+      std::abs(inverseTransformPose(search_pose, refined_goal_pose_).position.x);\n     goal_candidates_.push_back(goal_candidate);\n   }\n   // Sort with distance from original goal\n@@ -736,14 +735,13 @@ PathWithLaneId PullOverModule::getReferencePath() const\n   const auto & current_pose = planner_data_->self_pose->pose;\n   const auto & common_parameters = planner_data_->parameters;\n \n-  const Pose refined_goal_pose = calcRefinedGoal();\n   if (status_.current_lanes.empty()) {\n     return PathWithLaneId{};\n   }\n   const auto arc_coordinates =\n-    lanelet::utils::getArcCoordinates(status_.current_lanes, refined_goal_pose);\n+    lanelet::utils::getArcCoordinates(status_.current_lanes, refined_goal_pose_);\n   const Pose search_start_pose = calcOffsetPose(\n-    refined_goal_pose, -parameters_.backward_goal_search_length, -arc_coordinates.distance, 0);\n+    refined_goal_pose_, -parameters_.backward_goal_search_length, -arc_coordinates.distance, 0);\n   // if not approved, stop parking start position or goal search start position.\n   const Pose stop_pose = status_.is_safe ? getParkingStartPose() : search_start_pose;\n \n@@ -1026,11 +1024,10 @@ void PullOverModule::setDebugData()\n \n   // Visualize pull over areas\n   if (parameters_.enable_goal_research) {\n-    const Pose refined_goal_pose = calcRefinedGoal();\n     const Pose start_pose =\n-      calcOffsetPose(refined_goal_pose, -parameters_.backward_goal_search_length, 0, 0);\n+      calcOffsetPose(refined_goal_pose_, -parameters_.backward_goal_search_length, 0, 0);\n     const Pose end_pose =\n-      calcOffsetPose(refined_goal_pose, parameters_.forward_goal_search_length, 0, 0);\n+      calcOffsetPose(refined_goal_pose_, parameters_.forward_goal_search_length, 0, 0);\n     // marker_array.markers.push_back(createParkingAreaMarker(start_pose, end_pose, 0));\n     const auto header = planner_data_->route_handler->getRouteHeader();\n     const auto color = status_.has_decided_path ? createMarkerColor(1.0, 1.0, 0.0, 0.999)  // yellow"
        }
    ],
    "autowarefoundation/autoware.universe/1861": [
        {
            "sha": "b981c3fc1777035918587d432a570c20cc4c88b2",
            "filename": "planning/obstacle_cruise_planner/src/planner_interface.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/49fe00b5ef9d014ebd6846b391c133428b724b65/planning%2Fobstacle_cruise_planner%2Fsrc%2Fplanner_interface.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/49fe00b5ef9d014ebd6846b391c133428b724b65/planning%2Fobstacle_cruise_planner%2Fsrc%2Fplanner_interface.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Fsrc%2Fplanner_interface.cpp?ref=49fe00b5ef9d014ebd6846b391c133428b724b65",
            "patch": "@@ -37,7 +37,9 @@ tier4_planning_msgs::msg::StopReasonArray makeStopReasonArray(\n   // create stop factor\n   tier4_planning_msgs::msg::StopFactor stop_factor;\n   stop_factor.stop_pose = stop_pose;\n-  stop_factor.stop_factor_points.emplace_back(stop_obstacle.collision_points.front().point);\n+  geometry_msgs::msg::Point stop_factor_point = stop_obstacle.collision_points.front().point;\n+  stop_factor_point.z = stop_pose.position.z;\n+  stop_factor.stop_factor_points.emplace_back(stop_factor_point);\n \n   // create stop reason stamped\n   tier4_planning_msgs::msg::StopReason stop_reason_msg;"
        }
    ],
    "autowarefoundation/autoware.universe/1863": [
        {
            "sha": "569739882f63a02c2298cbe5511ab82f2183dbbc",
            "filename": "common/motion_utils/src/resample/resample.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/90430b0b79c61527629e6298b7f35038898cb8c3/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/90430b0b79c61527629e6298b7f35038898cb8c3/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp?ref=90430b0b79c61527629e6298b7f35038898cb8c3",
            "patch": "@@ -56,7 +56,7 @@ std::vector<geometry_msgs::msg::Pose> resamplePath(\n     if (ds < CLOSE_S_THRESHOLD) {\n       continue;\n     }\n-    input_arclength.push_back(ds + input_arclength.at(i - 1));\n+    input_arclength.push_back(ds + input_arclength.back());\n     x.push_back(curr_pt.position.x);\n     y.push_back(curr_pt.position.y);\n     z.push_back(curr_pt.position.z);\n@@ -153,7 +153,7 @@ autoware_auto_planning_msgs::msg::PathWithLaneId resamplePath(\n     if (ds < CLOSE_S_THRESHOLD) {\n       continue;\n     }\n-    input_arclength.push_back(ds + input_arclength.at(i - 1));\n+    input_arclength.push_back(ds + input_arclength.back());\n     input_pose.push_back(curr_pt.pose);\n     v_lon.push_back(curr_pt.longitudinal_velocity_mps);\n     v_lat.push_back(curr_pt.lateral_velocity_mps);\n@@ -317,7 +317,7 @@ autoware_auto_planning_msgs::msg::Path resamplePath(\n     if (ds < CLOSE_S_THRESHOLD) {\n       continue;\n     }\n-    input_arclength.push_back(ds + input_arclength.at(i - 1));\n+    input_arclength.push_back(ds + input_arclength.back());\n     input_pose.push_back(curr_pt.pose);\n     v_lon.push_back(curr_pt.longitudinal_velocity_mps);\n     v_lat.push_back(curr_pt.lateral_velocity_mps);\n@@ -414,7 +414,7 @@ autoware_auto_planning_msgs::msg::Trajectory resampleTrajectory(\n     if (ds < CLOSE_S_THRESHOLD) {\n       continue;\n     }\n-    input_arclength.push_back(ds + input_arclength.at(i - 1));\n+    input_arclength.push_back(ds + input_arclength.back());\n     input_pose.push_back(curr_pt.pose);\n     v_lon.push_back(curr_pt.longitudinal_velocity_mps);\n     v_lat.push_back(curr_pt.lateral_velocity_mps);"
        }
    ],
    "autowarefoundation/autoware.universe/1872": [
        {
            "sha": "3f5a6412e483f7ff90eb357f91fef8b05d52fb8e",
            "filename": "planning/freespace_planner/src/freespace_planner/freespace_planner_node.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 3,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a7de81faa1778c21ac8542e2fbc01f8bbb280559/planning%2Ffreespace_planner%2Fsrc%2Ffreespace_planner%2Ffreespace_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a7de81faa1778c21ac8542e2fbc01f8bbb280559/planning%2Ffreespace_planner%2Fsrc%2Ffreespace_planner%2Ffreespace_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Ffreespace_planner%2Fsrc%2Ffreespace_planner%2Ffreespace_planner_node.cpp?ref=a7de81faa1778c21ac8542e2fbc01f8bbb280559",
            "patch": "@@ -191,6 +191,15 @@ Trajectory createStopTrajectory(const PoseStamped & current_pose)\n   return createTrajectory(current_pose, waypoints, 0.0);\n }\n \n+Trajectory createStopTrajectory(const Trajectory & trajectory)\n+{\n+  Trajectory stop_trajectory = trajectory;\n+  for (size_t i = 0; i < trajectory.points.size(); ++i) {\n+    stop_trajectory.points.at(i).longitudinal_velocity_mps = 0.0;\n+  }\n+  return stop_trajectory;\n+}\n+\n bool isStopped(\n   const std::deque<Odometry::ConstSharedPtr> & odom_buffer, const double th_stopped_velocity_mps)\n {\n@@ -429,14 +438,16 @@ void FreespacePlannerNode::onTimer()\n \n   initializePlanningAlgorithm();\n   if (isPlanRequired()) {\n-    reset();\n-\n     // Stop before planning new trajectory\n-    const auto stop_trajectory = createStopTrajectory(current_pose_);\n+    const auto stop_trajectory = partial_trajectory_.points.empty()\n+                                   ? createStopTrajectory(current_pose_)\n+                                   : createStopTrajectory(partial_trajectory_);\n     trajectory_pub_->publish(stop_trajectory);\n     debug_pose_array_pub_->publish(trajectory2PoseArray(stop_trajectory));\n     debug_partial_pose_array_pub_->publish(trajectory2PoseArray(stop_trajectory));\n \n+    reset();\n+\n     // Plan new trajectory\n     planTrajectory();\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/1881": [
        {
            "sha": "18d4e313f898e0bc63855d09800f6a5068fc93e3",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 0,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3e80e637fbc7a7e280f01fcad706b78edf7f0b83/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3e80e637fbc7a7e280f01fcad706b78edf7f0b83/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=3e80e637fbc7a7e280f01fcad706b78edf7f0b83",
            "patch": "@@ -1092,6 +1092,19 @@ Trajectories ObstacleAvoidancePlanner::optimizeTrajectory(\n     return getPrevTrajs(path.points);\n   }\n \n+  // NOTE: Elastic band sometimes diverges with status = \"OSQP_SOLVED\".\n+  constexpr double max_path_change_diff = 1.0e4;\n+  for (size_t i = 0; i < eb_traj->size(); ++i) {\n+    const auto & eb_pos = eb_traj->at(i).pose.position;\n+    const auto & path_pos = path.points.at(std::min(i, path.points.size() - 1)).pose.position;\n+\n+    const double diff_x = eb_pos.x - path_pos.x;\n+    const double diff_y = eb_pos.y - path_pos.y;\n+    if (max_path_change_diff < std::abs(diff_x) || max_path_change_diff < std::abs(diff_y)) {\n+      return getPrevTrajs(path.points);\n+    }\n+  }\n+\n   // EB has to be solved twice before solving MPT with fixed points\n   // since the result of EB is likely to change with/without fixing (1st/2nd EB)\n   // that makes MPT fixing points worse."
        }
    ],
    "autowarefoundation/autoware.universe/1891": [
        {
            "sha": "f9cbe4541961eb55ba778559ee51821bd92a1f19",
            "filename": "launch/tier4_planning_launch/package.xml",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/492c10d44317a8480f8f89804974383fd3a422c8/launch%2Ftier4_planning_launch%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/492c10d44317a8480f8f89804974383fd3a422c8/launch%2Ftier4_planning_launch%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_planning_launch%2Fpackage.xml?ref=492c10d44317a8480f8f89804974383fd3a422c8",
            "patch": "@@ -11,14 +11,18 @@\n \n   <build_depend>autoware_cmake</build_depend>\n \n+  <exec_depend>behavior_path_planner</exec_depend>\n   <exec_depend>behavior_velocity_planner</exec_depend>\n   <exec_depend>costmap_generator</exec_depend>\n+  <exec_depend>external_cmd_selector</exec_depend>\n   <exec_depend>external_velocity_limit_selector</exec_depend>\n   <exec_depend>freespace_planner</exec_depend>\n   <exec_depend>mission_planner</exec_depend>\n   <exec_depend>motion_velocity_smoother</exec_depend>\n   <exec_depend>obstacle_avoidance_planner</exec_depend>\n+  <exec_depend>obstacle_cruise_planner</exec_depend>\n   <exec_depend>obstacle_stop_planner</exec_depend>\n+  <exec_depend>planning_error_monitor</exec_depend>\n   <exec_depend>scenario_selector</exec_depend>\n   <exec_depend>surround_obstacle_checker</exec_depend>\n "
        }
    ],
    "autowarefoundation/autoware.universe/1896": [
        {
            "sha": "220e7e6d06f81c9c145a351620a02395a14fc598",
            "filename": "common/trtexec_vendor/CMakeLists.txt",
            "status": "modified",
            "additions": 6,
            "deletions": 2,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bcf5c62997f345eda785e5232ee07bfc30000f01/common%2Ftrtexec_vendor%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bcf5c62997f345eda785e5232ee07bfc30000f01/common%2Ftrtexec_vendor%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftrtexec_vendor%2FCMakeLists.txt?ref=bcf5c62997f345eda785e5232ee07bfc30000f01",
            "patch": "@@ -22,13 +22,17 @@ if(NOT (${CUDA_FOUND} AND ${CUDNN_FOUND} AND ${TENSORRT_FOUND}))\n   return()\n endif()\n \n+if(${TENSORRT_VERSION} VERSION_LESS 8.2.1)\n+  message(WARNING \"The tensorrt version less than 8.2.1 isn't supported.\")\n+  return()\n+endif()\n+\n set(TRTEXEC_DEFAULT_BIN /usr/src/tensorrt/bin/trtexec)\n if(NOT EXISTS TRTEXEC_DEFAULT_BIN)\n   include(FetchContent)\n   if(${TENSORRT_VERSION} VERSION_EQUAL 8.4.2)\n     set(TENSORRT_VERSION 8.4.1)\n-  endif()\n-  if(${TENSORRT_VERSION} VERSION_EQUAL 8.2.4)\n+  elseif(${TENSORRT_VERSION} VERSION_LESS_EQUAL 8.2.5 AND ${TENSORRT_VERSION} VERSION_GREATER 8.2.1)\n     set(TENSORRT_VERSION 8.2.1)\n   endif()\n   fetchcontent_declare(tensorrt"
        }
    ],
    "autowarefoundation/autoware.universe/1901": [
        {
            "sha": "6106fa86c1f59d5b66dd295c6fc67b79d89b02bc",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 26,
            "deletions": 2,
            "changes": 28,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b1e0ff513a74c6db763d5037a5c3b9602e72518f/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b1e0ff513a74c6db763d5037a5c3b9602e72518f/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=b1e0ff513a74c6db763d5037a5c3b9602e72518f",
            "patch": "@@ -865,7 +865,19 @@ boost::optional<lanelet::ConstLanelet> RouteHandler::getLeftLanelet(\n lanelet::Lanelets RouteHandler::getRightOppositeLanelets(\n   const lanelet::ConstLanelet & lanelet) const\n {\n-  return lanelet_map_ptr_->laneletLayer.findUsages(lanelet.rightBound().invert());\n+  const auto opposite_candidate_lanelets =\n+    lanelet_map_ptr_->laneletLayer.findUsages(lanelet.rightBound().invert());\n+\n+  lanelet::Lanelets opposite_lanelets;\n+  for (const auto & candidate_lanelet : opposite_candidate_lanelets) {\n+    if (candidate_lanelet.leftBound().id() == lanelet.rightBound().id()) {\n+      continue;\n+    }\n+\n+    opposite_lanelets.push_back(candidate_lanelet);\n+  }\n+\n+  return opposite_lanelets;\n }\n \n lanelet::ConstLanelets RouteHandler::getAllLeftSharedLinestringLanelets(\n@@ -943,7 +955,19 @@ lanelet::ConstLanelets RouteHandler::getAllSharedLineStringLanelets(\n \n lanelet::Lanelets RouteHandler::getLeftOppositeLanelets(const lanelet::ConstLanelet & lanelet) const\n {\n-  return lanelet_map_ptr_->laneletLayer.findUsages(lanelet.leftBound().invert());\n+  const auto opposite_candidate_lanelets =\n+    lanelet_map_ptr_->laneletLayer.findUsages(lanelet.leftBound().invert());\n+\n+  lanelet::Lanelets opposite_lanelets;\n+  for (const auto & candidate_lanelet : opposite_candidate_lanelets) {\n+    if (candidate_lanelet.rightBound().id() == lanelet.leftBound().id()) {\n+      continue;\n+    }\n+\n+    opposite_lanelets.push_back(candidate_lanelet);\n+  }\n+\n+  return opposite_lanelets;\n }\n \n lanelet::ConstLineString3d RouteHandler::getRightMostSameDirectionLinestring("
        }
    ],
    "autowarefoundation/autoware.universe/1924": [
        {
            "sha": "d43b6cc5f57c21ff181b053bcdbf26d704dbd5b0",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/816fe1213a6ad247c40358585c48f36cdccf9fc7/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/816fe1213a6ad247c40358585c48f36cdccf9fc7/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=816fe1213a6ad247c40358585c48f36cdccf9fc7",
            "patch": "@@ -2229,6 +2229,11 @@ boost::optional<AvoidPointArray> AvoidanceModule::findNewShiftPoint(\n       throw std::logic_error(\"prev_reference_ and prev_linear_shift_path_ must have same size.\");\n     }\n \n+    // new shift points must exist in front of Ego\n+    if (candidate.start_longitudinal < 0.0) {\n+      continue;\n+    }\n+\n     // TODO(Horibe): this code prohibits the changes on ego pose. Think later.\n     // if (candidate.start_idx < avoidance_data_.ego_closest_path_index) {\n     //   DEBUG_PRINT(\"%s, start_idx is behind ego. skip.\", pfx);"
        }
    ],
    "autowarefoundation/autoware.universe/1928": [
        {
            "sha": "a77258edb61a16bef25c1cc8c3a45faaf9259e98",
            "filename": "system/default_ad_api/src/routing.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/66dac6c2f183f32c6da851584d99f7c95f66e031/system%2Fdefault_ad_api%2Fsrc%2Frouting.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/66dac6c2f183f32c6da851584d99f7c95f66e031/system%2Fdefault_ad_api%2Fsrc%2Frouting.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdefault_ad_api%2Fsrc%2Frouting.cpp?ref=66dac6c2f183f32c6da851584d99f7c95f66e031",
            "patch": "@@ -22,7 +22,7 @@ RoutingNode::RoutingNode(const rclcpp::NodeOptions & options) : Node(\"routing\",\n   const auto adaptor = component_interface_utils::NodeAdaptor(this);\n   group_srv_ = create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);\n   adaptor.relay_message(pub_route_state_, sub_route_state_);\n-  adaptor.relay_message(pub_route_, sub_route_);\n+  // adaptor.relay_message(pub_route_, sub_route_);  // TODO(Takagi, Isamu): temporary disabled\n   adaptor.relay_service(cli_set_route_points_, srv_set_route_points_, group_srv_);\n   adaptor.relay_service(cli_set_route_, srv_set_route_, group_srv_);\n   adaptor.relay_service(cli_clear_route_, srv_clear_route_, group_srv_);"
        }
    ],
    "autowarefoundation/autoware.universe/1933": [
        {
            "sha": "dc35b754d0f017190e008909f1b39120e3a16aba",
            "filename": "perception/image_projection_based_fusion/src/utils/geometry.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/910ccb6813e1ed4ed008332946793226dc056944/perception%2Fimage_projection_based_fusion%2Fsrc%2Futils%2Fgeometry.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/910ccb6813e1ed4ed008332946793226dc056944/perception%2Fimage_projection_based_fusion%2Fsrc%2Futils%2Fgeometry.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2Fsrc%2Futils%2Fgeometry.cpp?ref=910ccb6813e1ed4ed008332946793226dc056944",
            "patch": "@@ -122,7 +122,7 @@ void boundingBoxToVertices(\n \n   const auto position = Eigen::Vector3d(pose.position.x, pose.position.y, pose.position.z);\n   const auto orientation = Eigen::Quaterniond(\n-    pose.orientation.x, pose.orientation.y, pose.orientation.z, pose.orientation.w);\n+    pose.orientation.w, pose.orientation.x, pose.orientation.y, pose.orientation.z);\n \n   for (const auto & corner : corners_template) {\n     Eigen::Vector3d corner_point("
        }
    ],
    "autowarefoundation/autoware.universe/1945": [
        {
            "sha": "20799155b86ad373c81982aee7fc6ab1c6cb7db1",
            "filename": "vehicle/raw_vehicle_cmd_converter/src/node.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/601c36d9dd51f578e804c067d66e74fef1665f81/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/601c36d9dd51f578e804c067d66e74fef1665f81/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fnode.cpp?ref=601c36d9dd51f578e804c067d66e74fef1665f81",
            "patch": "@@ -102,7 +102,9 @@ void RawVehicleCommandConverterNode::publishActuationCmd()\n   }\n   if (!current_twist_ptr_ || !control_cmd_ptr_ || !current_steer_ptr_) {\n     RCLCPP_WARN_EXPRESSION(\n-      get_logger(), is_debugging_, \"some of twist/control_cmd/steer pointer is null\");\n+      get_logger(), is_debugging_, \"some pointers are null: %s, %s, %s\",\n+      !current_twist_ptr_ ? \"twist\" : \"\", !control_cmd_ptr_ ? \"cmd\" : \"\",\n+      !current_steer_ptr_ ? \"steer\" : \"\");\n     return;\n   }\n   double desired_accel_cmd = 0.0;\n@@ -124,9 +126,9 @@ void RawVehicleCommandConverterNode::publishActuationCmd()\n     if (accel_cmd_is_zero) {\n       desired_brake_cmd = calculateBrakeMap(vel, acc);\n     }\n-  } else {\n-    // if conversion is disabled use acceleration as brake cmd\n-    desired_brake_cmd = (acc < 0) ? acc : 0;\n+  } else if (acc < 0) {\n+    // if conversion is disabled use negative acceleration as brake cmd\n+    desired_brake_cmd = -acc;\n   }\n   if (convert_steer_cmd_) {\n     desired_steer_cmd = calculateSteer(vel, steer, steer_rate);"
        }
    ],
    "autowarefoundation/autoware.universe/1948": [
        {
            "sha": "424ddab56849a21a64207871ff44ef7280244ee0",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/12ce85cf30f2b900e0849695375cec943893a788/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/12ce85cf30f2b900e0849695375cec943893a788/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=12ce85cf30f2b900e0849695375cec943893a788",
            "patch": "@@ -1145,12 +1145,12 @@ Trajectories ObstacleAvoidancePlanner::optimizeTrajectory(\n   constexpr double max_path_change_diff = 1.0e4;\n   for (size_t i = 0; i < eb_traj->size(); ++i) {\n     const auto & eb_pos = eb_traj->at(i).pose.position;\n-    const auto & path_pos = path.points.at(std::min(i, path.points.size() - 1)).pose.position;\n+    const auto & path_pos = p.path.points.at(std::min(i, p.path.points.size() - 1)).pose.position;\n \n     const double diff_x = eb_pos.x - path_pos.x;\n     const double diff_y = eb_pos.y - path_pos.y;\n     if (max_path_change_diff < std::abs(diff_x) || max_path_change_diff < std::abs(diff_y)) {\n-      return getPrevTrajs(path.points);\n+      return getPrevTrajs(p.path.points);\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/1961": [
        {
            "sha": "d9ed65fd9f80c96eec8a0a9a8abb944113982cd2",
            "filename": "launch/tier4_control_launch/launch/control.launch.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8319489f6024d7fb5033ed05bccd00fef06d5a3e/launch%2Ftier4_control_launch%2Flaunch%2Fcontrol.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8319489f6024d7fb5033ed05bccd00fef06d5a3e/launch%2Ftier4_control_launch%2Flaunch%2Fcontrol.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_control_launch%2Flaunch%2Fcontrol.launch.py?ref=8319489f6024d7fb5033ed05bccd00fef06d5a3e",
            "patch": "@@ -239,7 +239,7 @@ def launch_setup(context, *args, **kwargs):\n         launch_arguments=[\n             (\"use_intra_process\", LaunchConfiguration(\"use_intra_process\")),\n             (\"target_container\", \"/control/control_container\"),\n-            (\"initial_selector_mode\", \"remote\"),\n+            (\"initial_selector_mode\", LaunchConfiguration(\"initial_selector_mode\")),\n         ],\n     )\n "
        }
    ],
    "autowarefoundation/autoware.universe/1963": [
        {
            "sha": "0bba6b45bc473d07f6794813f6bbdd4889380e81",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/shift_pull_over.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 7,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/709c300dac4b73f64c2175513fddec0306847c5d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fshift_pull_over.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/709c300dac4b73f64c2175513fddec0306847c5d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fshift_pull_over.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fshift_pull_over.cpp?ref=709c300dac4b73f64c2175513fddec0306847c5d",
            "patch": "@@ -24,7 +24,6 @@\n #include <vector>\n \n namespace behavior_path_planner\n-\n {\n ShiftPullOver::ShiftPullOver(\n   rclcpp::Node & node, const PullOverParameters & parameters,\n@@ -108,15 +107,21 @@ std::vector<PullOverPath> ShiftPullOver::generatePullOverPaths(\n   const double jerk_resolution =\n     std::abs(maximum_lateral_jerk - minimum_lateral_jerk) / pull_over_sampling_num;\n \n-  const double distance_to_shoulder_lane_boundary =\n-    util::getDistanceToShoulderBoundary(shoulder_lanes, current_pose);\n-  const double offset_from_current_pose =\n-    distance_to_shoulder_lane_boundary + common_parameters.vehicle_width / 2 + margin;\n+  // calc lateral offset from road lane center line to shoulder target line.\n+  lanelet::ConstLanelet goal_closest_road_lane;\n+  lanelet::utils::query::getClosestLanelet(road_lanes, goal_pose, &goal_closest_road_lane);\n+  const auto closest_center_pose =\n+    lanelet::utils::getClosestCenterPose(goal_closest_road_lane, goal_pose.position);\n+  const double distance_from_shoulder_left_bound =\n+    util::getDistanceToShoulderBoundary(shoulder_lanes, closest_center_pose);\n+  const double offset_from_road_line_center =\n+    distance_from_shoulder_left_bound + common_parameters.vehicle_width / 2 + margin;\n \n   // shift end point in shoulder lane\n   const auto shift_end_point = std::invoke([&]() {\n     const auto arc_position_goal = lanelet::utils::getArcCoordinates(shoulder_lanes, goal_pose);\n-    const double s_start = arc_position_goal.length - after_pull_over_straight_distance;\n+    const double s_start =\n+      std::max(arc_position_goal.length - after_pull_over_straight_distance, 0.0);\n     const double s_end = s_start + std::numeric_limits<double>::epsilon();\n     const auto path = route_handler->getCenterLinePath(shoulder_lanes, s_start, s_end, true);\n     return path.points.front();\n@@ -130,7 +135,7 @@ std::vector<PullOverPath> ShiftPullOver::generatePullOverPaths(\n     PullOverPath candidate_path;\n \n     const double pull_over_distance = path_shifter.calcLongitudinalDistFromJerk(\n-      abs(offset_from_current_pose), lateral_jerk, pull_over_velocity);\n+      std::abs(offset_from_road_line_center), lateral_jerk, pull_over_velocity);\n \n     // calculate straight distance before pull over\n     const double straight_distance = std::invoke([&]() {"
        }
    ],
    "autowarefoundation/autoware.universe/1969": [
        {
            "sha": "46d0cef7bada25e39dba8d9a231ea6f00edd2f2f",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/shift_pull_over.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 7,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0c4a2032ab9f220ffc1eedc450202c85d8b89e3a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fshift_pull_over.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0c4a2032ab9f220ffc1eedc450202c85d8b89e3a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fshift_pull_over.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fshift_pull_over.cpp?ref=0c4a2032ab9f220ffc1eedc450202c85d8b89e3a",
            "patch": "@@ -167,6 +167,10 @@ std::vector<PullOverPath> ShiftPullOver::generatePullOverPaths(\n             pull_over_velocity));\n       }\n     }\n+    // resample road straight path and shift source path respectively\n+    constexpr double resample_interval{1.0};\n+    road_lane_reference_path =\n+      util::resamplePathWithSpline(road_lane_reference_path, resample_interval);\n \n     if (road_lane_reference_path.points.empty()) {\n       RCLCPP_ERROR_STREAM(\n@@ -196,18 +200,14 @@ std::vector<PullOverPath> ShiftPullOver::generatePullOverPaths(\n       const double offset = -distance_shoulder_to_target;\n       for (size_t i = 0; i < target_lane_reference_path.points.size(); ++i) {\n         {\n-          if (fabs(offset) < 1.0e-8) {\n-            RCLCPP_WARN_STREAM(\n-              rclcpp::get_logger(\"behavior_path_planner\").get_child(\"pull_over\").get_child(\"util\"),\n-              \"no offset from current lane center.\");\n-          }\n-\n           auto & p = target_lane_reference_path.points.at(i).point.pose;\n           p = tier4_autoware_utils::calcOffsetPose(p, 0, offset, 0);\n         }\n-        path_shifter.setPath(util::resamplePathWithSpline(target_lane_reference_path, 1.0));\n       }\n     }\n+    path_shifter.setPath(\n+      util::resamplePathWithSpline(target_lane_reference_path, resample_interval));\n+\n     ShiftPoint shift_point;\n     {\n       shift_point.start = road_lane_reference_path.points.back().point.pose;"
        }
    ],
    "autowarefoundation/autoware.universe/1977": [
        {
            "sha": "950319c9ea282459a969caeedd1e08560fb9fbd9",
            "filename": "common/kalman_filter/package.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bad5de6961a6a7ae8a94c57a4c9b7c4e8268bccb/common%2Fkalman_filter%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bad5de6961a6a7ae8a94c57a4c9b7c4e8268bccb/common%2Fkalman_filter%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fkalman_filter%2Fpackage.xml?ref=bad5de6961a6a7ae8a94c57a4c9b7c4e8268bccb",
            "patch": "@@ -5,6 +5,8 @@\n   <version>0.1.0</version>\n   <description>The kalman filter package</description>\n   <maintainer email=\"yukihiro.saito@tier4.jp\">Yukihiro Saito</maintainer>\n+  <maintainer email=\"takeshi.ishita@tier4.jp\">Takeshi Ishita</maintainer>\n+  <maintainer email=\"koji.minoda@tier4.jp\">Koji Minoda</maintainer>\n   <license>Apache License 2.0</license>\n \n   <author email=\"takamasa.horibe@tier4.jp\">Takamasa Horibe</author>"
        }
    ],
    "autowarefoundation/autoware.universe/1980": [
        {
            "sha": "64a79e87bd76216c66ea4076a3e5ea31e75046ac",
            "filename": "planning/behavior_velocity_planner/src/node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 4,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/35fb6a18b383e4269ab4618e64376e79dedde8bd/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/35fb6a18b383e4269ab4618e64376e79dedde8bd/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp?ref=35fb6a18b383e4269ab4618e64376e79dedde8bd",
            "patch": "@@ -309,7 +309,7 @@ void BehaviorVelocityPlannerNode::onVehicleVelocity(\n   // Add velocity to buffer\n   planner_data_.velocity_buffer.push_front(*current_velocity);\n   const rclcpp::Time now = this->now();\n-  while (true) {\n+  while (!planner_data_.velocity_buffer.empty()) {\n     // Check oldest data time\n     const auto & s = planner_data_.velocity_buffer.back().header.stamp;\n     const auto time_diff =\n@@ -320,9 +320,6 @@ void BehaviorVelocityPlannerNode::onVehicleVelocity(\n       break;\n     }\n \n-    if (planner_data_.velocity_buffer.empty()) {\n-      break;\n-    }\n     // Remove old data\n     planner_data_.velocity_buffer.pop_back();\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/2012": [
        {
            "sha": "5d1bf1dd510a2f2858bbfd80d8e99be606b360e5",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fe98fc6d6a0fdc07a300b6a17b0791514c77cce1/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fe98fc6d6a0fdc07a300b6a17b0791514c77cce1/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=fe98fc6d6a0fdc07a300b6a17b0791514c77cce1",
            "patch": "@@ -42,6 +42,7 @@ namespace behavior_path_planner\n {\n using motion_utils::calcSignedArcLength;\n using motion_utils::findNearestIndex;\n+using motion_utils::findNearestSegmentIndex;\n using tier4_autoware_utils::calcDistance2d;\n using tier4_autoware_utils::calcLateralDeviation;\n using tier4_planning_msgs::msg::AvoidanceDebugFactor;\n@@ -140,8 +141,11 @@ AvoidancePlanningData AvoidanceModule::calcAvoidancePlanningData(DebugData & deb\n     // if the resampled path has only 1 point, use original path.\n     data.reference_path = center_path;\n   }\n+\n+  const size_t nearest_segment_index =\n+    findNearestSegmentIndex(data.reference_path.points, data.reference_pose.position);\n   data.ego_closest_path_index =\n-    findNearestIndex(data.reference_path.points, data.reference_pose.position);\n+    std::min(nearest_segment_index + 1, data.reference_path.points.size() - 1);\n \n   // arclength from ego pose (used in many functions)\n   data.arclength_from_ego = util::calcPathArcLengthArray("
        }
    ],
    "autowarefoundation/autoware.universe/2033": [
        {
            "sha": "c13064013d22961766bc47003ec4b3d09a953478",
            "filename": "planning/motion_velocity_smoother/src/motion_velocity_smoother_node.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 8,
            "changes": 20,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/afb36f5237ccb3f792c03802776e117f5707c830/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/afb36f5237ccb3f792c03802776e117f5707c830/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp?ref=afb36f5237ccb3f792c03802776e117f5707c830",
            "patch": "@@ -316,13 +316,7 @@ void MotionVelocitySmootherNode::onExternalVelocityLimit(const VelocityLimit::Co\n       const auto a_min = msg->use_constraints ? cstr.min_acceleration : smoother_->getMinDecel();\n       const auto j_max = msg->use_constraints ? cstr.max_jerk : smoother_->getMaxJerk();\n       const auto j_min = msg->use_constraints ? cstr.min_jerk : smoother_->getMinJerk();\n-      double stop_dist = 0.0;\n-      std::map<double, double> jerk_profile;\n-      if (!trajectory_utils::calcStopDistWithJerkConstraints(\n-            v0, a0, j_max, j_min, a_min, msg->max_velocity, jerk_profile, stop_dist)) {\n-        RCLCPP_WARN(get_logger(), \"Stop distance calculation is failed!\");\n-      }\n-      external_velocity_limit_dist_ = stop_dist + margin;\n+\n       // If the closest acceleration is positive, velocity will increase\n       // until the acceleration becomes zero\n       // So we set the maximum increased velocity as the velocity limit\n@@ -332,7 +326,17 @@ void MotionVelocitySmootherNode::onExternalVelocityLimit(const VelocityLimit::Co\n         max_velocity_with_deceleration_ = v0;\n       }\n \n-      if (max_velocity_with_deceleration_ < msg->max_velocity) {\n+      if (msg->max_velocity < max_velocity_with_deceleration_) {\n+        // TODO(mkuri) If v0 < msg->max_velocity < max_velocity_with_deceleration_ meets, stronger\n+        // jerk than expected may be applied to external velocity limit.\n+        double stop_dist = 0.0;\n+        std::map<double, double> jerk_profile;\n+        if (!trajectory_utils::calcStopDistWithJerkConstraints(\n+              v0, a0, j_max, j_min, a_min, msg->max_velocity, jerk_profile, stop_dist)) {\n+          RCLCPP_WARN(get_logger(), \"Stop distance calculation failed!\");\n+        }\n+        external_velocity_limit_dist_ = stop_dist + margin;\n+      } else {\n         max_velocity_with_deceleration_ = msg->max_velocity;\n         external_velocity_limit_dist_ = 0.0;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/2035": [
        {
            "sha": "8ef93d0f5f95decc61b6f910a641ddabc5fdb362",
            "filename": "common/component_interface_specs/package.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1f44921ff6c29622690dfaf0e58d24352c2e656d/common%2Fcomponent_interface_specs%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1f44921ff6c29622690dfaf0e58d24352c2e656d/common%2Fcomponent_interface_specs%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fcomponent_interface_specs%2Fpackage.xml?ref=1f44921ff6c29622690dfaf0e58d24352c2e656d",
            "patch": "@@ -11,6 +11,8 @@\n \n   <build_depend>autoware_cmake</build_depend>\n \n+  <depend>autoware_adapi_v1_msgs</depend>\n+\n   <test_depend>ament_lint_auto</test_depend>\n   <test_depend>autoware_lint_common</test_depend>\n "
        }
    ],
    "autowarefoundation/autoware.universe/2060": [
        {
            "sha": "ea0d3242e111a8ec6b38e13be5c4dd04d9da7638",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 44,
            "deletions": 21,
            "changes": 65,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2801231075d6c0f0bbeb44992c999e2659ba6264/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2801231075d6c0f0bbeb44992c999e2659ba6264/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=2801231075d6c0f0bbeb44992c999e2659ba6264",
            "patch": "@@ -2549,49 +2549,72 @@ bool AvoidanceModule::isTargetObjectType(const PredictedObject & object) const\n \n TurnSignalInfo AvoidanceModule::calcTurnSignalInfo(const ShiftedPath & path) const\n {\n-  TurnSignalInfo turn_signal;\n-\n   const auto shift_lines = path_shifter_.getShiftLines();\n   if (shift_lines.empty()) {\n     return {};\n   }\n \n-  const auto getRelativeLength = [this](const ShiftLine & sl) {\n-    const auto current_shift = getCurrentShift();\n-    return sl.end_shift_length - current_shift;\n-  };\n-\n   const auto front_shift_line = shift_lines.front();\n+  const size_t start_idx = front_shift_line.start_idx;\n+  const size_t end_idx = front_shift_line.end_idx;\n \n-  TurnSignalInfo turn_signal_info{};\n+  const auto current_shift_length = getCurrentShift();\n+  const double start_shift_length = path.shift_length.at(start_idx);\n+  const double end_shift_length = path.shift_length.at(end_idx);\n+  const double segment_shift_length = end_shift_length - start_shift_length;\n \n-  if (std::abs(getRelativeLength(front_shift_line)) < 0.1) {\n-    return turn_signal_info;\n+  // If shift length is shorter than the threshold, it does not need to turn on blinkers\n+  if (std::fabs(segment_shift_length) < 1.0) {\n+    return {};\n   }\n \n+  // If the vehicle does not shift anymore, we turn off the blinker\n+  if (std::fabs(end_shift_length - current_shift_length) < 0.1) {\n+    return {};\n+  }\n+\n+  // compute blinker start idx and end idx\n+  const size_t blinker_start_idx = [&]() {\n+    for (size_t idx = start_idx; idx <= end_idx; ++idx) {\n+      const double current_shift_length = path.shift_length.at(idx);\n+      if (current_shift_length > 0.1) {\n+        return idx;\n+      }\n+    }\n+    return start_idx;\n+  }();\n+  const size_t blinker_end_idx = end_idx;\n+\n+  const auto blinker_start_pose = path.path.points.at(blinker_start_idx).point.pose;\n+  const auto blinker_end_pose = path.path.points.at(blinker_end_idx).point.pose;\n+\n+  const double ego_vehicle_offset =\n+    planner_data_->parameters.vehicle_info.max_longitudinal_offset_m;\n   const auto signal_prepare_distance = std::max(getEgoSpeed() * 3.0, 10.0);\n-  const auto ego_to_shift_start =\n-    calcSignedArcLength(path.path.points, getEgoPosition(), front_shift_line.start.position);\n+  const auto ego_front_to_shift_start =\n+    calcSignedArcLength(path.path.points, getEgoPosition(), blinker_start_pose.position) -\n+    ego_vehicle_offset;\n \n-  if (signal_prepare_distance < ego_to_shift_start) {\n-    return turn_signal_info;\n+  if (signal_prepare_distance < ego_front_to_shift_start) {\n+    return {};\n   }\n \n-  if (getRelativeLength(front_shift_line) > 0.0) {\n+  TurnSignalInfo turn_signal_info{};\n+\n+  if (segment_shift_length > 0.0) {\n     turn_signal_info.turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;\n   } else {\n     turn_signal_info.turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n   }\n \n-  if (ego_to_shift_start > 0.0) {\n+  if (ego_front_to_shift_start > 0.0) {\n     turn_signal_info.desired_start_point = getEgoPosition();\n   } else {\n-    turn_signal_info.desired_start_point = front_shift_line.start.position;\n+    turn_signal_info.desired_start_point = blinker_start_pose.position;\n   }\n-\n-  turn_signal_info.desired_end_point = front_shift_line.end.position;\n-  turn_signal_info.required_start_point = front_shift_line.start.position;\n-  turn_signal_info.required_end_point = front_shift_line.end.position;\n+  turn_signal_info.desired_end_point = blinker_end_pose.position;\n+  turn_signal_info.required_start_point = blinker_start_pose.position;\n+  turn_signal_info.required_end_point = blinker_end_pose.position;\n \n   return turn_signal_info;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/2080": [
        {
            "sha": "d1f5d4877dfa43f550dcb0181534164bdac07567",
            "filename": "vehicle/raw_vehicle_cmd_converter/src/csv_loader.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0be75d013df26a9c56eaadb199d2db753b3ad95b/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fcsv_loader.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0be75d013df26a9c56eaadb199d2db753b3ad95b/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fcsv_loader.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fcsv_loader.cpp?ref=0be75d013df26a9c56eaadb199d2db753b3ad95b",
            "patch": "@@ -78,7 +78,7 @@ std::vector<double> CSVLoader::getRowIndex(const Table & table)\n std::vector<double> CSVLoader::getColumnIndex(const Table & table)\n {\n   std::vector<double> index = {};\n-  for (unsigned int i = 1; i < table[0].size(); i++) {\n+  for (unsigned int i = 1; i < table.size(); i++) {\n     index.push_back(std::stod(table[i][0]));\n   }\n   return index;"
        }
    ],
    "autowarefoundation/autoware.universe/2087": [
        {
            "sha": "2feefdfb1053d63ebd6eac7807ff4492fb2f6944",
            "filename": "launch/tier4_perception_launch/launch/occupancy_grid_map/pointcloud_based_occupancy_grid_map.launch.py",
            "status": "modified",
            "additions": 8,
            "deletions": 9,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ffe51cc81a835598aeb1668188a86490b7fdbeec/launch%2Ftier4_perception_launch%2Flaunch%2Foccupancy_grid_map%2Fpointcloud_based_occupancy_grid_map.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ffe51cc81a835598aeb1668188a86490b7fdbeec/launch%2Ftier4_perception_launch%2Flaunch%2Foccupancy_grid_map%2Fpointcloud_based_occupancy_grid_map.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Foccupancy_grid_map%2Fpointcloud_based_occupancy_grid_map.launch.py?ref=ffe51cc81a835598aeb1668188a86490b7fdbeec",
            "patch": "@@ -16,8 +16,6 @@\n from launch.actions import DeclareLaunchArgument\n from launch.actions import SetLaunchConfiguration\n from launch.conditions import IfCondition\n-from launch.conditions import LaunchConfigurationEquals\n-from launch.conditions import LaunchConfigurationNotEquals\n from launch.conditions import UnlessCondition\n from launch.substitutions import LaunchConfiguration\n from launch_ros.actions import ComposableNodeContainer\n@@ -62,26 +60,27 @@ def add_launch_arg(name: str, default_value=None):\n     ]\n \n     occupancy_grid_map_container = ComposableNodeContainer(\n-        condition=LaunchConfigurationEquals(\"container\", \"\"),\n-        name=\"occupancy_grid_map_container\",\n+        name=LaunchConfiguration(\"container_name\"),\n         namespace=\"\",\n         package=\"rclcpp_components\",\n         executable=LaunchConfiguration(\"container_executable\"),\n         composable_node_descriptions=composable_nodes,\n+        condition=UnlessCondition(LaunchConfiguration(\"use_pointcloud_container\")),\n         output=\"screen\",\n     )\n \n     load_composable_nodes = LoadComposableNodes(\n-        condition=LaunchConfigurationNotEquals(\"container\", \"\"),\n         composable_node_descriptions=composable_nodes,\n-        target_container=LaunchConfiguration(\"container\"),\n+        target_container=LaunchConfiguration(\"container_name\"),\n+        condition=IfCondition(LaunchConfiguration(\"use_pointcloud_container\")),\n     )\n \n     return LaunchDescription(\n         [\n-            add_launch_arg(\"container\", \"\"),\n-            add_launch_arg(\"use_multithread\", \"false\"),\n-            add_launch_arg(\"use_intra_process\", \"false\"),\n+            add_launch_arg(\"use_multithread\", \"False\"),\n+            add_launch_arg(\"use_intra_process\", \"True\"),\n+            add_launch_arg(\"use_pointcloud_container\", \"False\"),\n+            add_launch_arg(\"container_name\", \"occupancy_grid_map_container\"),\n             add_launch_arg(\"input/obstacle_pointcloud\", \"no_ground/oneshot/pointcloud\"),\n             add_launch_arg(\"input/raw_pointcloud\", \"concatenated/pointcloud\"),\n             add_launch_arg(\"output\", \"occupancy_grid\"),"
        }
    ],
    "autowarefoundation/autoware.universe/2101": [
        {
            "sha": "21e02c6e45c1324cada5a6c97aad04c3da1d4930",
            "filename": "sensing/pointcloud_preprocessor/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/49efada1450efe1778dc8f6dd05b469e80a1e87a/sensing%2Fpointcloud_preprocessor%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/49efada1450efe1778dc8f6dd05b469e80a1e87a/sensing%2Fpointcloud_preprocessor%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2FCMakeLists.txt?ref=49efada1450efe1778dc8f6dd05b469e80a1e87a",
            "patch": "@@ -37,6 +37,7 @@ ament_target_dependencies(pointcloud_preprocessor_filter_base\n   sensor_msgs\n   tf2_ros\n   tier4_autoware_utils\n+  pcl_ros\n )\n \n ament_auto_add_library(pointcloud_preprocessor_filter SHARED"
        }
    ],
    "autowarefoundation/autoware.universe/2117": [
        {
            "sha": "c078949e03237bf1ef519448f11c18f75160af2a",
            "filename": "perception/ground_segmentation/src/scan_ground_filter_nodelet.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/35a2fe9bdef8433abd74f5037b2762d64da5392c/perception%2Fground_segmentation%2Fsrc%2Fscan_ground_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/35a2fe9bdef8433abd74f5037b2762d64da5392c/perception%2Fground_segmentation%2Fsrc%2Fscan_ground_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fground_segmentation%2Fsrc%2Fscan_ground_filter_nodelet.cpp?ref=35a2fe9bdef8433abd74f5037b2762d64da5392c",
            "patch": "@@ -314,9 +314,7 @@ void ScanGroundFilterComponent::classifyPointCloudGridScan(\n         continue;\n       }\n \n-      if (\n-        !initialized_first_gnd_grid && global_slope_p < -global_slope_max_angle_rad_ &&\n-        p->orig_point->z < -non_ground_height_threshold_local) {\n+      if (!initialized_first_gnd_grid) {\n         prev_p = p;\n         continue;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/2123": [
        {
            "sha": "fff9f8615f1ea72eda382b26e58c226915ebdb4b",
            "filename": "system/system_error_monitor/config/diagnostic_aggregator/system.param.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/12059f9a7304aec27bc9d6a2d6cf0f0f9eb71bc8/system%2Fsystem_error_monitor%2Fconfig%2Fdiagnostic_aggregator%2Fsystem.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/12059f9a7304aec27bc9d6a2d6cf0f0f9eb71bc8/system%2Fsystem_error_monitor%2Fconfig%2Fdiagnostic_aggregator%2Fsystem.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fsystem_error_monitor%2Fconfig%2Fdiagnostic_aggregator%2Fsystem.param.yaml?ref=12059f9a7304aec27bc9d6a2d6cf0f0f9eb71bc8",
            "patch": "@@ -128,7 +128,7 @@\n                   contains: [\": Network Traffic\"]\n                   timeout: 3.0\n \n-                netowork_crc_error:\n+                network_crc_error:\n                   type: diagnostic_aggregator/GenericAnalyzer\n                   path: network_crc_error\n                   contains: [\": Network CRC Error\"]"
        }
    ],
    "autowarefoundation/autoware.universe/2145": [
        {
            "sha": "52142683dd084261096258c742a9c6d8e74eaebf",
            "filename": "control/trajectory_follower/package.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/488de7d3114d911b7ee820546b25432ea729319f/control%2Ftrajectory_follower%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/488de7d3114d911b7ee820546b25432ea729319f/control%2Ftrajectory_follower%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Ftrajectory_follower%2Fpackage.xml?ref=488de7d3114d911b7ee820546b25432ea729319f",
            "patch": "@@ -26,6 +26,8 @@\n   <depend>autoware_auto_planning_msgs</depend>\n   <depend>autoware_auto_system_msgs</depend>\n   <depend>autoware_auto_vehicle_msgs</depend>\n+  <depend>diagnostic_msgs</depend>\n+  <depend>diagnostic_updater</depend>\n   <depend>eigen</depend>\n   <depend>geometry_msgs</depend>\n   <depend>interpolation</depend>"
        }
    ],
    "autowarefoundation/autoware.universe/2154": [
        {
            "sha": "eebccd2fcd48fcec700d0afa08f2f3e216f0e81e",
            "filename": "common/tier4_control_rviz_plugin/src/tools/manual_controller.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5051818ec662e00c79ef9008393a84ed4abbdf8e/common%2Ftier4_control_rviz_plugin%2Fsrc%2Ftools%2Fmanual_controller.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5051818ec662e00c79ef9008393a84ed4abbdf8e/common%2Ftier4_control_rviz_plugin%2Fsrc%2Ftools%2Fmanual_controller.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_control_rviz_plugin%2Fsrc%2Ftools%2Fmanual_controller.cpp?ref=5051818ec662e00c79ef9008393a84ed4abbdf8e",
            "patch": "@@ -109,8 +109,10 @@ ManualController::ManualController(QWidget * parent) : rviz_common::Panel(parent\n \n void ManualController::update()\n {\n+  if (!raw_node_) return;\n   AckermannControlCommand ackermann;\n   {\n+    ackermann.stamp = raw_node_->get_clock()->now();\n     ackermann.lateral.steering_tire_angle = steering_angle_;\n     ackermann.longitudinal.speed = cruise_velocity_;\n     if (current_acceleration_) {"
        }
    ],
    "autowarefoundation/autoware.universe/2159": [
        {
            "sha": "1a708068e58dc8c9c315fa44fac0061440645ad3",
            "filename": "planning/behavior_path_planner/src/scene_module/utils/geometric_parallel_parking.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 17,
            "changes": 31,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e4faeadc5947f2418efe3e38699bd9201a49c10b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e4faeadc5947f2418efe3e38699bd9201a49c10b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp?ref=e4faeadc5947f2418efe3e38699bd9201a49c10b",
            "patch": "@@ -411,35 +411,32 @@ std::vector<PathWithLaneId> GeometricParallelParking::planOneTrial(\n     (2 * R_E_l * (R_E_l + R_E_r)));\n   theta_l = is_forward ? theta_l : -theta_l;\n \n-  // get closest lanes\n-  lanelet::Lanelet closest_road_lanelet;\n-  lanelet::utils::query::getClosestLanelet(road_lanes, goal_pose, &closest_road_lanelet);\n-  lanelet::Lanelet closest_shoulder_lanelet;\n-  lanelet::utils::query::getClosestLanelet(shoulder_lanes, goal_pose, &closest_shoulder_lanelet);\n-\n   PathWithLaneId path_turn_left =\n     generateArcPath(Cl, R_E_l, -M_PI_2, normalizeRadian(-M_PI_2 + theta_l), is_forward, is_forward);\n-  for (auto & p : path_turn_left.points) {\n-    p.lane_ids.push_back(closest_road_lanelet.id());\n-    p.lane_ids.push_back(closest_shoulder_lanelet.id());\n-  }\n   path_turn_left.header = planner_data_->route_handler->getRouteHeader();\n \n   PathWithLaneId path_turn_right = generateArcPath(\n     Cr, R_E_r, normalizeRadian(psi + M_PI_2 + theta_l), M_PI_2, !is_forward, is_forward);\n-  for (auto & p : path_turn_right.points) {\n-    p.lane_ids.push_back(closest_road_lanelet.id());\n-    p.lane_ids.push_back(closest_shoulder_lanelet.id());\n-  }\n   path_turn_right.header = planner_data_->route_handler->getRouteHeader();\n \n+  auto setLaneIds = [lanes](PathPointWithLaneId & p) {\n+    for (const auto & lane : lanes) {\n+      p.lane_ids.push_back(lane.id());\n+    }\n+  };\n+  auto setLaneIdsToPath = [setLaneIds](PathWithLaneId & path) {\n+    for (auto & p : path.points) {\n+      setLaneIds(p);\n+    }\n+  };\n+  setLaneIdsToPath(path_turn_left);\n+  setLaneIdsToPath(path_turn_right);\n+\n   // Need to add straight path to last right_turning for parking in parallel\n   if (std::abs(end_pose_offset) > 0) {\n     PathPointWithLaneId straight_point{};\n-    lanelet::ConstLanelet goal_lane;\n-    lanelet::utils::query::getClosestLanelet(shoulder_lanes, goal_pose, &goal_lane);\n     straight_point.point.pose = goal_pose;\n-    straight_point.lane_ids.push_back(goal_lane.id());\n+    setLaneIds(straight_point);\n     path_turn_right.points.push_back(straight_point);\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2163": [
        {
            "sha": "398321bce7eb2baa01f2a2ee286023610cf64338",
            "filename": "common/rtc_manager_rviz_plugin/src/rtc_manager_panel.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/90b6296ae9ece094334da1802bf0090705be2a64/common%2Frtc_manager_rviz_plugin%2Fsrc%2Frtc_manager_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/90b6296ae9ece094334da1802bf0090705be2a64/common%2Frtc_manager_rviz_plugin%2Fsrc%2Frtc_manager_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Frtc_manager_rviz_plugin%2Fsrc%2Frtc_manager_panel.cpp?ref=90b6296ae9ece094334da1802bf0090705be2a64",
            "patch": "@@ -328,7 +328,7 @@ void RTCManagerPanel::onRTCStatus(const CooperateStatusArray::ConstSharedPtr msg\n     std::max(min_display_size, std::min(msg->statuses.size(), max_display_size)));\n   int cnt = 0;\n   for (auto status : msg->statuses) {\n-    if (static_cast<size_t>(cnt) > max_display_size) return;\n+    if (static_cast<size_t>(cnt) >= max_display_size) return;\n     // uuid\n     {\n       std::stringstream uuid;"
        }
    ],
    "autowarefoundation/autoware.universe/2171": [
        {
            "sha": "0493e1ae0bbcfc2f395a32584e184fd075140ff1",
            "filename": "launch/tier4_vehicle_launch/launch/vehicle.launch.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/619f8b2ce813ba70da138cfbcd079c8b01941360/launch%2Ftier4_vehicle_launch%2Flaunch%2Fvehicle.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/619f8b2ce813ba70da138cfbcd079c8b01941360/launch%2Ftier4_vehicle_launch%2Flaunch%2Fvehicle.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_vehicle_launch%2Flaunch%2Fvehicle.launch.xml?ref=619f8b2ce813ba70da138cfbcd079c8b01941360",
            "patch": "@@ -13,7 +13,7 @@\n   <group>\n     <arg name=\"model_file\" default=\"$(find-pkg-share tier4_vehicle_launch)/urdf/vehicle.xacro\" description=\"path to the file of model settings (*.xacro)\"/>\n     <node name=\"robot_state_publisher\" pkg=\"robot_state_publisher\" exec=\"robot_state_publisher\">\n-      <param name=\"robot_description\" value=\"$(command 'xacro $(var model_file) vehicle_model:=$(var vehicle_model) sensor_model:=$(var sensor_model) config_dir:=$(var config_dir)')\"/>\n+      <param name=\"robot_description\" value=\"$(command 'xacro $(var model_file) vehicle_model:=$(var vehicle_model) sensor_model:=$(var sensor_model) config_dir:=$(var config_dir)' 'warn')\"/>\n     </node>\n   </group>\n "
        }
    ],
    "autowarefoundation/autoware.universe/2183": [
        {
            "sha": "fae94bf133a4851006151aadc2e9f4153a771505",
            "filename": "control/obstacle_collision_checker/src/obstacle_collision_checker_node/obstacle_collision_checker_node.cpp",
            "status": "modified",
            "additions": 29,
            "deletions": 15,
            "changes": 44,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b55bcd35b051d9cbe191c2e1c520c01ecf635149/control%2Fobstacle_collision_checker%2Fsrc%2Fobstacle_collision_checker_node%2Fobstacle_collision_checker_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b55bcd35b051d9cbe191c2e1c520c01ecf635149/control%2Fobstacle_collision_checker%2Fsrc%2Fobstacle_collision_checker_node%2Fobstacle_collision_checker_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fobstacle_collision_checker%2Fsrc%2Fobstacle_collision_checker_node%2Fobstacle_collision_checker_node.cpp?ref=b55bcd35b051d9cbe191c2e1c520c01ecf635149",
            "patch": "@@ -28,16 +28,21 @@\n \n namespace\n {\n-template <typename T>\n-void update_param(\n-  const std::vector<rclcpp::Parameter> & parameters, const std::string & name, T & value)\n+template <class T>\n+bool update_param(\n+  const std::vector<rclcpp::Parameter> & params, const std::string & name, T & value)\n {\n-  auto it = std::find_if(\n-    parameters.cbegin(), parameters.cend(),\n-    [&name](const rclcpp::Parameter & parameter) { return parameter.get_name() == name; });\n-  if (it != parameters.cend()) {\n-    value = it->template get_value<T>();\n+  const auto itr = std::find_if(\n+    params.cbegin(), params.cend(),\n+    [&name](const rclcpp::Parameter & p) { return p.get_name() == name; });\n+\n+  // Not found\n+  if (itr == params.cend()) {\n+    return false;\n   }\n+\n+  value = itr->template get_value<T>();\n+  return true;\n }\n }  // namespace\n \n@@ -229,14 +234,23 @@ rcl_interfaces::msg::SetParametersResult ObstacleCollisionCheckerNode::paramCall\n   result.successful = true;\n   result.reason = \"success\";\n \n-  Param param;\n   try {\n-    update_param(parameters, \"delay_time\", param.delay_time);\n-    update_param(parameters, \"footprint_margin\", param.footprint_margin);\n-    update_param(parameters, \"max_deceleration\", param.max_deceleration);\n-    update_param(parameters, \"resample_interval\", param.resample_interval);\n-    update_param(parameters, \"search_radius\", param.search_radius);\n-    param_ = param;\n+    // Node Parameter\n+    {\n+      auto & p = node_param_;\n+\n+      // Update params\n+      update_param(parameters, \"update_rate\", p.update_rate);\n+    }\n+\n+    auto & p = param_;\n+\n+    update_param(parameters, \"delay_time\", p.delay_time);\n+    update_param(parameters, \"footprint_margin\", p.footprint_margin);\n+    update_param(parameters, \"max_deceleration\", p.max_deceleration);\n+    update_param(parameters, \"resample_interval\", p.resample_interval);\n+    update_param(parameters, \"search_radius\", p.search_radius);\n+\n     if (obstacle_collision_checker_) {\n       obstacle_collision_checker_->setParam(param_);\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/2189": [
        {
            "sha": "e0c64bac512e0bdcfdf251a2bedf2c16e4bda489",
            "filename": "system/default_ad_api/launch/default_ad_api.launch.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3036659aaabb0bdc9788174c01af6fa2733e443e/system%2Fdefault_ad_api%2Flaunch%2Fdefault_ad_api.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3036659aaabb0bdc9788174c01af6fa2733e443e/system%2Fdefault_ad_api%2Flaunch%2Fdefault_ad_api.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdefault_ad_api%2Flaunch%2Fdefault_ad_api.launch.py?ref=3036659aaabb0bdc9788174c01af6fa2733e443e",
            "patch": "@@ -32,7 +32,7 @@ def generate_launch_description():\n     components = [\n         _create_api_node(\"interface\", \"InterfaceNode\"),\n         _create_api_node(\"localization\", \"LocalizationNode\"),\n-        _create_api_node(\"motion\", \"MotionNode\", parameters=[{\"require_accept_start\": False}]),\n+        # _create_api_node(\"motion\", \"MotionNode\", parameters=[{\"require_accept_start\": False}]),\n         _create_api_node(\"routing\", \"RoutingNode\"),\n     ]\n     container = ComposableNodeContainer("
        }
    ],
    "autowarefoundation/autoware.universe/2196": [
        {
            "sha": "1da538089f46bf22db90df7d31a4b6432735834f",
            "filename": "planning/behavior_path_planner/src/scene_module/side_shift/side_shift_module.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1a0b7a19cb39841465012cbb0c88f62713a1e372/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1a0b7a19cb39841465012cbb0c88f62713a1e372/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp?ref=1a0b7a19cb39841465012cbb0c88f62713a1e372",
            "patch": "@@ -411,9 +411,9 @@ void SideShiftModule::adjustDrivableArea(ShiftedPath * path) const\n   const double left_offset = std::max(\n     *itr.second + (*itr.first > threshold ? margin : 0.0),\n     parameters_.drivable_area_left_bound_offset);\n-  const double right_offset = std::min(\n+  const double right_offset = -std::min(\n     *itr.first - (*itr.first < -threshold ? margin : 0.0),\n-    parameters_.drivable_area_right_bound_offset);\n+    -parameters_.drivable_area_right_bound_offset);\n \n   const auto extended_lanelets = util::expandLanelets(current_lanelets_, left_offset, right_offset);\n "
        }
    ],
    "autowarefoundation/autoware.universe/2205": [
        {
            "sha": "aa47a924a76f6c2675634f2df53f03924ef63983",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a389a90c15e4847a08835d7c7a8e931c80a130a9/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a389a90c15e4847a08835d7c7a8e931c80a130a9/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=a389a90c15e4847a08835d7c7a8e931c80a130a9",
            "patch": "@@ -1001,7 +1001,7 @@ bool ObstacleAvoidancePlanner::checkReplan(const PlannerData & planner_data)\n     return true;\n   }\n \n-  if (isPathGoalChanged(planner_data)) {\n+  if (isPathGoalChanged(p)) {\n     RCLCPP_INFO(get_logger(), \"Replan with resetting optimization since path goal was changed.\");\n     resetPrevOptimization();\n     return true;\n@@ -1077,7 +1077,7 @@ bool ObstacleAvoidancePlanner::isPathGoalChanged(const PlannerData & planner_dat\n {\n   const auto & p = planner_data;\n \n-  if (prev_path_points_ptr_) {\n+  if (!prev_path_points_ptr_) {\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2214": [
        {
            "sha": "fc58b6277c1e86376529e30637adb4c8d5f0b7b9",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/util.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 4,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/deaaef3c5fac73a5a448489f484defbdac3616de/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/deaaef3c5fac73a5a448489f484defbdac3616de/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp?ref=deaaef3c5fac73a5a448489f484defbdac3616de",
            "patch": "@@ -48,14 +48,18 @@ int insertPoint(\n     return -1;\n   }\n   const size_t closest_idx = closest_idx_opt.get();\n-\n+  // vector.insert(i) inserts element on the left side of v[i]\n+  // the velocity need to be zero order hold(from prior point)\n   int insert_idx = closest_idx;\n+  autoware_auto_planning_msgs::msg::PathPointWithLaneId inserted_point =\n+    inout_path->points.at(closest_idx);\n   if (planning_utils::isAheadOf(in_pose, inout_path->points.at(closest_idx).point.pose)) {\n     ++insert_idx;\n+  } else {\n+    // copy with velocity from prior point\n+    const size_t prior_ind = closest_idx > 0 ? closest_idx - 1 : 0;\n+    inserted_point = inout_path->points.at(prior_ind);\n   }\n-\n-  autoware_auto_planning_msgs::msg::PathPointWithLaneId inserted_point;\n-  inserted_point = inout_path->points.at(closest_idx);\n   inserted_point.point.pose = in_pose;\n \n   auto it = inout_path->points.begin() + insert_idx;"
        }
    ],
    "autowarefoundation/autoware.universe/2220": [
        {
            "sha": "91be0cf41cfc5659fafc79ba433ca5dc793dae05",
            "filename": "planning/behavior_velocity_planner/traffic-light-design.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/11d3104e230b2d8c07877c3f463d9f763ba92df6/planning%2Fbehavior_velocity_planner%2Ftraffic-light-design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/11d3104e230b2d8c07877c3f463d9f763ba92df6/planning%2Fbehavior_velocity_planner%2Ftraffic-light-design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Ftraffic-light-design.md?ref=11d3104e230b2d8c07877c3f463d9f763ba92df6",
            "patch": "@@ -71,7 +71,7 @@ This module is activated when there is traffic light in ego lane.\n | `tl_state_timeout`          | double | [s] time out for detected traffic light result. |\n | `external_tl_state_timeout` | double | [s] time out for external traffic input         |\n | `yellow_lamp_period`        | double | [s] time for yellow lamp                        |\n-| `enable_pass_judge`         | bool   | [-] weather to use pass judge                   |\n+| `enable_pass_judge`         | bool   | [-] whether to use pass judge                   |\n \n #### Flowchart\n "
        }
    ],
    "autowarefoundation/autoware.universe/2221": [
        {
            "sha": "197fcd1bf9d38bd9740cf88c0a548ca928673fe8",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/util.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/caecff892095572c9caf93b3711e7ef60deb62c0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/caecff892095572c9caf93b3711e7ef60deb62c0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp?ref=caecff892095572c9caf93b3711e7ef60deb62c0",
            "patch": "@@ -79,7 +79,7 @@ std::optional<std::pair<size_t, size_t>> findLaneIdInterval(\n {\n   bool found = false;\n   size_t start = 0;\n-  size_t end = p.points.size() - 1;\n+  size_t end = p.points.size() > 0 ? p.points.size() - 1 : 0;\n   for (size_t i = 0; i < p.points.size(); ++i) {\n     if (hasLaneId(p.points.at(i), lane_id)) {\n       if (!found) {\n@@ -93,7 +93,7 @@ std::optional<std::pair<size_t, size_t>> findLaneIdInterval(\n       break;\n     }\n   }\n-  start = std::max<size_t>(0, start - 1);  // the idx of last point before the interval\n+  start = start > 0 ? start - 1 : 0;  // the idx of last point before the interval\n   return found ? std::make_optional(std::make_pair(start, end)) : std::nullopt;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2239": [
        {
            "sha": "08b0f826d8858d0a9f798f049edf7ee87f21f8ed",
            "filename": "planning/behavior_velocity_planner/src/scene_module/stop_line/scene.cpp",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/09bb8f633b75dc08d1b16a950c7a87f1b96d0a86/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fscene.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/09bb8f633b75dc08d1b16a950c7a87f1b96d0a86/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fscene.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fstop_line%2Fscene.cpp?ref=09bb8f633b75dc08d1b16a950c7a87f1b96d0a86",
            "patch": "@@ -64,7 +64,6 @@ bool StopLineModule::modifyPathVelocity(\n \n   const auto stop_point_idx = stop_point->first;\n   auto stop_pose = stop_point->second;\n-  stop_pose.position.z = (stop_line_[0].z() + stop_line_[1].z()) / 2.0;\n \n   /**\n    * @brief : calculate signed arc length consider stop margin from stop line"
        }
    ],
    "autowarefoundation/autoware.universe/2240": [
        {
            "sha": "5d232f0f7e2c2fc8c1bab27411a444256b821d6d",
            "filename": "localization/ndt_scan_matcher/src/ndt_scan_matcher_core.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7ecef85293d1264dc3a96e505f3c4c5608a81336/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7ecef85293d1264dc3a96e505f3c4c5608a81336/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp?ref=7ecef85293d1264dc3a96e505f3c4c5608a81336",
            "patch": "@@ -546,8 +546,8 @@ geometry_msgs::msg::PoseWithCovarianceStamped NDTScanMatcher::align_using_monte_\n   for (unsigned int i = 0; i < initial_poses.size(); i++) {\n     const auto & initial_pose = initial_poses[i];\n     const Eigen::Matrix4f initial_pose_matrix = pose_to_matrix4f(initial_pose);\n-    ndt_ptr_->align(*output_cloud, initial_pose_matrix);\n-    const pclomp::NdtResult ndt_result = ndt_ptr_->getResult();\n+    ndt_ptr->align(*output_cloud, initial_pose_matrix);\n+    const pclomp::NdtResult ndt_result = ndt_ptr->getResult();\n \n     Particle particle(\n       initial_pose, matrix4f_to_pose(ndt_result.pose), ndt_result.transform_probability,"
        }
    ],
    "autowarefoundation/autoware.universe/2241": [
        {
            "sha": "0e54c32c2d2f0b4ba2a36c26f7c7c01f0a9123bd",
            "filename": "localization/ndt_scan_matcher/src/ndt_scan_matcher_core.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/de339b68dfa8547a51e81cd8b29af13fc1cce03e/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/de339b68dfa8547a51e81cd8b29af13fc1cce03e/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp?ref=de339b68dfa8547a51e81cd8b29af13fc1cce03e",
            "patch": "@@ -117,6 +117,8 @@ NDTScanMatcher::NDTScanMatcher()\n   ndt_params_.search_method = static_cast<pclomp::NeighborSearchMethod>(search_method);\n   ndt_params_.num_threads = this->declare_parameter<int>(\"num_threads\");\n   ndt_params_.num_threads = std::max(ndt_params_.num_threads, 1);\n+  ndt_params_.regularization_scale_factor =\n+    this->declare_parameter<float>(\"regularization_scale_factor\");\n \n   ndt_ptr_->setTransformationEpsilon(ndt_params_.trans_epsilon);\n   ndt_ptr_->setStepSize(ndt_params_.step_size);"
        }
    ],
    "autowarefoundation/autoware.universe/2246": [
        {
            "sha": "4ce7c253c51be38d14bd23a844a6960faad5eeba",
            "filename": "planning/behavior_path_planner/src/scene_module/utils/geometric_parallel_parking.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7ad01a04d79d0ebe4aaec2ec77ebdfbefbbd227b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7ad01a04d79d0ebe4aaec2ec77ebdfbefbbd227b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp?ref=7ad01a04d79d0ebe4aaec2ec77ebdfbefbbd227b",
            "patch": "@@ -482,9 +482,12 @@ PathWithLaneId GeometricParallelParking::generateArcPath(\n \n   // insert the last point exactly\n   const auto p = generateArcPathPoint(center, radius, end_yaw, is_left_turn, is_forward);\n-  path.points.push_back(p);\n+  constexpr double min_dist = 0.01;\n+  if (path.points.empty() || calcDistance2d(path.points.back(), p) > min_dist) {\n+    path.points.push_back(p);\n+  }\n \n-  return removeOverlappingPoints(path);\n+  return path;\n }\n \n PathPointWithLaneId GeometricParallelParking::generateArcPathPoint("
        }
    ],
    "autowarefoundation/autoware.universe/2247": [
        {
            "sha": "c1462e849a2f9b32f81ac1084ff430670e16ebe6",
            "filename": "perception/compare_map_segmentation/src/voxel_based_compare_map_filter_nodelet.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 11,
            "changes": 22,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8dd2063a6d73fd11d8bc2b899043fb6186793c79/perception%2Fcompare_map_segmentation%2Fsrc%2Fvoxel_based_compare_map_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8dd2063a6d73fd11d8bc2b899043fb6186793c79/perception%2Fcompare_map_segmentation%2Fsrc%2Fvoxel_based_compare_map_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fcompare_map_segmentation%2Fsrc%2Fvoxel_based_compare_map_filter_nodelet.cpp?ref=8dd2063a6d73fd11d8bc2b899043fb6186793c79",
            "patch": "@@ -56,6 +56,7 @@ void VoxelBasedCompareMapFilterComponent::filter(\n   PointCloud2 & output)\n {\n   std::scoped_lock lock(mutex_);\n+  stop_watch_ptr_->toc(\"processing_time\", true);\n   if (voxel_map_ptr_ == NULL) {\n     output = *input;\n     return;\n@@ -224,6 +225,16 @@ void VoxelBasedCompareMapFilterComponent::filter(\n   }\n   pcl::toROSMsg(*pcl_output, output);\n   output.header = input->header;\n+\n+  // add processing time for debug\n+  if (debug_publisher_) {\n+    const double cyclic_time_ms = stop_watch_ptr_->toc(\"cyclic_time\", true);\n+    const double processing_time_ms = stop_watch_ptr_->toc(\"processing_time\", true);\n+    debug_publisher_->publish<tier4_debug_msgs::msg::Float64Stamped>(\n+      \"debug/cyclic_time_ms\", cyclic_time_ms);\n+    debug_publisher_->publish<tier4_debug_msgs::msg::Float64Stamped>(\n+      \"debug/processing_time_ms\", processing_time_ms);\n+  }\n }\n \n bool VoxelBasedCompareMapFilterComponent::is_in_voxel(\n@@ -247,7 +258,6 @@ bool VoxelBasedCompareMapFilterComponent::is_in_voxel(\n \n void VoxelBasedCompareMapFilterComponent::input_target_callback(const PointCloud2ConstPtr map)\n {\n-  stop_watch_ptr_->toc(\"processing_time\", true);\n   pcl::PointCloud<pcl::PointXYZ> map_pcl;\n   pcl::fromROSMsg<pcl::PointXYZ>(*map, map_pcl);\n   const auto map_pcl_ptr = pcl::make_shared<pcl::PointCloud<pcl::PointXYZ>>(map_pcl);\n@@ -260,16 +270,6 @@ void VoxelBasedCompareMapFilterComponent::input_target_callback(const PointCloud\n   voxel_grid_.setInputCloud(map_pcl_ptr);\n   voxel_grid_.setSaveLeafLayout(true);\n   voxel_grid_.filter(*voxel_map_ptr_);\n-\n-  // add processing time for debug\n-  if (debug_publisher_) {\n-    const double cyclic_time_ms = stop_watch_ptr_->toc(\"cyclic_time\", true);\n-    const double processing_time_ms = stop_watch_ptr_->toc(\"processing_time\", true);\n-    debug_publisher_->publish<tier4_debug_msgs::msg::Float64Stamped>(\n-      \"debug/cyclic_time_ms\", cyclic_time_ms);\n-    debug_publisher_->publish<tier4_debug_msgs::msg::Float64Stamped>(\n-      \"debug/processing_time_ms\", processing_time_ms);\n-  }\n }\n \n rcl_interfaces::msg::SetParametersResult VoxelBasedCompareMapFilterComponent::paramCallback("
        }
    ],
    "autowarefoundation/autoware.universe/2248": [
        {
            "sha": "1a8e70f9136dd3c7f6a13f7661560782d5a58382",
            "filename": "planning/obstacle_avoidance_planner/src/mpt_optimizer.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/562cf61cdcbf10d77ffa4aef7f298bbcc4a472f2/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/562cf61cdcbf10d77ffa4aef7f298bbcc4a472f2/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp?ref=562cf61cdcbf10d77ffa4aef7f298bbcc4a472f2",
            "patch": "@@ -1389,7 +1389,7 @@ void MPTOptimizer::calcBounds(\n         if (prev_trajs && !prev_trajs->mpt_ref_points.empty()) {\n           return prev_trajs->mpt_ref_points.front().p;\n         }\n-        return current_ego_pose_.position;\n+        return ref_points.at(i).p;\n       }();\n \n       geometry_msgs::msg::Pose ref_pose;"
        }
    ],
    "autowarefoundation/autoware.universe/2250": [
        {
            "sha": "c24e6378f184c84ae1bd41461a2fc8dabd23ee26",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/util.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d3bb082ab7e9784a59e9d6bcdc11d7e9b3f2a8a0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d3bb082ab7e9784a59e9d6bcdc11d7e9b3f2a8a0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp?ref=d3bb082ab7e9784a59e9d6bcdc11d7e9b3f2a8a0",
            "patch": "@@ -293,7 +293,7 @@ bool getStopLineIndexFromMap(\n   const LineString2d extended_stop_line =\n     planning_utils::extendLine(p_start, p_end, planner_data->stop_line_extend_length);\n \n-  for (size_t i = lane_interval_start; i <= lane_interval_end; i++) {\n+  for (size_t i = lane_interval_start; i < lane_interval_end; i++) {\n     const auto & p_front = path.points.at(i).point.pose.position;\n     const auto & p_back = path.points.at(i + 1).point.pose.position;\n "
        }
    ],
    "autowarefoundation/autoware.universe/2256": [
        {
            "sha": "c78706b7e23f8e27f248afcab21eca74d4e855a7",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 2,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9277fc3370ce2ed6083a8886968d2212927cb408/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9277fc3370ce2ed6083a8886968d2212927cb408/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=9277fc3370ce2ed6083a8886968d2212927cb408",
            "patch": "@@ -2030,11 +2030,15 @@ lanelet::ConstLanelets getExtendedCurrentLanes(\n \n   // Add next lane\n   const auto next_lanes = route_handler->getNextLanelets(current_lanes.back());\n-  current_lanes.push_back(next_lanes.front());\n+  if (!next_lanes.empty()) {\n+    current_lanes.push_back(next_lanes.front());\n+  }\n \n   // Add previous lane\n   const auto prev_lanes = route_handler->getPreviousLanelets(current_lanes.front());\n-  current_lanes.insert(current_lanes.begin(), prev_lanes.front());\n+  if (!prev_lanes.empty()) {\n+    current_lanes.insert(current_lanes.begin(), prev_lanes.front());\n+  }\n \n   return current_lanes;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/2281": [
        {
            "sha": "8705ba30a9350265ced022fb2f313f93c8df45ec",
            "filename": "launch/tier4_simulator_launch/launch/simulator.launch.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4ffee041f68f40ce1c0aaedd8d7e8ba1a4b710e1/launch%2Ftier4_simulator_launch%2Flaunch%2Fsimulator.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4ffee041f68f40ce1c0aaedd8d7e8ba1a4b710e1/launch%2Ftier4_simulator_launch%2Flaunch%2Fsimulator.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_simulator_launch%2Flaunch%2Fsimulator.launch.xml?ref=4ffee041f68f40ce1c0aaedd8d7e8ba1a4b710e1",
            "patch": "@@ -20,7 +20,7 @@\n \n   <group if=\"$(var scenario_simulation)\">\n     <include file=\"$(find-pkg-share fault_injection)/launch/fault_injection.launch.xml\">\n-      <arg name=\"config_file\" value=\"$(var tier4_simulator_launch_param_path)/config/fault_injection.param.yaml\"/>\n+      <arg name=\"config_file\" value=\"$(var tier4_simulator_launch_param_path)/fault_injection.param.yaml\"/>\n     </include>\n   </group>\n "
        }
    ],
    "autowarefoundation/autoware.universe/2284": [
        {
            "sha": "e67c20577b0f5060319dbcbcb2c6d6b8ca58f5d6",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_out/pull_out_module.cpp",
            "status": "modified",
            "additions": 0,
            "deletions": 4,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3785ef5efbec24339f49001eae924dec0ca99461/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3785ef5efbec24339f49001eae924dec0ca99461/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp?ref=3785ef5efbec24339f49001eae924dec0ca99461",
            "patch": "@@ -435,10 +435,6 @@ void PullOutModule::updatePullOutStatus()\n   status_.current_lanes = util::getExtendedCurrentLanes(planner_data_);\n   status_.pull_out_lanes = pull_out_utils::getPullOutLanes(status_.current_lanes, planner_data_);\n \n-  // Get pull_out lanes\n-  const auto pull_out_lanes = pull_out_utils::getPullOutLanes(status_.current_lanes, planner_data_);\n-  status_.pull_out_lanes = pull_out_lanes;\n-\n   // combine road and shoulder lanes\n   status_.lanes = status_.current_lanes;\n   status_.lanes.insert("
        }
    ],
    "autowarefoundation/autoware.universe/2289": [
        {
            "sha": "ab55b14a0ebebaf73d73c6468bbada93341551da",
            "filename": "planning/motion_velocity_smoother/src/smoother/l2_pseudo_jerk_smoother.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/405cd00f25942676181c305a455755533e3e4191/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fl2_pseudo_jerk_smoother.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/405cd00f25942676181c305a455755533e3e4191/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fl2_pseudo_jerk_smoother.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fl2_pseudo_jerk_smoother.cpp?ref=405cd00f25942676181c305a455755533e3e4191",
            "patch": "@@ -106,11 +106,11 @@ bool L2PseudoJerkSmoother::apply(\n   // pseudo jerk: d(ai)/ds -> minimize weight * (a1 - a0)^2\n   for (unsigned int i = N; i < 2 * N - 1; ++i) {\n     unsigned int j = i - N;\n-    const double w_x_ds_inv = smooth_weight * (1.0 / std::max(interval_dist_arr.at(j), 0.0001));\n-    P(i, i) += w_x_ds_inv * w_x_ds_inv;\n-    P(i, i + 1) -= w_x_ds_inv * w_x_ds_inv;\n-    P(i + 1, i) -= w_x_ds_inv * w_x_ds_inv;\n-    P(i + 1, i + 1) += w_x_ds_inv * w_x_ds_inv;\n+    const double w_x_ds_inv = 1.0 / std::max(interval_dist_arr.at(j), 0.0001);\n+    P(i, i) += w_x_ds_inv * w_x_ds_inv * smooth_weight;\n+    P(i, i + 1) -= w_x_ds_inv * w_x_ds_inv * smooth_weight;\n+    P(i + 1, i) -= w_x_ds_inv * w_x_ds_inv * smooth_weight;\n+    P(i + 1, i + 1) += w_x_ds_inv * w_x_ds_inv * smooth_weight;\n   }\n \n   for (unsigned int i = 2 * N; i < 3 * N; ++i) {  // over velocity cost"
        }
    ],
    "autowarefoundation/autoware.universe/2299": [
        {
            "sha": "b775a24346bff7008b78c52638b992968a7fd383",
            "filename": "control/external_cmd_selector/src/external_cmd_selector/external_cmd_selector_node.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/72f4fee50b31ba5a68b08005a8de7f2003aac584/control%2Fexternal_cmd_selector%2Fsrc%2Fexternal_cmd_selector%2Fexternal_cmd_selector_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/72f4fee50b31ba5a68b08005a8de7f2003aac584/control%2Fexternal_cmd_selector%2Fsrc%2Fexternal_cmd_selector%2Fexternal_cmd_selector_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fexternal_cmd_selector%2Fsrc%2Fexternal_cmd_selector%2Fexternal_cmd_selector_node.cpp?ref=72f4fee50b31ba5a68b08005a8de7f2003aac584",
            "patch": "@@ -185,7 +185,11 @@ bool ExternalCmdSelector::onSelectExternalCommandService(\n   return true;\n }\n \n-void ExternalCmdSelector::onTimer() { pub_current_selector_mode_->publish(current_selector_mode_); }\n+void ExternalCmdSelector::onTimer()\n+{\n+  pub_current_selector_mode_->publish(current_selector_mode_);\n+  updater_.force_update();\n+}\n \n ExternalCmdSelector::InternalGearShift ExternalCmdSelector::convert(\n   const ExternalGearShift & command)"
        }
    ],
    "autowarefoundation/autoware.universe/2313": [
        {
            "sha": "ae24d40754835d0432ced9a69700ca2447be7b94",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/pull_over_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/639cf9d0266ad6923a5f7b8cdce9a3cffcbcbc35/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/639cf9d0266ad6923a5f7b8cdce9a3cffcbcbc35/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp?ref=639cf9d0266ad6923a5f7b8cdce9a3cffcbcbc35",
            "patch": "@@ -446,7 +446,7 @@ BehaviorModuleOutput PullOverModule::plan()\n       status_.lanes, parameters_.drivable_area_left_bound_offset,\n       parameters_.drivable_area_right_bound_offset);\n     path.drivable_area = util::generateDrivableArea(\n-      path, status_.lanes, p.drivable_area_resolution, p.vehicle_length, planner_data_);\n+      path, lane, p.drivable_area_resolution, p.vehicle_length, planner_data_);\n   }\n \n   BehaviorModuleOutput output;"
        }
    ],
    "autowarefoundation/autoware.universe/2322": [
        {
            "sha": "e0a6064875d91cdd68bec27aa97e44acecc4929c",
            "filename": "common/component_interface_utils/include/component_interface_utils/rclcpp/exceptions.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bd1b236a93bd28f63f080c59136de71045f43861/common%2Fcomponent_interface_utils%2Finclude%2Fcomponent_interface_utils%2Frclcpp%2Fexceptions.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bd1b236a93bd28f63f080c59136de71045f43861/common%2Fcomponent_interface_utils%2Finclude%2Fcomponent_interface_utils%2Frclcpp%2Fexceptions.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fcomponent_interface_utils%2Finclude%2Fcomponent_interface_utils%2Frclcpp%2Fexceptions.hpp?ref=bd1b236a93bd28f63f080c59136de71045f43861",
            "patch": "@@ -39,15 +39,15 @@ class ServiceException : public std::exception\n   template <class T>\n   void set(T & status) const\n   {\n-    status.success = false;\n+    status.success = success_;\n     status.code = code_;\n     status.message = message_;\n   }\n \n   ResponseStatus status() const\n   {\n     ResponseStatus status;\n-    status.success = false;\n+    status.success = success_;\n     status.code = code_;\n     status.message = message_;\n     return status;"
        }
    ],
    "autowarefoundation/autoware.universe/2337": [
        {
            "sha": "6ea03789e20ceb6621a887a83c6a8ffa3d873d16",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a770dbde9717b11e2a1badc61c593f4ee244e484/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a770dbde9717b11e2a1badc61c593f4ee244e484/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=a770dbde9717b11e2a1badc61c593f4ee244e484",
            "patch": "@@ -1829,11 +1829,11 @@ std::vector<DrivableLanes> expandLanelets(\n       expanded_lanes.left_lane =\n         lanelet::utils::getExpandedLanelet(lanes.left_lane, l_offset, r_offset);\n       expanded_lanes.right_lane =\n-        lanelet::utils::getExpandedLanelet(lanes.left_lane, l_offset, r_offset);\n+        lanelet::utils::getExpandedLanelet(lanes.right_lane, l_offset, r_offset);\n     } else {\n       expanded_lanes.left_lane = lanelet::utils::getExpandedLanelet(lanes.left_lane, l_offset, 0.0);\n       expanded_lanes.right_lane =\n-        lanelet::utils::getExpandedLanelet(lanes.left_lane, 0.0, r_offset);\n+        lanelet::utils::getExpandedLanelet(lanes.right_lane, 0.0, r_offset);\n     }\n     expanded_lanes.middle_lanes = lanes.middle_lanes;\n     expanded_drivable_lanes.push_back(expanded_lanes);"
        }
    ],
    "autowarefoundation/autoware.universe/2350": [
        {
            "sha": "d710b74111b1a3712da093d39413c1a83b1f5139",
            "filename": "planning/freespace_planning_algorithms/src/rrtstar.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 3,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/13073374525897aa0514066b922d36ef6b8fb5d8/planning%2Ffreespace_planning_algorithms%2Fsrc%2Frrtstar.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/13073374525897aa0514066b922d36ef6b8fb5d8/planning%2Ffreespace_planning_algorithms%2Fsrc%2Frrtstar.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Ffreespace_planning_algorithms%2Fsrc%2Frrtstar.cpp?ref=13073374525897aa0514066b922d36ef6b8fb5d8",
            "patch": "@@ -150,14 +150,18 @@ void RRTStar::setRRTPath(const std::vector<rrtstar_core::Pose> & waypoints)\n     pose.pose = local2global(costmap_, pose_local);\n     pose.header = header;\n     PlannerWaypoint pw;\n-    if (i == waypoints.size() - 1) {\n-      pw.is_back = waypoints_.waypoints.at(i - 1).is_back;\n-    } else {\n+    if (0 == i) {\n       const auto & pt_now = waypoints.at(i);\n       const auto & pt_next = waypoints.at(i + 1);\n       const double inpro =\n         cos(pt_now.yaw) * (pt_next.x - pt_now.x) + sin(pt_now.yaw) * (pt_next.y - pt_now.y);\n       pw.is_back = (inpro < 0.0);\n+    } else {\n+      const auto & pt_pre = waypoints.at(i - 1);\n+      const auto & pt_now = waypoints.at(i);\n+      const double inpro =\n+        cos(pt_pre.yaw) * (pt_now.x - pt_pre.x) + sin(pt_pre.yaw) * (pt_now.y - pt_pre.y);\n+      pw.is_back = !(inpro > 0.0);\n     }\n     pw.pose = pose;\n     waypoints_.waypoints.push_back(pw);"
        }
    ],
    "autowarefoundation/autoware.universe/2355": [
        {
            "sha": "88780045164443688cbcad6746d09fa8bb8b3a9a",
            "filename": "planning/freespace_planning_algorithms/src/astar_search.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0f8ae8bfded005b6c96818edc9dda5a50915d478/planning%2Ffreespace_planning_algorithms%2Fsrc%2Fastar_search.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0f8ae8bfded005b6c96818edc9dda5a50915d478/planning%2Ffreespace_planning_algorithms%2Fsrc%2Fastar_search.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Ffreespace_planning_algorithms%2Fsrc%2Fastar_search.cpp?ref=0f8ae8bfded005b6c96818edc9dda5a50915d478",
            "patch": "@@ -88,13 +88,13 @@ AstarSearch::TransitionTable createTransitionTable(\n   const auto & R_min = minimum_turning_radius;\n   const auto & R_max = maximum_turning_radius;\n   const double step_min = R_min * dtheta;\n-  const double dR = (R_max - R_min) / turning_radius_size;\n+  const double dR = (R_max - R_min) / std::max(turning_radius_size - 1, 1);\n \n   // NodeUpdate actions\n   std::vector<NodeUpdate> forward_node_candidates;\n   const NodeUpdate forward_straight{step_min, 0.0, 0.0, step_min, false, false};\n   forward_node_candidates.push_back(forward_straight);\n-  for (int i = 0; i < turning_radius_size + 1; ++i) {\n+  for (int i = 0; i < turning_radius_size; ++i) {\n     double R = R_min + i * dR;\n     double step = R * dtheta;\n     const NodeUpdate forward_left{"
        }
    ],
    "autowarefoundation/autoware.universe/2365": [
        {
            "sha": "19be3dc714c2208543997ea2ec1bdfeee6157c18",
            "filename": "system/default_ad_api/test/node/interface_version.py",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7b69c13de586eb899cae921fd9a381850362a6e3/system%2Fdefault_ad_api%2Ftest%2Fnode%2Finterface_version.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7b69c13de586eb899cae921fd9a381850362a6e3/system%2Fdefault_ad_api%2Ftest%2Fnode%2Finterface_version.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdefault_ad_api%2Ftest%2Fnode%2Finterface_version.py?ref=7b69c13de586eb899cae921fd9a381850362a6e3",
            "patch": "@@ -28,9 +28,9 @@\n rclpy.spin_until_future_complete(node, future)\n response = future.result()\n \n-if response.major != 0:\n+if response.major != 1:\n     exit(1)\n-if response.minor != 1:\n+if response.minor != 0:\n     exit(1)\n if response.patch != 0:\n     exit(1)"
        }
    ],
    "autowarefoundation/autoware.universe/2376": [
        {
            "sha": "ef0c2a3aca3845c64e14a15a992fe8e980159c36",
            "filename": "planning/freespace_planning_algorithms/README.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f7a4add6a9f535277b6d219937ae248ad8b34fda/planning%2Ffreespace_planning_algorithms%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f7a4add6a9f535277b6d219937ae248ad8b34fda/planning%2Ffreespace_planning_algorithms%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Ffreespace_planning_algorithms%2FREADME.md?ref=f7a4add6a9f535277b6d219937ae248ad8b34fda",
            "patch": "@@ -1,4 +1,4 @@\n-# `freespace planning algorithms`\n+# freespace planning algorithms\n \n ## Role\n \n@@ -48,7 +48,7 @@ colcon build --packages-select freespace_planning_algorithms\n colcon test --packages-select freespace_planning_algorithms\n ```\n \n-Inside the test, simulation results are stored in `/tmp/fpalgos-{#algorithm_type}-case{#scenario_number}` as a rosbag.\n+Inside the test, simulation results are stored in `/tmp/fpalgos-{algorithm_type}-case{scenario_number}` as a rosbag.\n Loading these resulting files, by using [test/debug_plot.py](test/debug_plot.py),\n one can create plots visualizing the path and obstacles as shown\n in the figures below. The created figures are then again saved in `/tmp`."
        }
    ],
    "autowarefoundation/autoware.universe/2382": [
        {
            "sha": "eda5b740abdd92d9e635c9e8afe0324b5e7f3346",
            "filename": "planning/behavior_path_planner/src/turn_signal_decider.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/72a4d799e6916d1b6b46af6d38cbb68923131250/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/72a4d799e6916d1b6b46af6d38cbb68923131250/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp?ref=72a4d799e6916d1b6b46af6d38cbb68923131250",
            "patch": "@@ -49,10 +49,19 @@ TurnIndicatorsCommand TurnSignalDecider::getTurnSignal(\n   const double backward_length = 50.0;\n   const lanelet::ConstLanelets current_lanes = util::calcLaneAroundPose(\n     planner_data->route_handler, current_pose, forward_length, backward_length);\n+\n+  if (current_lanes.empty()) {\n+    return turn_signal_info.turn_signal;\n+  }\n+\n   const PathWithLaneId extended_path = util::getCenterLinePath(\n     route_handler, current_lanes, current_pose, backward_length, forward_length,\n     planner_data->parameters);\n \n+  if (extended_path.points.empty()) {\n+    return turn_signal_info.turn_signal;\n+  }\n+\n   // Closest ego segment\n   const size_t ego_seg_idx = motion_utils::findFirstNearestSegmentIndexWithSoftConstraints(\n     extended_path.points, current_pose, nearest_dist_threshold, nearest_yaw_threshold);"
        }
    ],
    "autowarefoundation/autoware.universe/2386": [
        {
            "sha": "c03d0cf3a0027a8ed4eb7285a7f512f367ffc50e",
            "filename": "localization/gyro_odometer/src/gyro_odometer_core.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7633ba539fe5b18deb89975710ff74fffab4c50a/localization%2Fgyro_odometer%2Fsrc%2Fgyro_odometer_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7633ba539fe5b18deb89975710ff74fffab4c50a/localization%2Fgyro_odometer%2Fsrc%2Fgyro_odometer_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fgyro_odometer%2Fsrc%2Fgyro_odometer_core.cpp?ref=7633ba539fe5b18deb89975710ff74fffab4c50a",
            "patch": "@@ -89,17 +89,17 @@ void GyroOdometer::callbackImu(const sensor_msgs::msg::Imu::ConstSharedPtr imu_m\n     return;\n   }\n \n-  geometry_msgs::msg::TransformStamped::SharedPtr tf_base2imu_ptr =\n+  geometry_msgs::msg::TransformStamped::SharedPtr tf_imu2base_ptr =\n     std::make_shared<geometry_msgs::msg::TransformStamped>();\n-  getTransform(output_frame_, imu_msg_ptr_->header.frame_id, tf_base2imu_ptr);\n+  getTransform(output_frame_, imu_msg_ptr_->header.frame_id, tf_imu2base_ptr);\n \n   geometry_msgs::msg::Vector3Stamped angular_velocity;\n   angular_velocity.header = imu_msg_ptr_->header;\n   angular_velocity.vector = imu_msg_ptr_->angular_velocity;\n \n   geometry_msgs::msg::Vector3Stamped transformed_angular_velocity;\n-  transformed_angular_velocity.header = tf_base2imu_ptr->header;\n-  tf2::doTransform(angular_velocity, transformed_angular_velocity, *tf_base2imu_ptr);\n+  transformed_angular_velocity.header = tf_imu2base_ptr->header;\n+  tf2::doTransform(angular_velocity, transformed_angular_velocity, *tf_imu2base_ptr);\n \n   // TODO(YamatoAndo) move code\n   geometry_msgs::msg::TwistStamped twist;"
        }
    ],
    "autowarefoundation/autoware.universe/2392": [
        {
            "sha": "0367cf1166b52ea3bc10eab48308335c037c0bf5",
            "filename": "perception/lidar_centerpoint_tvm/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fd0660272e81120ca0f21afe31c7020fc83d6ef9/perception%2Flidar_centerpoint_tvm%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fd0660272e81120ca0f21afe31c7020fc83d6ef9/perception%2Flidar_centerpoint_tvm%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_centerpoint_tvm%2FCMakeLists.txt?ref=fd0660272e81120ca0f21afe31c7020fc83d6ef9",
            "patch": "@@ -74,4 +74,5 @@ if((NOT NN_DEPENDENCY_ENCODER STREQUAL \"\") AND (NOT NN_DEPENDENCY_BACKBONE STREQ\n   )\n else()\n   message(WARNING \"Neural network not found, skipping package.\")\n+  ament_auto_package()\n endif()"
        }
    ],
    "autowarefoundation/autoware.universe/2395": [
        {
            "sha": "27affd27635506223ebf3ebdcc9fbee64df5d6fc",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a661650e2604f4d91129e308ff5ee297b9ffa11a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a661650e2604f4d91129e308ff5ee297b9ffa11a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=a661650e2604f4d91129e308ff5ee297b9ffa11a",
            "patch": "@@ -2381,7 +2381,9 @@ boost::optional<AvoidLineArray> AvoidanceModule::findNewShiftLine(\n     }\n \n     // new shift points must exist in front of Ego\n-    if (candidate.start_longitudinal < 0.0) {\n+    // this value should be larger than -eps consider path shifter calculation error.\n+    const double eps = 0.01;\n+    if (candidate.start_longitudinal < -eps) {\n       continue;\n     }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2398": [
        {
            "sha": "56d74c9eab4ef99868d75edf83834737cccc2a0e",
            "filename": "planning/obstacle_avoidance_planner/src/mpt_optimizer.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/412de4cc9109e8978f06043e0159c85f0ca1c034/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/412de4cc9109e8978f06043e0159c85f0ca1c034/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp?ref=412de4cc9109e8978f06043e0159c85f0ca1c034",
            "patch": "@@ -296,6 +296,18 @@ boost::optional<MPTOptimizer::MPTTrajs> MPTOptimizer::getModelPredictiveTrajecto\n     fixed_ref_points, non_fixed_ref_points, optimized_control_variables.get(), mpt_matrix,\n     debug_data);\n \n+  // NOTE: Sometimes optimization failed without failed status.\n+  //       Therefore, we have to check if optimization was solved correctly by the result.\n+  constexpr double max_lateral_deviation = 3.0;\n+  for (const double lateral_error : debug_data.lateral_errors) {\n+    if (max_lateral_deviation < std::abs(lateral_error)) {\n+      RCLCPP_ERROR(\n+        rclcpp::get_logger(\"mpt_optimizer\"),\n+        \"return boost::none since lateral deviation is too large.\");\n+      return boost::none;\n+    }\n+  }\n+\n   auto full_optimized_ref_points = fixed_ref_points;\n   full_optimized_ref_points.insert(\n     full_optimized_ref_points.end(), non_fixed_ref_points.begin(), non_fixed_ref_points.end());"
        }
    ],
    "autowarefoundation/autoware.universe/2401": [
        {
            "sha": "5d62dfbc35d4e6183b5a76a587c14894c0f52101",
            "filename": "planning/behavior_velocity_planner/src/scene_module/detection_area/debug.cpp",
            "status": "modified",
            "additions": 22,
            "deletions": 4,
            "changes": 26,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4d984b80e2a4326c64a3440f3ed547230fb2e822/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fdetection_area%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4d984b80e2a4326c64a3440f3ed547230fb2e822/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fdetection_area%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fdetection_area%2Fdebug.cpp?ref=4d984b80e2a4326c64a3440f3ed547230fb2e822",
            "patch": "@@ -22,11 +22,13 @@\n #else\n #include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>\n #endif\n+#include <std_msgs/msg/color_rgba.hpp>\n \n #include <vector>\n \n namespace behavior_velocity_planner\n {\n+using std_msgs::msg::ColorRGBA;\n using tier4_autoware_utils::appendMarkerArray;\n using tier4_autoware_utils::createDefaultMarker;\n using tier4_autoware_utils::createMarkerColor;\n@@ -55,7 +57,8 @@ geometry_msgs::msg::Point toMsg(const lanelet::BasicPoint3d & point)\n }\n \n visualization_msgs::msg::MarkerArray createCorrespondenceMarkerArray(\n-  const lanelet::autoware::DetectionArea & detection_area_reg_elem, const rclcpp::Time & now)\n+  const lanelet::autoware::DetectionArea & detection_area_reg_elem, const rclcpp::Time & now,\n+  ColorRGBA & marker_color)\n {\n   visualization_msgs::msg::MarkerArray msg;\n \n@@ -87,7 +90,7 @@ visualization_msgs::msg::MarkerArray createCorrespondenceMarkerArray(\n     auto marker = createDefaultMarker(\n       \"map\", now, \"detection_area_polygon\", detection_area_reg_elem.id(),\n       visualization_msgs::msg::Marker::LINE_LIST, createMarkerScale(0.1, 0.0, 0.0),\n-      createMarkerColor(0.1, 0.1, 1.0, 0.500));\n+      createMarkerColor(marker_color.r, marker_color.g, marker_color.b, marker_color.a));\n     marker.lifetime = rclcpp::Duration::from_seconds(0.5);\n \n     for (const auto & detection_area : detection_area_reg_elem.detectionAreas()) {\n@@ -113,7 +116,7 @@ visualization_msgs::msg::MarkerArray createCorrespondenceMarkerArray(\n     auto marker = createDefaultMarker(\n       \"map\", now, \"detection_area_correspondence\", detection_area_reg_elem.id(),\n       visualization_msgs::msg::Marker::LINE_LIST, createMarkerScale(0.1, 0.0, 0.0),\n-      createMarkerColor(0.1, 0.1, 1.0, 0.500));\n+      createMarkerColor(marker_color.r, marker_color.g, marker_color.b, marker_color.a));\n     marker.lifetime = rclcpp::Duration::from_seconds(0.5);\n \n     for (const auto & detection_area : detection_area_reg_elem.detectionAreas()) {\n@@ -138,13 +141,28 @@ visualization_msgs::msg::MarkerArray DetectionAreaModule::createDebugMarkerArray\n   const rclcpp::Time now = clock_->now();\n \n   if (!debug_data_.stop_poses.empty()) {\n+    ColorRGBA marker_color;\n+    marker_color.r = 1.0;\n+    marker_color.g = 0.0;\n+    marker_color.b = 0.0;\n+    marker_color.a = 1.0;\n+\n     appendMarkerArray(\n-      createCorrespondenceMarkerArray(detection_area_reg_elem_, now), &wall_marker, now);\n+      createCorrespondenceMarkerArray(detection_area_reg_elem_, now, marker_color), &wall_marker);\n \n     appendMarkerArray(\n       debug::createPointsMarkerArray(\n         debug_data_.obstacle_points, \"obstacles\", module_id_, now, 0.6, 0.6, 0.6, 1.0, 0.0, 0.0),\n       &wall_marker, now);\n+  } else {\n+    ColorRGBA marker_color;\n+    marker_color.r = 0.0;\n+    marker_color.g = 1.0;\n+    marker_color.b = 0.0;\n+    marker_color.a = 1.0;\n+\n+    appendMarkerArray(\n+      createCorrespondenceMarkerArray(detection_area_reg_elem_, now, marker_color), &wall_marker);\n   }\n \n   return wall_marker;"
        }
    ],
    "autowarefoundation/autoware.universe/2411": [
        {
            "sha": "467fd407992e72418d47cf0eb1544fa7be1a85c6",
            "filename": "planning/behavior_path_planner/src/behavior_path_planner_node.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 13,
            "changes": 26,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4c92de28a9145c498df0b72413df0b4382f98239/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4c92de28a9145c498df0b72413df0b4382f98239/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp?ref=4c92de28a9145c498df0b72413df0b4382f98239",
            "patch": "@@ -620,19 +620,11 @@ void BehaviorPathPlannerNode::run()\n   planner_data_->prev_output_path = path;\n   mutex_pd_.unlock();\n \n-  PathWithLaneId clipped_path;\n-  const auto module_status_ptr_vec = bt_manager_->getModulesStatus();\n-  if (skipSmoothGoalConnection(module_status_ptr_vec)) {\n-    clipped_path = *path;\n-  } else {\n-    clipped_path = modifyPathForSmoothGoalConnection(*path);\n-  }\n-\n-  const size_t target_idx = findEgoIndex(clipped_path.points);\n-  util::clipPathLength(clipped_path, target_idx, planner_data_->parameters);\n+  const size_t target_idx = findEgoIndex(path->points);\n+  util::clipPathLength(*path, target_idx, planner_data_->parameters);\n \n-  if (!clipped_path.points.empty()) {\n-    path_publisher_->publish(clipped_path);\n+  if (!path->points.empty()) {\n+    path_publisher_->publish(*path);\n   } else {\n     RCLCPP_ERROR_THROTTLE(\n       get_logger(), *get_clock(), 5000, \"behavior path output is empty! Stop publish.\");\n@@ -730,8 +722,16 @@ PathWithLaneId::SharedPtr BehaviorPathPlannerNode::getPath(\n   RCLCPP_DEBUG(\n     get_logger(), \"BehaviorTreeManager: output is %s.\", bt_output.path ? \"FOUND\" : \"NOT FOUND\");\n \n+  PathWithLaneId connected_path;\n+  const auto module_status_ptr_vec = bt_manager_->getModulesStatus();\n+  if (skipSmoothGoalConnection(module_status_ptr_vec)) {\n+    connected_path = *path;\n+  } else {\n+    connected_path = modifyPathForSmoothGoalConnection(*path);\n+  }\n+\n   const auto resampled_path =\n-    util::resamplePathWithSpline(*path, planner_data_->parameters.path_interval);\n+    util::resamplePathWithSpline(connected_path, planner_data_->parameters.path_interval);\n   return std::make_shared<PathWithLaneId>(resampled_path);\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2450": [
        {
            "sha": "eac6f630b9ecdf189d272f76a6689ea7657b091d",
            "filename": "vehicle/raw_vehicle_cmd_converter/src/csv_loader.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0434149f118a57ec537fb8a2329c30b161696ef9/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fcsv_loader.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0434149f118a57ec537fb8a2329c30b161696ef9/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fcsv_loader.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fcsv_loader.cpp?ref=0434149f118a57ec537fb8a2329c30b161696ef9",
            "patch": "@@ -60,7 +60,7 @@ bool CSVLoader::validateMap(const Map & map, const bool is_col_decent)\n     const auto & vec = map.at(i);\n     const auto & prev_vec = map.at(i - 1);\n     // validate row data\n-    for (size_t j = 1; j < vec.size(); j++) {\n+    for (size_t j = 0; j < vec.size(); j++) {\n       // validate col\n       if (vec.at(j) <= prev_vec.at(j) && is_col_decent) {\n         invalid_index_pair = std::make_pair(i, j);"
        }
    ],
    "autowarefoundation/autoware.universe/2470": [
        {
            "sha": "55b57dbda5a73898ea899342eeac5268b22efd84",
            "filename": "launch/tier4_autoware_api_launch/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3a22e22316e5bebb29d17432eec7d0d7f550b68a/launch%2Ftier4_autoware_api_launch%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3a22e22316e5bebb29d17432eec7d0d7f550b68a/launch%2Ftier4_autoware_api_launch%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_autoware_api_launch%2Fpackage.xml?ref=3a22e22316e5bebb29d17432eec7d0d7f550b68a",
            "patch": "@@ -21,6 +21,7 @@\n   <exec_depend>awapi_awiv_adapter</exec_depend>\n   <exec_depend>default_ad_api</exec_depend>\n   <exec_depend>path_distance_calculator</exec_depend>\n+  <exec_depend>rosbridge_server</exec_depend>\n   <exec_depend>topic_tools</exec_depend>\n \n   <test_depend>ament_lint_auto</test_depend>"
        }
    ],
    "autowarefoundation/autoware.universe/2476": [
        {
            "sha": "405359e2020ff7f690372b346ca563049f5b6774",
            "filename": "system/emergency_handler/src/emergency_handler/emergency_handler_core.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8d6e8b07ad9d3a328bdec5dd68186753e48daeb3/system%2Femergency_handler%2Fsrc%2Femergency_handler%2Femergency_handler_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8d6e8b07ad9d3a328bdec5dd68186753e48daeb3/system%2Femergency_handler%2Fsrc%2Femergency_handler%2Femergency_handler_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Femergency_handler%2Fsrc%2Femergency_handler%2Femergency_handler_core.cpp?ref=8d6e8b07ad9d3a328bdec5dd68186753e48daeb3",
            "patch": "@@ -224,6 +224,10 @@ void EmergencyHandler::callMrmBehavior(\n   auto request = std::make_shared<tier4_system_msgs::srv::OperateMrm::Request>();\n   request->operate = true;\n \n+  if (mrm_behavior == MrmState::NONE) {\n+    RCLCPP_WARN(this->get_logger(), \"MRM behavior is None. Do nothing.\");\n+    return;\n+  }\n   if (mrm_behavior == MrmState::COMFORTABLE_STOP) {\n     auto result = client_mrm_comfortable_stop_->async_send_request(request).get();\n     if (result->response.success == true) {\n@@ -253,6 +257,10 @@ void EmergencyHandler::cancelMrmBehavior(\n   auto request = std::make_shared<tier4_system_msgs::srv::OperateMrm::Request>();\n   request->operate = false;\n \n+  if (mrm_behavior == MrmState::NONE) {\n+    // Do nothing\n+    return;\n+  }\n   if (mrm_behavior == MrmState::COMFORTABLE_STOP) {\n     auto result = client_mrm_comfortable_stop_->async_send_request(request).get();\n     if (result->response.success == true) {"
        }
    ],
    "autowarefoundation/autoware.universe/2482": [
        {
            "sha": "e4270909cdf212a9f6bf7132fe1d7b02c953de1a",
            "filename": "control/trajectory_follower/src/mpc_utils.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fb7a39f069d1aa226fd65331d13acf57ab14b1a8/control%2Ftrajectory_follower%2Fsrc%2Fmpc_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fb7a39f069d1aa226fd65331d13acf57ab14b1a8/control%2Ftrajectory_follower%2Fsrc%2Fmpc_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Ftrajectory_follower%2Fsrc%2Fmpc_utils.cpp?ref=fb7a39f069d1aa226fd65331d13acf57ab14b1a8",
            "patch": "@@ -230,7 +230,7 @@ bool convertToMPCTrajectory(\n   for (const autoware_auto_planning_msgs::msg::TrajectoryPoint & p : input.points) {\n     const double x = p.pose.position.x;\n     const double y = p.pose.position.y;\n-    const double z = 0.0;\n+    const double z = p.pose.position.z;\n     const double yaw = tf2::getYaw(p.pose.orientation);\n     const double vx = p.longitudinal_velocity_mps;\n     const double k = 0.0;"
        }
    ],
    "autowarefoundation/autoware.universe/2496": [
        {
            "sha": "c064f402a514efda4a1c45d658afd5c752ae7d03",
            "filename": "planning/planning_debug_tools/scripts/trajectory_visualizer.py",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/261aaacd25de94cbf6130cf4ddc3779846954fe6/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/261aaacd25de94cbf6130cf4ddc3779846954fe6/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py?ref=261aaacd25de94cbf6130cf4ddc3779846954fe6",
            "patch": "@@ -28,6 +28,8 @@\n import numpy as np\n import rclpy\n from rclpy.node import Node\n+from tf2_ros.buffer import Buffer\n+from tf2_ros.transform_listener import TransformListener\n from tier4_planning_msgs.msg import VelocityLimit\n \n parser = argparse.ArgumentParser()\n@@ -86,6 +88,9 @@ def __init__(self):\n         self.update_traj_ob_avoid = False\n         self.update_traj_ob_stop = False\n \n+        self.tf_buffer = Buffer(node=self)\n+        self.tf_listener = TransformListener(self.tf_buffer, self, spin_thread=True)\n+\n         self.self_pose = Pose()\n         self.self_pose_received = False\n         self.localization_vx = 0.0"
        }
    ],
    "autowarefoundation/autoware.universe/2499": [
        {
            "sha": "0904f7e7589d148315d3161d7b2805ee53445f9e",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/790f5ecf7d5f41c129c7b825536221e688b325c3/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/790f5ecf7d5f41c129c7b825536221e688b325c3/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=790f5ecf7d5f41c129c7b825536221e688b325c3",
            "patch": "@@ -80,7 +80,8 @@ size_t findNearestSegmentIndexFromLateralDistance(\n {\n   size_t closest_idx = motion_utils::findNearestSegmentIndex(points, pose.position);\n   double min_lateral_dist =\n-    motion_utils::calcLongitudinalOffsetToSegment(points, closest_idx, pose.position);\n+    std::fabs(motion_utils::calcLateralOffset(points, pose.position, closest_idx));\n+\n   for (size_t seg_idx = 0; seg_idx < points.size() - 1; ++seg_idx) {\n     const double lon_dist =\n       motion_utils::calcLongitudinalOffsetToSegment(points, seg_idx, pose.position);\n@@ -94,6 +95,7 @@ size_t findNearestSegmentIndexFromLateralDistance(\n       std::fabs(motion_utils::calcLateralOffset(points, pose.position, seg_idx));\n     if (lat_dist < min_lateral_dist) {\n       closest_idx = seg_idx;\n+      min_lateral_dist = lat_dist;\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2501": [
        {
            "sha": "4da5933afa7afd3876a2799158615012285dd366",
            "filename": "planning/behavior_path_planner/src/behavior_path_planner_node.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 4,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5fdb13d5560d1211c832d5195400e98e77a37711/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5fdb13d5560d1211c832d5195400e98e77a37711/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp?ref=5fdb13d5560d1211c832d5195400e98e77a37711",
            "patch": "@@ -618,7 +618,11 @@ void BehaviorPathPlannerNode::run()\n   // update planner data\n   planner_data_->self_pose = self_pose_listener_.getCurrentPose();\n \n-  const auto planner_data = planner_data_;\n+  const auto planner_data = std::make_shared<PlannerData>(*planner_data_);\n+\n+  // unlock planner data\n+  mutex_pd_.unlock();\n+\n   // run behavior planner\n   const auto output = bt_manager_->run(planner_data);\n \n@@ -631,9 +635,6 @@ void BehaviorPathPlannerNode::run()\n   // compute turn signal\n   computeTurnSignal(planner_data, *path, output);\n \n-  // unlock planner data\n-  mutex_pd_.unlock();\n-\n   // publish drivable bounds\n   publish_bounds(*path);\n "
        }
    ],
    "autowarefoundation/autoware.universe/2504": [
        {
            "sha": "08c23c24f73d60be1a2ac162678ec0b9b3a7acb1",
            "filename": "planning/freespace_planning_algorithms/test/src/test_freespace_planning_algorithms.cpp",
            "status": "modified",
            "additions": 43,
            "deletions": 44,
            "changes": 87,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/12119bc0e3e9f2f277135c2723662834159ef5ce/planning%2Ffreespace_planning_algorithms%2Ftest%2Fsrc%2Ftest_freespace_planning_algorithms.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/12119bc0e3e9f2f277135c2723662834159ef5ce/planning%2Ffreespace_planning_algorithms%2Ftest%2Fsrc%2Ftest_freespace_planning_algorithms.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Ffreespace_planning_algorithms%2Ftest%2Fsrc%2Ftest_freespace_planning_algorithms.cpp?ref=12119bc0e3e9f2f277135c2723662834159ef5ce",
            "patch": "@@ -40,16 +40,12 @@ const double width_lexas = 2.75;\n const fpa::VehicleShape vehicle_shape = fpa::VehicleShape{length_lexas, width_lexas, 1.5};\n const double pi = 3.1415926;\n const std::array<double, 3> start_pose{5.5, 4., pi * 0.5};\n-const std::array<double, 3> goal_pose1{8.0, 26.3, pi * 1.5};  // easiest\n-const std::array<std::array<double, 3>, 1> goal_poses{goal_pose1};\n-\n-// the tests for following goals randomly fail. needs to be fixed.\n-// https://github.com/autowarefoundation/autoware.universe/issues/2439\n-// const std::array<double, 3> goal_pose2{15.0, 11.6, pi * 0.5};  // second easiest\n-// const std::array<double, 3> goal_pose3{18.4, 26.3, pi * 1.5};  // third easiest\n-// const std::array<double, 3> goal_pose4{25.0, 26.3, pi * 1.5};  // most difficult\n-// const std::array<std::array<double, 3>, 4> goal_poses{\n-//   goal_pose1, goal_pose2, goal_pose3, goal_pose4};\n+const std::array<double, 3> goal_pose1{8.0, 26.3, pi * 1.5};   // easiest\n+const std::array<double, 3> goal_pose2{15.0, 11.6, pi * 0.5};  // second easiest\n+const std::array<double, 3> goal_pose3{18.4, 26.3, pi * 1.5};  // third easiest\n+const std::array<double, 3> goal_pose4{25.0, 26.3, pi * 1.5};  // most difficult\n+const std::array<std::array<double, 3>, 4> goal_poses{\n+  goal_pose1, goal_pose2, goal_pose3, goal_pose4};\n \n geometry_msgs::msg::Pose create_pose_msg(std::array<double, 3> pose3d)\n {\n@@ -249,7 +245,7 @@ std::unordered_map<AlgorithmType, std::string> rosbag_dir_prefix_table(\n    {RRTSTAR_UPDATE, \"fpalgos-rrtstar_update\"},\n    {RRTSTAR_INFORMED_UPDATE, \"fpalgos-rrtstar_informed_update\"}});\n \n-bool test_algorithm(enum AlgorithmType algo_type)\n+bool test_algorithm(enum AlgorithmType algo_type, bool dump_rosbag = false)\n {\n   std::unique_ptr<fpa::AbstractPlanningAlgorithm> algo;\n   if (algo_type == AlgorithmType::ASTAR_SINGLE) {\n@@ -272,8 +268,6 @@ bool test_algorithm(enum AlgorithmType algo_type)\n \n   rclcpp::Clock clock{RCL_SYSTEM_TIME};\n   for (size_t i = 0; i < goal_poses.size(); ++i) {\n-    const std::string dir_name =\n-      \"/tmp/\" + rosbag_dir_prefix_table[algo_type] + \"-case\" + std::to_string(i);\n     const auto goal_pose = goal_poses.at(i);\n \n     bool success_local = true;\n@@ -324,41 +318,46 @@ bool test_algorithm(enum AlgorithmType algo_type)\n       success_all = false;\n     }\n \n-    rcpputils::fs::remove_all(dir_name);\n-\n-    rosbag2_storage::StorageOptions storage_options;\n-    storage_options.uri = dir_name;\n-    storage_options.storage_id = \"sqlite3\";\n-\n-    rosbag2_cpp::ConverterOptions converter_options;\n-    converter_options.input_serialization_format = \"cdr\";\n-    converter_options.output_serialization_format = \"cdr\";\n-\n-    rosbag2_cpp::Writer writer(std::make_unique<rosbag2_cpp::writers::SequentialWriter>());\n-    writer.open(storage_options, converter_options);\n-\n-    add_message_to_rosbag(\n-      writer, create_float_msg(vehicle_shape.length), \"vehicle_length\", \"std_msgs/msg/Float64\");\n-    add_message_to_rosbag(\n-      writer, create_float_msg(vehicle_shape.width), \"vehicle_width\", \"std_msgs/msg/Float64\");\n-    add_message_to_rosbag(\n-      writer, create_float_msg(vehicle_shape.base2back), \"vehicle_base2back\",\n-      \"std_msgs/msg/Float64\");\n-\n-    add_message_to_rosbag(writer, costmap_msg, \"costmap\", \"nav_msgs/msg/OccupancyGrid\");\n-    add_message_to_rosbag(writer, create_pose_msg(start_pose), \"start\", \"geometry_msgs/msg/Pose\");\n-    add_message_to_rosbag(writer, create_pose_msg(goal_pose), \"goal\", \"geometry_msgs/msg/Pose\");\n-    add_message_to_rosbag(writer, trajectory, \"trajectory\", \"geometry_msgs/msg/PoseArray\");\n-    add_message_to_rosbag(writer, create_float_msg(msec), \"elapsed_time\", \"std_msgs/msg/Float64\");\n+    if (dump_rosbag) {\n+      // dump rosbag for visualization using python script\n+      const std::string dir_name =\n+        \"/tmp/\" + rosbag_dir_prefix_table[algo_type] + \"-case\" + std::to_string(i);\n+\n+      rcpputils::fs::remove_all(dir_name);\n+\n+      rosbag2_storage::StorageOptions storage_options;\n+      storage_options.uri = dir_name;\n+      storage_options.storage_id = \"sqlite3\";\n+\n+      rosbag2_cpp::ConverterOptions converter_options;\n+      converter_options.input_serialization_format = \"cdr\";\n+      converter_options.output_serialization_format = \"cdr\";\n+\n+      rosbag2_cpp::Writer writer(std::make_unique<rosbag2_cpp::writers::SequentialWriter>());\n+      writer.open(storage_options, converter_options);\n+\n+      add_message_to_rosbag(\n+        writer, create_float_msg(vehicle_shape.length), \"vehicle_length\", \"std_msgs/msg/Float64\");\n+      add_message_to_rosbag(\n+        writer, create_float_msg(vehicle_shape.width), \"vehicle_width\", \"std_msgs/msg/Float64\");\n+      add_message_to_rosbag(\n+        writer, create_float_msg(vehicle_shape.base2back), \"vehicle_base2back\",\n+        \"std_msgs/msg/Float64\");\n+\n+      add_message_to_rosbag(writer, costmap_msg, \"costmap\", \"nav_msgs/msg/OccupancyGrid\");\n+      add_message_to_rosbag(writer, create_pose_msg(start_pose), \"start\", \"geometry_msgs/msg/Pose\");\n+      add_message_to_rosbag(writer, create_pose_msg(goal_pose), \"goal\", \"geometry_msgs/msg/Pose\");\n+      add_message_to_rosbag(writer, trajectory, \"trajectory\", \"geometry_msgs/msg/PoseArray\");\n+      add_message_to_rosbag(writer, create_float_msg(msec), \"elapsed_time\", \"std_msgs/msg/Float64\");\n+    }\n   }\n   return success_all;\n }\n \n-// the following test fails https://github.com/autowarefoundation/autoware.universe/issues/2439\n-// TEST(AstarSearchTestSuite, SingleCurvature)\n-// {\n-//   EXPECT_TRUE(test_algorithm(AlgorithmType::ASTAR_SINGLE));\n-// }\n+TEST(AstarSearchTestSuite, SingleCurvature)\n+{\n+  EXPECT_TRUE(test_algorithm(AlgorithmType::ASTAR_SINGLE));\n+}\n \n TEST(AstarSearchTestSuite, MultiCurvature)\n {"
        }
    ],
    "autowarefoundation/autoware.universe/2508": [
        {
            "sha": "500eb5f90c77468a3b6df08382b5b09b06e98a72",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 37,
            "deletions": 17,
            "changes": 54,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/804b704a1db819ca5100c75f80b5d09cf01cf944/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/804b704a1db819ca5100c75f80b5d09cf01cf944/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=804b704a1db819ca5100c75f80b5d09cf01cf944",
            "patch": "@@ -101,6 +101,15 @@ size_t findNearestSegmentIndexFromLateralDistance(\n \n   return closest_idx;\n }\n+\n+bool checkHasSameLane(\n+  const lanelet::ConstLanelets & lanelets, const lanelet::ConstLanelet & target_lane)\n+{\n+  if (lanelets.empty()) return false;\n+\n+  const auto has_same = [&](const auto & ll) { return ll.id() == target_lane.id(); };\n+  return std::find_if(lanelets.begin(), lanelets.end(), has_same) != lanelets.end();\n+}\n }  // namespace\n \n namespace behavior_path_planner::util\n@@ -1164,30 +1173,41 @@ void generateDrivableArea(\n     addRightBoundPoints(lane.right_lane);\n   }\n \n-  const auto has_same_lane = [&](const auto & lane) {\n-    if (lanes.empty()) return false;\n-    const auto has_same = [&](const auto & ll) { return ll.id() == lane.id(); };\n-    return std::find_if(transformed_lanes.begin(), transformed_lanes.end(), has_same) !=\n-           transformed_lanes.end();\n-  };\n-\n-  const auto has_overlap = [&](const auto & lane) {\n-    for (const auto & transformed_lane : transformed_lanes) {\n-      if (boost::geometry::intersects(\n-            lane.polygon2d().basicPolygon(), transformed_lane.polygon2d().basicPolygon())) {\n-        return true;\n+  const auto has_overlap =\n+    [&](const lanelet::ConstLanelet & lane, const lanelet::Id & ignore_lane_id = lanelet::InvalId) {\n+      for (const auto & transformed_lane : transformed_lanes) {\n+        if (transformed_lane.id() == ignore_lane_id) {\n+          continue;\n+        }\n+        if (boost::geometry::intersects(\n+              lane.polygon2d().basicPolygon(), transformed_lane.polygon2d().basicPolygon())) {\n+          return true;\n+        }\n       }\n-    }\n-    return false;\n-  };\n+      return false;\n+    };\n \n   // Insert points after goal\n-  if (containsGoal(transformed_lanes, route_handler->getGoalLaneId())) {\n+  lanelet::ConstLanelet goal_lanelet;\n+  if (\n+    route_handler->getGoalLanelet(&goal_lanelet) &&\n+    checkHasSameLane(transformed_lanes, goal_lanelet)) {\n     const auto lanes_after_goal = route_handler->getLanesAfterGoal(vehicle_length);\n+    const auto next_lanes_after_goal = route_handler->getNextLanelets(goal_lanelet);\n     for (const auto & lane : lanes_after_goal) {\n-      if (has_same_lane(lane) || has_overlap(lane)) {\n+      // If lane is already in the transformed lanes, ignore it\n+      if (checkHasSameLane(transformed_lanes, lane)) {\n         continue;\n       }\n+      // Check if overlapped\n+      const bool is_overlapped =\n+        (checkHasSameLane(next_lanes_after_goal, lane)\n+           ? has_overlap(lane, route_handler->getGoalLaneId())\n+           : has_overlap(lane));\n+      if (is_overlapped) {\n+        continue;\n+      }\n+\n       addLeftBoundPoints(lane);\n       addRightBoundPoints(lane);\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/2529": [
        {
            "sha": "6072745b7fe070ac26bedda959e7c95d91882567",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 7,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/eb6f3c35a2d8882a373bdb38e72e49e633912fd0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/eb6f3c35a2d8882a373bdb38e72e49e633912fd0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=eb6f3c35a2d8882a373bdb38e72e49e633912fd0",
            "patch": "@@ -236,13 +236,9 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n     logger_.get_child(\"state_machine\"), *clock_);\n \n   setSafe(state_machine_.getState() == StateMachine::State::GO);\n-  if (is_entry_prohibited) {\n-    setDistance(motion_utils::calcSignedArcLength(\n-      path->points, planner_data_->current_pose.pose.position,\n-      path->points.at(stop_line_idx_final).point.pose.position));\n-  } else {\n-    setDistance(std::numeric_limits<double>::lowest());\n-  }\n+  setDistance(motion_utils::calcSignedArcLength(\n+    path->points, planner_data_->current_pose.pose.position,\n+    path->points.at(stop_line_idx_final).point.pose.position));\n \n   if (!isActivated()) {\n     // if RTC says intersection entry is 'dangerous', insert stop_line(v == 0.0) in this block"
        }
    ],
    "autowarefoundation/autoware.universe/2536": [
        {
            "sha": "f9d98b0241629adda013e1432d63a64518b6c719",
            "filename": "planning/behavior_path_planner/src/behavior_path_planner_node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/61afaedc483a87517bddedcde9bf6c107ca50bb6/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/61afaedc483a87517bddedcde9bf6c107ca50bb6/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp?ref=61afaedc483a87517bddedcde9bf6c107ca50bb6",
            "patch": "@@ -788,6 +788,9 @@ Path BehaviorPathPlannerNode::convertToPath(\n   }\n \n   output = util::toPath(*path_candidate_ptr);\n+  // header is replaced by the input one, so it is substituted again\n+  output.header = planner_data_->route_handler->getRouteHeader();\n+  output.header.stamp = this->now();\n \n   if (!is_ready) {\n     for (auto & point : output.points) {"
        }
    ],
    "autowarefoundation/autoware.universe/2542": [
        {
            "sha": "a86443f5cabdb0794e40fcbebca1f707bd7cd072",
            "filename": "launch/tier4_control_launch/config/operation_mode_transition_manager/operation_mode_transition_manager.param.yaml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1ced4af1301fcc516b841bc8c257aaf34df2b0b1/launch%2Ftier4_control_launch%2Fconfig%2Foperation_mode_transition_manager%2Foperation_mode_transition_manager.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1ced4af1301fcc516b841bc8c257aaf34df2b0b1/launch%2Ftier4_control_launch%2Fconfig%2Foperation_mode_transition_manager%2Foperation_mode_transition_manager.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_control_launch%2Fconfig%2Foperation_mode_transition_manager%2Foperation_mode_transition_manager.param.yaml?ref=1ced4af1301fcc516b841bc8c257aaf34df2b0b1",
            "patch": "@@ -3,6 +3,8 @@\n     transition_timeout: 10.0\n     frequency_hz: 10.0\n     check_engage_condition: false # set false if you do not want to care about the engage condition.\n+    nearest_dist_deviation_threshold: 3.0 # [m] for finding nearest index\n+    nearest_yaw_deviation_threshold: 1.57 # [rad] for finding nearest index\n     engage_acceptable_limits:\n       allow_autonomous_in_stopped: true  # no check if the velocity is zero, always allowed.\n       dist_threshold: 1.5"
        }
    ],
    "autowarefoundation/autoware.universe/2546": [
        {
            "sha": "6f5ec16ddfc0405149b1784710e83863f8e62562",
            "filename": "planning/mission_planner/src/lanelet2_plugins/utility_functions.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 5,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/736b54a9ddafa600e8ce2cad3f07733a4cc11687/planning%2Fmission_planner%2Fsrc%2Flanelet2_plugins%2Futility_functions.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/736b54a9ddafa600e8ce2cad3f07733a4cc11687/planning%2Fmission_planner%2Fsrc%2Flanelet2_plugins%2Futility_functions.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmission_planner%2Fsrc%2Flanelet2_plugins%2Futility_functions.cpp?ref=736b54a9ddafa600e8ce2cad3f07733a4cc11687",
            "patch": "@@ -59,22 +59,23 @@ lanelet::ConstLanelet combine_lanelets(const lanelet::ConstLanelets & lanelets)\n   lanelet::Points3d lefts;\n   lanelet::Points3d rights;\n   lanelet::Points3d centers;\n-  std::vector<uint64_t> bound_ids;\n+  std::vector<uint64_t> left_bound_ids;\n+  std::vector<uint64_t> right_bound_ids;\n \n   for (const auto & llt : lanelets) {\n     if (llt.id() != 0) {\n-      bound_ids.push_back(llt.leftBound().id());\n-      bound_ids.push_back(llt.rightBound().id());\n+      left_bound_ids.push_back(llt.leftBound().id());\n+      right_bound_ids.push_back(llt.rightBound().id());\n     }\n   }\n \n   for (const auto & llt : lanelets) {\n-    if (std::count(bound_ids.begin(), bound_ids.end(), llt.leftBound().id()) < 2) {\n+    if (std::count(right_bound_ids.begin(), right_bound_ids.end(), llt.leftBound().id()) < 1) {\n       for (const auto & pt : llt.leftBound()) {\n         lefts.push_back(lanelet::Point3d(pt));\n       }\n     }\n-    if (std::count(bound_ids.begin(), bound_ids.end(), llt.rightBound().id()) < 2) {\n+    if (std::count(left_bound_ids.begin(), left_bound_ids.end(), llt.rightBound().id()) < 1) {\n       for (const auto & pt : llt.rightBound()) {\n         rights.push_back(lanelet::Point3d(pt));\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/2548": [
        {
            "sha": "55ed5a4cf57b058b64a6fc3d7ef17d87c56eeebd",
            "filename": "planning/mission_planner/src/lanelet2_plugins/default_planner.cpp",
            "status": "modified",
            "additions": 19,
            "deletions": 19,
            "changes": 38,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9b0888c1d927c641d90355c997b190a4347a9461/planning%2Fmission_planner%2Fsrc%2Flanelet2_plugins%2Fdefault_planner.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9b0888c1d927c641d90355c997b190a4347a9461/planning%2Fmission_planner%2Fsrc%2Flanelet2_plugins%2Fdefault_planner.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmission_planner%2Fsrc%2Flanelet2_plugins%2Fdefault_planner.cpp?ref=9b0888c1d927c641d90355c997b190a4347a9461",
            "patch": "@@ -272,6 +272,25 @@ bool DefaultPlanner::is_goal_valid(\n   const geometry_msgs::msg::Pose & goal, lanelet::ConstLanelets path_lanelets)\n {\n   const auto logger = node_->get_logger();\n+\n+  const auto goal_lanelet_pt = lanelet::utils::conversion::toLaneletPoint(goal.position);\n+\n+  // check if goal is in shoulder lanelet\n+  lanelet::Lanelet closest_shoulder_lanelet;\n+  if (lanelet::utils::query::getClosestLanelet(\n+        shoulder_lanelets_, goal, &closest_shoulder_lanelet)) {\n+    if (is_in_lane(closest_shoulder_lanelet, goal_lanelet_pt)) {\n+      const auto lane_yaw =\n+        lanelet::utils::getLaneletAngle(closest_shoulder_lanelet, goal.position);\n+      const auto goal_yaw = tf2::getYaw(goal.orientation);\n+      const auto angle_diff = tier4_autoware_utils::normalizeRadian(lane_yaw - goal_yaw);\n+      const double th_angle = tier4_autoware_utils::deg2rad(param_.goal_angle_threshold_deg);\n+      if (std::abs(angle_diff) < th_angle) {\n+        return true;\n+      }\n+    }\n+  }\n+\n   lanelet::Lanelet closest_lanelet;\n   if (!lanelet::utils::query::getClosestLanelet(road_lanelets_, goal, &closest_lanelet)) {\n     return false;\n@@ -298,8 +317,6 @@ bool DefaultPlanner::is_goal_valid(\n     return false;\n   }\n \n-  const auto goal_lanelet_pt = lanelet::utils::conversion::toLaneletPoint(goal.position);\n-\n   if (is_in_lane(closest_lanelet, goal_lanelet_pt)) {\n     const auto lane_yaw = lanelet::utils::getLaneletAngle(closest_lanelet, goal.position);\n     const auto goal_yaw = tf2::getYaw(goal.orientation);\n@@ -323,23 +340,6 @@ bool DefaultPlanner::is_goal_valid(\n     return true;\n   }\n \n-  // check if goal is in shoulder lanelet\n-  lanelet::Lanelet closest_shoulder_lanelet;\n-  if (!lanelet::utils::query::getClosestLanelet(\n-        shoulder_lanelets_, goal, &closest_shoulder_lanelet)) {\n-    return false;\n-  }\n-  // check if goal pose is in shoulder lane\n-  if (is_in_lane(closest_shoulder_lanelet, goal_lanelet_pt)) {\n-    const auto lane_yaw = lanelet::utils::getLaneletAngle(closest_shoulder_lanelet, goal.position);\n-    const auto goal_yaw = tf2::getYaw(goal.orientation);\n-    const auto angle_diff = tier4_autoware_utils::normalizeRadian(lane_yaw - goal_yaw);\n-\n-    const double th_angle = tier4_autoware_utils::deg2rad(param_.goal_angle_threshold_deg);\n-    if (std::abs(angle_diff) < th_angle) {\n-      return true;\n-    }\n-  }\n   return false;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2550": [
        {
            "sha": "67f901ec1f8f55b6b5f9d89c8141cf6371a9eea1",
            "filename": "control/trajectory_follower_nodes/include/trajectory_follower_nodes/controller_node.hpp",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/519e1a227eec2a1f061b41bd6190dd32ce021a48/control%2Ftrajectory_follower_nodes%2Finclude%2Ftrajectory_follower_nodes%2Fcontroller_node.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/519e1a227eec2a1f061b41bd6190dd32ce021a48/control%2Ftrajectory_follower_nodes%2Finclude%2Ftrajectory_follower_nodes%2Fcontroller_node.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Ftrajectory_follower_nodes%2Finclude%2Ftrajectory_follower_nodes%2Fcontroller_node.hpp?ref=519e1a227eec2a1f061b41bd6190dd32ce021a48",
            "patch": "@@ -33,7 +33,6 @@\n #include \"autoware_auto_control_msgs/msg/ackermann_control_command.hpp\"\n #include \"autoware_auto_control_msgs/msg/longitudinal_command.hpp\"\n #include \"autoware_auto_planning_msgs/msg/trajectory.hpp\"\n-#include \"autoware_auto_system_msgs/msg/float32_multi_array_diagnostic.hpp\"\n #include \"autoware_auto_vehicle_msgs/msg/vehicle_odometry.hpp\"\n #include \"geometry_msgs/msg/accel_stamped.hpp\"\n #include \"geometry_msgs/msg/accel_with_covariance_stamped.hpp\""
        }
    ],
    "autowarefoundation/autoware.universe/2552": [
        {
            "sha": "5a5f2e880bcaeda58bbf91e382785617795dc278",
            "filename": "system/component_state_monitor/config/topics.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a90d39d3c84412d4874d137c3b66f1a53a3de2bc/system%2Fcomponent_state_monitor%2Fconfig%2Ftopics.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a90d39d3c84412d4874d137c3b66f1a53a3de2bc/system%2Fcomponent_state_monitor%2Fconfig%2Ftopics.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fcomponent_state_monitor%2Fconfig%2Ftopics.yaml?ref=a90d39d3c84412d4874d137c3b66f1a53a3de2bc",
            "patch": "@@ -82,7 +82,7 @@\n   args:\n     node_name_suffix: mission_planning_route\n     topic: /planning/mission_planning/route\n-    topic_type: autoware_auto_planning_msgs/msg/LaneletRoute\n+    topic_type: autoware_planning_msgs/msg/LaneletRoute\n     best_effort: false\n     transient_local: true\n     warn_rate: 0.0"
        }
    ],
    "autowarefoundation/autoware.universe/2554": [
        {
            "sha": "220c087d18de0cdb34edd2e1e207d7f711539f8d",
            "filename": "launch/tier4_planning_launch/config/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/intersection.param.yaml",
            "status": "removed",
            "additions": 0,
            "deletions": 26,
            "changes": 26,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cc33997f75076a85d68838a31a95c82ce9cab1ef/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Fbehavior_velocity_planner%2Fintersection.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cc33997f75076a85d68838a31a95c82ce9cab1ef/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Fbehavior_velocity_planner%2Fintersection.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Fbehavior_velocity_planner%2Fintersection.param.yaml?ref=cc33997f75076a85d68838a31a95c82ce9cab1ef",
            "patch": "@@ -1,26 +0,0 @@\n-/**:\n-  ros__parameters:\n-    intersection:\n-      state_transit_margin_time: 0.5\n-      stop_line_margin: 3.0\n-      keep_detection_line_margin: 1.0 # distance (toward path end) from generated stop line. keep detection if ego is before this line and ego.vel < keep_detection_vel_thr\n-      keep_detection_vel_thr: 0.833 # == 3.0km/h\n-      stuck_vehicle_detect_dist: 3.0 # this should be the length between cars when they are stopped. The actual stuck vehicle detection length will be this value + vehicle_length.\n-      stuck_vehicle_ignore_dist: 10.0 # obstacle stop max distance(5.0m) + stuck vehicle size / 2 (0.0m-)\n-      stuck_vehicle_vel_thr: 0.833 # 0.833m/s = 3.0km/h\n-      intersection_velocity: 2.778 # 2.778m/s = 10.0km/h\n-      intersection_max_accel: 0.5 # m/ss\n-      detection_area_margin: 0.5 # [m]\n-      detection_area_right_margin: 0.5 # [m]\n-      detection_area_left_margin: 0.5 # [m]\n-      detection_area_length: 200.0 # [m]\n-      detection_area_angle_threshold: 0.785 # [rad]\n-      min_predicted_path_confidence: 0.05\n-      collision_start_margin_time: 5.0 # [s]\n-      collision_end_margin_time: 2.0 # [s]\n-      use_stuck_stopline: false # stopline generate before the intersection lanelet when is_stuck\n-      assumed_front_car_decel: 1.0 # [m/ss] the expected deceleration of front car when front car as well as ego are turning\n-      enable_front_car_decel_prediction: false # By default this feature is disabled\n-\n-    merge_from_private_road:\n-      stop_duration_sec: 1.0"
        }
    ],
    "autowarefoundation/autoware.universe/2557": [
        {
            "sha": "d26180f604e88678935abf8113823dd5dfd60be1",
            "filename": "planning/obstacle_avoidance_planner/src/eb_path_optimizer.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9151b16bb5515b1139a6e8823aae21007bf18113/planning%2Fobstacle_avoidance_planner%2Fsrc%2Feb_path_optimizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9151b16bb5515b1139a6e8823aae21007bf18113/planning%2Fobstacle_avoidance_planner%2Fsrc%2Feb_path_optimizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Feb_path_optimizer.cpp?ref=9151b16bb5515b1139a6e8823aae21007bf18113",
            "patch": "@@ -154,6 +154,9 @@ EBPathOptimizer::getOptimizedTrajectory(\n       interpolated_points = std::vector<geometry_msgs::msg::Point>(\n         interpolated_points.begin(),\n         interpolated_points.begin() + interpolated_points_end_seg_idx.get());\n+      if (interpolated_points.empty()) {\n+        return boost::none;\n+      }\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2560": [
        {
            "sha": "c6d29dd6b772fad34338a7bd27bf18b05e20a6d6",
            "filename": "system/system_monitor/launch/system_monitor.launch.xml",
            "status": "modified",
            "additions": 8,
            "deletions": 8,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c57bf27afbb922932f340ff15a6f6b97fdf3df84/system%2Fsystem_monitor%2Flaunch%2Fsystem_monitor.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c57bf27afbb922932f340ff15a6f6b97fdf3df84/system%2Fsystem_monitor%2Flaunch%2Fsystem_monitor.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fsystem_monitor%2Flaunch%2Fsystem_monitor.launch.xml?ref=c57bf27afbb922932f340ff15a6f6b97fdf3df84",
            "patch": "@@ -1,12 +1,12 @@\n <launch>\n-  <arg name=\"cpu_monitor_config_file\" default=\"$(find-pkg-share tier4_system_launch)/config/system_monitor/cpu_monitor.param.yaml\"/>\n-  <arg name=\"hdd_monitor_config_file\" default=\"$(find-pkg-share tier4_system_launch)/config/system_monitor/hdd_monitor.param.yaml\"/>\n-  <arg name=\"mem_monitor_config_file\" default=\"$(find-pkg-share tier4_system_launch)/config/system_monitor/mem_monitor.param.yaml\"/>\n-  <arg name=\"net_monitor_config_file\" default=\"$(find-pkg-share tier4_system_launch)/config/system_monitor/net_monitor.param.yaml\"/>\n-  <arg name=\"ntp_monitor_config_file\" default=\"$(find-pkg-share tier4_system_launch)/config/system_monitor/ntp_monitor.param.yaml\"/>\n-  <arg name=\"process_monitor_config_file\" default=\"$(find-pkg-share tier4_system_launch)/config/system_monitor/process_monitor.param.yaml\"/>\n-  <arg name=\"gpu_monitor_config_file\" default=\"$(find-pkg-share tier4_system_launch)/config/system_monitor/gpu_monitor.param.yaml\"/>\n-  <arg name=\"voltage_monitor_config_file\" default=\"$(find-pkg-share tier4_system_launch)/config/system_monitor/voltage_monitor.param.yaml\"/>\n+  <arg name=\"cpu_monitor_config_file\" default=\"$(find-pkg-share system_monitor)/config/cpu_monitor.param.yaml\"/>\n+  <arg name=\"hdd_monitor_config_file\" default=\"$(find-pkg-share system_monitor)/config/hdd_monitor.param.yaml\"/>\n+  <arg name=\"mem_monitor_config_file\" default=\"$(find-pkg-share system_monitor)/config/mem_monitor.param.yaml\"/>\n+  <arg name=\"net_monitor_config_file\" default=\"$(find-pkg-share system_monitor)/config/net_monitor.param.yaml\"/>\n+  <arg name=\"ntp_monitor_config_file\" default=\"$(find-pkg-share system_monitor)/config/ntp_monitor.param.yaml\"/>\n+  <arg name=\"process_monitor_config_file\" default=\"$(find-pkg-share system_monitor)/config/process_monitor.param.yaml\"/>\n+  <arg name=\"gpu_monitor_config_file\" default=\"$(find-pkg-share system_monitor)/config/gpu_monitor.param.yaml\"/>\n+  <arg name=\"voltage_monitor_config_file\" default=\"$(find-pkg-share system_monitor)/config/voltage_monitor.param.yaml\"/>\n \n   <group>\n     <node_container pkg=\"rclcpp_components\" exec=\"component_container_mt\" name=\"system_monitor_container\" namespace=\"system_monitor\" output=\"screen\">"
        }
    ],
    "autowarefoundation/autoware.universe/2562": [
        {
            "sha": "b413779705af9b24f22ea782c0d9870910ad1f2c",
            "filename": "localization/gyro_odometer/src/gyro_odometer_core.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4fe97d81c91456e069f3c11e82a96d72fc066111/localization%2Fgyro_odometer%2Fsrc%2Fgyro_odometer_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4fe97d81c91456e069f3c11e82a96d72fc066111/localization%2Fgyro_odometer%2Fsrc%2Fgyro_odometer_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fgyro_odometer%2Fsrc%2Fgyro_odometer_core.cpp?ref=4fe97d81c91456e069f3c11e82a96d72fc066111",
            "patch": "@@ -80,6 +80,7 @@ geometry_msgs::msg::TwistWithCovarianceStamped concatGyroAndOdometer(\n   } else {\n     twist_with_cov.header.stamp = latest_vehicle_twist_stamp;\n   }\n+  twist_with_cov.header.frame_id = gyro_queue.front().header.frame_id;\n   twist_with_cov.twist.twist.linear.x = vx_mean;\n   twist_with_cov.twist.twist.angular = gyro_mean;\n \n@@ -211,6 +212,7 @@ void GyroOdometer::callbackImu(const sensor_msgs::msg::Imu::ConstSharedPtr imu_m\n \n   sensor_msgs::msg::Imu gyro_base_link;\n   gyro_base_link.header = imu_msg_ptr->header;\n+  gyro_base_link.header.frame_id = output_frame_;\n   gyro_base_link.angular_velocity = transformed_angular_velocity.vector;\n   gyro_base_link.angular_velocity_covariance =\n     transformCovariance(imu_msg_ptr->angular_velocity_covariance);"
        }
    ],
    "autowarefoundation/autoware.universe/2572": [
        {
            "sha": "c1f9a145216ce96a8f2d3d4c23d287308ebd7ce5",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/pull_over_module.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6a98642b6900dcf7fb16e34697624c12027ce5f8/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6a98642b6900dcf7fb16e34697624c12027ce5f8/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp?ref=6a98642b6900dcf7fb16e34697624c12027ce5f8",
            "patch": "@@ -635,6 +635,7 @@ PathWithLaneId PullOverModule::generateEmergencyStopPath()\n   const auto & current_pose = planner_data_->self_pose->pose;\n   const auto & common_parameters = planner_data_->parameters;\n   const double current_vel = planner_data_->self_odometry->twist.twist.linear.x;\n+  constexpr double eps_vel = 0.01;\n \n   // generate stop reference path\n   const auto s_current =\n@@ -662,7 +663,7 @@ PathWithLaneId PullOverModule::generateEmergencyStopPath()\n       common_parameters.ego_nearest_yaw_threshold);\n     const double distance_to_target = calcSignedArcLength(\n       stop_path.points, current_pose.position, ego_idx, p.pose.position, target_idx);\n-    if (0.0 < distance_to_target) {\n+    if (0.0 < distance_to_target && eps_vel < current_vel) {\n       p.longitudinal_velocity_mps = std::clamp(\n         static_cast<float>(\n           current_vel * (min_stop_distance - distance_to_target) / min_stop_distance),"
        }
    ],
    "autowarefoundation/autoware.universe/2574": [
        {
            "sha": "d2d54098859c95a4991074262b713983f671d790",
            "filename": "perception/traffic_light_map_based_detector/src/node.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1fb27f62f8b3fdd3f3cad3be2be3fb70d6713216/perception%2Ftraffic_light_map_based_detector%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1fb27f62f8b3fdd3f3cad3be2be3fb70d6713216/perception%2Ftraffic_light_map_based_detector%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_map_based_detector%2Fsrc%2Fnode.cpp?ref=1fb27f62f8b3fdd3f3cad3be2be3fb70d6713216",
            "patch": "@@ -331,6 +331,12 @@ void MapBasedDetector::getVisibleTrafficLights(\n   std::vector<lanelet::ConstLineString3d> & visible_traffic_lights)\n {\n   for (const auto & traffic_light : all_traffic_lights) {\n+    // some \"Traffic Light\" are actually not traffic lights\n+    if (\n+      traffic_light.hasAttribute(\"subtype\") == false ||\n+      traffic_light.attribute(\"subtype\").value() == \"solid\") {\n+      continue;\n+    }\n     const auto & tl_left_down_point = traffic_light.front();\n     const auto & tl_right_down_point = traffic_light.back();\n     const double tl_height = traffic_light.attributeOr(\"height\", 0.0);"
        }
    ],
    "autowarefoundation/autoware.universe/2575": [
        {
            "sha": "a01b919a186107c45add788b6f7142d8c72b59c2",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/util.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b4af3283299a9be11736de48a10b9c603f76a1bd/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b4af3283299a9be11736de48a10b9c603f76a1bd/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp?ref=b4af3283299a9be11736de48a10b9c603f76a1bd",
            "patch": "@@ -372,10 +372,10 @@ bool isLaneChangePathSafe(\n     lane_change_parameters.enable_collision_check_at_prepare_phase;\n   const auto & lane_changing_duration = lane_change_parameters.lane_changing_duration;\n   const double check_end_time = lane_change_prepare_duration + lane_changing_duration;\n-  constexpr double ego_predicted_path_min_speed{1.0};\n+  const double min_lc_speed{lane_change_parameters.minimum_lane_change_velocity};\n   const auto vehicle_predicted_path = util::convertToPredictedPath(\n     path, current_twist, current_pose, static_cast<double>(current_seg_idx), check_end_time,\n-    time_resolution, acceleration, ego_predicted_path_min_speed);\n+    time_resolution, acceleration, min_lc_speed);\n   const auto prepare_phase_ignore_target_speed_thresh =\n     lane_change_parameters.prepare_phase_ignore_target_speed_thresh;\n \n@@ -387,7 +387,7 @@ bool isLaneChangePathSafe(\n     util::filterObjectIndicesByLanelets(*dynamic_objects, target_lanes);\n \n   // find objects in current lane\n-  constexpr double check_distance = 100.0;\n+  const double check_distance = common_parameters.forward_path_length;\n   const auto current_lane_object_indices_lanelet = util::filterObjectIndicesByLanelets(\n     *dynamic_objects, current_lanes, arc.length, arc.length + check_distance);\n "
        }
    ],
    "autowarefoundation/autoware.universe/2576": [
        {
            "sha": "258e942169556cee214c62a087926d350ed41d4d",
            "filename": "localization/localization_error_monitor/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fd32752776ff622af0b055ab4628aed8bdb67e58/localization%2Flocalization_error_monitor%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fd32752776ff622af0b055ab4628aed8bdb67e58/localization%2Flocalization_error_monitor%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Flocalization_error_monitor%2FCMakeLists.txt?ref=fd32752776ff622af0b055ab4628aed8bdb67e58",
            "patch": "@@ -10,5 +10,6 @@ ament_auto_add_executable(localization_error_monitor\n )\n \n ament_auto_package(INSTALL_TO_SHARE\n+  config\n   launch\n )"
        }
    ],
    "autowarefoundation/autoware.universe/2582": [
        {
            "sha": "0b617373ff5ba6f75e005dcceca69d81c9b90bb7",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/376ae497303453463f9168aff822347eaab32f6e/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/376ae497303453463f9168aff822347eaab32f6e/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=376ae497303453463f9168aff822347eaab32f6e",
            "patch": "@@ -168,7 +168,7 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n       // in case ego could not stop exactly before the stop line, but with some overshoot,\n       // keep detection within some margin under low velocity threshold\n     } else if (is_over_pass_judge_line && is_go_out_ && !external_stop) {\n-      RCLCPP_INFO(logger_, \"over the keep_detection line and not low speed. no plan needed.\");\n+      RCLCPP_DEBUG(logger_, \"over the keep_detection line and not low speed. no plan needed.\");\n       RCLCPP_DEBUG(logger_, \"===== plan end =====\");\n       setSafe(true);\n       setDistance(motion_utils::calcSignedArcLength("
        }
    ],
    "autowarefoundation/autoware.universe/2584": [
        {
            "sha": "6b71d8a5cf4a27954e6b373dab2940c10ebe3810",
            "filename": "planning/behavior_velocity_planner/src/scene_module/crosswalk/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/74726f059853450724755ed947ededab0fdf6eb0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/74726f059853450724755ed947ededab0fdf6eb0/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fscene_crosswalk.cpp?ref=74726f059853450724755ed947ededab0fdf6eb0",
            "patch": "@@ -446,7 +446,7 @@ boost::optional<geometry_msgs::msg::Point> CrosswalkModule::findNearestStopPoint\n   const auto stop_line_distance = exist_stopline_in_map ? 0.0 : planner_param_.stop_line_distance;\n   const auto margin = stop_at_stop_line ? stop_line_distance + base_link2front\n                                         : planner_param_.stop_margin + base_link2front;\n-  const auto stop_pose = calcLongitudinalOffsetPose(sparse_resample_path.points, p_stop, -margin);\n+  const auto stop_pose = calcLongitudinalOffsetPose(ego_path.points, p_stop, -margin);\n \n   if (!stop_pose) {\n     return {};"
        }
    ],
    "autowarefoundation/autoware.universe/2592": [
        {
            "sha": "fc1169653096fa578db2804add6c4da4d0c428f0",
            "filename": "planning/behavior_path_planner/src/scene_module/utils/path_shifter.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8cdc1080bd69c3446045e8fb26986a772fc78831/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fpath_shifter.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8cdc1080bd69c3446045e8fb26986a772fc78831/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fpath_shifter.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fpath_shifter.cpp?ref=8cdc1080bd69c3446045e8fb26986a772fc78831",
            "patch": "@@ -270,7 +270,7 @@ std::pair<std::vector<double>, std::vector<double>> PathShifter::calcBaseLengths\n \n   if (speed < 1.0e-5) {\n     // no need to consider acceleration limit\n-    RCLCPP_INFO(logger_, \"set velocity is zero. acc limit is ignored\");\n+    RCLCPP_WARN_THROTTLE(logger_, clock_, 3000, \"set velocity is zero. acc limit is ignored\");\n     return getBaseLengthsWithoutAccelLimit(arclength, shift_length, offset_back);\n   }\n \n@@ -280,7 +280,9 @@ std::pair<std::vector<double>, std::vector<double>> PathShifter::calcBaseLengths\n \n   if (a_max < acc_limit_) {\n     // no need to consider acceleration limit\n-    RCLCPP_DEBUG(logger_, \"No need to consider acc limit. max: %f, limit: %f\", a_max, acc_limit_);\n+    RCLCPP_WARN_THROTTLE(\n+      logger_, clock_, 3000, \"No need to consider acc limit. max: %f, limit: %f\", a_max,\n+      acc_limit_);\n     return getBaseLengthsWithoutAccelLimit(arclength, shift_length, offset_back);\n   }\n \n@@ -290,8 +292,8 @@ std::pair<std::vector<double>, std::vector<double>> PathShifter::calcBaseLengths\n \n   if (tj < 0.0 || ta < 0.0 || jerk < 0.0 || tj / T < 0.1) {\n     // no need to consider acceleration limit\n-    RCLCPP_WARN(\n-      logger_,\n+    RCLCPP_WARN_THROTTLE(\n+      logger_, clock_, 3000,\n       \"Acc limit is too small to be applied. Tj: %f, Ta: %f, j: %f, a_max: %f, acc_limit: %f\", tj,\n       ta, jerk, a_max, acc_limit_);\n     return getBaseLengthsWithoutAccelLimit(arclength, shift_length, offset_back);"
        }
    ],
    "autowarefoundation/autoware.universe/2593": [
        {
            "sha": "d8d561a9c509869d10eb4f8c27b95bc0b84e23de",
            "filename": "sensing/pointcloud_preprocessor/CMakeLists.txt",
            "status": "modified",
            "additions": 0,
            "deletions": 9,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9d12252954e0d6c31bd23fad212c9a91c2cb2e2d/sensing%2Fpointcloud_preprocessor%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9d12252954e0d6c31bd23fad212c9a91c2cb2e2d/sensing%2Fpointcloud_preprocessor%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2FCMakeLists.txt?ref=9d12252954e0d6c31bd23fad212c9a91c2cb2e2d",
            "patch": "@@ -11,7 +11,6 @@ find_package(OpenCV REQUIRED)\n find_package(Eigen3 REQUIRED)\n find_package(Boost REQUIRED)\n find_package(PCL REQUIRED)\n-find_package(OpenMP)\n find_package(CGAL REQUIRED COMPONENTS Core)\n \n include_directories(\n@@ -21,7 +20,6 @@ include_directories(\n   ${PCL_INCLUDE_DIRS}\n   ${EIGEN3_INCLUDE_DIRS}\n   ${OpenCV_INCLUDE_DIRS}\n-  ${GRID_MAP_INCLUDE_DIR}\n )\n \n add_library(pointcloud_preprocessor_filter_base SHARED\n@@ -72,13 +70,6 @@ target_link_libraries(pointcloud_preprocessor_filter\n   ${PCL_LIBRARIES}\n )\n \n-if(OPENMP_FOUND)\n-  set_target_properties(pointcloud_preprocessor_filter PROPERTIES\n-    COMPILE_FLAGS ${OpenMP_CXX_FLAGS}\n-    LINK_FLAGS ${OpenMP_CXX_FLAGS}\n-  )\n-endif()\n-\n # ========== Concatenate data ==========\n rclcpp_components_register_node(pointcloud_preprocessor_filter\n   PLUGIN \"pointcloud_preprocessor::PointCloudConcatenateDataSynchronizerComponent\""
        }
    ],
    "autowarefoundation/autoware.universe/2594": [
        {
            "sha": "ad7257e9070471ac0b491e318e1655b50aa4912f",
            "filename": "planning/obstacle_avoidance_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/067ebcb0137a8fd3e37921ec721124ea815400b0/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/067ebcb0137a8fd3e37921ec721124ea815400b0/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Futils.cpp?ref=067ebcb0137a8fd3e37921ec721124ea815400b0",
            "patch": "@@ -641,10 +641,10 @@ bool isOutsideDrivableArea(\n   const auto left_start_point = getStartPoint(left_bound, right_bound.front());\n   const auto right_start_point = getStartPoint(right_bound, left_bound.front());\n \n-  // ignore point in front of the front line\n+  // ignore point behind of the front line\n   const std::vector<geometry_msgs::msg::Point> front_bound = {left_start_point, right_start_point};\n   const double lat_dist_to_front_bound = motion_utils::calcLateralOffset(front_bound, point);\n-  if (lat_dist_to_front_bound > min_dist) {\n+  if (lat_dist_to_front_bound < -min_dist) {\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2595": [
        {
            "sha": "8abad2df849368c9eba39d7a823fcc00a715afea",
            "filename": "simulator/simple_planning_simulator/src/simple_planning_simulator/vehicle_model/sim_model_ideal_steer_acc_geared.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a563dcfd446b407b9a847952cf550e33d36dde1b/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fvehicle_model%2Fsim_model_ideal_steer_acc_geared.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a563dcfd446b407b9a847952cf550e33d36dde1b/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fvehicle_model%2Fsim_model_ideal_steer_acc_geared.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fvehicle_model%2Fsim_model_ideal_steer_acc_geared.cpp?ref=a563dcfd446b407b9a847952cf550e33d36dde1b",
            "patch": "@@ -69,7 +69,6 @@ void SimModelIdealSteerAccGeared::updateStateWithGear(\n     state(IDX::X) = prev_state(IDX::X);\n     state(IDX::Y) = prev_state(IDX::Y);\n     state(IDX::YAW) = prev_state(IDX::YAW);\n-    current_acc_ = (state(IDX::VX) - prev_state(IDX::VX)) / std::max(dt, 1.0e-5);\n   };\n \n   using autoware_auto_vehicle_msgs::msg::GearCommand;\n@@ -94,4 +93,6 @@ void SimModelIdealSteerAccGeared::updateStateWithGear(\n   } else {\n     setStopState();\n   }\n+  // calculate acc from velocity diff\n+  current_acc_ = (state(IDX::VX) - prev_state(IDX::VX)) / std::max(dt, 1.0e-5);\n }"
        }
    ],
    "autowarefoundation/autoware.universe/2596": [
        {
            "sha": "efd20453c6c57d0a0773ec3bf83fc15bff034105",
            "filename": "planning/behavior_path_planner/src/scene_module/utils/path_shifter.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/986f0c4ef58e03ff09ef84793f56f3fd67340bf2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fpath_shifter.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/986f0c4ef58e03ff09ef84793f56f3fd67340bf2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fpath_shifter.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fpath_shifter.cpp?ref=986f0c4ef58e03ff09ef84793f56f3fd67340bf2",
            "patch": "@@ -270,7 +270,7 @@ std::pair<std::vector<double>, std::vector<double>> PathShifter::calcBaseLengths\n \n   if (speed < 1.0e-5) {\n     // no need to consider acceleration limit\n-    RCLCPP_WARN_THROTTLE(logger_, clock_, 3000, \"set velocity is zero. acc limit is ignored\");\n+    RCLCPP_DEBUG(logger_, \"set velocity is zero. acc limit is ignored\");\n     return getBaseLengthsWithoutAccelLimit(arclength, shift_length, offset_back);\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2601": [
        {
            "sha": "b8ddf7c8e07274d5d7826182c86bd963885c003e",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/pull_over_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4c2884f16b32363460bb0fed0280721262fee381/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4c2884f16b32363460bb0fed0280721262fee381/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp?ref=4c2884f16b32363460bb0fed0280721262fee381",
            "patch": "@@ -653,14 +653,16 @@ PathWithLaneId PullOverModule::generateStopPath()\n     status_.is_safe ? status_.pull_over_path.start_pose\n                     : (closest_start_pose_ ? closest_start_pose_.value() : *search_start_pose);\n \n-  // if stop pose is behind current pose, stop as soon as possible\n+  // if stop pose is closer than min_stop_distance, stop as soon as possible\n   const size_t ego_idx = findEgoIndex(reference_path.points);\n   const size_t stop_idx = findFirstNearestSegmentIndexWithSoftConstraints(\n     reference_path.points, stop_pose, common_parameters.ego_nearest_dist_threshold,\n     common_parameters.ego_nearest_yaw_threshold);\n   const double ego_to_stop_distance = calcSignedArcLength(\n     reference_path.points, current_pose.position, ego_idx, stop_pose.position, stop_idx);\n-  if (ego_to_stop_distance < 0.0) {\n+  const double current_vel = planner_data_->self_odometry->twist.twist.linear.x;\n+  const double min_stop_distance = std::pow(current_vel, 2) / parameters_.maximum_deceleration / 2;\n+  if (ego_to_stop_distance < min_stop_distance) {\n     return generateEmergencyStopPath();\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2610": [
        {
            "sha": "121d9511478a745f1d26f805ab3205e168871c8a",
            "filename": "simulator/simple_planning_simulator/src/simple_planning_simulator/simple_planning_simulator_core.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1f4829a52c29aa2da4b4ad48632a13445fbd4bc5/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1f4829a52c29aa2da4b4ad48632a13445fbd4bc5/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp?ref=1f4829a52c29aa2da4b4ad48632a13445fbd4bc5",
            "patch": "@@ -125,7 +125,7 @@ SimplePlanningSimulator::SimplePlanningSimulator(const rclcpp::NodeOptions & opt\n     create_publisher<TurnIndicatorsReport>(\"output/turn_indicators_report\", QoS{1});\n   pub_hazard_lights_report_ =\n     create_publisher<HazardLightsReport>(\"output/hazard_lights_report\", QoS{1});\n-  pub_current_pose_ = create_publisher<PoseStamped>(\"/current_pose\", QoS{1});\n+  pub_current_pose_ = create_publisher<PoseStamped>(\"output/debug/pose\", QoS{1});\n   pub_velocity_ = create_publisher<VelocityReport>(\"output/twist\", QoS{1});\n   pub_odom_ = create_publisher<Odometry>(\"output/odometry\", QoS{1});\n   pub_steer_ = create_publisher<SteeringReport>(\"output/steering\", QoS{1});"
        }
    ],
    "autowarefoundation/autoware.universe/2617": [
        {
            "sha": "89548855f233a158b9e221653af2d8c532539231",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d06739803e7d62674a23eb62c709a6668403a176/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d06739803e7d62674a23eb62c709a6668403a176/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=d06739803e7d62674a23eb62c709a6668403a176",
            "patch": "@@ -320,7 +320,9 @@ void AvoidanceModule::fillAvoidanceTargetObjects(\n       continue;\n     }\n \n-    if (object_data.longitudinal + parameters_->object_check_goal_distance > dist_to_goal) {\n+    if (\n+      object_data.longitudinal + object_data.length / 2 + parameters_->object_check_goal_distance >\n+      dist_to_goal) {\n       avoidance_debug_array_false_and_push_back(\"TooNearToGoal\");\n       object_data.reason = \"TooNearToGoal\";\n       data.other_objects.push_back(object_data);"
        }
    ],
    "autowarefoundation/autoware.universe/2618": [
        {
            "sha": "d2570b9c4d78662f40588f5226d9c4464c2f36ef",
            "filename": "sensing/pointcloud_preprocessor/src/outlier_filter/ring_outlier_filter_nodelet.cpp",
            "status": "modified",
            "additions": 19,
            "deletions": 10,
            "changes": 29,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9b3c48727b6116e5e9a08f57152f39a2d2cf8e2a/sensing%2Fpointcloud_preprocessor%2Fsrc%2Foutlier_filter%2Fring_outlier_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9b3c48727b6116e5e9a08f57152f39a2d2cf8e2a/sensing%2Fpointcloud_preprocessor%2Fsrc%2Foutlier_filter%2Fring_outlier_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Foutlier_filter%2Fring_outlier_filter_nodelet.cpp?ref=9b3c48727b6116e5e9a08f57152f39a2d2cf8e2a",
            "patch": "@@ -14,6 +14,8 @@\n \n #include \"pointcloud_preprocessor/outlier_filter/ring_outlier_filter_nodelet.hpp\"\n \n+#include <sensor_msgs/point_cloud2_iterator.hpp>\n+\n #include <algorithm>\n #include <vector>\n namespace pointcloud_preprocessor\n@@ -69,6 +71,8 @@ void RingOutlierFilterComponent::faster_filter(\n     input->fields.at(static_cast<size_t>(autoware_point_types::PointIndex::Azimuth)).offset;\n   const auto distance_offset =\n     input->fields.at(static_cast<size_t>(autoware_point_types::PointIndex::Distance)).offset;\n+  const auto intensity_offset =\n+    input->fields.at(static_cast<size_t>(autoware_point_types::PointIndex::Intensity)).offset;\n \n   std::vector<std::vector<size_t>> ring2indices;\n   ring2indices.reserve(max_rings_num_);\n@@ -132,10 +136,12 @@ void RingOutlierFilterComponent::faster_filter(\n             output_ptr->x = p[0];\n             output_ptr->y = p[1];\n             output_ptr->z = p[2];\n-            output_ptr->intensity = input_ptr->intensity;\n           } else {\n             *output_ptr = *input_ptr;\n           }\n+          const float & intensity =\n+            *reinterpret_cast<const float *>(&input->data[indices[i] + intensity_offset]);\n+          output_ptr->intensity = intensity;\n \n           output_size += output.point_step;\n         }\n@@ -159,10 +165,12 @@ void RingOutlierFilterComponent::faster_filter(\n           output_ptr->x = p[0];\n           output_ptr->y = p[1];\n           output_ptr->z = p[2];\n-          output_ptr->intensity = input_ptr->intensity;\n         } else {\n           *output_ptr = *input_ptr;\n         }\n+        const float & intensity =\n+          *reinterpret_cast<const float *>(&input->data[indices[i] + intensity_offset]);\n+        output_ptr->intensity = intensity;\n \n         output_size += output.point_step;\n       }\n@@ -175,17 +183,18 @@ void RingOutlierFilterComponent::faster_filter(\n   // == true`\n   output.header.frame_id = !tf_input_frame_.empty() ? tf_input_frame_ : tf_input_orig_frame_;\n \n-  output.fields.resize(4);  // x, y, z, intensity\n-  std::copy(\n-    input->fields.begin(),\n-    input->fields.begin() + static_cast<size_t>(autoware_point_types::PointIndex::Intensity) + 1,\n-    output.fields.begin());\n-\n   output.height = 1;\n+  output.width = static_cast<uint32_t>(output.data.size() / output.height / output.point_step);\n   output.is_bigendian = input->is_bigendian;\n   output.is_dense = input->is_dense;\n-  output.width = static_cast<uint32_t>(output.data.size() / output.height / output.point_step);\n-  output.row_step = static_cast<uint32_t>(output.data.size() / output.height);\n+\n+  // set fields\n+  sensor_msgs::PointCloud2Modifier pcd_modifier(output);\n+  constexpr int num_fields = 4;\n+  pcd_modifier.setPointCloud2Fields(\n+    num_fields, \"x\", 1, sensor_msgs::msg::PointField::FLOAT32, \"y\", 1,\n+    sensor_msgs::msg::PointField::FLOAT32, \"z\", 1, sensor_msgs::msg::PointField::FLOAT32,\n+    \"intensity\", 1, sensor_msgs::msg::PointField::FLOAT32);\n \n   // add processing time for debug\n   if (debug_publisher_) {"
        }
    ],
    "autowarefoundation/autoware.universe/2623": [
        {
            "sha": "0a29beec48840d8b87aa554760cd0c5b406c4517",
            "filename": "planning/obstacle_stop_planner/src/node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 5,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/04d46b3b5ed90f05cd660fbe08d70340748d9720/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/04d46b3b5ed90f05cd660fbe08d70340748d9720/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp?ref=04d46b3b5ed90f05cd660fbe08d70340748d9720",
            "patch": "@@ -210,15 +210,11 @@ void ObstacleStopPlannerNode::onPointCloud(const PointCloud2::ConstSharedPtr inp\n   obstacle_ros_pointcloud_ptr_ = std::make_shared<PointCloud2>();\n   pcl::VoxelGrid<pcl::PointXYZ> filter;\n   PointCloud::Ptr pointcloud_ptr(new PointCloud);\n-  PointCloud::Ptr no_height_pointcloud_ptr(new PointCloud);\n   PointCloud::Ptr no_height_filtered_pointcloud_ptr(new PointCloud);\n \n   pcl::fromROSMsg(*input_msg, *pointcloud_ptr);\n \n-  for (const auto & point : pointcloud_ptr->points) {\n-    no_height_pointcloud_ptr->push_back(pcl::PointXYZ(point.x, point.y, 0.0));\n-  }\n-  filter.setInputCloud(no_height_pointcloud_ptr);\n+  filter.setInputCloud(pointcloud_ptr);\n   filter.setLeafSize(node_param_.voxel_grid_x, node_param_.voxel_grid_y, node_param_.voxel_grid_z);\n   filter.filter(*no_height_filtered_pointcloud_ptr);\n   pcl::toROSMsg(*no_height_filtered_pointcloud_ptr, *obstacle_ros_pointcloud_ptr_);"
        }
    ],
    "autowarefoundation/autoware.universe/2635": [
        {
            "sha": "8a2163e56a649f0568d0890f5c65fdd41161a2e9",
            "filename": "localization/pose_initializer/docs/pose_initializer.md",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f0001b1fa8e6bedc1dd343fa1ac226306ec1d64a/localization%2Fpose_initializer%2Fdocs%2Fpose_initializer.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f0001b1fa8e6bedc1dd343fa1ac226306ec1d64a/localization%2Fpose_initializer%2Fdocs%2Fpose_initializer.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fpose_initializer%2Fdocs%2Fpose_initializer.md?ref=f0001b1fa8e6bedc1dd343fa1ac226306ec1d64a",
            "patch": "@@ -44,3 +44,9 @@ Finally, it publishes the initial pose to `ekf_localizer`.\n | ------------------------------------ | ------------------------------------------------------------ | --------------------------- |\n | `/localization/initialization_state` | autoware_adapi_v1_msgs::msg::LocalizationInitializationState | pose initialization state   |\n | `/initialpose3d`                     | geometry_msgs::msg::PoseWithCovarianceStamped                | calculated initial ego pose |\n+\n+## Connection with Default AD API\n+\n+This `pose_initializer` is used via default AD API. For detailed description of the API description, please refer to [the description of `default_ad_api`](https://github.com/autowarefoundation/autoware.universe/blob/main/system/default_ad_api/document/localization.md).\n+\n+<img src=\"../../../system/default_ad_api/document/images/localization.drawio.svg\" alt=\"drawing\" width=\"800\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/2660": [
        {
            "sha": "2db6b51540d518d0ad2723ba463048127df9fdcd",
            "filename": "localization/ndt_scan_matcher/src/util_func.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a14cd789a570c970bfa601d19919d730c074a7df/localization%2Fndt_scan_matcher%2Fsrc%2Futil_func.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a14cd789a570c970bfa601d19919d730c074a7df/localization%2Fndt_scan_matcher%2Fsrc%2Futil_func.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Futil_func.cpp?ref=a14cd789a570c970bfa601d19919d730c074a7df",
            "patch": "@@ -129,7 +129,8 @@ void get_nearest_timestamp_pose(\n     const rclcpp::Time pose_time_stamp = output_new_pose_cov_msg_ptr->header.stamp;\n     if (pose_time_stamp > time_stamp) {\n       // TODO(Tier IV): refactor\n-      if (pose_time_stamp.seconds() == 0.0) {\n+      const rclcpp::Time old_pose_time_stamp = output_old_pose_cov_msg_ptr->header.stamp;\n+      if (old_pose_time_stamp.seconds() == 0.0) {\n         output_old_pose_cov_msg_ptr = output_new_pose_cov_msg_ptr;\n       }\n       break;"
        }
    ],
    "autowarefoundation/autoware.universe/2673": [
        {
            "sha": "731b818666347f32451a34226d0048b42ee0e4ef",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/shift_pull_over.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 11,
            "changes": 22,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9b57d6128ad0b926b4989fa0607b42e75f79ca38/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fshift_pull_over.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9b57d6128ad0b926b4989fa0607b42e75f79ca38/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fshift_pull_over.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fshift_pull_over.cpp?ref=9b57d6128ad0b926b4989fa0607b42e75f79ca38",
            "patch": "@@ -167,17 +167,6 @@ boost::optional<PullOverPath> ShiftPullOver::generatePullOverPath(\n     p.point.pose.position.z = goal_pose.position.z;\n   }\n \n-  // check lane departure with road and shoulder lanes\n-  const auto drivable_lanes =\n-    util::generateDrivableLanesWithShoulderLanes(road_lanes, shoulder_lanes);\n-  const auto expanded_lanes = util::expandLanelets(\n-    drivable_lanes, parameters_.drivable_area_left_bound_offset,\n-    parameters_.drivable_area_right_bound_offset);\n-  if (lane_departure_checker_.checkPathWillLeaveLane(\n-        util::transformToLanelets(expanded_lanes), shifted_path.path)) {\n-    return {};\n-  }\n-\n   // set lane_id and velocity to shifted_path\n   for (size_t i = path_shifter.getShiftLines().front().start_idx;\n        i < shifted_path.path.points.size() - 1; ++i) {\n@@ -212,6 +201,17 @@ boost::optional<PullOverPath> ShiftPullOver::generatePullOverPath(\n   pull_over_path.debug_poses.push_back(shift_end_pose_road_lane);\n   pull_over_path.debug_poses.push_back(actual_shift_end_pose);\n \n+  // check if the parking path will leave lanes\n+  const auto drivable_lanes =\n+    util::generateDrivableLanesWithShoulderLanes(road_lanes, shoulder_lanes);\n+  const auto expanded_lanes = util::expandLanelets(\n+    drivable_lanes, parameters_.drivable_area_left_bound_offset,\n+    parameters_.drivable_area_right_bound_offset);\n+  if (lane_departure_checker_.checkPathWillLeaveLane(\n+        util::transformToLanelets(expanded_lanes), pull_over_path.getParkingPath())) {\n+    return {};\n+  }\n+\n   return pull_over_path;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2683": [
        {
            "sha": "f33a2e2d5c4f3e38efbe27c7b283e1726e4f50ed",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 26,
            "changes": 28,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0345c41dba0f3b82f6888264bd2ba16277bc9b3e/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0345c41dba0f3b82f6888264bd2ba16277bc9b3e/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=0345c41dba0f3b82f6888264bd2ba16277bc9b3e",
            "patch": "@@ -577,20 +577,8 @@ lanelet::ConstLanelets RouteHandler::getLaneletSequence(\n bool RouteHandler::getFollowingShoulderLanelet(\n   const lanelet::ConstLanelet & lanelet, lanelet::ConstLanelet * following_lanelet) const\n {\n-  Pose back_pose;\n-  back_pose.position.x = lanelet.centerline2d().back().x();\n-  back_pose.position.y = lanelet.centerline2d().back().y();\n-  back_pose.position.z = 0;\n-\n   for (const auto & shoulder_lanelet : shoulder_lanelets_) {\n-    Pose front_pose;\n-    front_pose.position.x = shoulder_lanelet.centerline2d().front().x();\n-    front_pose.position.y = shoulder_lanelet.centerline2d().front().y();\n-    front_pose.position.z = 0;\n-    if (\n-      std::hypot(\n-        front_pose.position.x - back_pose.position.x,\n-        front_pose.position.y - back_pose.position.y) < 5) {\n+    if (lanelet::geometry::follows(lanelet, shoulder_lanelet)) {\n       *following_lanelet = shoulder_lanelet;\n       return true;\n     }\n@@ -625,20 +613,8 @@ lanelet::ConstLanelets RouteHandler::getShoulderLaneletSequenceAfter(\n bool RouteHandler::getPreviousShoulderLanelet(\n   const lanelet::ConstLanelet & lanelet, lanelet::ConstLanelet * prev_lanelet) const\n {\n-  Pose front_pose;\n-  front_pose.position.x = lanelet.centerline2d().front().x();\n-  front_pose.position.y = lanelet.centerline2d().front().y();\n-  front_pose.position.z = 0;\n-\n   for (const auto & shoulder_lanelet : shoulder_lanelets_) {\n-    Pose back_pose;\n-    back_pose.position.x = shoulder_lanelet.centerline2d().back().x();\n-    back_pose.position.y = shoulder_lanelet.centerline2d().back().y();\n-    back_pose.position.z = 0;\n-    if (\n-      std::hypot(\n-        front_pose.position.x - back_pose.position.x,\n-        front_pose.position.y - back_pose.position.y) < 5) {\n+    if (lanelet::geometry::follows(shoulder_lanelet, lanelet)) {\n       *prev_lanelet = shoulder_lanelet;\n       return true;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/2687": [
        {
            "sha": "ac6ae3e82cd0ae015fd53740f2626bc039d0ad92",
            "filename": "planning/obstacle_avoidance_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ea3977de56ce29e77ee9bc850aadf726d1af4458/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ea3977de56ce29e77ee9bc850aadf726d1af4458/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Futils.cpp?ref=ea3977de56ce29e77ee9bc850aadf726d1af4458",
            "patch": "@@ -696,16 +696,16 @@ bool isOutsideDrivableAreaFromRectangleFootprint(\n   const double base_to_rear = vehicle_param.rear_overhang;\n \n   const auto top_left_pos =\n-    tier4_autoware_utils::calcOffsetPose(traj_point.pose, base_to_front, -base_to_left, 0.0)\n+    tier4_autoware_utils::calcOffsetPose(traj_point.pose, base_to_front, base_to_left, 0.0)\n       .position;\n   const auto top_right_pos =\n-    tier4_autoware_utils::calcOffsetPose(traj_point.pose, base_to_front, base_to_right, 0.0)\n+    tier4_autoware_utils::calcOffsetPose(traj_point.pose, base_to_front, -base_to_right, 0.0)\n       .position;\n   const auto bottom_right_pos =\n-    tier4_autoware_utils::calcOffsetPose(traj_point.pose, -base_to_rear, base_to_right, 0.0)\n+    tier4_autoware_utils::calcOffsetPose(traj_point.pose, -base_to_rear, -base_to_right, 0.0)\n       .position;\n   const auto bottom_left_pos =\n-    tier4_autoware_utils::calcOffsetPose(traj_point.pose, -base_to_rear, -base_to_left, 0.0)\n+    tier4_autoware_utils::calcOffsetPose(traj_point.pose, -base_to_rear, base_to_left, 0.0)\n       .position;\n \n   const bool front_top_left = isFrontDrivableArea(top_left_pos, left_bound, right_bound);"
        }
    ],
    "autowarefoundation/autoware.universe/2691": [
        {
            "sha": "892c844610283fbca118c727d39b3d8dc1a8b1a5",
            "filename": "planning/obstacle_avoidance_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 8,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/73d0ba444a8cca9d79392a1f65f8e314f57b6411/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/73d0ba444a8cca9d79392a1f65f8e314f57b6411/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Futils.cpp?ref=73d0ba444a8cca9d79392a1f65f8e314f57b6411",
            "patch": "@@ -661,18 +661,18 @@ bg_polygon createDrivablePolygon(\n {\n   bg_polygon drivable_area_poly;\n \n-  // right bound\n-  for (const auto rp : right_bound) {\n-    drivable_area_poly.outer().push_back(bg_point(rp.x, rp.y));\n-  }\n-\n   // left bound\n-  auto reversed_left_bound = left_bound;\n-  std::reverse(reversed_left_bound.begin(), reversed_left_bound.end());\n-  for (const auto lp : reversed_left_bound) {\n+  for (const auto lp : left_bound) {\n     drivable_area_poly.outer().push_back(bg_point(lp.x, lp.y));\n   }\n \n+  // right bound\n+  auto reversed_right_bound = right_bound;\n+  std::reverse(reversed_right_bound.begin(), reversed_right_bound.end());\n+  for (const auto rp : reversed_right_bound) {\n+    drivable_area_poly.outer().push_back(bg_point(rp.x, rp.y));\n+  }\n+\n   drivable_area_poly.outer().push_back(drivable_area_poly.outer().front());\n   return drivable_area_poly;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/2692": [
        {
            "sha": "2ad9e3651cbb752a242721a1a406abec78892c37",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_out/pull_out_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/94c746b44d43f7a2c49fb90acdc1d14d1a2b638b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/94c746b44d43f7a2c49fb90acdc1d14d1a2b638b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp?ref=94c746b44d43f7a2c49fb90acdc1d14d1a2b638b",
            "patch": "@@ -546,8 +546,10 @@ std::vector<Pose> PullOutModule::searchBackedPoses()\n     // check the back pose is near the lane end\n     const double length_to_backed_pose =\n       lanelet::utils::getArcCoordinates(status_.pull_out_lanes, *backed_pose).length;\n-    const double length_to_lane_end =\n-      lanelet::utils::getLaneletLength2d(status_.pull_out_lanes.back());\n+    double length_to_lane_end = 0.0;\n+    for (const auto & lane : status_.pull_out_lanes) {\n+      length_to_lane_end += lanelet::utils::getLaneletLength2d(lane);\n+    }\n     const double distance_from_lane_end = length_to_lane_end - length_to_backed_pose;\n     if (distance_from_lane_end < parameters_.ignore_distance_from_lane_end) {\n       RCLCPP_WARN_THROTTLE("
        }
    ],
    "autowarefoundation/autoware.universe/2693": [
        {
            "sha": "2535596d8980148f29fb7039967ee16c0ed9df74",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/util.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 11,
            "changes": 25,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/707895609049a1f4b0450b5d99c1ab7d74349c81/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/707895609049a1f4b0450b5d99c1ab7d74349c81/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp?ref=707895609049a1f4b0450b5d99c1ab7d74349c81",
            "patch": "@@ -63,24 +63,26 @@ bool isPathInLanelets(\n   const PathWithLaneId & path, const lanelet::ConstLanelets & original_lanelets,\n   const lanelet::ConstLanelets & target_lanelets)\n {\n+  const auto current_lane_poly = lanelet::utils::getPolygonFromArcLength(\n+    original_lanelets, 0, std::numeric_limits<double>::max());\n+  const auto target_lane_poly =\n+    lanelet::utils::getPolygonFromArcLength(target_lanelets, 0, std::numeric_limits<double>::max());\n+  const auto current_lane_poly_2d = lanelet::utils::to2D(current_lane_poly).basicPolygon();\n+  const auto target_lane_poly_2d = lanelet::utils::to2D(target_lane_poly).basicPolygon();\n   for (const auto & pt : path.points) {\n-    bool is_in_lanelet = false;\n-    for (const auto & llt : original_lanelets) {\n-      if (lanelet::utils::isInLanelet(pt.point.pose, llt, 0.1)) {\n-        is_in_lanelet = true;\n-      }\n-    }\n-    for (const auto & llt : target_lanelets) {\n-      if (lanelet::utils::isInLanelet(pt.point.pose, llt, 0.1)) {\n-        is_in_lanelet = true;\n-      }\n+    const lanelet::BasicPoint2d ll_pt(pt.point.pose.position.x, pt.point.pose.position.y);\n+    const auto is_in_current = boost::geometry::covered_by(ll_pt, current_lane_poly_2d);\n+    if (is_in_current) {\n+      continue;\n     }\n-    if (!is_in_lanelet) {\n+    const auto is_in_target = boost::geometry::covered_by(ll_pt, target_lane_poly_2d);\n+    if (!is_in_target) {\n       return false;\n     }\n   }\n   return true;\n }\n+\n double getExpectedVelocityWhenDecelerate(\n   const double & velocity, const double & expected_acceleration, const double & duration)\n {\n@@ -228,6 +230,7 @@ LaneChangePaths getLaneChangePaths(\n \n   const auto arc_position_from_current = lanelet::utils::getArcCoordinates(original_lanelets, pose);\n   const auto arc_position_from_target = lanelet::utils::getArcCoordinates(target_lanelets, pose);\n+\n   const auto target_lane_length = lanelet::utils::getLaneletLength2d(target_lanelets);\n \n   for (double acceleration = 0.0; acceleration >= -maximum_deceleration;"
        }
    ],
    "autowarefoundation/autoware.universe/2697": [
        {
            "sha": "534bd344f6443a226d913d5eb336f0a051ae6d47",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1d021a3afa53ef2062fbda079fee63466c12087c/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1d021a3afa53ef2062fbda079fee63466c12087c/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=1d021a3afa53ef2062fbda079fee63466c12087c",
            "patch": "@@ -793,9 +793,13 @@ bool RouteHandler::getNextLaneletWithinRoute(\n   if (exists(goal_lanelets_, lanelet)) {\n     return false;\n   }\n+\n+  lanelet::ConstLanelet start_lanelet;\n+  const bool flag_check = getClosestLaneletWithinRoute(route_ptr_->start_pose, &start_lanelet);\n+\n   const auto following_lanelets = routing_graph_ptr_->following(lanelet);\n   for (const auto & llt : following_lanelets) {\n-    if (exists(route_lanelets_, llt)) {\n+    if (!(flag_check && start_lanelet.id() == llt.id()) && exists(route_lanelets_, llt)) {\n       *next_lanelet = llt;\n       return true;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/2699": [
        {
            "sha": "690e7ff0a004577c067b494fe0777be9c4012c42",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_out/pull_out_module.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 2,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1256f66182f53d9100e07d990885c220e0f19284/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1256f66182f53d9100e07d990885c220e0f19284/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp?ref=1256f66182f53d9100e07d990885c220e0f19284",
            "patch": "@@ -176,7 +176,8 @@ BehaviorModuleOutput PullOutModule::plan()\n   if (!status_.is_safe) {\n     RCLCPP_WARN_THROTTLE(\n       getLogger(), *clock_, 5000, \"Not found safe pull out path, publish stop path\");\n-    const PathWithLaneId stop_path = generateStopPath();\n+    // the path of getCurrent() is generated by generateStopPath()\n+    const PathWithLaneId stop_path = getCurrentPath();\n     output.path = std::make_shared<PathWithLaneId>(stop_path);\n     path_candidate_ = std::make_shared<PathWithLaneId>(stop_path);\n     return output;\n@@ -285,11 +286,20 @@ BehaviorModuleOutput PullOutModule::planWaitingApproval()\n   waitApproval();\n \n   BehaviorModuleOutput output;\n+  if (!status_.is_safe) {\n+    RCLCPP_WARN_THROTTLE(\n+      getLogger(), *clock_, 5000, \"Not found safe pull out path, publish stop path\");\n+    // the path of getCurrent() is generated by generateStopPath()\n+    const PathWithLaneId stop_path = getCurrentPath();\n+    output.path = std::make_shared<PathWithLaneId>(stop_path);\n+    path_candidate_ = std::make_shared<PathWithLaneId>(stop_path);\n+    return output;\n+  }\n+\n   const auto current_lanes = util::getExtendedCurrentLanes(planner_data_);\n   const auto pull_out_lanes = pull_out_utils::getPullOutLanes(planner_data_);\n   const auto drivable_lanes =\n     util::generateDrivableLanesWithShoulderLanes(current_lanes, pull_out_lanes);\n-\n   const auto expanded_lanes = util::expandLanelets(\n     drivable_lanes, parameters_.drivable_area_left_bound_offset,\n     parameters_.drivable_area_right_bound_offset, parameters_.drivable_area_types_to_skip);\n@@ -507,6 +517,7 @@ void PullOutModule::updatePullOutStatus()\n     RCLCPP_WARN_THROTTLE(\n       getLogger(), *clock_, 5000, \"Not found safe pull out path, generate stop path\");\n     status_.back_finished = true;  // no need to drive backward\n+    status_.pull_out_path.partial_paths.clear();\n     status_.pull_out_path.partial_paths.push_back(generateStopPath());\n     status_.pull_out_path.start_pose = current_pose;\n     status_.pull_out_path.end_pose = current_pose;"
        }
    ],
    "autowarefoundation/autoware.universe/2707": [
        {
            "sha": "ec584e7ee1a06b4188663f160187d71b643b78fd",
            "filename": "planning/planning_validator/test/src/test_planning_validator_helper.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f95d923dc3babc320ebc291ddec4f879541f3122/planning%2Fplanning_validator%2Ftest%2Fsrc%2Ftest_planning_validator_helper.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f95d923dc3babc320ebc291ddec4f879541f3122/planning%2Fplanning_validator%2Ftest%2Fsrc%2Ftest_planning_validator_helper.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_validator%2Ftest%2Fsrc%2Ftest_planning_validator_helper.cpp?ref=f95d923dc3babc320ebc291ddec4f879541f3122",
            "patch": "@@ -75,7 +75,7 @@ rclcpp::NodeOptions getNodeOptionsWithDefaultParams()\n {\n   rclcpp::NodeOptions node_options;\n \n-  // for planing validator\n+  // for planning validator\n   node_options.append_parameter_override(\"publish_diag\", true);\n   node_options.append_parameter_override(\"invalid_trajectory_handling_type\", 0);\n   node_options.append_parameter_override(\"diag_error_count_threshold\", 0);"
        }
    ],
    "autowarefoundation/autoware.universe/2718": [
        {
            "sha": "126b6293621610be482bd05369725c2479e1bffe",
            "filename": "planning/behavior_velocity_planner/src/node.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 9,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/dc9d65e6f54ddba2f85fc2824b348cd3ed8b4b11/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/dc9d65e6f54ddba2f85fc2824b348cd3ed8b4b11/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp?ref=dc9d65e6f54ddba2f85fc2824b348cd3ed8b4b11",
            "patch": "@@ -324,9 +324,11 @@ void BehaviorVelocityPlannerNode::onAcceleration(\n \n void BehaviorVelocityPlannerNode::onParam()\n {\n+  // Note(vrichard): mutex lock is not necessary as onParam is only called once in the constructed.\n+  // It would be required if it was a callback.\n+  // std::lock_guard<std::mutex> lock(mutex_);\n   planner_data_.velocity_smoother_ =\n     std::make_unique<motion_velocity_smoother::AnalyticalJerkConstrainedSmoother>(*this);\n-  return;\n }\n \n void BehaviorVelocityPlannerNode::onLaneletMap(\n@@ -367,6 +369,7 @@ void BehaviorVelocityPlannerNode::onExternalIntersectionStates(\n \n void BehaviorVelocityPlannerNode::onExternalVelocityLimit(const VelocityLimit::ConstSharedPtr msg)\n {\n+  std::lock_guard<std::mutex> lock(mutex_);\n   planner_data_.external_velocity_limit = *msg;\n }\n \n@@ -392,10 +395,9 @@ void BehaviorVelocityPlannerNode::onVirtualTrafficLightStates(\n void BehaviorVelocityPlannerNode::onTrigger(\n   const autoware_auto_planning_msgs::msg::PathWithLaneId::ConstSharedPtr input_path_msg)\n {\n-  mutex_.lock();  // for planner_data_\n+  std::unique_lock<std::mutex> lk(mutex_);\n \n   if (!isDataReady(planner_data_, *get_clock())) {\n-    mutex_.unlock();\n     return;\n   }\n \n@@ -407,20 +409,17 @@ void BehaviorVelocityPlannerNode::onTrigger(\n   if (!planner_data_.route_handler_) {\n     RCLCPP_INFO_THROTTLE(\n       get_logger(), *get_clock(), 3000, \"Waiting for the initialization of route_handler\");\n-    mutex_.unlock();\n     return;\n   }\n \n-  // NOTE: planner_data must not be referenced for multithreading\n-  const auto planner_data = planner_data_;\n-  mutex_.unlock();\n-\n   if (input_path_msg->points.empty()) {\n     return;\n   }\n \n   const autoware_auto_planning_msgs::msg::Path output_path_msg =\n-    generatePath(input_path_msg, planner_data);\n+    generatePath(input_path_msg, planner_data_);\n+\n+  lk.unlock();\n \n   path_pub_->publish(output_path_msg);\n   stop_reason_diag_pub_->publish(planner_manager_.getStopReasonDiag());"
        }
    ],
    "autowarefoundation/autoware.universe/2731": [
        {
            "sha": "82c6ef995718bffec4e7da1f481c049d6c0cc4f7",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/util.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f8b61be2af31e3218c71666b7174c9220b1e507e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f8b61be2af31e3218c71666b7174c9220b1e507e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp?ref=f8b61be2af31e3218c71666b7174c9220b1e507e",
            "patch": "@@ -198,7 +198,7 @@ std::optional<LaneChangePath> constructCandidatePath(\n   path_shifter.setLateralAccelerationLimit(std::abs(lane_change_param.lane_changing_lateral_acc));\n \n   if (!path_shifter.generate(&shifted_path, offset_back)) {\n-    RCLCPP_ERROR_STREAM(\n+    RCLCPP_DEBUG(\n       rclcpp::get_logger(\"behavior_path_planner\").get_child(\"lane_change\").get_child(\"util\"),\n       \"failed to generate shifted path.\");\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/2741": [
        {
            "sha": "718c1ef88a4b097fca54abffcb8f294c4efbb226",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/util.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 13,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f0a18b072810fec853b6b6da6be4cbcbce0d7164/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f0a18b072810fec853b6b6da6be4cbcbce0d7164/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp?ref=f0a18b072810fec853b6b6da6be4cbcbce0d7164",
            "patch": "@@ -510,20 +510,8 @@ bool isLaneChangePathSafe(\n   const double check_end_time = lane_change_prepare_duration + lane_changing_safety_check_duration;\n   const double min_lc_speed{lane_change_parameters.minimum_lane_change_velocity};\n \n-  const auto get_pose = std::invoke([&]() {\n-    Pose p;\n-    double dist{0.0};\n-    for (size_t i = 1; i < path.points.size(); ++i) {\n-      dist += motion_utils::calcSignedArcLength(path.points, i - 1, i);\n-      if (dist >= common_parameters.backward_path_length) {\n-        return path.points.at(i).point.pose;\n-      }\n-    }\n-    return path.points.front().point.pose;\n-  });\n-\n   const auto vehicle_predicted_path = util::convertToPredictedPath(\n-    path, current_twist, get_pose, static_cast<double>(current_seg_idx), check_end_time,\n+    path, current_twist, current_pose, static_cast<double>(current_seg_idx), check_end_time,\n     time_resolution, acceleration, min_lc_speed);\n   const auto prepare_phase_ignore_target_speed_thresh =\n     lane_change_parameters.prepare_phase_ignore_target_speed_thresh;"
        }
    ],
    "autowarefoundation/autoware.universe/2750": [
        {
            "sha": "b167efe28d810891620aa8892152682456161440",
            "filename": "control/mpc_lateral_controller/include/mpc_lateral_controller/vehicle_model/vehicle_model_bicycle_dynamics.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6acf3ad2b7e9487153a30e61a2aaef6178e8e90b/control%2Fmpc_lateral_controller%2Finclude%2Fmpc_lateral_controller%2Fvehicle_model%2Fvehicle_model_bicycle_dynamics.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6acf3ad2b7e9487153a30e61a2aaef6178e8e90b/control%2Fmpc_lateral_controller%2Finclude%2Fmpc_lateral_controller%2Fvehicle_model%2Fvehicle_model_bicycle_dynamics.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fmpc_lateral_controller%2Finclude%2Fmpc_lateral_controller%2Fvehicle_model%2Fvehicle_model_bicycle_dynamics.hpp?ref=6acf3ad2b7e9487153a30e61a2aaef6178e8e90b",
            "patch": "@@ -89,7 +89,7 @@ class DynamicsBicycleModel : public VehicleModelInterface\n    * @param [in] dt Discretization time [s]\n    */\n   void calculateDiscreteMatrix(\n-    Eigen::MatrixXd & a_d, Eigen::MatrixXd & b_d, Eigen::MatrixXd & w_d, Eigen::MatrixXd & c_d,\n+    Eigen::MatrixXd & a_d, Eigen::MatrixXd & b_d, Eigen::MatrixXd & c_d, Eigen::MatrixXd & w_d,\n     const double dt) override;\n \n   /**"
        }
    ],
    "autowarefoundation/autoware.universe/2751": [
        {
            "sha": "6955798be3e8aaf86a7e93499bb73be7fb067b03",
            "filename": "planning/costmap_generator/nodes/costmap_generator/object_map_utils.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b4aef9cdfdab5836fc85d1fc065070aef51a4e3f/planning%2Fcostmap_generator%2Fnodes%2Fcostmap_generator%2Fobject_map_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b4aef9cdfdab5836fc85d1fc065070aef51a4e3f/planning%2Fcostmap_generator%2Fnodes%2Fcostmap_generator%2Fobject_map_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fcostmap_generator%2Fnodes%2Fcostmap_generator%2Fobject_map_utils.cpp?ref=b4aef9cdfdab5836fc85d1fc065070aef51a4e3f",
            "patch": "@@ -61,7 +61,7 @@ void FillPolygonAreas(\n   grid_map::GridMap & out_grid_map,\n   const std::vector<std::vector<geometry_msgs::msg::Point>> & in_points,\n   const std::string & in_grid_layer_name, const int in_layer_background_value,\n-  const int in_layer_min_value, const int in_fill_color, const int in_layer_max_value,\n+  const int in_fill_color, const int in_layer_min_value, const int in_layer_max_value,\n   const std::string & in_tf_target_frame, const std::string & in_tf_source_frame,\n   const tf2_ros::Buffer & in_tf_buffer)\n {"
        }
    ],
    "autowarefoundation/autoware.universe/2752": [
        {
            "sha": "85454cc449e3e99b72fc10675098c067048a9b11",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/util.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cb5b424f1e1f6ae1cceb7194d219db055820d74e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cb5b424f1e1f6ae1cceb7194d219db055820d74e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp?ref=cb5b424f1e1f6ae1cceb7194d219db055820d74e",
            "patch": "@@ -374,6 +374,9 @@ LaneChangePaths getLaneChangePaths(\n     const auto target_lane_reference_path = getReferencePathFromTargetLane(\n       route_handler, target_lanelets, lane_changing_start_pose, target_lane_length, lc_dist,\n       required_total_min_distance, forward_path_length, resample_interval, is_goal_in_route);\n+    if (target_lane_reference_path.points.empty()) {\n+      continue;\n+    }\n \n     const ShiftLine shift_line = getLaneChangeShiftLine(\n       prepare_segment_reference, lane_changing_segment_reference, target_lanelets,"
        }
    ],
    "autowarefoundation/autoware.universe/2757": [
        {
            "sha": "ab4dc623c312565bf2152efd13f87400362dffbb",
            "filename": "common/motion_utils/src/marker/marker_helper.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c320b418928aaa11bf7b4157fdaf723730de3873/common%2Fmotion_utils%2Fsrc%2Fmarker%2Fmarker_helper.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c320b418928aaa11bf7b4157fdaf723730de3873/common%2Fmotion_utils%2Fsrc%2Fmarker%2Fmarker_helper.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fmotion_utils%2Fsrc%2Fmarker%2Fmarker_helper.cpp?ref=c320b418928aaa11bf7b4157fdaf723730de3873",
            "patch": "@@ -143,7 +143,7 @@ visualization_msgs::msg::MarkerArray VirtualWallMarkerCreator::handleVirtualWall\n   size_t id_to_delete = id;\n   visualization_msgs::msg::MarkerArray wall_marker;\n \n-  if (poses.size() == 0 || previous_virtual_wall_poses.empty()) {\n+  if (poses.size() == 0) {\n     return wall_marker;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2761": [
        {
            "sha": "08457362b23bb70bd65b988921656880ba32b443",
            "filename": "map/map_loader/launch/lanelet2_map_loader.launch.xml",
            "status": "modified",
            "additions": 0,
            "deletions": 4,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fbdc523305a3d331acf995903ca5ff93d246d8e6/map%2Fmap_loader%2Flaunch%2Flanelet2_map_loader.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fbdc523305a3d331acf995903ca5ff93d246d8e6/map%2Fmap_loader%2Flaunch%2Flanelet2_map_loader.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2Flaunch%2Flanelet2_map_loader.launch.xml?ref=fbdc523305a3d331acf995903ca5ff93d246d8e6",
            "patch": "@@ -3,18 +3,14 @@\n   <arg name=\"lanelet2_map_path\"/>\n   <arg name=\"lanelet2_map_topic\" default=\"vector_map\"/>\n   <arg name=\"lanelet2_map_marker_topic\" default=\"vector_map_marker\"/>\n-  <arg name=\"center_line_resolution\" default=\"5.0\"/>\n \n   <node pkg=\"map_loader\" exec=\"map_hash_generator\" name=\"map_hash_generator\">\n     <param name=\"lanelet2_map_path\" value=\"$(var lanelet2_map_path)\"/>\n   </node>\n \n   <node pkg=\"map_loader\" exec=\"lanelet2_map_loader\" name=\"lanelet2_map_loader\">\n     <remap from=\"output/lanelet2_map\" to=\"$(var lanelet2_map_topic)\"/>\n-    <param name=\"center_line_resolution\" value=\"$(var center_line_resolution)\"/>\n     <param name=\"lanelet2_map_path\" value=\"$(var lanelet2_map_path)\"/>\n-    <param name=\"lanelet2_map_projector_type\" value=\"MGRS\"/>\n-    <!-- UTM or MGRS -->\n     <param from=\"$(var param_file)\"/>\n   </node>\n "
        }
    ],
    "autowarefoundation/autoware.universe/2765": [
        {
            "sha": "473e0875609ea3f3218275c37b016df132874efe",
            "filename": "planning/costmap_generator/nodes/costmap_generator/costmap_generator_node.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/51520611b640cc3891b7bdf6da3729fe5ce6d659/planning%2Fcostmap_generator%2Fnodes%2Fcostmap_generator%2Fcostmap_generator_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/51520611b640cc3891b7bdf6da3729fe5ce6d659/planning%2Fcostmap_generator%2Fnodes%2Fcostmap_generator%2Fcostmap_generator_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fcostmap_generator%2Fnodes%2Fcostmap_generator%2Fcostmap_generator_node.cpp?ref=51520611b640cc3891b7bdf6da3729fe5ce6d659",
            "patch": "@@ -334,6 +334,10 @@ void CostmapGenerator::onTimer()\n \n bool CostmapGenerator::isActive()\n {\n+  if (!lanelet_map_) {\n+    return false;\n+  }\n+\n   if (activate_by_scenario_) {\n     if (scenario_) {\n       const auto & s = scenario_->activating_scenarios;"
        }
    ],
    "autowarefoundation/autoware.universe/2779": [
        {
            "sha": "ac8241d6916751df2ecb1ba57585223f4c5f7d32",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_out/pull_out_module.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 4,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/09a6a536e4eae412ccb5c362b81910888ef2fd35/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/09a6a536e4eae412ccb5c362b81910888ef2fd35/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp?ref=09a6a536e4eae412ccb5c362b81910888ef2fd35",
            "patch": "@@ -389,13 +389,13 @@ void PullOutModule::planWithPriorityOnEfficientPath(\n   status_.planner_type = PlannerType::NONE;\n \n   // check if start pose candidates are valid\n-  if (start_pose_candidates.size() < 2) {\n+  if (start_pose_candidates.empty()) {\n     return;\n   }\n \n   // plan with each planner\n   for (const auto & planner : pull_out_planners_) {\n-    for (size_t i = 0; i < start_pose_candidates.size() - 1; i++) {\n+    for (size_t i = 0; i < start_pose_candidates.size(); i++) {\n       status_.back_finished = i == 0;\n       const auto & pull_out_start_pose = start_pose_candidates.at(i);\n       planner->setPlannerData(planner_data_);\n@@ -412,6 +412,9 @@ void PullOutModule::planWithPriorityOnEfficientPath(\n         status_.planner_type = planner->getPlannerType();\n         break;\n       }\n+\n+      if (i == start_pose_candidates.size() - 1) continue;\n+\n       //  check next path if back is needed\n       const auto & pull_out_start_pose_next = start_pose_candidates.at(i + 1);\n       const auto pull_out_path_next = planner->plan(pull_out_start_pose_next, goal_pose);\n@@ -439,11 +442,11 @@ void PullOutModule::planWithPriorityOnShortBackDistance(\n   status_.planner_type = PlannerType::NONE;\n \n   // check if start pose candidates are valid\n-  if (start_pose_candidates.size() < 2) {\n+  if (start_pose_candidates.empty()) {\n     return;\n   }\n \n-  for (size_t i = 0; i < start_pose_candidates.size() - 1; i++) {\n+  for (size_t i = 0; i < start_pose_candidates.size(); i++) {\n     status_.back_finished = i == 0;\n     const auto & pull_out_start_pose = start_pose_candidates.at(i);\n     // plan with each planner\n@@ -462,6 +465,9 @@ void PullOutModule::planWithPriorityOnShortBackDistance(\n         status_.planner_type = planner->getPlannerType();\n         break;\n       }\n+\n+      if (i == start_pose_candidates.size() - 1) continue;\n+\n       //  check next path if back is needed\n       const auto & pull_out_start_pose_next = start_pose_candidates.at(i + 1);\n       const auto pull_out_path_next = planner->plan(pull_out_start_pose_next, goal_pose);"
        }
    ],
    "autowarefoundation/autoware.universe/2781": [
        {
            "sha": "93c20fd25b1b121f87145477bc365d0bc950f9ad",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8f9311f6e4f3f4dbff12fa679c7d32f033b272a4/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8f9311f6e4f3f4dbff12fa679c7d32f033b272a4/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=8f9311f6e4f3f4dbff12fa679c7d32f033b272a4",
            "patch": "@@ -93,6 +93,18 @@ bool AvoidanceModule::isExecutionRequested() const\n     return true;\n   }\n \n+  // Check ego is in preferred lane\n+  const auto current_lanes = util::getCurrentLanes(planner_data_);\n+  lanelet::ConstLanelet current_lane;\n+  lanelet::utils::query::getClosestLanelet(\n+    current_lanes, planner_data_->self_odometry->pose.pose, &current_lane);\n+  const auto num = planner_data_->route_handler->getNumLaneToPreferredLane(current_lane);\n+\n+  if (num != 0) {\n+    return false;\n+  }\n+\n+  // Check avoidance targets exist\n   const auto avoid_data = calcAvoidancePlanningData(debug_data_);\n \n   if (parameters_->publish_debug_marker) {"
        }
    ],
    "autowarefoundation/autoware.universe/2783": [
        {
            "sha": "c2ed9f0b4bc1b689b26110239698af5c6fa3f431",
            "filename": "common/bag_time_manager_rviz_plugin/src/bag_time_manager_panel.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 6,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6037d4af6e8d566f96f2954ec1767574d9d29b81/common%2Fbag_time_manager_rviz_plugin%2Fsrc%2Fbag_time_manager_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6037d4af6e8d566f96f2954ec1767574d9d29b81/common%2Fbag_time_manager_rviz_plugin%2Fsrc%2Fbag_time_manager_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fbag_time_manager_rviz_plugin%2Fsrc%2Fbag_time_manager_panel.cpp?ref=6037d4af6e8d566f96f2954ec1767574d9d29b81",
            "patch": "@@ -21,6 +21,8 @@\n #include <qt5/QtWidgets/QWidget>\n #include <rviz_common/display_context.hpp>\n \n+#include <rclcpp/version.h>\n+\n namespace rviz_plugins\n {\n BagTimeManagerPanel::BagTimeManagerPanel(QWidget * parent) : rviz_common::Panel(parent)\n@@ -66,12 +68,17 @@ BagTimeManagerPanel::BagTimeManagerPanel(QWidget * parent) : rviz_common::Panel(\n void BagTimeManagerPanel::onInitialize()\n {\n   raw_node_ = this->getDisplayContext()->getRosNodeAbstraction().lock()->get_raw_node();\n-  client_pause_ =\n-    raw_node_->create_client<Pause>(\"/rosbag2_player/pause\", rmw_qos_profile_services_default);\n-  client_resume_ =\n-    raw_node_->create_client<Resume>(\"/rosbag2_player/resume\", rmw_qos_profile_services_default);\n-  client_set_rate_ =\n-    raw_node_->create_client<SetRate>(\"/rosbag2_player/set_rate\", rmw_qos_profile_services_default);\n+\n+// APIs taking rclcpp::QoS objects are only available in ROS 2 Iron and higher\n+#if RCLCPP_VERSION_MAJOR >= 18\n+  const auto qos_default = rclcpp::ServicesQoS();\n+#else\n+  const auto qos_default = rmw_qos_profile_services_default;\n+#endif\n+\n+  client_pause_ = raw_node_->create_client<Pause>(\"/rosbag2_player/pause\", qos_default);\n+  client_resume_ = raw_node_->create_client<Resume>(\"/rosbag2_player/resume\", qos_default);\n+  client_set_rate_ = raw_node_->create_client<SetRate>(\"/rosbag2_player/set_rate\", qos_default);\n }\n \n void BagTimeManagerPanel::onPauseClicked()"
        }
    ],
    "autowarefoundation/autoware.universe/2785": [
        {
            "sha": "30a74c0392a0a7ed0dd5da589fac91e99309b070",
            "filename": "planning/obstacle_avoidance_planner/src/utils/debug_utils.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/62a982ccaebb091bb9898fcbd7bdecd7ca025e7b/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Fdebug_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/62a982ccaebb091bb9898fcbd7bdecd7ca025e7b/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Fdebug_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Futils%2Fdebug_utils.cpp?ref=62a982ccaebb091bb9898fcbd7bdecd7ca025e7b",
            "patch": "@@ -445,7 +445,7 @@ visualization_msgs::msg::MarkerArray getBoundsCandidatesLineMarkerArray(\n   visualization_msgs::msg::MarkerArray msg;\n   const std::string ns = \"bounds_candidates\";\n \n-  if (ref_points.empty()) return msg;\n+  if (ref_points.empty() || bounds_candidates.empty()) return msg;\n \n   auto marker = createDefaultMarker(\n     \"map\", rclcpp::Clock().now(), ns, 0, visualization_msgs::msg::Marker::LINE_LIST,"
        }
    ],
    "autowarefoundation/autoware.universe/2804": [
        {
            "sha": "cad241673c01bddd2ce6a4f25618e4fa6d89004e",
            "filename": "common/motion_utils/include/motion_utils/trajectory/trajectory.hpp",
            "status": "modified",
            "additions": 295,
            "deletions": 34,
            "changes": 329,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bb1f826c5209f281fb7c3510fc6969ba121fcb78/common%2Fmotion_utils%2Finclude%2Fmotion_utils%2Ftrajectory%2Ftrajectory.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bb1f826c5209f281fb7c3510fc6969ba121fcb78/common%2Fmotion_utils%2Finclude%2Fmotion_utils%2Ftrajectory%2Ftrajectory.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fmotion_utils%2Finclude%2Fmotion_utils%2Ftrajectory%2Ftrajectory.hpp?ref=bb1f826c5209f281fb7c3510fc6969ba121fcb78",
            "patch": "@@ -29,6 +29,11 @@\n \n namespace motion_utils\n {\n+\n+/**\n+ * @brief validate if points container is empty or not\n+ * @param points points of trajectory, path, ...\n+ */\n template <class T>\n void validateNonEmpty(const T & points)\n {\n@@ -37,6 +42,12 @@ void validateNonEmpty(const T & points)\n   }\n }\n \n+/**\n+ * @brief validate a point is in a non-sharp angle between two points or not\n+ * @param point1 front point\n+ * @param point2 point to be validated\n+ * @param point3 back point\n+ */\n template <class T>\n void validateNonSharpAngle(\n   const T & point1, const T & point2, const T & point3,\n@@ -59,6 +70,11 @@ void validateNonSharpAngle(\n   }\n }\n \n+/**\n+ * @brief checks whether a path of trajectory has forward driving direction\n+ * @param points points of trajectory, path, ...\n+ * @return (forward / backward) driving (true / false)\n+ */\n template <class T>\n boost::optional<bool> isDrivingForward(const T points)\n {\n@@ -73,6 +89,12 @@ boost::optional<bool> isDrivingForward(const T points)\n   return tier4_autoware_utils::isDrivingForward(first_pose, second_pose);\n }\n \n+/**\n+ * @brief checks whether a path of trajectory has forward driving direction using its longitudinal\n+ * velocity\n+ * @param points_with_twist points of trajectory, path, ... (with velocity)\n+ * @return (forward / backward) driving (true, false, none \"if velocity is zero\")\n+ */\n template <class T>\n boost::optional<bool> isDrivingForwardWithTwist(const T points_with_twist)\n {\n@@ -92,6 +114,15 @@ boost::optional<bool> isDrivingForwardWithTwist(const T points_with_twist)\n   return isDrivingForward(points_with_twist);\n }\n \n+/**\n+ * @brief remove overlapping points through points container.\n+ * Overlapping is determined by calculating the distance between 2 consecutive points.\n+ * If the distance between them is less than a threshold, they will be considered overlapping.\n+ * @param points points of trajectory, path, ...\n+ * @param start_idx index to start the overlap remove calculation from through the points\n+ * container. Indices before that index will be considered non-overlapping. Default = 0\n+ * @return points container without overlapping points\n+ */\n template <class T>\n T removeOverlapPoints(const T & points, const size_t & start_idx = 0)\n {\n@@ -119,6 +150,14 @@ T removeOverlapPoints(const T & points, const size_t & start_idx = 0)\n   return dst;\n }\n \n+/**\n+ * @brief search through points container from specified start and end indices about first matching\n+ * index of a zero longitudinal velocity point.\n+ * @param points_with_twist points of trajectory, path, ... (with velocity)\n+ * @param src_idx start index of the search\n+ * @param dst_idx end index of the search\n+ * @return first matching index of a zero velocity point inside the points container.\n+ */\n template <class T>\n boost::optional<size_t> searchZeroVelocityIndex(\n   const T & points_with_twist, const size_t src_idx, const size_t dst_idx)\n@@ -140,6 +179,13 @@ boost::optional<size_t> searchZeroVelocityIndex(\n   return {};\n }\n \n+/**\n+ * @brief search through points container from specified start index till end of points container\n+ * about first matching index of a zero longitudinal velocity point.\n+ * @param points_with_twist points of trajectory, path, ... (with velocity)\n+ * @param src_idx start index of the search\n+ * @return first matching index of a zero velocity point inside the points container.\n+ */\n template <class T>\n boost::optional<size_t> searchZeroVelocityIndex(const T & points_with_twist, const size_t & src_idx)\n {\n@@ -153,12 +199,28 @@ boost::optional<size_t> searchZeroVelocityIndex(const T & points_with_twist, con\n   return searchZeroVelocityIndex(points_with_twist, src_idx, points_with_twist.size());\n }\n \n+/**\n+ * @brief search through points container from its start to end about first matching index of a zero\n+ * longitudinal velocity point.\n+ * @param points_with_twist points of trajectory, path, ... (with velocity)\n+ * @return first matching index of a zero velocity point inside the points container.\n+ */\n template <class T>\n boost::optional<size_t> searchZeroVelocityIndex(const T & points_with_twist)\n {\n   return searchZeroVelocityIndex(points_with_twist, 0, points_with_twist.size());\n }\n \n+/**\n+ * @brief find nearest point index through points container for a given point.\n+ * Finding nearest point is determined by looping through the points container,\n+ * and calculating the 2D squared distance between each point in the container and the given point.\n+ * The index of the point with minimum distance and yaw deviation comparing to the given point will\n+ * be returned.\n+ * @param points points of trajectory, path, ...\n+ * @param point given point\n+ * @return index of nearest point\n+ */\n template <class T>\n size_t findNearestIndex(const T & points, const geometry_msgs::msg::Point & point)\n {\n@@ -177,6 +239,19 @@ size_t findNearestIndex(const T & points, const geometry_msgs::msg::Point & poin\n   return min_idx;\n }\n \n+/**\n+ * @brief find nearest point index through points container for a given pose.\n+ * Finding nearest point is determined by looping through the points container,\n+ * and finding the nearest point to the given pose in terms of squared 2D distance and yaw\n+ * deviation. The index of the point with minimum distance and yaw deviation comparing to the given\n+ * pose will be returned.\n+ * @param points points of trajectory, path, ...\n+ * @param pose given pose\n+ * @param max_dist max distance used to get squared distance for finding the nearest point to given\n+ * pose\n+ * @param max_yaw max yaw used for finding nearest point to given pose\n+ * @return index of nearest point (index or none if not found)\n+ */\n template <class T>\n boost::optional<size_t> findNearestIndex(\n   const T & points, const geometry_msgs::msg::Pose & pose,\n@@ -221,10 +296,12 @@ boost::optional<size_t> findNearestIndex(\n \n /**\n  * @brief calculate longitudinal offset (length along trajectory from seg_idx point to nearest point\n- * to p_target on trajectory) If seg_idx point is after that nearest point, length is negative\n+ * to p_target on trajectory). If seg_idx point is after that nearest point, length is negative.\n+ * Segment is straight path between two continuous points of trajectory.\n  * @param points points of trajectory, path, ...\n  * @param seg_idx segment index of point at beginning of length\n  * @param p_target target point at end of length\n+ * @param throw_exception flag to enable/disable exception throwing\n  * @return signed length\n  */\n template <class T>\n@@ -273,10 +350,10 @@ double calcLongitudinalOffsetToSegment(\n }\n \n /**\n- * @brief find nearest segment index to point\n- *        segment is straight path between two continuous points of trajectory\n- *        When point is on a trajectory point whose index is nearest_idx, return nearest_idx - 1\n- * @param points points of trajectory\n+ * @brief find nearest segment index to point.\n+ * Segment is straight path between two continuous points of trajectory.\n+ * When point is on a trajectory point whose index is nearest_idx, return nearest_idx - 1\n+ * @param points points of trajectory, path, ...\n  * @param point point to which to find nearest segment index\n  * @return nearest index\n  */\n@@ -303,12 +380,12 @@ size_t findNearestSegmentIndex(const T & points, const geometry_msgs::msg::Point\n \n /**\n  * @brief find nearest segment index to pose\n- *        segment is straight path between two continuous points of trajectory\n- *        When pose is on a trajectory point whose index is nearest_idx, return nearest_idx - 1\n- * @param points points of trajectory\n+ * Segment is straight path between two continuous points of trajectory.\n+ * When pose is on a trajectory point whose index is nearest_idx, return nearest_idx - 1\n+ * @param points points of trajectory, path, ..\n  * @param pose pose to which to find nearest segment index\n- * @param max_dist max distance to search\n- * @param max_yaw max yaw to search\n+ * @param max_dist max distance used for finding the nearest index to given pose\n+ * @param max_yaw max yaw used for finding nearest index to given pose\n  * @return nearest index\n  */\n template <class T>\n@@ -340,10 +417,12 @@ boost::optional<size_t> findNearestSegmentIndex(\n }\n \n /**\n- * @brief calculate lateral offset from p_target (length from p_target to trajectory)\n- *        If seg_idx point is after that nearest point, length is negative\n+ * @brief calculate lateral offset from p_target (length from p_target to trajectory) using given\n+ * segment index. Segment is straight path between two continuous points of trajectory.\n  * @param points points of trajectory, path, ...\n  * @param p_target target point\n+ * @param seg_idx segment index of point at beginning of length\n+ * @param throw_exception flag to enable/disable exception throwing\n  * @return length (unsigned)\n  */\n template <class T>\n@@ -383,6 +462,16 @@ double calcLateralOffset(\n   return cross_vec(2) / segment_vec.norm();\n }\n \n+/**\n+ * @brief calculate lateral offset from p_target (length from p_target to trajectory).\n+ * The function gets the nearest segment index between the points of trajectory and the given target\n+ * point, then uses that segment index to calculate lateral offset. Segment is straight path between\n+ * two continuous points of trajectory.\n+ * @param points points of trajectory, path, ...\n+ * @param p_target target point\n+ * @param throw_exception flag to enable/disable exception throwing\n+ * @return length (unsigned)\n+ */\n template <class T>\n double calcLateralOffset(\n   const T & points, const geometry_msgs::msg::Point & p_target, const bool throw_exception = false)\n@@ -414,7 +503,14 @@ double calcLateralOffset(\n }\n \n /**\n- * @brief calcSignedArcLength from index to index\n+ * @brief calculate length of 2D distance between two points, specified by start and end points\n+ * indicies through points container.\n+ * @param points points of trajectory, path, ...\n+ * @param src_idx index of start point\n+ * @param dst_idx index of end point\n+ * @return length of distance between two points.\n+ * Length is positive if dst_idx is greater that src_idx (i.e. after it in trajectory, path, ...)\n+ * and negative otherwise.\n  */\n template <class T>\n double calcSignedArcLength(const T & points, const size_t src_idx, const size_t dst_idx)\n@@ -438,8 +534,12 @@ double calcSignedArcLength(const T & points, const size_t src_idx, const size_t\n }\n \n /**\n- *  @brief Computes the partial sums of the elements in the sub-ranges of\n- *         the range [src_idx, dst_idx) and return these sum as vector\n+ * @brief Computes the partial sums of the elements in the sub-ranges of the range [src_idx,\n+ * dst_idx) and return these sum as vector\n+ * @param points points of trajectory, path, ...\n+ * @param src_idx index of start point\n+ * @param dst_idx index of end point\n+ * @return partial sums container\n  */\n template <class T>\n std::vector<double> calcSignedArcLengthPartialSum(\n@@ -471,7 +571,14 @@ std::vector<double> calcSignedArcLengthPartialSum(\n }\n \n /**\n- * @brief calcSignedArcLength from point to index\n+ * @brief calculate length of 2D distance between two points, specified by start point and end point\n+ * index of points container.\n+ * @param points points of trajectory, path, ...\n+ * @param src_point start point\n+ * @param dst_idx index of end point\n+ * @return length of distance between two points.\n+ * Length is positive if destination point associated to dst_idx is greater that src_idx (i.e. after\n+ * it in trajectory, path, ...) and negative otherwise.\n  */\n template <class T>\n double calcSignedArcLength(\n@@ -494,7 +601,16 @@ double calcSignedArcLength(\n }\n \n /**\n- * @brief calcSignedArcLength from point to index with maximum distance and yaw threshold\n+ * @brief calculate length of 2D distance between two points, specified by start pose and end point\n+ * index of points container.\n+ * @param points points of trajectory, path, ...\n+ * @param src_pose start pose\n+ * @param dst_idx index of end point\n+ * @param max_dist max distance, used to search for nearest segment index to start pose\n+ * @param max_yaw max yaw, used to search for nearest segment index to start pose\n+ * @return length of distance between two points.\n+ * Length is positive if destination point associated to dst_idx is greater that point associated to\n+ * src_pose (i.e. after it in trajectory, path, ...) and negative otherwise.\n  */\n template <class T>\n boost::optional<double> calcSignedArcLength(\n@@ -522,7 +638,14 @@ boost::optional<double> calcSignedArcLength(\n }\n \n /**\n- * @brief calcSignedArcLength from index to point\n+ * @brief calculate length of 2D distance between two points, specified by start index of points\n+ * container and end point.\n+ * @param points points of trajectory, path, ...\n+ * @param src_idx index of start point\n+ * @param dst_point end point\n+ * @return length of distance between two points\n+ * Length is positive if destination point is greater that source point associated to src_idx (i.e.\n+ * after it in trajectory, path, ...) and negative otherwise.\n  */\n template <class T>\n double calcSignedArcLength(\n@@ -539,7 +662,15 @@ double calcSignedArcLength(\n }\n \n /**\n- * @brief calcSignedArcLength from point to point\n+ * @brief calculate length of 2D distance between two points, specified by start point and end\n+ * point.\n+ * @param points points of trajectory, path, ...\n+ * @param src_point start point\n+ * @param dst_point end point\n+ * @return length of distance between two points.\n+ * Length is positive if destination point is greater that source point (i.e. after it in\n+ * trajectory, path, ...) and negative otherwise.\n+ *\n  */\n template <class T>\n double calcSignedArcLength(\n@@ -566,7 +697,15 @@ double calcSignedArcLength(\n }\n \n /**\n- * @brief calcSignedArcLength from pose to point\n+ * @brief calculate length of 2D distance between two points, specified by start pose and end point.\n+ * @param points points of trajectory, path, ...\n+ * @param src_pose start pose\n+ * @param dst_point end point\n+ * @param max_dist max distance, used to search for nearest segment index to start pose\n+ * @param max_yaw max yaw, used to search for nearest segment index to start pose\n+ * @return length of distance between two points.\n+ * Length is positive if destination point is greater that source point associated to src_pose (i.e.\n+ * after it in trajectory, path, ...) and negative otherwise.\n  */\n template <class T>\n boost::optional<double> calcSignedArcLength(\n@@ -599,7 +738,9 @@ boost::optional<double> calcSignedArcLength(\n }\n \n /**\n- * @brief calcArcLength for the whole length\n+ * @brief calculate length of 2D distance for whole points container, from its start to its end.\n+ * @param points points of trajectory, path, ...\n+ * @return length of 2D distance for points container\n  */\n template <class T>\n double calcArcLength(const T & points)\n@@ -614,6 +755,15 @@ double calcArcLength(const T & points)\n   return calcSignedArcLength(points, 0, points.size() - 1);\n }\n \n+/**\n+ * @brief calculate curvature through points container.\n+ * The method used for calculating the curvature is using 3 consecutive points through the points\n+ * container. Then the curvature is the reciprocal of the radius of the circle that passes through\n+ * these three points.\n+ * @details more details here : https://en.wikipedia.org/wiki/Menger_curvature\n+ * @param points points of trajectory, path, ...\n+ * @return calculated curvature container through points container\n+ */\n template <class T>\n inline std::vector<double> calcCurvature(const T & points)\n {\n@@ -631,6 +781,16 @@ inline std::vector<double> calcCurvature(const T & points)\n   return curvature_vec;\n }\n \n+/**\n+ * @brief calculate curvature through points container and length of 2d distance for segment used\n+ * for curvature calculation. The method used for calculating the curvature is using 3 consecutive\n+ * points through the points container. Then the curvature is the reciprocal of the radius of the\n+ * circle that passes through these three points. Then length of 2D distance of these points is\n+ * calculated\n+ * @param points points of trajectory, path, ...\n+ * @return Container of pairs, calculated curvature and length of 2D distance for segment used for\n+ * curvature calculation\n+ */\n template <class T>\n inline std::vector<std::pair<double, double>> calcCurvatureAndArcLength(const T & points)\n {\n@@ -652,7 +812,11 @@ inline std::vector<std::pair<double, double>> calcCurvatureAndArcLength(const T\n }\n \n /**\n- * @brief Calculate distance to the forward stop point from the given src index\n+ * @brief calculate length of 2D distance between given start point index in points container and\n+ * first point in container with zero longitudinal velocity\n+ * @param points_with_twist points of trajectory, path, ... (with velocity)\n+ * @return Length of 2D distance between start point index in points container and first point in\n+ * container with zero longitudinal velocity\n  */\n template <class T>\n boost::optional<double> calcDistanceToForwardStopPoint(\n@@ -675,7 +839,16 @@ boost::optional<double> calcDistanceToForwardStopPoint(\n }\n \n /**\n- * @brief Calculate distance to the forward stop point from the given pose\n+ * @brief calculate length of 2D distance between given pose and first point in container with zero\n+ * longitudinal velocity\n+ * @param points_with_twist points of trajectory, path, ... (with velocity)\n+ * @param pose given pose to start the distance calculation from\n+ * @param max_dist max distance, used to search for nearest segment index in points container to the\n+ * given pose\n+ * @param max_yaw max yaw, used to search for nearest segment index in points container to the given\n+ * pose\n+ * @return Length of 2D distance between given pose and first point in container with zero\n+ * longitudinal velocity\n  */\n template <class T>\n boost::optional<double> calcDistanceToForwardStopPoint(\n@@ -715,10 +888,12 @@ boost::optional<double> calcDistanceToForwardStopPoint(\n }\n \n /**\n- * @brief calculate the point offset from source point along the trajectory (or path)\n+ * @brief calculate the point offset from source point index along the trajectory (or path) (points\n+ * container)\n  * @param points points of trajectory, path, ...\n  * @param src_idx index of source point\n  * @param offset length of offset from source point\n+ * @param throw_exception flag to enable/disable exception throwing\n  * @return offset point\n  */\n template <class T>\n@@ -777,7 +952,8 @@ inline boost::optional<geometry_msgs::msg::Point> calcLongitudinalOffsetPoint(\n }\n \n /**\n- * @brief calculate the point offset from source point along the trajectory (or path)\n+ * @brief calculate the point offset from source point along the trajectory (or path) (points\n+ * container)\n  * @param points points of trajectory, path, ...\n  * @param src_point source point\n  * @param offset length of offset from source point\n@@ -808,7 +984,8 @@ inline boost::optional<geometry_msgs::msg::Point> calcLongitudinalOffsetPoint(\n }\n \n /**\n- * @brief calculate the point offset from source point along the trajectory (or path)\n+ * @brief calculate the point offset from source point index along the trajectory (or path) (points\n+ * container)\n  * @param points points of trajectory, path, ...\n  * @param src_idx index of source point\n  * @param offset length of offset from source point\n@@ -889,7 +1066,8 @@ inline boost::optional<geometry_msgs::msg::Pose> calcLongitudinalOffsetPose(\n }\n \n /**\n- * @brief calculate the point offset from source point along the trajectory (or path)\n+ * @brief calculate the point offset from source point along the trajectory (or path) (points\n+ * container)\n  * @param points points of trajectory, path, ...\n  * @param src_point source point\n  * @param offset length of offset from source point\n@@ -919,11 +1097,13 @@ inline boost::optional<geometry_msgs::msg::Pose> calcLongitudinalOffsetPose(\n }\n \n /**\n- * @brief calculate the point offset from source point along the trajectory (or path)\n+ * @brief insert a point in points container (trajectory, path, ...) using segment id\n  * @param seg_idx segment index of point at beginning of length\n  * @param p_target point to be inserted\n  * @param points output points of trajectory, path, ...\n- * @return index of insert point\n+ * @param overlap_threshold distance threshold, used to check if the inserted point is between start\n+ * and end of nominated segment to be added in.\n+ * @return index of segment id, where point is inserted\n  */\n template <class T>\n inline boost::optional<size_t> insertTargetPoint(\n@@ -1003,11 +1183,14 @@ inline boost::optional<size_t> insertTargetPoint(\n }\n \n /**\n- * @brief calculate the point offset from source point along the trajectory (or path)\n+ * @brief insert a point in points container (trajectory, path, ...) using length of point to be\n+ * inserted\n  * @param insert_point_length length to insert point from the beginning of the points\n  * @param p_target point to be inserted\n  * @param points output points of trajectory, path, ...\n- * @return index of insert point\n+ * @param overlap_threshold distance threshold, used to check if the inserted point is between start\n+ * and end of nominated segment to be added in.\n+ * @return index of segment id, where point is inserted\n  */\n template <class T>\n inline boost::optional<size_t> insertTargetPoint(\n@@ -1038,10 +1221,13 @@ inline boost::optional<size_t> insertTargetPoint(\n }\n \n /**\n- * @brief Insert a target point from the source index\n+ * @brief insert a point in points container (trajectory, path, ...) using segment index and length\n+ * of point to be inserted\n  * @param src_segment_idx source segment index on the trajectory\n  * @param insert_point_length length to insert point from the beginning of the points\n  * @param points output points of trajectory, path, ...\n+ * @param overlap_threshold distance threshold, used to check if the inserted point is between start\n+ * and end of nominated segment to be added in.\n  * @return index of insert point\n  */\n template <class T>\n@@ -1086,6 +1272,12 @@ inline boost::optional<size_t> insertTargetPoint(\n  * @param src_pose source pose on the trajectory\n  * @param insert_point_length length to insert point from the beginning of the points\n  * @param points output points of trajectory, path, ...\n+ * @param max_dist max distance, used to search for nearest segment index in points container to the\n+ * given source pose\n+ * @param max_yaw max yaw, used to search for nearest segment index in points container to the given\n+ * source pose\n+ * @param overlap_threshold distance threshold, used to check if the inserted point is between start\n+ * and end of nominated segment to be added in.\n  * @return index of insert point\n  */\n template <class T>\n@@ -1116,7 +1308,9 @@ inline boost::optional<size_t> insertTargetPoint(\n  * @brief Insert stop point from the source segment index\n  * @param src_segment_idx start segment index on the trajectory\n  * @param distance_to_stop_point distance to stop point from the source index\n- * @param points output points of trajectory, path, ...\n+ * @param points_with_twist output points of trajectory, path, ... (with velocity)\n+ * @param overlap_threshold distance threshold, used to check if the inserted point is between start\n+ * and end of nominated segment to be added in.\n  * @return index of stop point\n  */\n template <class T>\n@@ -1147,7 +1341,13 @@ inline boost::optional<size_t> insertStopPoint(\n  * @brief Insert Stop point from the source pose\n  * @param src_pose source pose\n  * @param distance_to_stop_point  distance to stop point from the src point\n- * @param points output points of trajectory, path, ...\n+ * @param points_with_twist output points of trajectory, path, ... (with velocity)\n+ * @param max_dist max distance, used to search for nearest segment index in points container to the\n+ * given source pose\n+ * @param max_yaw max yaw, used to search for nearest segment index in points container to the given\n+ * source pose\n+ * @param overlap_threshold distance threshold, used to check if the inserted point is between start\n+ * and end of nominated segment to be added in.\n  * @return index of stop point\n  */\n template <class T>\n@@ -1176,6 +1376,11 @@ inline boost::optional<size_t> insertStopPoint(\n   return stop_idx;\n }\n \n+/**\n+ * @brief Insert orientation to each point in points container (trajectory, path, ...)\n+ * @param points points of trajectory, path, ... (input / output)\n+ * @param is_driving_forward  flag indicating the order of points is forward or backward\n+ */\n template <class T>\n void insertOrientation(T & points, const bool is_driving_forward)\n {\n@@ -1208,6 +1413,18 @@ void insertOrientation(T & points, const bool is_driving_forward)\n   }\n }\n \n+/**\n+ * @brief calculate length of 2D distance between two points, specified by start point and end\n+ * point with their segment indices in points container\n+ * @param points points of trajectory, path, ...\n+ * @param src_point start point\n+ * @param src_seg_idx index of start point segment\n+ * @param dst_point end point\n+ * @param dst_seg_idx index of end point segment\n+ * @return length of distance between two points.\n+ * Length is positive if destination point is greater that source point (i.e. after it in\n+ * trajectory, path, ...) and negative otherwise.\n+ */\n template <class T>\n double calcSignedArcLength(\n   const T & points, const geometry_msgs::msg::Point & src_point, const size_t src_seg_idx,\n@@ -1224,6 +1441,17 @@ double calcSignedArcLength(\n   return signed_length_on_traj - signed_length_src_offset + signed_length_dst_offset;\n }\n \n+/**\n+ * @brief calculate length of 2D distance between two points, specified by start point and its\n+ * segment index in points container and end point index in points container\n+ * @param points points of trajectory, path, ...\n+ * @param src_point start point\n+ * @param src_seg_idx index of start point segment\n+ * @param dst_idx index of end point\n+ * @return length of distance between two points\n+ * Length is positive if destination point associated to dst_idx is greater that source point (i.e.\n+ * after it in trajectory, path, ...) and negative otherwise.\n+ */\n template <class T>\n double calcSignedArcLength(\n   const T & points, const geometry_msgs::msg::Point & src_point, const size_t src_seg_idx,\n@@ -1238,6 +1466,17 @@ double calcSignedArcLength(\n   return signed_length_on_traj - signed_length_src_offset;\n }\n \n+/**\n+ * @brief calculate length of 2D distance between two points, specified by start point index in\n+ * points container and end point and its segment index in points container\n+ * @param points points of trajectory, path, ...\n+ * @param src_idx index of start point start point\n+ * @param dst_point end point\n+ * @param dst_seg_idx index of end point segment\n+ * @return length of distance between two points\n+ * Length is positive if destination point is greater that source point associated to src_idx (i.e.\n+ * after it in trajectory, path, ...) and negative otherwise.\n+ */\n template <class T>\n double calcSignedArcLength(\n   const T & points, const size_t src_idx, const geometry_msgs::msg::Point & dst_point,\n@@ -1252,6 +1491,18 @@ double calcSignedArcLength(\n   return signed_length_on_traj + signed_length_dst_offset;\n }\n \n+/**\n+ * @brief find first nearest point index through points container for a given pose with soft\n+ * distance and yaw constraints. Finding nearest point is determined by looping through the points\n+ * container, and finding the nearest point to the given pose in terms of squared 2D distance and\n+ * yaw deviation. The index of the point with minimum distance and yaw deviation comparing to the\n+ * given pose will be returned.\n+ * @param points points of trajectory, path, ...\n+ * @param pose given pose\n+ * @param dist_threshold distance threshold used for searching for first nearest index to given pose\n+ * @param yaw_threshold yaw threshold used for searching for first nearest index to given pose\n+ * @return index of nearest point (index or none if not found)\n+ */\n template <class T>\n size_t findFirstNearestIndexWithSoftConstraints(\n   const T & points, const geometry_msgs::msg::Pose & pose,\n@@ -1330,6 +1581,16 @@ size_t findFirstNearestIndexWithSoftConstraints(\n   return findNearestIndex(points, pose.position);\n }\n \n+/**\n+ * @brief find nearest segment index to pose with soft constraints\n+ * Segment is straight path between two continuous points of trajectory\n+ * When pose is on a trajectory point whose index is nearest_idx, return nearest_idx - 1\n+ * @param points points of trajectory, path, ..\n+ * @param pose pose to which to find nearest segment index\n+ * @param dist_threshold distance threshold used for searching for first nearest index to given pose\n+ * @param yaw_threshold yaw threshold used for searching for first nearest index to given pose\n+ * @return nearest index\n+ */\n template <class T>\n size_t findFirstNearestSegmentIndexWithSoftConstraints(\n   const T & points, const geometry_msgs::msg::Pose & pose,"
        }
    ],
    "autowarefoundation/autoware.universe/2805": [
        {
            "sha": "58bf256f5f20212a9d406495b91833e764cf6c15",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_out/shift_pull_out.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 4,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cf4070603fa8a780e9e9d3f8e74067ea422322e2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fshift_pull_out.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cf4070603fa8a780e9e9d3f8e74067ea422322e2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fshift_pull_out.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fshift_pull_out.cpp?ref=cf4070603fa8a780e9e9d3f8e74067ea422322e2",
            "patch": "@@ -183,19 +183,25 @@ std::vector<PullOutPath> ShiftPullOut::calcPullOutPaths(\n     }\n \n     // get shift end pose\n-    const auto shift_end_pose = std::invoke([&]() {\n+    const auto shift_end_pose_ptr = std::invoke([&]() {\n       const auto arc_position_shift_start =\n         lanelet::utils::getArcCoordinates(road_lanes, start_pose);\n       const double s_start = arc_position_shift_start.length + before_shifted_pull_out_distance;\n       const double s_end = s_start + std::numeric_limits<double>::epsilon();\n       const auto path = route_handler.getCenterLinePath(road_lanes, s_start, s_end, true);\n-      return path.points.front().point.pose;\n+      return path.points.empty()\n+               ? nullptr\n+               : std::make_shared<geometry_msgs::msg::Pose>(path.points.front().point.pose);\n     });\n \n+    if (!shift_end_pose_ptr) {\n+      continue;\n+    }\n+\n     // create shift line\n     ShiftLine shift_line{};\n     shift_line.start = start_pose;\n-    shift_line.end = shift_end_pose;\n+    shift_line.end = *shift_end_pose_ptr;\n     shift_line.end_shift_length = shift_length;\n     path_shifter.addShiftLine(shift_line);\n \n@@ -208,7 +214,7 @@ std::vector<PullOutPath> ShiftPullOut::calcPullOutPaths(\n \n     // set velocity\n     const size_t pull_out_end_idx =\n-      findNearestIndex(shifted_path.path.points, shift_end_pose.position);\n+      findNearestIndex(shifted_path.path.points, shift_end_pose_ptr->position);\n     for (size_t i = 0; i < shifted_path.path.points.size(); ++i) {\n       auto & point = shifted_path.path.points.at(i);\n       if (i < pull_out_end_idx) {"
        }
    ],
    "autowarefoundation/autoware.universe/2807": [
        {
            "sha": "1753f3bebb402aba2582b773afb69d9b993e247e",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 31,
            "deletions": 7,
            "changes": 38,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bbff283d2c7b5cf4f89273ef2af0f000984fb58d/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bbff283d2c7b5cf4f89273ef2af0f000984fb58d/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=bbff283d2c7b5cf4f89273ef2af0f000984fb58d",
            "patch": "@@ -2329,19 +2329,43 @@ bool hasEnoughDistance(\n   const auto is_obj_in_front = isObjectFront(front_vehicle_pose);\n   debug.is_front = is_obj_in_front;\n \n-  const auto front_vehicle_velocity =\n-    (is_obj_in_front) ? object_current_twist.linear : ego_current_twist.linear;\n+  const auto [front_vehicle_velocity, rear_vehicle_velocity] = std::invoke([&]() {\n+    debug.object_twist.linear = object_current_twist.linear;\n+    if (is_obj_in_front) {\n+      return std::make_pair(\n+        util::l2Norm(object_current_twist.linear), util::l2Norm(ego_current_twist.linear));\n+    }\n+    return std::make_pair(\n+      util::l2Norm(ego_current_twist.linear), util::l2Norm(object_current_twist.linear));\n+  });\n+\n+  const auto is_unsafe_dist_between_vehicle = std::invoke([&]() {\n+    // ignore this for parked vehicle.\n+    if (l2Norm(object_current_twist.linear) < 0.1) {\n+      return false;\n+    }\n+\n+    // the value guarantee distance between vehicles are always more than dist\n+    const auto max_vel = std::max(front_vehicle_velocity, rear_vehicle_velocity);\n+    constexpr auto scale = 0.8;\n+    const auto dist = scale * std::abs(max_vel) + param.longitudinal_distance_min_threshold;\n \n-  const auto rear_vehicle_velocity =\n-    (is_obj_in_front) ? ego_current_twist.linear : object_current_twist.linear;\n-  debug.object_twist.linear = (is_obj_in_front) ? front_vehicle_velocity : rear_vehicle_velocity;\n+    // return value rounded to the nearest two floating point\n+    return std::abs(front_vehicle_pose.position.x) < dist;\n+  });\n+\n+  if (is_unsafe_dist_between_vehicle) {\n+    return false;\n+  }\n \n   const auto front_vehicle_stop_threshold = frontVehicleStopDistance(\n-    util::l2Norm(front_vehicle_velocity), front_decel, std::fabs(front_vehicle_pose.position.x));\n+    front_vehicle_velocity, front_decel, std::abs(front_vehicle_pose.position.x));\n \n+  // longitudinal_distance_min_threshold here guarantee future stopping distance must be more than\n+  // longitudinal_distance_min_threshold\n   const auto rear_vehicle_stop_threshold = std::max(\n     rearVehicleStopDistance(\n-      util::l2Norm(rear_vehicle_velocity), rear_decel, param.rear_vehicle_reaction_time,\n+      rear_vehicle_velocity, rear_decel, param.rear_vehicle_reaction_time,\n       param.rear_vehicle_safety_time_margin),\n     param.longitudinal_distance_min_threshold);\n "
        }
    ],
    "autowarefoundation/autoware.universe/2808": [
        {
            "sha": "1ec5f6a328361ba2cbcdadd718e5683c83515f98",
            "filename": "vehicle/accel_brake_map_calibrator/accel_brake_map_calibrator/scripts/view_plot.py",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fb6195bd36bf1b3532f817f958a111c029a7b7ee/vehicle%2Faccel_brake_map_calibrator%2Faccel_brake_map_calibrator%2Fscripts%2Fview_plot.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fb6195bd36bf1b3532f817f958a111c029a7b7ee/vehicle%2Faccel_brake_map_calibrator%2Faccel_brake_map_calibrator%2Fscripts%2Fview_plot.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/vehicle%2Faccel_brake_map_calibrator%2Faccel_brake_map_calibrator%2Fscripts%2Fview_plot.py?ref=fb6195bd36bf1b3532f817f958a111c029a7b7ee",
            "patch": "@@ -281,7 +281,7 @@ def main(args=None):\n     parser.add_argument(\n         \"-m\",\n         \"--method\",\n-        default=\"None\",\n+        default=None,\n         type=str,\n         help=\"calibration method : each_cell or four_cell\",\n     )"
        }
    ],
    "autowarefoundation/autoware.universe/2815": [
        {
            "sha": "a309aad7f93b48f82b22b66977807c694416d552",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 9,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8b5d1e9a21ca75c5018ed69a0f33cab71d58f62d/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8b5d1e9a21ca75c5018ed69a0f33cab71d58f62d/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=8b5d1e9a21ca75c5018ed69a0f33cab71d58f62d",
            "patch": "@@ -2239,20 +2239,20 @@ bool getObjectExpectedPoseAndConvertToPolygon(\n std::vector<PredictedPath> getPredictedPathFromObj(\n   const PredictedObject & obj, const bool & is_use_all_predicted_path)\n {\n-  std::vector<PredictedPath> predicted_path_vec;\n-  if (is_use_all_predicted_path) {\n-    std::copy_if(\n-      obj.kinematics.predicted_paths.cbegin(), obj.kinematics.predicted_paths.cend(),\n-      std::back_inserter(predicted_path_vec),\n-      [](const PredictedPath & path) { return !path.path.empty(); });\n-  } else {\n+  if (!is_use_all_predicted_path) {\n     const auto max_confidence_path = std::max_element(\n       obj.kinematics.predicted_paths.begin(), obj.kinematics.predicted_paths.end(),\n-      [](const auto & path1, const auto & path2) { return path1.confidence > path2.confidence; });\n+      [](const auto & path1, const auto & path2) { return path1.confidence < path2.confidence; });\n     if (max_confidence_path != obj.kinematics.predicted_paths.end()) {\n-      predicted_path_vec.push_back(*max_confidence_path);\n+      return {*max_confidence_path};\n     }\n   }\n+\n+  std::vector<PredictedPath> predicted_path_vec;\n+  std::copy_if(\n+    obj.kinematics.predicted_paths.cbegin(), obj.kinematics.predicted_paths.cend(),\n+    std::back_inserter(predicted_path_vec),\n+    [](const PredictedPath & path) { return !path.path.empty(); });\n   return predicted_path_vec;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2824": [
        {
            "sha": "198aef2cdcdcd1b147396e9a8e1a63ad5d917c9a",
            "filename": "launch/tier4_perception_launch/launch/obstacle_segmentation/ground_segmentation/ground_segmentation.launch.py",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9b7369865eb679f39fafd93841fc13774bf1a931/launch%2Ftier4_perception_launch%2Flaunch%2Fobstacle_segmentation%2Fground_segmentation%2Fground_segmentation.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9b7369865eb679f39fafd93841fc13774bf1a931/launch%2Ftier4_perception_launch%2Flaunch%2Fobstacle_segmentation%2Fground_segmentation%2Fground_segmentation.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobstacle_segmentation%2Fground_segmentation%2Fground_segmentation.launch.py?ref=9b7369865eb679f39fafd93841fc13774bf1a931",
            "patch": "@@ -463,7 +463,9 @@ def launch_setup(context, *args, **kwargs):\n     components.extend(\n         pipeline.create_single_frame_obstacle_segmentation_components(\n             input_topic=LaunchConfiguration(\"input/pointcloud\"),\n-            output_topic=pipeline.single_frame_obstacle_seg_output,\n+            output_topic=pipeline.single_frame_obstacle_seg_output\n+            if pipeline.use_single_frame_filter or pipeline.use_time_series_filter\n+            else pipeline.output_topic,\n         )\n     )\n "
        }
    ],
    "autowarefoundation/autoware.universe/2827": [
        {
            "sha": "3b013b77e4b012ab791b4881ea372be010eb3c1c",
            "filename": "planning/motion_velocity_smoother/src/smoother/analytical_jerk_constrained_smoother/analytical_jerk_constrained_smoother.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e4ac67c5891bf9e0f06d12de355532cc2ff96363/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fanalytical_jerk_constrained_smoother%2Fanalytical_jerk_constrained_smoother.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e4ac67c5891bf9e0f06d12de355532cc2ff96363/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fanalytical_jerk_constrained_smoother%2Fanalytical_jerk_constrained_smoother.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fanalytical_jerk_constrained_smoother%2Fanalytical_jerk_constrained_smoother.cpp?ref=e4ac67c5891bf9e0f06d12de355532cc2ff96363",
            "patch": "@@ -287,7 +287,7 @@ TrajectoryPoints AnalyticalJerkConstrainedSmoother::applyLateralAccelerationFilt\n   }\n \n   // Interpolate with constant interval distance for lateral acceleration calculation.\n-  const double points_interval = use_resampling ? input_points_interval : 0.1;  // [m]\n+  const double points_interval = use_resampling ? 0.1 : input_points_interval;  // [m]\n \n   TrajectoryPoints output;\n   // since the resampling takes a long time, omit the resampling when it is not requested\n@@ -299,7 +299,7 @@ TrajectoryPoints AnalyticalJerkConstrainedSmoother::applyLateralAccelerationFilt\n     }\n     const auto output_traj =\n       motion_utils::resampleTrajectory(motion_utils::convertToTrajectory(input), out_arclength);\n-    auto output = motion_utils::convertToTrajectoryPointArray(output_traj);\n+    output = motion_utils::convertToTrajectoryPointArray(output_traj);\n     output.back() = input.back();  // keep the final speed.\n   } else {\n     output = input;"
        }
    ],
    "autowarefoundation/autoware.universe/2828": [
        {
            "sha": "a2e0568379854ee580cdb8c7a77adb5efae80465",
            "filename": "planning/behavior_path_planner/src/scene_module/utils/geometric_parallel_parking.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/dd0bcc32646ebb9f4fb23be4923f57f873b03288/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/dd0bcc32646ebb9f4fb23be4923f57f873b03288/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp?ref=dd0bcc32646ebb9f4fb23be4923f57f873b03288",
            "patch": "@@ -373,7 +373,16 @@ std::vector<PathWithLaneId> GeometricParallelParking::planOneTrial(\n   }\n \n   // combine road and shoulder lanes\n-  lanelet::ConstLanelets lanes = road_lanes;\n+  // cut the road lanes up to start_pose to prevent unintended processing for overlapped lane\n+  lanelet::ConstLanelets lanes{};\n+  tier4_autoware_utils::Point2d start_point2d(start_pose.position.x, start_pose.position.y);\n+  for (const auto & lane : road_lanes) {\n+    if (boost::geometry::within(start_point2d, lane.polygon2d().basicPolygon())) {\n+      lanes.push_back(lane);\n+      break;\n+    }\n+    lanes.push_back(lane);\n+  }\n   lanes.insert(lanes.end(), shoulder_lanes.begin(), shoulder_lanes.end());\n \n   // If start_pose is parallel to goal_pose, we can know lateral deviation of edges of vehicle,"
        }
    ],
    "autowarefoundation/autoware.universe/2833": [
        {
            "sha": "e19a6989a59a778a004937682e27d56aa5de220a",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_utils.cpp",
            "status": "modified",
            "additions": 19,
            "deletions": 13,
            "changes": 32,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d9908a1c37ca0eb9580fbf0c83039e87ea2d30bf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d9908a1c37ca0eb9580fbf0c83039e87ea2d30bf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_utils.cpp?ref=d9908a1c37ca0eb9580fbf0c83039e87ea2d30bf",
            "patch": "@@ -645,38 +645,44 @@ std::vector<Point> updateBoundary(\n   const auto closest_end_point =\n     motion_utils::calcLongitudinalOffsetPoint(original_bound, end_segment_idx, end_offset);\n \n-  std::vector<Point> updated_bound;\n-\n   const double min_dist = 1e-3;\n-  // copy original points until front point\n-  std::copy(\n-    original_bound.begin(), original_bound.begin() + start_segment_idx + 1,\n-    std::back_inserter(updated_bound));\n \n-  // insert closest front point\n-  if (\n-    closest_front_point &&\n-    tier4_autoware_utils::calcDistance2d(*closest_front_point, updated_bound.back()) > min_dist) {\n-    updated_bound.push_back(*closest_front_point);\n+  std::vector<Point> updated_bound;\n+  if (0 < front_offset) {\n+    // copy original points until front point\n+    std::copy(\n+      original_bound.begin(), original_bound.begin() + start_segment_idx + 1,\n+      std::back_inserter(updated_bound));\n+\n+    // insert closest front point\n+    if (\n+      closest_front_point &&\n+      tier4_autoware_utils::calcDistance2d(*closest_front_point, updated_bound.back()) > min_dist) {\n+      updated_bound.push_back(*closest_front_point);\n+    }\n   }\n \n   // insert sorted points\n   for (const auto & sorted_point : sorted_points) {\n-    if (tier4_autoware_utils::calcDistance2d(sorted_point.point, updated_bound.back()) > min_dist) {\n+    if (\n+      updated_bound.empty() ||\n+      tier4_autoware_utils::calcDistance2d(sorted_point.point, updated_bound.back()) > min_dist) {\n       updated_bound.push_back(sorted_point.point);\n     }\n   }\n \n   // insert closest end point\n   if (\n     closest_end_point &&\n-    tier4_autoware_utils::calcDistance2d(*closest_end_point, updated_bound.back()) > min_dist) {\n+    (updated_bound.empty() ||\n+     tier4_autoware_utils::calcDistance2d(*closest_end_point, updated_bound.back()) > min_dist)) {\n     updated_bound.push_back(*closest_end_point);\n   }\n \n   // copy original points until the end of the original bound\n   for (size_t i = end_segment_idx + 1; i < original_bound.size(); ++i) {\n     if (\n+      updated_bound.empty() ||\n       tier4_autoware_utils::calcDistance2d(original_bound.at(i), updated_bound.back()) > min_dist) {\n       updated_bound.push_back(original_bound.at(i));\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/2847": [
        {
            "sha": "388537a01eb3c8faf5c0108fab940478d74d8426",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/util.cpp",
            "status": "modified",
            "additions": 88,
            "deletions": 25,
            "changes": 113,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/52c5bbfb8d7cd56031887f2817c7f4bd9fa9e741/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/52c5bbfb8d7cd56031887f2817c7f4bd9fa9e741/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp?ref=52c5bbfb8d7cd56031887f2817c7f4bd9fa9e741",
            "patch": "@@ -44,6 +44,7 @@ using autoware_auto_planning_msgs::msg::PathWithLaneId;\n using behavior_path_planner::util::calcObjectPolygon;\n using behavior_path_planner::util::getHighestProbLabel;\n using geometry_msgs::msg::Pose;\n+using route_handler::RouteHandler;\n using tier4_autoware_utils::LineString2d;\n using tier4_autoware_utils::Point2d;\n using tier4_autoware_utils::Polygon2d;\n@@ -112,6 +113,66 @@ void filterObjectIndices(\n     }\n   }\n }\n+\n+std::vector<std::vector<int64_t>> getSortedLaneIds(\n+  const RouteHandler & route_handler, const lanelet::ConstLanelets & current_lanes,\n+  const lanelet::ConstLanelets & target_lanes, const double rough_shift_length)\n+{\n+  std::vector<std::vector<int64_t>> sorted_lane_ids{};\n+  sorted_lane_ids.reserve(target_lanes.size());\n+  const auto get_sorted_lane_ids = [&](const lanelet::ConstLanelet & target_lane) {\n+    const auto routing_graph_ptr = route_handler.getRoutingGraphPtr();\n+    lanelet::ConstLanelet lane;\n+    if (rough_shift_length < 0.0) {\n+      // lane change to the left, so I wan to take the lane right to target\n+      const auto has_target_right = routing_graph_ptr->right(target_lane);\n+      if (has_target_right) {\n+        lane = *has_target_right;\n+      }\n+    } else if (rough_shift_length > 0.0) {\n+      const auto has_target_left = routing_graph_ptr->left(target_lane);\n+      if (has_target_left) {\n+        lane = *has_target_left;\n+      }\n+    } else {\n+      lane = target_lane;\n+    }\n+\n+    const auto find_same_id = std::find_if(\n+      current_lanes.cbegin(), current_lanes.cend(),\n+      [&lane](const lanelet::ConstLanelet & orig) { return orig.id() == lane.id(); });\n+\n+    if (find_same_id == current_lanes.cend()) {\n+      return std::vector{target_lane.id()};\n+    }\n+\n+    if (target_lane.id() > find_same_id->id()) {\n+      return std::vector{find_same_id->id(), target_lane.id()};\n+    }\n+\n+    return std::vector{target_lane.id(), find_same_id->id()};\n+  };\n+\n+  std::transform(\n+    target_lanes.cbegin(), target_lanes.cend(), std::back_inserter(sorted_lane_ids),\n+    get_sorted_lane_ids);\n+\n+  return sorted_lane_ids;\n+}\n+\n+std::vector<int64_t> replaceWithSortedIds(\n+  const std::vector<int64_t> & original_lane_ids,\n+  const std::vector<std::vector<int64_t>> & sorted_lane_ids)\n+{\n+  for (const auto original_id : original_lane_ids) {\n+    for (const auto & sorted_id : sorted_lane_ids) {\n+      if (std::find(sorted_id.cbegin(), sorted_id.cend(), original_id) != sorted_id.cend()) {\n+        return sorted_id;\n+      }\n+    }\n+  }\n+  return original_lane_ids;\n+}\n }  // namespace\n \n namespace behavior_path_planner::lane_change_utils\n@@ -181,7 +242,8 @@ std::optional<LaneChangePath> constructCandidatePath(\n   const PathWithLaneId & prepare_segment, const PathWithLaneId & lane_changing_segment,\n   const PathWithLaneId & target_lane_reference_path, const ShiftLine & shift_line,\n   const lanelet::ConstLanelets & original_lanelets, const lanelet::ConstLanelets & target_lanelets,\n-  const double acceleration, const LaneChangePhaseInfo distance, const LaneChangePhaseInfo speed,\n+  const std::vector<std::vector<int64_t>> & sorted_lane_ids, const double acceleration,\n+  const LaneChangePhaseInfo distance, const LaneChangePhaseInfo speed,\n   const LaneChangeParameters & lane_change_param)\n {\n   PathShifter path_shifter;\n@@ -236,36 +298,33 @@ std::optional<LaneChangePath> constructCandidatePath(\n   const Pose & lane_changing_end_pose = lane_changing_end_point.point.pose;\n   const auto lanechange_end_idx =\n     motion_utils::findNearestIndex(shifted_path.path.points, lane_changing_end_pose);\n-  const auto insertLaneIDs = [](auto & target, const auto src) {\n-    target.lane_ids.insert(target.lane_ids.end(), src.lane_ids.begin(), src.lane_ids.end());\n-  };\n-  if (lanechange_end_idx) {\n-    for (size_t i = 0; i < shifted_path.path.points.size(); ++i) {\n-      auto & point = shifted_path.path.points.at(i);\n-      if (i < *lanechange_end_idx) {\n-        insertLaneIDs(point, lane_changing_start_point);\n-        insertLaneIDs(point, lane_changing_end_point);\n-        point.point.longitudinal_velocity_mps = std::min(\n-          point.point.longitudinal_velocity_mps,\n-          lane_changing_start_point.point.longitudinal_velocity_mps);\n-        continue;\n-      }\n-      point.point.longitudinal_velocity_mps =\n-        std::min(point.point.longitudinal_velocity_mps, static_cast<float>(lane_changing_speed));\n-      const auto nearest_idx =\n-        motion_utils::findNearestIndex(lane_changing_segment.points, point.point.pose);\n-      point.lane_ids = lane_changing_segment.points.at(*nearest_idx).lane_ids;\n-    }\n \n-    candidate_path.path = combineReferencePath(prepare_segment, shifted_path.path);\n-    candidate_path.shifted_path = shifted_path;\n-  } else {\n+  if (!lanechange_end_idx) {\n     RCLCPP_ERROR_STREAM(\n       rclcpp::get_logger(\"behavior_path_planner\").get_child(\"lane_change\").get_child(\"util\"),\n       \"lane change end idx not found on target path.\");\n     return std::nullopt;\n   }\n \n+  for (size_t i = 0; i < shifted_path.path.points.size(); ++i) {\n+    auto & point = shifted_path.path.points.at(i);\n+    if (i < *lanechange_end_idx) {\n+      point.lane_ids = replaceWithSortedIds(point.lane_ids, sorted_lane_ids);\n+      point.point.longitudinal_velocity_mps = std::min(\n+        point.point.longitudinal_velocity_mps,\n+        lane_changing_start_point.point.longitudinal_velocity_mps);\n+      continue;\n+    }\n+    point.point.longitudinal_velocity_mps =\n+      std::min(point.point.longitudinal_velocity_mps, static_cast<float>(lane_changing_speed));\n+    const auto nearest_idx =\n+      motion_utils::findNearestIndex(lane_changing_segment.points, point.point.pose);\n+    point.lane_ids = lane_changing_segment.points.at(*nearest_idx).lane_ids;\n+  }\n+\n+  candidate_path.path = combineReferencePath(prepare_segment, shifted_path.path);\n+  candidate_path.shifted_path = shifted_path;\n+\n   // check candidate path is in lanelet\n   if (!isPathInLanelets(candidate_path.path, original_lanelets, target_lanelets)) {\n     return std::nullopt;\n@@ -322,6 +381,9 @@ LaneChangePaths getLaneChangePaths(\n \n   const auto target_lane_length = lanelet::utils::getLaneletLength2d(target_lanelets);\n \n+  const auto sorted_lane_ids = getSortedLaneIds(\n+    route_handler, original_lanelets, target_lanelets, arc_position_from_target.distance);\n+\n   for (double acceleration = 0.0; acceleration >= -maximum_deceleration;\n        acceleration -= acceleration_resolution) {\n     const double prepare_speed = getExpectedVelocityWhenDecelerate(\n@@ -385,7 +447,8 @@ LaneChangePaths getLaneChangePaths(\n     const auto lc_speed = LaneChangePhaseInfo{prepare_speed, lane_changing_speed};\n     const auto candidate_path = constructCandidatePath(\n       prepare_segment_reference, lane_changing_segment_reference, target_lane_reference_path,\n-      shift_line, original_lanelets, target_lanelets, acceleration, lc_dist, lc_speed, parameter);\n+      shift_line, original_lanelets, target_lanelets, sorted_lane_ids, acceleration, lc_dist,\n+      lc_speed, parameter);\n \n     if (!candidate_path) {\n       continue;"
        }
    ],
    "autowarefoundation/autoware.universe/2851": [
        {
            "sha": "600ec5b57681e4496b14a517ca7fe64bb5d34af0",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2fb4c1ab0709de99710dff26fa674a6fe9e5c540/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2fb4c1ab0709de99710dff26fa674a6fe9e5c540/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=2fb4c1ab0709de99710dff26fa674a6fe9e5c540",
            "patch": "@@ -332,7 +332,7 @@ void AvoidanceModule::fillAvoidanceTargetObjects(\n     // object is behind ego or too far.\n     if (object_data.longitudinal < -parameters_->object_check_backward_distance) {\n       avoidance_debug_array_false_and_push_back(AvoidanceDebugFactor::OBJECT_IS_BEHIND_THRESHOLD);\n-      object_data.reason = AvoidanceDebugFactor::OBJECT_BEHIND_PATH_GOAL;\n+      object_data.reason = AvoidanceDebugFactor::OBJECT_IS_BEHIND_THRESHOLD;\n       data.other_objects.push_back(object_data);\n       continue;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/2853": [
        {
            "sha": "fa45880f4c0ee94cf9bffb67abb7416b6c728d5f",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/util.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7443e395e4f96a8d2a3e9c8728d1f26a0be7cf6e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7443e395e4f96a8d2a3e9c8728d1f26a0be7cf6e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp?ref=7443e395e4f96a8d2a3e9c8728d1f26a0be7cf6e",
            "patch": "@@ -322,14 +322,14 @@ std::optional<LaneChangePath> constructCandidatePath(\n     point.lane_ids = lane_changing_segment.points.at(*nearest_idx).lane_ids;\n   }\n \n-  candidate_path.path = combineReferencePath(prepare_segment, shifted_path.path);\n-  candidate_path.shifted_path = shifted_path;\n-\n-  // check candidate path is in lanelet\n-  if (!isPathInLanelets(candidate_path.path, original_lanelets, target_lanelets)) {\n+  if (!isPathInLanelets(shifted_path.path, original_lanelets, target_lanelets)) {\n     return std::nullopt;\n   }\n \n+  // check candidate path is in lanelet\n+  candidate_path.path = combineReferencePath(prepare_segment, shifted_path.path);\n+  candidate_path.shifted_path = shifted_path;\n+\n   return std::optional<LaneChangePath>{candidate_path};\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2855": [
        {
            "sha": "f5f2987f63206fa8e599694700e99e72c74db3cc",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 5,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2312937a1bf3bbbf78f76fab2ecfd6dc60b9a6c9/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2312937a1bf3bbbf78f76fab2ecfd6dc60b9a6c9/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=2312937a1bf3bbbf78f76fab2ecfd6dc60b9a6c9",
            "patch": "@@ -1088,9 +1088,9 @@ void generateDrivableArea(\n     };\n \n   const auto has_overlap =\n-    [&](const lanelet::ConstLanelet & lane, const lanelet::Id & ignore_lane_id = lanelet::InvalId) {\n+    [&](const lanelet::ConstLanelet & lane, const lanelet::ConstLanelets & ignore_lanelets = {}) {\n       for (const auto & transformed_lane : transformed_lanes) {\n-        if (transformed_lane.id() == ignore_lane_id) {\n+        if (checkHasSameLane(ignore_lanelets, transformed_lane)) {\n           continue;\n         }\n         if (boost::geometry::intersects(\n@@ -1114,16 +1114,25 @@ void generateDrivableArea(\n     checkHasSameLane(transformed_lanes, goal_lanelet)) {\n     const auto lanes_after_goal = route_handler->getLanesAfterGoal(vehicle_length);\n     const auto next_lanes_after_goal = route_handler->getNextLanelets(goal_lanelet);\n+    const auto goal_left_lanelet = route_handler->getLeftLanelet(goal_lanelet);\n+    const auto goal_right_lanelet = route_handler->getRightLanelet(goal_lanelet);\n+    lanelet::ConstLanelets goal_lanelets = {goal_lanelet};\n+    if (goal_left_lanelet) {\n+      goal_lanelets.push_back(*goal_left_lanelet);\n+    }\n+    if (goal_right_lanelet) {\n+      goal_lanelets.push_back(*goal_right_lanelet);\n+    }\n+\n     for (const auto & lane : lanes_after_goal) {\n       // If lane is already in the transformed lanes, ignore it\n       if (checkHasSameLane(transformed_lanes, lane)) {\n         continue;\n       }\n       // Check if overlapped\n       const bool is_overlapped =\n-        (checkHasSameLane(next_lanes_after_goal, lane)\n-           ? has_overlap(lane, route_handler->getGoalLaneId())\n-           : has_overlap(lane));\n+        (checkHasSameLane(next_lanes_after_goal, lane) ? has_overlap(lane, goal_lanelets)\n+                                                       : has_overlap(lane));\n       if (is_overlapped) {\n         continue;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/2857": [
        {
            "sha": "913139774136ff3b847a2449c85acd3fe2f50a8c",
            "filename": "planning/behavior_path_planner/src/scene_module/utils/geometric_parallel_parking.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8a43f5a55bc46f35cc20e77d1bd994632e65df14/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8a43f5a55bc46f35cc20e77d1bd994632e65df14/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Futils%2Fgeometric_parallel_parking.cpp?ref=8a43f5a55bc46f35cc20e77d1bd994632e65df14",
            "patch": "@@ -138,8 +138,8 @@ std::vector<PathWithLaneId> GeometricParallelParking::generatePullOverPaths(\n   // check the continuity of straight path and arc path\n   const Pose & road_path_last_pose = straight_path.points.back().point.pose;\n   const Pose & arc_path_first_pose = arc_paths.front().points.front().point.pose;\n-  const double yaw_diff = tier4_autoware_utils::normalizeRadian(\n-    tf2::getYaw(road_path_last_pose.orientation), tf2::getYaw(arc_path_first_pose.orientation));\n+  const double yaw_diff = std::abs(tier4_autoware_utils::normalizeRadian(\n+    tf2::getYaw(road_path_last_pose.orientation) - tf2::getYaw(arc_path_first_pose.orientation)));\n   const double distance = calcDistance2d(road_path_last_pose, arc_path_first_pose);\n   if (yaw_diff > tier4_autoware_utils::deg2rad(5.0) || distance > 0.1) {\n     return std::vector<PathWithLaneId>{};\n@@ -277,8 +277,8 @@ bool GeometricParallelParking::planPullOut(\n     // check the continuity of straight path and arc path\n     const Pose & road_path_first_pose = road_center_line_path.points.front().point.pose;\n     const Pose & arc_path_last_pose = arc_paths.back().points.back().point.pose;\n-    const double yaw_diff = tier4_autoware_utils::normalizeRadian(\n-      tf2::getYaw(road_path_first_pose.orientation), tf2::getYaw(arc_path_last_pose.orientation));\n+    const double yaw_diff = std::abs(tier4_autoware_utils::normalizeRadian(\n+      tf2::getYaw(road_path_first_pose.orientation) - tf2::getYaw(arc_path_last_pose.orientation)));\n     const double distance = calcDistance2d(road_path_first_pose, arc_path_last_pose);\n     if (yaw_diff > tier4_autoware_utils::deg2rad(5.0) || distance > 0.1) {\n       continue;"
        }
    ],
    "autowarefoundation/autoware.universe/2861": [
        {
            "sha": "e3222f5eed2adb6a995a8a25df00ef64e0f7feae",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 6,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5b8ec30117332914932fa768e1bd17eab2262411/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5b8ec30117332914932fa768e1bd17eab2262411/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=5b8ec30117332914932fa768e1bd17eab2262411",
            "patch": "@@ -2573,12 +2573,8 @@ void AvoidanceModule::generateExtendedDrivableArea(PathWithLaneId & path) const\n \n     // 2. when there are multiple turning lanes whose previous lanelet is the same in\n     // intersection\n-    const lanelet::ConstLanelets next_lanes_from_intersection = std::invoke(\n+    const lanelet::ConstLanelets next_lanes = std::invoke(\n       [&route_handler](const lanelet::ConstLanelet & lane) {\n-        if (!lane.hasAttribute(\"turn_direction\")) {\n-          return lanelet::ConstLanelets{};\n-        }\n-\n         // get previous lane, and return false if previous lane does not exist\n         lanelet::ConstLanelets prev_lanes;\n         if (!route_handler->getPreviousLaneletsWithinRoute(lane, &prev_lanes)) {\n@@ -2598,7 +2594,7 @@ void AvoidanceModule::generateExtendedDrivableArea(PathWithLaneId & path) const\n \n     // 2.1 look for neighbour lane, where end line of the lane is connected to end line of the\n     // original lane\n-    for (const auto & next_lane : next_lanes_from_intersection) {\n+    for (const auto & next_lane : next_lanes) {\n       if (current_lane.id() == next_lane.id()) {\n         continue;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/2862": [
        {
            "sha": "0bae25567d9c3a45f826f5a89f33b74e0bcf41cd",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 112,
            "deletions": 54,
            "changes": 166,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/dbdfeef0185483713c63fad9ae2a347a6a0c5a51/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/dbdfeef0185483713c63fad9ae2a347a6a0c5a51/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=dbdfeef0185483713c63fad9ae2a347a6a0c5a51",
            "patch": "@@ -70,6 +70,21 @@ AvoidLine getNonStraightShiftLine(const AvoidLineArray & shift_lines)\n   return {};\n }\n \n+bool isEndPointsConnected(\n+  const lanelet::ConstLanelet & left_lane, const lanelet::ConstLanelet & right_lane)\n+{\n+  const auto & left_back_point_2d = right_lane.leftBound2d().back().basicPoint();\n+  const auto & right_back_point_2d = left_lane.rightBound2d().back().basicPoint();\n+\n+  constexpr double epsilon = 1e-5;\n+  return (right_back_point_2d - left_back_point_2d).norm() < epsilon;\n+}\n+\n+template <typename T>\n+void pushUniqueVector(T & base_vector, const T & additional_vector)\n+{\n+  base_vector.insert(base_vector.end(), additional_vector.begin(), additional_vector.end());\n+}\n }  // namespace\n \n AvoidanceModule::AvoidanceModule(\n@@ -2546,34 +2561,33 @@ void AvoidanceModule::generateExtendedDrivableArea(PathWithLaneId & path) const\n       continue;\n     }\n \n-    // get left side lane\n-    const lanelet::ConstLanelets all_left_lanelets =\n-      route_handler->getAllLeftSharedLinestringLanelets(current_lane, enable_opposite, true);\n-    if (!all_left_lanelets.empty()) {\n-      current_drivable_lanes.left_lane = all_left_lanelets.back();  // leftmost lanelet\n-\n-      for (int i = all_left_lanelets.size() - 2; i >= 0; --i) {\n-        current_drivable_lanes.middle_lanes.push_back(all_left_lanelets.at(i));\n+    // 1. get left/right side lanes\n+    const auto update_left_lanelets = [&](const lanelet::ConstLanelet & target_lane) {\n+      const auto all_left_lanelets =\n+        route_handler->getAllLeftSharedLinestringLanelets(target_lane, enable_opposite, true);\n+      if (!all_left_lanelets.empty()) {\n+        current_drivable_lanes.left_lane = all_left_lanelets.back();  // leftmost lanelet\n+        pushUniqueVector(\n+          current_drivable_lanes.middle_lanes,\n+          lanelet::ConstLanelets(all_left_lanelets.begin(), all_left_lanelets.end() - 1));\n       }\n-    }\n-\n-    // get right side lane\n-    const lanelet::ConstLanelets all_right_lanelets =\n-      route_handler->getAllRightSharedLinestringLanelets(current_lane, enable_opposite, true);\n-    if (!all_right_lanelets.empty()) {\n-      current_drivable_lanes.right_lane = all_right_lanelets.back();  // rightmost lanelet\n-      if (current_drivable_lanes.left_lane.id() != current_lane.id()) {\n-        current_drivable_lanes.middle_lanes.push_back(current_lane);\n+    };\n+    const auto update_right_lanelets = [&](const lanelet::ConstLanelet & target_lane) {\n+      const auto all_right_lanelets =\n+        route_handler->getAllRightSharedLinestringLanelets(target_lane, enable_opposite, true);\n+      if (!all_right_lanelets.empty()) {\n+        current_drivable_lanes.right_lane = all_right_lanelets.back();  // rightmost lanelet\n+        pushUniqueVector(\n+          current_drivable_lanes.middle_lanes,\n+          lanelet::ConstLanelets(all_right_lanelets.begin(), all_right_lanelets.end() - 1));\n       }\n+    };\n \n-      for (size_t i = 0; i < all_right_lanelets.size() - 1; ++i) {\n-        current_drivable_lanes.middle_lanes.push_back(all_right_lanelets.at(i));\n-      }\n-    }\n+    update_left_lanelets(current_lane);\n+    update_right_lanelets(current_lane);\n \n-    // 2. when there are multiple turning lanes whose previous lanelet is the same in\n-    // intersection\n-    const lanelet::ConstLanelets next_lanes = std::invoke(\n+    // 2.1 when there are multiple lanes whose previous lanelet is the same\n+    const auto get_next_lanes_from_same_previous_lane =\n       [&route_handler](const lanelet::ConstLanelet & lane) {\n         // get previous lane, and return false if previous lane does not exist\n         lanelet::ConstLanelets prev_lanes;\n@@ -2584,42 +2598,86 @@ void AvoidanceModule::generateExtendedDrivableArea(PathWithLaneId & path) const\n         lanelet::ConstLanelets next_lanes;\n         for (const auto & prev_lane : prev_lanes) {\n           const auto next_lanes_from_prev = route_handler->getNextLanelets(prev_lane);\n-          next_lanes.reserve(next_lanes.size() + next_lanes_from_prev.size());\n-          next_lanes.insert(\n-            next_lanes.end(), next_lanes_from_prev.begin(), next_lanes_from_prev.end());\n+          pushUniqueVector(next_lanes, next_lanes_from_prev);\n         }\n         return next_lanes;\n-      },\n-      current_lane);\n+      };\n \n-    // 2.1 look for neighbour lane, where end line of the lane is connected to end line of the\n-    // original lane\n-    for (const auto & next_lane : next_lanes) {\n-      if (current_lane.id() == next_lane.id()) {\n-        continue;\n-      }\n-      constexpr double epsilon = 1e-5;\n-      const auto & next_left_back_point_2d = next_lane.leftBound2d().back().basicPoint();\n-      const auto & next_right_back_point_2d = next_lane.rightBound2d().back().basicPoint();\n-      const auto & orig_left_back_point_2d = current_lane.leftBound2d().back().basicPoint();\n-      const auto & orig_right_back_point_2d = current_lane.rightBound2d().back().basicPoint();\n-\n-      if ((next_right_back_point_2d - orig_left_back_point_2d).norm() < epsilon) {\n-        current_drivable_lanes.left_lane = next_lane;\n-        if (\n-          current_drivable_lanes.right_lane.id() != current_lane.id() &&\n-          !has_same_lane(current_drivable_lanes.middle_lanes, current_lane)) {\n-          current_drivable_lanes.middle_lanes.push_back(current_lane);\n+    const auto next_lanes_for_right =\n+      get_next_lanes_from_same_previous_lane(current_drivable_lanes.right_lane);\n+    const auto next_lanes_for_left =\n+      get_next_lanes_from_same_previous_lane(current_drivable_lanes.left_lane);\n+\n+    // 2.2 look for neighbour lane recursively, where end line of the lane is connected to end line\n+    // of the original lane\n+    const auto update_drivable_lanes =\n+      [&](const lanelet::ConstLanelets & next_lanes, const bool is_left) {\n+        for (const auto & next_lane : next_lanes) {\n+          const auto & edge_lane =\n+            is_left ? current_drivable_lanes.left_lane : current_drivable_lanes.right_lane;\n+          if (next_lane.id() == edge_lane.id()) {\n+            continue;\n+          }\n+\n+          const auto & left_lane = is_left ? next_lane : edge_lane;\n+          const auto & right_lane = is_left ? edge_lane : next_lane;\n+          if (!isEndPointsConnected(left_lane, right_lane)) {\n+            continue;\n+          }\n+\n+          if (is_left) {\n+            current_drivable_lanes.left_lane = next_lane;\n+          } else {\n+            current_drivable_lanes.right_lane = next_lane;\n+          }\n+\n+          if (!has_same_lane(current_drivable_lanes.middle_lanes, edge_lane)) {\n+            if (is_left) {\n+              if (current_drivable_lanes.right_lane.id() != edge_lane.id()) {\n+                current_drivable_lanes.middle_lanes.push_back(edge_lane);\n+              }\n+            } else {\n+              if (current_drivable_lanes.left_lane.id() != edge_lane.id()) {\n+                current_drivable_lanes.middle_lanes.push_back(edge_lane);\n+              }\n+            }\n+          }\n+\n+          return true;\n         }\n-      } else if (\n-        (next_left_back_point_2d - orig_right_back_point_2d).norm() < epsilon &&\n-        !has_same_lane(current_drivable_lanes.middle_lanes, current_lane)) {\n-        current_drivable_lanes.right_lane = next_lane;\n-        if (current_drivable_lanes.left_lane.id() != current_lane.id()) {\n-          current_drivable_lanes.middle_lanes.push_back(current_lane);\n+        return false;\n+      };\n+\n+    const auto expand_drivable_area_recursively =\n+      [&](const lanelet::ConstLanelets & next_lanes, const bool is_left) {\n+        // NOTE: set max search num to avoid infinity loop for drivable area expansion\n+        constexpr size_t max_recursive_search_num = 3;\n+        for (size_t i = 0; i < max_recursive_search_num; ++i) {\n+          const bool is_update_kept = update_drivable_lanes(next_lanes, is_left);\n+          if (!is_update_kept) {\n+            break;\n+          }\n+          if (i == max_recursive_search_num - 1) {\n+            RCLCPP_ERROR(\n+              rclcpp::get_logger(\"behavior_path_planner\").get_child(\"avoidance\"),\n+              \"Drivable area expansion reaches max iteration.\");\n+          }\n         }\n-      }\n+      };\n+    expand_drivable_area_recursively(next_lanes_for_right, false);\n+    expand_drivable_area_recursively(next_lanes_for_left, true);\n+\n+    // 3. update again for new left/right lanes\n+    update_left_lanelets(current_drivable_lanes.left_lane);\n+    update_right_lanelets(current_drivable_lanes.right_lane);\n+\n+    // 4. compensate that current_lane is in either of left_lane, right_lane or middle_lanes.\n+    if (\n+      current_drivable_lanes.left_lane.id() != current_lane.id() &&\n+      current_drivable_lanes.right_lane.id() != current_lane.id()) {\n+      current_drivable_lanes.middle_lanes.push_back(current_lane);\n     }\n+\n     drivable_lanes.push_back(current_drivable_lanes);\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2872": [
        {
            "sha": "174453739e679a4ebe8a825fdd60557c3de17d1f",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3c30a622e9252906c0971cff65b0f35446f91adf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3c30a622e9252906c0971cff65b0f35446f91adf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=3c30a622e9252906c0971cff65b0f35446f91adf",
            "patch": "@@ -2443,7 +2443,7 @@ double AvoidanceModule::getRSSLongitudinalDistance(\n    * =======================================\n    */\n   if (!is_front_object && !opposite_lane_vehicle) {\n-    return v_obj * idling_time + 0.5 * accel_for_rss * std::pow(v_obj, 2.0) +\n+    return v_obj * idling_time + 0.5 * accel_for_rss * std::pow(idling_time, 2.0) +\n            std::pow(v_obj + accel_for_rss * idling_time, 2.0) / (2.0 * accel_for_rss) -\n            std::pow(v_ego, 2.0) / (2.0 * accel_for_rss);\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/2873": [
        {
            "sha": "98d7d4d837c8519950c7762190d9e742d90b8524",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/util.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/81627c2363a037ffd5044d4e39c4ec363294b980/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/81627c2363a037ffd5044d4e39c4ec363294b980/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Futil.cpp?ref=81627c2363a037ffd5044d4e39c4ec363294b980",
            "patch": "@@ -541,7 +541,9 @@ bool hasEnoughDistance(\n     return true;\n   }\n \n-  if (lane_change_total_distance > util::getDistanceToEndOfLane(current_pose, target_lanes)) {\n+  if (\n+    lane_change_total_distance + lane_change_required_distance >\n+    util::getDistanceToEndOfLane(current_pose, target_lanes)) {\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2875": [
        {
            "sha": "c3a5f1806f92e68d73ef816a4a7c09018fd2df57",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/be4429e0ee117c3abf6b3867b0e5725c51fba99f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/be4429e0ee117c3abf6b3867b0e5725c51fba99f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=be4429e0ee117c3abf6b3867b0e5725c51fba99f",
            "patch": "@@ -735,6 +735,8 @@ void AvoidanceModule::updateEgoBehavior(const AvoidancePlanningData & data, Shif\n       insertYieldVelocity(path);\n       insertWaitPoint(parameters_->use_constraints_for_decel, path);\n       removeAllRegisteredShiftPoints(path_shifter_);\n+      clearWaitingApproval();\n+      removeRTCStatus();\n       break;\n     }\n     case AvoidanceState::AVOID_PATH_NOT_READY: {"
        }
    ],
    "autowarefoundation/autoware.universe/2882": [
        {
            "sha": "16b55123d4903c15d7ddb9058fb1b715e6fa8080",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3f4a97258192d55b73b5fd85b190762b190d6293/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3f4a97258192d55b73b5fd85b190762b190d6293/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=3f4a97258192d55b73b5fd85b190762b190d6293",
            "patch": "@@ -1379,7 +1379,7 @@ void AvoidanceModule::generateTotalShiftLine(\n   for (size_t i = 1; i < N; ++i) {\n     bool has_object = false;\n     for (const auto & al : avoid_lines) {\n-      if (al.start_idx < i && i < al.end_idx) {\n+      if (al.start_idx <= i && i <= al.end_idx) {\n         has_object = true;\n         break;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/2889": [
        {
            "sha": "8f7b0a9e0d3066062fc7e5c1d33abda93ed6cb2f",
            "filename": "planning/surround_obstacle_checker/src/node.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 6,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/eae4314385f1b186c655def21e779290b83660e4/planning%2Fsurround_obstacle_checker%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/eae4314385f1b186c655def21e779290b83660e4/planning%2Fsurround_obstacle_checker%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fsurround_obstacle_checker%2Fsrc%2Fnode.cpp?ref=eae4314385f1b186c655def21e779290b83660e4",
            "patch": "@@ -146,13 +146,13 @@ SurroundObstacleCheckerNode::SurroundObstacleCheckerNode(const rclcpp::NodeOptio\n   // Parameters\n   {\n     auto & p = node_param_;\n-    p.use_pointcloud = this->declare_parameter(\"use_pointcloud\", true);\n-    p.use_dynamic_object = this->declare_parameter(\"use_dynamic_object\", true);\n-    p.surround_check_distance = this->declare_parameter(\"surround_check_distance\", 2.0);\n+    p.use_pointcloud = this->declare_parameter<bool>(\"use_pointcloud\");\n+    p.use_dynamic_object = this->declare_parameter<bool>(\"use_dynamic_object\");\n+    p.surround_check_distance = this->declare_parameter<double>(\"surround_check_distance\");\n     p.surround_check_recover_distance =\n-      this->declare_parameter(\"surround_check_recover_distance\", 2.5);\n-    p.state_clear_time = this->declare_parameter(\"state_clear_time\", 2.0);\n-    p.publish_debug_footprints = this->declare_parameter(\"publish_debug_footprints\", true);\n+      this->declare_parameter<double>(\"surround_check_recover_distance\");\n+    p.state_clear_time = this->declare_parameter<double>(\"state_clear_time\");\n+    p.publish_debug_footprints = this->declare_parameter<bool>(\"publish_debug_footprints\");\n   }\n \n   vehicle_info_ = vehicle_info_util::VehicleInfoUtil(*this).getVehicleInfo();"
        }
    ],
    "autowarefoundation/autoware.universe/2890": [
        {
            "sha": "504d5fdf03f85e6909cdd8475a1ceb8e09aef2e2",
            "filename": "planning/behavior_path_planner/test/test_drivable_area_expansion.cpp",
            "status": "modified",
            "additions": 65,
            "deletions": 65,
            "changes": 130,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/73129dcdad3a9476eb37060a3362cda1303c21b2/planning%2Fbehavior_path_planner%2Ftest%2Ftest_drivable_area_expansion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/73129dcdad3a9476eb37060a3362cda1303c21b2/planning%2Fbehavior_path_planner%2Ftest%2Ftest_drivable_area_expansion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Ftest%2Ftest_drivable_area_expansion.cpp?ref=73129dcdad3a9476eb37060a3362cda1303c21b2",
            "patch": "@@ -22,6 +22,7 @@\n using drivable_area_expansion::linestring_t;\n using drivable_area_expansion::point_t;\n using drivable_area_expansion::segment_t;\n+constexpr auto eps = 1e-9;\n \n TEST(DrivableAreaExpansionProjection, PointToSegment)\n {\n@@ -31,57 +32,57 @@ TEST(DrivableAreaExpansionProjection, PointToSegment)\n     point_t query(1.0, 1.0);\n     segment_t segment(point_t(0.0, 0.0), point_t(10.0, 0.0));\n     const auto projection = point_to_segment_projection(query, segment.first, segment.second);\n-    EXPECT_EQ(projection.distance, 1.0);\n-    EXPECT_EQ(projection.point.x(), 1.0);\n-    EXPECT_EQ(projection.point.y(), 0.0);\n+    EXPECT_NEAR(projection.distance, 1.0, eps);\n+    EXPECT_NEAR(projection.point.x(), 1.0, eps);\n+    EXPECT_NEAR(projection.point.y(), 0.0, eps);\n   }\n   {\n     point_t query(-1.0, 1.0);\n     segment_t segment(point_t(0.0, 0.0), point_t(10.0, 0.0));\n     const auto projection = point_to_segment_projection(query, segment.first, segment.second);\n-    EXPECT_EQ(projection.distance, std::sqrt(2));\n-    EXPECT_EQ(projection.point.x(), 0.0);\n-    EXPECT_EQ(projection.point.y(), 0.0);\n+    EXPECT_NEAR(projection.distance, std::sqrt(2), eps);\n+    EXPECT_NEAR(projection.point.x(), 0.0, eps);\n+    EXPECT_NEAR(projection.point.y(), 0.0, eps);\n   }\n   {\n     point_t query(11.0, 1.0);\n     segment_t segment(point_t(0.0, 0.0), point_t(10.0, 0.0));\n     const auto projection = point_to_segment_projection(query, segment.first, segment.second);\n-    EXPECT_EQ(projection.distance, std::sqrt(2));\n-    EXPECT_EQ(projection.point.x(), 10.0);\n-    EXPECT_EQ(projection.point.y(), 0.0);\n+    EXPECT_NEAR(projection.distance, std::sqrt(2), eps);\n+    EXPECT_NEAR(projection.point.x(), 10.0, eps);\n+    EXPECT_NEAR(projection.point.y(), 0.0, eps);\n   }\n   {\n     point_t query(5.0, -5.0);\n     segment_t segment(point_t(0.0, 0.0), point_t(10.0, 0.0));\n     const auto projection = point_to_segment_projection(query, segment.first, segment.second);\n-    EXPECT_EQ(projection.distance, -5.0);\n-    EXPECT_EQ(projection.point.x(), 5.0);\n-    EXPECT_EQ(projection.point.y(), 0.0);\n+    EXPECT_NEAR(projection.distance, -5.0, eps);\n+    EXPECT_NEAR(projection.point.x(), 5.0, eps);\n+    EXPECT_NEAR(projection.point.y(), 0.0, eps);\n   }\n   {\n     point_t query(5.0, -5.0);\n     segment_t segment(point_t(0.0, 0.0), point_t(0.0, -10.0));\n     const auto projection = point_to_segment_projection(query, segment.first, segment.second);\n-    EXPECT_EQ(projection.distance, 5.0);\n-    EXPECT_EQ(projection.point.x(), 0.0);\n-    EXPECT_EQ(projection.point.y(), -5.0);\n+    EXPECT_NEAR(projection.distance, 5.0, eps);\n+    EXPECT_NEAR(projection.point.x(), 0.0, eps);\n+    EXPECT_NEAR(projection.point.y(), -5.0, eps);\n   }\n   {\n     point_t query(5.0, 5.0);\n     segment_t segment(point_t(2.5, 7.5), point_t(7.5, 2.5));\n     const auto projection = point_to_segment_projection(query, segment.first, segment.second);\n-    EXPECT_EQ(projection.distance, 0.0);\n-    EXPECT_EQ(projection.point.x(), 5.0);\n-    EXPECT_EQ(projection.point.y(), 5.0);\n+    EXPECT_NEAR(projection.distance, 0.0, eps);\n+    EXPECT_NEAR(projection.point.x(), 5.0, eps);\n+    EXPECT_NEAR(projection.point.y(), 5.0, eps);\n   }\n   {\n     point_t query(0.0, 0.0);\n     segment_t segment(point_t(2.5, 7.5), point_t(7.5, 2.5));\n     const auto projection = point_to_segment_projection(query, segment.first, segment.second);\n-    EXPECT_EQ(projection.distance, -std::sqrt(50));\n-    EXPECT_EQ(projection.point.x(), 5.0);\n-    EXPECT_EQ(projection.point.y(), 5.0);\n+    EXPECT_NEAR(projection.distance, -std::sqrt(50), eps);\n+    EXPECT_NEAR(projection.point.x(), 5.0, eps);\n+    EXPECT_NEAR(projection.point.y(), 5.0, eps);\n   }\n }\n \n@@ -95,26 +96,26 @@ TEST(DrivableAreaExpansionProjection, PointToLinestring)\n   {\n     point_t query(0.0, 0.0);\n     const auto projection = point_to_linestring_projection(query, ls);\n-    EXPECT_EQ(projection.arc_length, 0.0);\n-    EXPECT_EQ(projection.distance, 0.0);\n-    EXPECT_EQ(projection.projected_point.x(), 0.0);\n-    EXPECT_EQ(projection.projected_point.y(), 0.0);\n+    EXPECT_NEAR(projection.arc_length, 0.0, eps);\n+    EXPECT_NEAR(projection.distance, 0.0, eps);\n+    EXPECT_NEAR(projection.projected_point.x(), 0.0, eps);\n+    EXPECT_NEAR(projection.projected_point.y(), 0.0, eps);\n   }\n   {\n     point_t query(2.0, 1.0);\n     const auto projection = point_to_linestring_projection(query, ls);\n-    EXPECT_EQ(projection.arc_length, 2.0);\n-    EXPECT_EQ(projection.distance, 1.0);\n-    EXPECT_EQ(projection.projected_point.x(), 2.0);\n-    EXPECT_EQ(projection.projected_point.y(), 0.0);\n+    EXPECT_NEAR(projection.arc_length, 2.0, eps);\n+    EXPECT_NEAR(projection.distance, 1.0, eps);\n+    EXPECT_NEAR(projection.projected_point.x(), 2.0, eps);\n+    EXPECT_NEAR(projection.projected_point.y(), 0.0, eps);\n   }\n   {\n     point_t query(0.0, 5.0);\n     const auto projection = point_to_linestring_projection(query, ls);\n-    EXPECT_EQ(projection.arc_length, 30.0 + std::sqrt(2.5 * 2.5 * 2));\n-    EXPECT_EQ(projection.distance, -std::sqrt(2.5 * 2.5 * 2));\n-    EXPECT_EQ(projection.projected_point.x(), 2.5);\n-    EXPECT_EQ(projection.projected_point.y(), 7.5);\n+    EXPECT_NEAR(projection.arc_length, 30.0 + std::sqrt(2.5 * 2.5 * 2), eps);\n+    EXPECT_NEAR(projection.distance, -std::sqrt(2.5 * 2.5 * 2), eps);\n+    EXPECT_NEAR(projection.projected_point.x(), 2.5, eps);\n+    EXPECT_NEAR(projection.projected_point.y(), 7.5, eps);\n   }\n }\n \n@@ -127,24 +128,24 @@ TEST(DrivableAreaExpansionProjection, LinestringToPoint)\n     point_t(5.0, 5.0)};\n   for (auto arc_length = 0.0; arc_length <= 10.0; arc_length += 1.0) {\n     const auto projection = linestring_to_point_projection(ls, arc_length, 0.0);\n-    EXPECT_EQ(projection.first.x(), arc_length);\n-    EXPECT_EQ(projection.first.y(), 0.0);\n-    EXPECT_EQ(projection.second.x(), arc_length);\n-    EXPECT_EQ(projection.second.y(), 0.0);\n+    EXPECT_NEAR(projection.first.x(), arc_length, eps);\n+    EXPECT_NEAR(projection.first.y(), 0.0, eps);\n+    EXPECT_NEAR(projection.second.x(), arc_length, eps);\n+    EXPECT_NEAR(projection.second.y(), 0.0, eps);\n   }\n   for (auto arc_length = 11.0; arc_length <= 20.0; arc_length += 1.0) {\n     const auto projection = linestring_to_point_projection(ls, arc_length, 0.0);\n-    EXPECT_EQ(projection.first.x(), 10.0);\n-    EXPECT_EQ(projection.first.y(), arc_length - 10.0);\n-    EXPECT_EQ(projection.second.x(), 10.0);\n-    EXPECT_EQ(projection.second.y(), arc_length - 10.0);\n+    EXPECT_NEAR(projection.first.x(), 10.0, eps);\n+    EXPECT_NEAR(projection.first.y(), arc_length - 10.0, eps);\n+    EXPECT_NEAR(projection.second.x(), 10.0, eps);\n+    EXPECT_NEAR(projection.second.y(), arc_length - 10.0, eps);\n   }\n   for (auto arc_length = 21.0; arc_length <= 30.0; arc_length += 1.0) {\n     const auto projection = linestring_to_point_projection(ls, arc_length, 0.0);\n-    EXPECT_EQ(projection.first.x(), 10.0 + (20 - arc_length));\n-    EXPECT_EQ(projection.first.y(), 10.0);\n-    EXPECT_EQ(projection.second.x(), 10.0 + (20 - arc_length));\n-    EXPECT_EQ(projection.second.y(), 10.0);\n+    EXPECT_NEAR(projection.first.x(), 10.0 + (20 - arc_length), eps);\n+    EXPECT_NEAR(projection.first.y(), 10.0, eps);\n+    EXPECT_NEAR(projection.second.x(), 10.0 + (20 - arc_length), eps);\n+    EXPECT_NEAR(projection.second.y(), 10.0, eps);\n   }\n }\n \n@@ -172,19 +173,19 @@ TEST(DrivableAreaExpansionProjection, SubLinestring)\n     // arc lengths inside the original: sublinestring with some interpolated points\n     const auto sub = sub_linestring(ls, 1.5, 2.5);\n     ASSERT_EQ(sub.size(), 3lu);\n-    EXPECT_EQ(sub[0].x(), 1.5);\n-    EXPECT_EQ(sub[1].x(), 2.0);\n-    EXPECT_EQ(sub[2].x(), 2.5);\n-    for (const auto & p : sub) EXPECT_EQ(p.y(), 0.0);\n+    EXPECT_NEAR(sub[0].x(), 1.5, eps);\n+    EXPECT_NEAR(sub[1].x(), 2.0, eps);\n+    EXPECT_NEAR(sub[2].x(), 2.5, eps);\n+    for (const auto & p : sub) EXPECT_NEAR(p.y(), 0.0, eps);\n   }\n   {\n     // arc length outside of the original range: first & last point are replaced by interpolations\n     const auto sub = sub_linestring(ls, -0.5, 8.5);\n     ASSERT_EQ(sub.size(), ls.size());\n-    EXPECT_EQ(sub.front().x(), -0.5);\n+    EXPECT_NEAR(sub.front().x(), -0.5, eps);\n     for (auto i = 1lu; i + 1 < ls.size(); ++i) EXPECT_TRUE(boost::geometry::equals(ls[i], sub[i]));\n-    EXPECT_EQ(sub.back().x(), 8.5);\n-    for (const auto & p : sub) EXPECT_EQ(p.y(), 0.0);\n+    EXPECT_NEAR(sub.back().x(), 8.5, eps);\n+    for (const auto & p : sub) EXPECT_NEAR(p.y(), 0.0, eps);\n   }\n }\n \n@@ -196,7 +197,6 @@ TEST(DrivableAreaExpansionProjection, InverseProjection)\n   linestring_t ls = {\n     point_t(0.0, 0.0), point_t(10.0, 0.0), point_t(10.0, 10.0), point_t(0.0, 10.0),\n     point_t(5.0, 5.0)};\n-  constexpr auto eps = 1e-9;\n \n   for (auto x = 0.0; x < 10.0; x += 0.1) {\n     for (auto y = 0.0; x < 10.0; x += 0.1) {\n@@ -270,21 +270,21 @@ TEST(DrivableAreaExpansionProjection, expandDrivableArea)\n   // unchanged path points\n   ASSERT_EQ(path.points.size(), 3ul);\n   for (auto i = 0.0; i < path.points.size(); ++i) {\n-    EXPECT_EQ(path.points[i].point.pose.position.x, i);\n-    EXPECT_EQ(path.points[i].point.pose.position.y, 0.0);\n+    EXPECT_NEAR(path.points[i].point.pose.position.x, i, eps);\n+    EXPECT_NEAR(path.points[i].point.pose.position.y, 0.0, eps);\n   }\n   // expanded left bound\n   ASSERT_EQ(path.left_bound.size(), 2ul);\n-  EXPECT_EQ(path.left_bound[0].x, 0.0);\n-  EXPECT_EQ(path.left_bound[0].y, 2.0);\n-  EXPECT_EQ(path.left_bound[1].x, 2.0);\n-  EXPECT_EQ(path.left_bound[1].y, 2.0);\n+  EXPECT_NEAR(path.left_bound[0].x, 0.0, eps);\n+  EXPECT_NEAR(path.left_bound[0].y, 2.0, eps);\n+  EXPECT_NEAR(path.left_bound[1].x, 2.0, eps);\n+  EXPECT_NEAR(path.left_bound[1].y, 2.0, eps);\n   // expanded right bound\n   ASSERT_EQ(path.right_bound.size(), 3ul);\n-  EXPECT_EQ(path.right_bound[0].x, 0.0);\n-  EXPECT_EQ(path.right_bound[0].y, -2.0);\n-  EXPECT_EQ(path.right_bound[1].x, 2.0);\n-  EXPECT_EQ(path.right_bound[1].y, -2.0);\n-  EXPECT_EQ(path.right_bound[2].x, 2.0);\n-  EXPECT_EQ(path.right_bound[2].y, -1.0);\n+  EXPECT_NEAR(path.right_bound[0].x, 0.0, eps);\n+  EXPECT_NEAR(path.right_bound[0].y, -2.0, eps);\n+  EXPECT_NEAR(path.right_bound[1].x, 2.0, eps);\n+  EXPECT_NEAR(path.right_bound[1].y, -2.0, eps);\n+  EXPECT_NEAR(path.right_bound[2].x, 2.0, eps);\n+  EXPECT_NEAR(path.right_bound[2].y, -1.0, eps);\n }"
        }
    ],
    "autowarefoundation/autoware.universe/2891": [
        {
            "sha": "609850c89a7ea26d57ccf04592c90feb097d7c9f",
            "filename": "control/pure_pursuit/src/pure_pursuit/pure_pursuit_lateral_controller.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/71001b333014cde518d1f0e68f1a7204c0acc561/control%2Fpure_pursuit%2Fsrc%2Fpure_pursuit%2Fpure_pursuit_lateral_controller.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/71001b333014cde518d1f0e68f1a7204c0acc561/control%2Fpure_pursuit%2Fsrc%2Fpure_pursuit%2Fpure_pursuit_lateral_controller.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fpure_pursuit%2Fsrc%2Fpure_pursuit%2Fpure_pursuit_lateral_controller.cpp?ref=71001b333014cde518d1f0e68f1a7204c0acc561",
            "patch": "@@ -185,10 +185,20 @@ double PurePursuitLateralController::calcCurvature(const size_t closest_idx)\n \n   if (static_cast<size_t>(closest_idx) >= idx_dist) {\n     prev_idx = closest_idx - idx_dist;\n+  } else {\n+    // return zero curvature when backward distance is not long enough in the trajectory\n+    return 0.0;\n   }\n+\n   if (trajectory_resampled_->points.size() - 1 >= closest_idx + idx_dist) {\n     next_idx = closest_idx + idx_dist;\n+  } else {\n+    // return zero curvature when forward distance is not long enough in the trajectory\n+    return 0.0;\n   }\n+  // TODO(k.sugahara): shift the center point of the curvature calculation to allow sufficient\n+  // distance, because if sufficient distance cannot be obtained in front or behind, the curvature\n+  // will be zero in the current implementation.\n \n   // Calculate curvature assuming the trajectory points interval is constant\n   double current_curvature = 0.0;"
        }
    ],
    "autowarefoundation/autoware.universe/2892": [
        {
            "sha": "e4c9c8e027f7b2c9926877cd92fa65fa5f1a7fe6",
            "filename": "common/path_distance_calculator/src/path_distance_calculator.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 6,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/85a3ab85d26b14a01e852d75ac065690e8474a00/common%2Fpath_distance_calculator%2Fsrc%2Fpath_distance_calculator.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/85a3ab85d26b14a01e852d75ac065690e8474a00/common%2Fpath_distance_calculator%2Fsrc%2Fpath_distance_calculator.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fpath_distance_calculator%2Fsrc%2Fpath_distance_calculator.cpp?ref=85a3ab85d26b14a01e852d75ac065690e8474a00",
            "patch": "@@ -44,12 +44,9 @@ PathDistanceCalculator::PathDistanceCalculator(const rclcpp::NodeOptions & optio\n       RCLCPP_WARN_THROTTLE(get_logger(), *get_clock(), 5000, \"no path\");\n       return;\n     }\n-    if (path->points.empty()) {\n-      RCLCPP_WARN_THROTTLE(get_logger(), *get_clock(), 5000, \"path empty\");\n-    }\n-\n-    if (path->points.size() == 1) {\n-      RCLCPP_WARN_THROTTLE(get_logger(), *get_clock(), 5000, \"too short path\");\n+    if (path->points.size() <= 1) {\n+      RCLCPP_WARN_THROTTLE(get_logger(), *get_clock(), 5000, \"too short or empty path\");\n+      return;\n     }\n \n     const double distance ="
        }
    ],
    "autowarefoundation/autoware.universe/2893": [
        {
            "sha": "f1af25167c240fd567c40093618200d69ba3deca",
            "filename": "control/mpc_lateral_controller/src/mpc_utils.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9321b4aa955fb2ff00a56130c37c93ad4c5eeff8/control%2Fmpc_lateral_controller%2Fsrc%2Fmpc_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9321b4aa955fb2ff00a56130c37c93ad4c5eeff8/control%2Fmpc_lateral_controller%2Fsrc%2Fmpc_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fmpc_lateral_controller%2Fsrc%2Fmpc_utils.cpp?ref=9321b4aa955fb2ff00a56130c37c93ad4c5eeff8",
            "patch": "@@ -249,6 +249,9 @@ bool convertToAutowareTrajectory(\n     p.longitudinal_velocity_mps =\n       static_cast<decltype(p.longitudinal_velocity_mps)>(input.vx.at(i));\n     output.points.push_back(p);\n+    if (output.points.size() == output.points.max_size()) {\n+      break;\n+    }\n   }\n   return true;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/2898": [
        {
            "sha": "138848bfef99a70a3c9058df9256b9b5686704bc",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/pull_over_module.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 9,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fb462bcecadaa0be1cfec084e286a038464008ff/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fb462bcecadaa0be1cfec084e286a038464008ff/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp?ref=fb462bcecadaa0be1cfec084e286a038464008ff",
            "patch": "@@ -469,18 +469,18 @@ BehaviorModuleOutput PullOverModule::plan()\n       break;\n     }\n \n-    // Decelerate before the minimum shift distance from the goal search area.\n+    // decelerate before the search area start\n     if (status_.is_safe) {\n-      auto & first_path = status_.pull_over_path.partial_paths.front();\n       const auto search_start_pose = calcLongitudinalOffsetPose(\n-        first_path.points, refined_goal_pose_.position,\n+        status_.pull_over_path.getFullPath().points, refined_goal_pose_.position,\n         -parameters_.backward_goal_search_length - planner_data_->parameters.base_link2front);\n-      const Pose deceleration_pose =\n-        search_start_pose ? *search_start_pose : first_path.points.front().point.pose;\n-      constexpr double deceleration_buffer = 15.0;\n-      first_path = util::setDecelerationVelocity(\n-        first_path, parameters_.pull_over_velocity, deceleration_pose, -deceleration_buffer,\n-        parameters_.deceleration_interval);\n+      if (search_start_pose) {\n+        auto & first_path = status_.pull_over_path.partial_paths.front();\n+        constexpr double deceleration_buffer = 15.0;\n+        first_path = util::setDecelerationVelocity(\n+          first_path, parameters_.pull_over_velocity, *search_start_pose, -deceleration_buffer,\n+          parameters_.deceleration_interval);\n+      }\n     }\n \n     // generate drivable area for each partial path"
        }
    ],
    "autowarefoundation/autoware.universe/2900": [
        {
            "sha": "ebd5b98b736b2be4d21581d8ac9e8cd9c5c88ba9",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/dea774bfa91c5367959d38db4784026bf306a41c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/dea774bfa91c5367959d38db4784026bf306a41c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=dea774bfa91c5367959d38db4784026bf306a41c",
            "patch": "@@ -3216,7 +3216,7 @@ ShiftedPath AvoidanceModule::generateAvoidancePath(PathShifter & path_shifter) c\n   ShiftedPath shifted_path;\n   if (!path_shifter.generate(&shifted_path)) {\n     RCLCPP_ERROR(getLogger(), \"failed to generate shifted path.\");\n-    return toShiftedPath(avoidance_data_.reference_path);\n+    return prev_output_;\n   }\n \n   return shifted_path;"
        }
    ],
    "autowarefoundation/autoware.universe/2910": [
        {
            "sha": "0e3391e69eb11ee815eacc383e2d4970c7271b2f",
            "filename": "launch/tier4_planning_launch/config/scenario_planning/lane_driving/behavior_planning/rtc_auto_mode_manager/rtc_auto_mode_manager.param.yaml",
            "status": "removed",
            "additions": 0,
            "deletions": 31,
            "changes": 31,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e161141c3f12d84dd5484c27d9dd703ebc85e3fb/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Frtc_auto_mode_manager%2Frtc_auto_mode_manager.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e161141c3f12d84dd5484c27d9dd703ebc85e3fb/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Frtc_auto_mode_manager%2Frtc_auto_mode_manager.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_planning_launch%2Fconfig%2Fscenario_planning%2Flane_driving%2Fbehavior_planning%2Frtc_auto_mode_manager%2Frtc_auto_mode_manager.param.yaml?ref=e161141c3f12d84dd5484c27d9dd703ebc85e3fb",
            "patch": "@@ -1,31 +0,0 @@\n-/**:\n-  ros__parameters:\n-    module_list:\n-      - \"blind_spot\"\n-      - \"crosswalk\"\n-      - \"detection_area\"\n-      - \"intersection\"\n-      - \"no_stopping_area\"\n-      - \"traffic_light\"\n-      - \"ext_request_lane_change_left\"\n-      - \"ext_request_lane_change_right\"\n-      - \"lane_change_left\"\n-      - \"lane_change_right\"\n-      - \"avoidance_left\"\n-      - \"avoidance_right\"\n-      - \"pull_over\"\n-      - \"pull_out\"\n-\n-    default_enable_list:\n-      - \"blind_spot\"\n-      - \"crosswalk\"\n-      - \"detection_area\"\n-      - \"intersection\"\n-      - \"no_stopping_area\"\n-      - \"traffic_light\"\n-      - \"lane_change_left\"\n-      - \"lane_change_right\"\n-      - \"avoidance_left\"\n-      - \"avoidance_right\"\n-      - \"pull_over\"\n-      - \"pull_out\""
        }
    ],
    "autowarefoundation/autoware.universe/2916": [
        {
            "sha": "ed8619fe1390a68d897c257bc9ddb8af8ec3f945",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 7,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bfbce8c294981440aba55fc1b824280006d3267c/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bfbce8c294981440aba55fc1b824280006d3267c/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=bfbce8c294981440aba55fc1b824280006d3267c",
            "patch": "@@ -969,8 +969,12 @@ boost::optional<size_t> getOverlappedLaneletId(const std::vector<DrivableLanes>\n \n     for (const auto & lanelet : lanelets) {\n       for (const auto & target_lanelet : target_lanelets) {\n-        if (boost::geometry::intersects(\n-              lanelet.polygon2d().basicPolygon(), target_lanelet.polygon2d().basicPolygon())) {\n+        std::vector<Point2d> intersections{};\n+        boost::geometry::intersection(\n+          lanelet.polygon2d().basicPolygon(), target_lanelet.polygon2d().basicPolygon(),\n+          intersections);\n+        // if only one point intersects, it is assumed not to be overlapped\n+        if (intersections.size() > 1) {\n           return true;\n         }\n       }\n@@ -1032,7 +1036,7 @@ std::vector<DrivableLanes> cutOverlappedLanes(\n         std::find(removed_lane_ids.begin(), removed_lane_ids.end(), lane_id) !=\n         removed_lane_ids.end()) {\n         path.points.erase(path.points.begin() + i, path.points.end());\n-        break;\n+        return shorten_lanes;\n       }\n     }\n   }\n@@ -1175,10 +1179,11 @@ void generateDrivableArea(\n     calcLongitudinalOffsetGoalPoint(left_bound, goal_pose, goal_left_start_idx, vehicle_length);\n   const auto right_goal_point =\n     calcLongitudinalOffsetGoalPoint(right_bound, goal_pose, goal_right_start_idx, vehicle_length);\n-  const size_t left_goal_idx =\n-    findNearestSegmentIndexFromLateralDistance(left_bound, left_goal_point);\n-  const size_t right_goal_idx =\n-    findNearestSegmentIndexFromLateralDistance(right_bound, right_goal_point);\n+  const size_t left_goal_idx = std::max(\n+    goal_left_start_idx, findNearestSegmentIndexFromLateralDistance(left_bound, left_goal_point));\n+  const size_t right_goal_idx = std::max(\n+    goal_right_start_idx,\n+    findNearestSegmentIndexFromLateralDistance(right_bound, right_goal_point));\n \n   // Store Data\n   path.left_bound.clear();"
        }
    ],
    "autowarefoundation/autoware.universe/2926": [
        {
            "sha": "b912b5faf179b860b86300667746d89d7b8d7775",
            "filename": "launch/tier4_perception_launch/launch/object_recognition/detection/camera_lidar_fusion_based_detection.launch.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/62662ac894446772ade7565392c5a6113c595f57/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/62662ac894446772ade7565392c5a6113c595f57/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml?ref=62662ac894446772ade7565392c5a6113c595f57",
            "patch": "@@ -113,7 +113,7 @@\n           <arg name=\"input/image6\" value=\"$(var image_raw6)\"/>\n           <arg name=\"input/image7\" value=\"$(var image_raw7)\"/>\n           <arg name=\"output/clusters\" value=\"clusters\"/>\n-          <arg name=\"thrust_distance\" value=\"30.0\"/>\n+          <arg name=\"trust_distance\" value=\"30.0\"/>\n         </include>\n       </group>\n "
        }
    ],
    "autowarefoundation/autoware.universe/2934": [
        {
            "sha": "2ba0a4c1d46f30546568906479cfeafb31941b13",
            "filename": "planning/external_velocity_limit_selector/src/external_velocity_limit_selector_node.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 9,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5fdc648d401e2a12f0b3a28bce269d462bbd389d/planning%2Fexternal_velocity_limit_selector%2Fsrc%2Fexternal_velocity_limit_selector_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5fdc648d401e2a12f0b3a28bce269d462bbd389d/planning%2Fexternal_velocity_limit_selector%2Fsrc%2Fexternal_velocity_limit_selector_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fexternal_velocity_limit_selector%2Fsrc%2Fexternal_velocity_limit_selector_node.cpp?ref=5fdc648d401e2a12f0b3a28bce269d462bbd389d",
            "patch": "@@ -111,15 +111,15 @@ ExternalVelocityLimitSelectorNode::ExternalVelocityLimitSelectorNode(\n   // Params\n   {\n     auto & p = node_param_;\n-    p.max_velocity = this->declare_parameter<double>(\"max_velocity\", 20.0);\n-    p.normal_min_acc = this->declare_parameter<double>(\"normal.min_acc\", -1.0);\n-    p.normal_max_acc = this->declare_parameter<double>(\"normal.max_acc\", 1.0);\n-    p.normal_min_jerk = this->declare_parameter<double>(\"normal.min_jerk\", -0.1);\n-    p.normal_max_jerk = this->declare_parameter<double>(\"normal.max_jerk\", 0.1);\n-    p.limit_min_acc = this->declare_parameter<double>(\"limit.min_acc\", -2.5);\n-    p.limit_max_acc = this->declare_parameter<double>(\"limit.max_acc\", 2.5);\n-    p.limit_min_jerk = this->declare_parameter<double>(\"limit.min_jerk\", -1.5);\n-    p.limit_max_jerk = this->declare_parameter<double>(\"limit.max_jerk\", 1.5);\n+    p.max_velocity = this->declare_parameter<double>(\"max_velocity\");\n+    p.normal_min_acc = this->declare_parameter<double>(\"normal.min_acc\");\n+    p.normal_max_acc = this->declare_parameter<double>(\"normal.max_acc\");\n+    p.normal_min_jerk = this->declare_parameter<double>(\"normal.min_jerk\");\n+    p.normal_max_jerk = this->declare_parameter<double>(\"normal.max_jerk\");\n+    p.limit_min_acc = this->declare_parameter<double>(\"limit.min_acc\");\n+    p.limit_max_acc = this->declare_parameter<double>(\"limit.max_acc\");\n+    p.limit_min_jerk = this->declare_parameter<double>(\"limit.min_jerk\");\n+    p.limit_max_jerk = this->declare_parameter<double>(\"limit.max_jerk\");\n   }\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/2941": [
        {
            "sha": "094856c95fc837aafe6ec20efc1450ecea68818c",
            "filename": "launch/tier4_perception_launch/launch/object_recognition/detection/camera_lidar_fusion_based_detection.launch.xml",
            "status": "modified",
            "additions": 0,
            "deletions": 7,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8df64eb3f628b6ca09e74c591ee6d8af4edbe8e1/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8df64eb3f628b6ca09e74c591ee6d8af4edbe8e1/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml?ref=8df64eb3f628b6ca09e74c591ee6d8af4edbe8e1",
            "patch": "@@ -72,13 +72,6 @@\n         <arg name=\"output/objects\" value=\"objects_with_feature\"/>\n       </include>\n     </group>\n-    <!-- convert DynamicObjectsWithFeatureArray to DynamicObjects -->\n-    <group>\n-      <include file=\"$(find-pkg-share detected_object_feature_remover)/launch/detected_object_feature_remover.launch.xml\">\n-        <arg name=\"input\" value=\"objects_with_feature\"/>\n-        <arg name=\"output\" value=\"objects\"/>\n-      </include>\n-    </group>\n \n     <group>\n       <let name=\"input/clustering\" value=\"/perception/object_recognition/detection/clustering/clusters\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/2952": [
        {
            "sha": "4b67d0825ecb702e74fec2c1160e08009014112c",
            "filename": "common/tier4_state_rviz_plugin/src/autoware_state_panel.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bb4a6eb85fcff1b9704683fe6078d66b5b95bd84/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bb4a6eb85fcff1b9704683fe6078d66b5b95bd84/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp?ref=bb4a6eb85fcff1b9704683fe6078d66b5b95bd84",
            "patch": "@@ -488,7 +488,7 @@ void AutowareStatePanel::onMRMState(const MRMState::ConstSharedPtr msg)\n   {\n     QString text = \"\";\n     QString style_sheet = \"\";\n-    switch (msg->state) {\n+    switch (msg->behavior) {\n       case MRMState::NONE:\n         text = \"NONE\";\n         style_sheet = \"background-color: #00FF00;\";  // green"
        }
    ],
    "autowarefoundation/autoware.universe/2959": [
        {
            "sha": "8531fec2c57647edd71261fce4fa49fe580b5930",
            "filename": "planning/motion_velocity_smoother/src/motion_velocity_smoother_node.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/85f72941d262368a539b36b8d50ae71efc1f5ac3/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/85f72941d262368a539b36b8d50ae71efc1f5ac3/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp?ref=85f72941d262368a539b36b8d50ae71efc1f5ac3",
            "patch": "@@ -304,6 +304,13 @@ void MotionVelocitySmootherNode::calcExternalVelocityLimit()\n   constexpr double eps = 1.0E-04;\n   const double margin = node_param_.margin_to_insert_external_velocity_limit;\n \n+  // Set distance as zero if ego vehicle is stopped and external velocity limit is zero\n+  if (\n+    std::fabs(current_odometry_ptr_->twist.twist.linear.x) < eps &&\n+    external_velocity_limit_.velocity < eps) {\n+    external_velocity_limit_.dist = 0.0;\n+  }\n+\n   // calculate distance and maximum velocity\n   // to decelerate to external velocity limit with jerk and acceleration\n   // constraints."
        }
    ],
    "autowarefoundation/autoware.universe/2960": [
        {
            "sha": "d483cac062b04a2bc814dab049b2f413496026b0",
            "filename": "common/tier4_planning_rviz_plugin/include/path/display.hpp",
            "status": "modified",
            "additions": 15,
            "deletions": 20,
            "changes": 35,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fa6537f0ee1a5f0bff472b2411ad5af1b103e3b5/common%2Ftier4_planning_rviz_plugin%2Finclude%2Fpath%2Fdisplay.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fa6537f0ee1a5f0bff472b2411ad5af1b103e3b5/common%2Ftier4_planning_rviz_plugin%2Finclude%2Fpath%2Fdisplay.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_planning_rviz_plugin%2Finclude%2Fpath%2Fdisplay.hpp?ref=fa6537f0ee1a5f0bff472b2411ad5af1b103e3b5",
            "patch": "@@ -84,19 +84,14 @@ class AutowarePathWithDrivableAreaDisplay : public AutowarePathBaseDisplay<T>\n {\n public:\n   AutowarePathWithDrivableAreaDisplay()\n+  : property_drivable_area_view_{\"View Drivable Area\", true, \"\", this},\n+    property_drivable_area_alpha_{\"Alpha\", 0.999, \"\", &property_drivable_area_view_},\n+    property_drivable_area_color_{\"Color\", QColor(0, 148, 205), \"\", &property_drivable_area_view_},\n+    property_drivable_area_width_{\"Width\", 0.3f, \"\", &property_drivable_area_view_}\n   {\n-    property_drivable_area_view_ = new rviz_common::properties::BoolProperty(\n-      \"View Drivable Area\", true, \"\", this, SLOT(updateVisualization()));\n-    property_drivable_area_alpha_ = new rviz_common::properties::FloatProperty(\n-      \"Alpha\", 0.999, \"\", property_drivable_area_view_, SLOT(updateVisualization()), this);\n-    property_drivable_area_alpha_->setMin(0.0);\n-    property_drivable_area_alpha_->setMax(1.0);\n-    property_drivable_area_color_ = new rviz_common::properties::ColorProperty(\n-      \"Color\", QColor(0, 148, 205), \"\", property_drivable_area_view_, SLOT(updateVisualization()),\n-      this);\n-    property_drivable_area_width_ = new rviz_common::properties::FloatProperty(\n-      \"Width\", 0.3f, \"\", property_drivable_area_view_, SLOT(updateVisualization()), this);\n-    property_drivable_area_width_->setMin(0.001);\n+    property_drivable_area_alpha_.setMin(0.0);\n+    property_drivable_area_alpha_.setMax(1.0);\n+    property_drivable_area_width_.setMin(0.001);\n   }\n \n   ~AutowarePathWithDrivableAreaDisplay()\n@@ -137,11 +132,11 @@ class AutowarePathWithDrivableAreaDisplay : public AutowarePathBaseDisplay<T>\n       return;\n     }\n \n-    if (property_drivable_area_view_->getBool()) {\n+    if (property_drivable_area_view_.getBool()) {\n       Ogre::ColourValue color =\n-        rviz_common::properties::qtToOgre(property_drivable_area_color_->getColor());\n-      color.a = property_drivable_area_alpha_->getFloat();\n-      const auto line_width = property_drivable_area_width_->getFloat();\n+        rviz_common::properties::qtToOgre(property_drivable_area_color_.getColor());\n+      color.a = property_drivable_area_alpha_.getFloat();\n+      const auto line_width = property_drivable_area_width_.getFloat();\n       visualizeBound(msg_ptr->left_bound, color, line_width, left_bound_object_);\n       visualizeBound(msg_ptr->right_bound, color, line_width, right_bound_object_);\n     }\n@@ -151,10 +146,10 @@ class AutowarePathWithDrivableAreaDisplay : public AutowarePathBaseDisplay<T>\n   Ogre::ManualObject * left_bound_object_{nullptr};\n   Ogre::ManualObject * right_bound_object_{nullptr};\n \n-  rviz_common::properties::BoolProperty * property_drivable_area_view_;\n-  rviz_common::properties::ColorProperty * property_drivable_area_color_;\n-  rviz_common::properties::FloatProperty * property_drivable_area_alpha_;\n-  rviz_common::properties::FloatProperty * property_drivable_area_width_;\n+  rviz_common::properties::BoolProperty property_drivable_area_view_;\n+  rviz_common::properties::FloatProperty property_drivable_area_alpha_;\n+  rviz_common::properties::ColorProperty property_drivable_area_color_;\n+  rviz_common::properties::FloatProperty property_drivable_area_width_;\n };\n \n class AutowarePathWithLaneIdDisplay"
        }
    ],
    "autowarefoundation/autoware.universe/2979": [
        {
            "sha": "2f3de2b789eb3e7908d1a8b22ede8d5f8f8c43c3",
            "filename": "perception/euclidean_cluster/config/voxel_grid_based_euclidean_cluster.param.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/faadaf9d2ef7d8f9f367dc9bd04bd9342e8cc053/perception%2Feuclidean_cluster%2Fconfig%2Fvoxel_grid_based_euclidean_cluster.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/faadaf9d2ef7d8f9f367dc9bd04bd9342e8cc053/perception%2Feuclidean_cluster%2Fconfig%2Fvoxel_grid_based_euclidean_cluster.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Feuclidean_cluster%2Fconfig%2Fvoxel_grid_based_euclidean_cluster.param.yaml?ref=faadaf9d2ef7d8f9f367dc9bd04bd9342e8cc053",
            "patch": "@@ -6,6 +6,7 @@\n     min_cluster_size: 10\n     max_cluster_size: 3000\n     use_height: false\n+    input_frame: \"base_link\"\n     max_x: 70.0\n     min_x: -70.0\n     max_y: 70.0"
        }
    ],
    "autowarefoundation/autoware.universe/2980": [
        {
            "sha": "08514f0f16811d3784b1733f091e2b7a887e862f",
            "filename": "sensing/pointcloud_preprocessor/src/crop_box_filter/crop_box_filter_nodelet.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/46ef39209ec4e2b741f0db21dea8b02b5f5a5786/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/46ef39209ec4e2b741f0db21dea8b02b5f5a5786/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp?ref=46ef39209ec4e2b741f0db21dea8b02b5f5a5786",
            "patch": "@@ -80,6 +80,9 @@ CropBoxFilterComponent::CropBoxFilterComponent(const rclcpp::NodeOptions & optio\n     p.max_y = static_cast<float>(declare_parameter(\"max_y\", 1.0));\n     p.max_z = static_cast<float>(declare_parameter(\"max_z\", 1.0));\n     p.negative = static_cast<float>(declare_parameter(\"negative\", false));\n+    if (tf_input_frame_.empty()) {\n+      throw std::invalid_argument(\"Crop box requires non-empty input_frame\");\n+    }\n   }\n \n   // set additional publishers"
        }
    ],
    "autowarefoundation/autoware.universe/2988": [
        {
            "sha": "1cfe91e610abd8d8910b9ec43b158958fddd3777",
            "filename": "common/tier4_state_rviz_plugin/src/autoware_state_panel.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/958b1e95070ae7d7c450df0f0de3c2f6bce95c99/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/958b1e95070ae7d7c450df0f0de3c2f6bce95c99/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp?ref=958b1e95070ae7d7c450df0f0de3c2f6bce95c99",
            "patch": "@@ -188,7 +188,7 @@ QGroupBox * AutowareStatePanel::makeMotionGroup()\n \n QGroupBox * AutowareStatePanel::makeFailSafeGroup()\n {\n-  auto * group = new QGroupBox(\"FalSafe\");\n+  auto * group = new QGroupBox(\"FailSafe\");\n   auto * grid = new QGridLayout;\n \n   mrm_state_label_ptr_ = new QLabel(\"INIT\");"
        }
    ],
    "autowarefoundation/autoware.universe/2989": [
        {
            "sha": "04dc06cb0bb189e6cb575cc7db9e900006cd0bbd",
            "filename": "planning/motion_velocity_smoother/src/smoother/jerk_filtered_smoother.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 5,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9b747628b1c4b0b1b3a3449c2d44cd406fc11fbe/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fjerk_filtered_smoother.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9b747628b1c4b0b1b3a3449c2d44cd406fc11fbe/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fjerk_filtered_smoother.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fsmoother%2Fjerk_filtered_smoother.cpp?ref=9b747628b1c4b0b1b3a3449c2d44cd406fc11fbe",
            "patch": "@@ -198,12 +198,15 @@ bool JerkFilteredSmoother::apply(\n     P(IDX_A0 + i + 1, IDX_A0 + i + 1) += smooth_weight * w_x_ds_inv * w_x_ds_inv * interval_dist;\n   }\n \n+  // |v_max_i^2 - b_i|/v_max^2 -> minimize (-bi) * ds / v_max^2\n   for (size_t i = 0; i < N; ++i) {\n-    const double v_max = std::max(v_max_arr.at(i), 0.1);\n-    q.at(IDX_B0 + i) =\n-      -1.0 / (v_max * v_max);  // |v_max_i^2 - b_i|/v_max^2 -> minimize (-bi) * ds / v_max^2\n-    if (i < N - 1) {\n-      q.at(IDX_B0 + i) *= std::max(interval_dist_arr.at(i), 0.0001);\n+    if (v_max_arr.at(i) > 0.01) {\n+      // Note that if v_max[i] is too small, we did not minimize the corresponding -b[i]\n+      double v_weight_term = -1.0 / (v_max_arr.at(i) * v_max_arr.at(i));\n+      if (i < N - 1) {\n+        v_weight_term *= std::max(interval_dist_arr.at(i), 0.0001);\n+      }\n+      q.at(IDX_B0 + i) += v_weight_term;\n     }\n     P(IDX_DELTA0 + i, IDX_DELTA0 + i) += over_v_weight;  // over velocity cost\n     P(IDX_SIGMA0 + i, IDX_SIGMA0 + i) += over_a_weight;  // over acceleration cost"
        }
    ],
    "autowarefoundation/autoware.universe/2992": [
        {
            "sha": "949bd8952d83704c517c6847e99926220349434c",
            "filename": "sensing/pointcloud_preprocessor/src/crop_box_filter/crop_box_filter_nodelet.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 2,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e5288eb8ee3df54c406a0373821d80806c180d4a/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e5288eb8ee3df54c406a0373821d80806c180d4a/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp?ref=e5288eb8ee3df54c406a0373821d80806c180d4a",
            "patch": "@@ -122,7 +122,7 @@ void CropBoxFilterComponent::faster_filter(\n   output.data.resize(input->data.size());\n   size_t output_size = 0;\n \n-  for (size_t global_offset = 0; global_offset + input->point_step < input->data.size();\n+  for (size_t global_offset = 0; global_offset + input->point_step <= input->data.size();\n        global_offset += input->point_step) {\n     Eigen::Vector4f point(\n       *reinterpret_cast<const float *>(&input->data[global_offset + x_offset]),\n@@ -143,7 +143,12 @@ void CropBoxFilterComponent::faster_filter(\n                            point[1] > param_.min_y && point[1] < param_.max_y &&\n                            point[0] > param_.min_x && point[0] < param_.max_x;\n     if ((!param_.negative && point_is_inside) || (param_.negative && !point_is_inside)) {\n-      memcpy(&output.data[output_size], &point, input->point_step);\n+      memcpy(&output.data[output_size], &input->data[global_offset], input->point_step);\n+\n+      *reinterpret_cast<float *>(&output.data[output_size + x_offset]) = point[0];\n+      *reinterpret_cast<float *>(&output.data[output_size + y_offset]) = point[1];\n+      *reinterpret_cast<float *>(&output.data[output_size + z_offset]) = point[2];\n+\n       output_size += input->point_step;\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3008": [
        {
            "sha": "c8162bff31a780e3b80306a6112726efb4693b71",
            "filename": "planning/behavior_path_planner/behavior_path_planner_drivable_area_design.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d9cde9f7c4574df2d803fe1005ab1beb2a70ddb3/planning%2Fbehavior_path_planner%2Fbehavior_path_planner_drivable_area_design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d9cde9f7c4574df2d803fe1005ab1beb2a70ddb3/planning%2Fbehavior_path_planner%2Fbehavior_path_planner_drivable_area_design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fbehavior_path_planner_drivable_area_design.md?ref=d9cde9f7c4574df2d803fe1005ab1beb2a70ddb3",
            "patch": "@@ -59,7 +59,7 @@ This section gives details of the generation of the drivable area (`left_bound`\n \n Before generating drivable areas, drivable lanes need to be sorted. Drivable Lanes are selected in each module (`Lane Follow`, `Avoidance`, `Lane Change`, `Pull Over`, `Pull Out` and etc.), so more details about selection of drivable lanes can be found in each module's document. We use the following structure to define the drivable lanes.\n \n-```plantuml\n+```cpp\n struct DrivalbleLanes\n {\n     lanelet::ConstLanelet right_lanelet; // right most lane\n@@ -74,15 +74,15 @@ The image of the sorted drivable lanes is depicted in the following picture.\n \n Note that, the order of drivable lanes become\n \n-```plantuml\n+```cpp\n drivable_lanes = {DrivableLane1, DrivableLanes2, DrivableLanes3, DrivableLanes4, DrivableLanes5}\n ```\n \n ### Drivable Area Generation\n \n In this section, a drivable area is created using drivable lanes arranged in the order in which vehicles pass by. We created `left_bound` from left boundary of the leftmost lanelet and `right_bound` from right boundary of the rightmost lanelet. The image of the created drivable area will be the following blue lines. Note that the drivable area is defined in the `Path` and `PathWithLaneId` messages as\n \n-```plantuml\n+```cpp\n std::vector<geometry_msgs::msg::Point> left_bound;\n std::vector<geometry_msgs::msg::Point> right_bound;\n ```"
        }
    ],
    "autowarefoundation/autoware.universe/3009": [
        {
            "sha": "89fa09e23dce49310c6d733da62af787b99fb6eb",
            "filename": "planning/obstacle_avoidance_planner/CMakeLists.txt",
            "status": "modified",
            "additions": 7,
            "deletions": 5,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f85283ecc635f4c80f2be6e810f372846a5d8d36/planning%2Fobstacle_avoidance_planner%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f85283ecc635f4c80f2be6e810f372846a5d8d36/planning%2Fobstacle_avoidance_planner%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2FCMakeLists.txt?ref=f85283ecc635f4c80f2be6e810f372846a5d8d36",
            "patch": "@@ -3,12 +3,14 @@ project(obstacle_avoidance_planner)\n \n include(CheckCXXCompilerFlag)\n \n+# NOTE: With the following option, when the compile-time and runtime CPU\n+#       architectures are different, the node will die.\n # For Eigen vectorization.\n-check_cxx_compiler_flag(\"-march=native\" COMPILER_SUPPORTS_MARCH_NATIVE)\n-if(COMPILER_SUPPORTS_MARCH_NATIVE)\n-  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=native\")\n-  message(STATUS \"Enabling MARCH NATIVE \")\n-endif()\n+# check_cxx_compiler_flag(\"-march=native\" COMPILER_SUPPORTS_MARCH_NATIVE)\n+# if(COMPILER_SUPPORTS_MARCH_NATIVE)\n+#   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=native\")\n+#   message(STATUS \"Enabling MARCH NATIVE \")\n+# endif()\n \n find_package(autoware_cmake REQUIRED)\n autoware_package()"
        }
    ],
    "autowarefoundation/autoware.universe/3010": [
        {
            "sha": "bbab80b855620f03b3938ac897ea3f2b4b6cf744",
            "filename": "sensing/pointcloud_preprocessor/src/crop_box_filter/crop_box_filter_nodelet.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/551bd9fed01cb200e6dad6b6c7880f21e9fd80c6/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/551bd9fed01cb200e6dad6b6c7880f21e9fd80c6/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp?ref=551bd9fed01cb200e6dad6b6c7880f21e9fd80c6",
            "patch": "@@ -154,8 +154,11 @@ void CropBoxFilterComponent::faster_filter(\n   }\n \n   output.data.resize(output_size);\n-  output.header.frame_id =\n-    tf_input_frame_;  // Note that `input->header.frame_id` is data before converted\n+\n+  // Note that `input->header.frame_id` is data before converted when `transform_info.need_transform\n+  // == true`\n+  output.header.frame_id = !tf_input_frame_.empty() ? tf_input_frame_ : tf_input_orig_frame_;\n+\n   output.height = 1;\n   output.fields = input->fields;\n   output.is_bigendian = input->is_bigendian;"
        }
    ],
    "autowarefoundation/autoware.universe/3012": [
        {
            "sha": "15666080147da92a10ab949a17fad95eb9ba2dbc",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/46d5c1aa64d5576df19d9402947596bbfb7933d4/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/46d5c1aa64d5576df19d9402947596bbfb7933d4/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=46d5c1aa64d5576df19d9402947596bbfb7933d4",
            "patch": "@@ -423,14 +423,12 @@ double calcLateralDistanceFromEgoToObject(\n \n   for (const auto & p : obj_polygon.outer()) {\n     const auto point = tier4_autoware_utils::createPoint(p.x(), p.y(), 0.0);\n-    // left direction is positive\n     const double signed_distance_from_left =\n       tier4_autoware_utils::calcLateralDeviation(vehicle_left_pose, point);\n-    // right direction is positive\n     const double signed_distance_from_right =\n       tier4_autoware_utils::calcLateralDeviation(vehicle_right_pose, point);\n \n-    if (signed_distance_from_left < 0.0 && signed_distance_from_right < 0.0) {\n+    if (signed_distance_from_left < 0.0 && signed_distance_from_right > 0.0) {\n       // point is between left and right\n       return 0.0;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/3021": [
        {
            "sha": "290cf9af97dd0e633f67506123d458038120801d",
            "filename": "planning/behavior_velocity_planner/src/scene_module/run_out/dynamic_obstacle.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 5,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/956219ddce0812a483b6ba1a9d32e7b9ebb2438e/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fdynamic_obstacle.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/956219ddce0812a483b6ba1a9d32e7b9ebb2438e/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fdynamic_obstacle.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fdynamic_obstacle.cpp?ref=956219ddce0812a483b6ba1a9d32e7b9ebb2438e",
            "patch": "@@ -463,13 +463,9 @@ void DynamicObstacleCreatorForPoints::onSynchronizedPointCloud(\n   const PointCloud2::ConstSharedPtr compare_map_filtered_points,\n   const PointCloud2::ConstSharedPtr vector_map_filtered_points)\n {\n-  // clear previous obstacle points\n-  {\n+  if (compare_map_filtered_points->data.empty() && vector_map_filtered_points->data.empty()) {\n     std::lock_guard<std::mutex> lock(mutex_);\n     obstacle_points_map_filtered_.clear();\n-  }\n-\n-  if (compare_map_filtered_points->data.empty() && vector_map_filtered_points->data.empty()) {\n     debug_ptr_->publishEmptyPointCloud();\n     return;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3030": [
        {
            "sha": "310de4fcc001676496667e296782c70079e855d6",
            "filename": "system/component_state_monitor/package.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/486d1d280c47b2c3b49fcacafdca2129814ced0e/system%2Fcomponent_state_monitor%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/486d1d280c47b2c3b49fcacafdca2129814ced0e/system%2Fcomponent_state_monitor%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fcomponent_state_monitor%2Fpackage.xml?ref=486d1d280c47b2c3b49fcacafdca2129814ced0e",
            "patch": "@@ -19,6 +19,8 @@\n   <depend>rclcpp_components</depend>\n   <depend>tier4_system_msgs</depend>\n \n+  <exec_depend>topic_state_monitor</exec_depend>\n+\n   <test_depend>ament_lint_auto</test_depend>\n   <test_depend>autoware_lint_common</test_depend>\n "
        }
    ],
    "autowarefoundation/autoware.universe/3035": [
        {
            "sha": "9403646ba601fa7530ee1e98b44c44abf8361805",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/planner_manager.hpp",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f960f7fbf3cf6e5de2f885c6492f43f495e95936/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fplanner_manager.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f960f7fbf3cf6e5de2f885c6492f43f495e95936/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fplanner_manager.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fplanner_manager.hpp?ref=f960f7fbf3cf6e5de2f885c6492f43f495e95936",
            "patch": "@@ -131,7 +131,6 @@ class PlannerManager\n   {\n     module_ptr->setData(planner_data);\n     module_ptr->setPreviousModuleOutput(previous_module_output);\n-    module_ptr->updateData();\n \n     module_ptr->lockRTCCommand();\n     const auto result = module_ptr->run();"
        }
    ],
    "autowarefoundation/autoware.universe/3036": [
        {
            "sha": "2efef897b203c9d0f57a00b623a872f3c592bc7b",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/pull_over_module.cpp",
            "status": "modified",
            "additions": 23,
            "deletions": 9,
            "changes": 32,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5660a7f97d2a848ae800ccbf37b9cf58d98a2ce2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5660a7f97d2a848ae800ccbf37b9cf58d98a2ce2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp?ref=5660a7f97d2a848ae800ccbf37b9cf58d98a2ce2",
            "patch": "@@ -491,6 +491,7 @@ bool PullOverModule::returnToLaneParking()\n BehaviorModuleOutput PullOverModule::plan()\n {\n   const auto & current_pose = planner_data_->self_odometry->pose.pose;\n+  const double current_vel = planner_data_->self_odometry->twist.twist.linear.x;\n \n   resetPathCandidate();\n   resetPathReference();\n@@ -535,9 +536,8 @@ BehaviorModuleOutput PullOverModule::plan()\n       // decide velocity to guarantee turn signal lighting time\n       if (!status_.has_decided_velocity) {\n         auto & first_path = status_.pull_over_path->partial_paths.front();\n-        const auto vel = static_cast<float>(std::max(\n-          planner_data_->self_odometry->twist.twist.linear.x,\n-          parameters_->pull_over_minimum_velocity));\n+        const auto vel =\n+          static_cast<float>(std::max(current_vel, parameters_->pull_over_minimum_velocity));\n         for (auto & p : first_path.points) {\n           p.point.longitudinal_velocity_mps = std::min(p.point.longitudinal_velocity_mps, vel);\n         }\n@@ -597,12 +597,18 @@ BehaviorModuleOutput PullOverModule::plan()\n       const auto search_start_pose = calcLongitudinalOffsetPose(\n         status_.pull_over_path->getFullPath().points, refined_goal_pose_.position,\n         -parameters_->backward_goal_search_length - planner_data_->parameters.base_link2front);\n+      auto & first_path = status_.pull_over_path->partial_paths.front();\n       if (search_start_pose) {\n-        auto & first_path = status_.pull_over_path->partial_paths.front();\n         constexpr double deceleration_buffer = 15.0;\n         first_path = util::setDecelerationVelocity(\n           first_path, parameters_->pull_over_velocity, *search_start_pose, -deceleration_buffer,\n           parameters_->deceleration_interval);\n+      } else {\n+        // if already passed the search start pose, set pull_over_velocity to first_path.\n+        for (auto & p : first_path.points) {\n+          p.point.longitudinal_velocity_mps = std::min(\n+            p.point.longitudinal_velocity_mps, static_cast<float>(parameters_->pull_over_velocity));\n+        }\n       }\n     }\n \n@@ -790,6 +796,7 @@ PathWithLaneId PullOverModule::generateStopPath()\n   const auto & route_handler = planner_data_->route_handler;\n   const auto & current_pose = planner_data_->self_odometry->pose.pose;\n   const auto & common_parameters = planner_data_->parameters;\n+  const double current_vel = planner_data_->self_odometry->twist.twist.linear.x;\n \n   if (status_.current_lanes.empty()) {\n     return PathWithLaneId{};\n@@ -828,7 +835,6 @@ PathWithLaneId PullOverModule::generateStopPath()\n     common_parameters.ego_nearest_yaw_threshold);\n   const double ego_to_stop_distance = calcSignedArcLength(\n     reference_path.points, current_pose.position, ego_idx, stop_pose.position, stop_idx);\n-  const double current_vel = planner_data_->self_odometry->twist.twist.linear.x;\n   const double min_stop_distance = std::pow(current_vel, 2) / parameters_->maximum_deceleration / 2;\n   if (ego_to_stop_distance < min_stop_distance) {\n     return generateEmergencyStopPath();\n@@ -840,10 +846,18 @@ PathWithLaneId PullOverModule::generateStopPath()\n   status_.stop_pose = stop_pose;\n \n   // slow down before the search area.\n-  constexpr double deceleration_buffer = 15.0;\n-  reference_path = util::setDecelerationVelocity(\n-    reference_path, parameters_->pull_over_velocity, *search_start_pose, -deceleration_buffer,\n-    parameters_->deceleration_interval);\n+  if (search_start_pose) {\n+    constexpr double deceleration_buffer = 15.0;\n+    reference_path = util::setDecelerationVelocity(\n+      reference_path, parameters_->pull_over_velocity, *search_start_pose, -deceleration_buffer,\n+      parameters_->deceleration_interval);\n+  } else {\n+    // if already passed the search start pose, set pull_over_velocity to reference_path.\n+    for (auto & p : reference_path.points) {\n+      p.point.longitudinal_velocity_mps = std::min(\n+        p.point.longitudinal_velocity_mps, static_cast<float>(parameters_->pull_over_velocity));\n+    }\n+  }\n \n   // generate drivable area\n   const auto drivable_lanes = util::generateDrivableLanes(status_.current_lanes);"
        }
    ],
    "autowarefoundation/autoware.universe/3043": [
        {
            "sha": "9dfed422d5ff91e6d05788b92507c6b0d88f150f",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 15,
            "deletions": 0,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/19c799341e0bb287a111eb6b6fb316ffba885a74/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/19c799341e0bb287a111eb6b6fb316ffba885a74/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=19c799341e0bb287a111eb6b6fb316ffba885a74",
            "patch": "@@ -114,7 +114,12 @@ bool AvoidanceModule::isExecutionRequested() const\n   }\n \n   // Check ego is in preferred lane\n+#ifdef USE_OLD_ARCHITECTURE\n   const auto current_lanes = util::getCurrentLanes(planner_data_);\n+#else\n+  const auto current_lanes =\n+    util::getCurrentLanesFromPath(*getPreviousModuleOutput().reference_path, planner_data_);\n+#endif\n   lanelet::ConstLanelet current_lane;\n   lanelet::utils::query::getClosestLanelet(\n     current_lanes, planner_data_->self_odometry->pose.pose, &current_lane);\n@@ -235,9 +240,14 @@ AvoidancePlanningData AvoidanceModule::calcAvoidancePlanningData(DebugData & deb\n     calcSignedArcLength(data.reference_path.points, getEgoPosition(), 0));\n \n   // lanelet info\n+#ifdef USE_OLD_ARCHITECTURE\n   data.current_lanelets = util::calcLaneAroundPose(\n     planner_data_->route_handler, reference_pose, planner_data_->parameters.forward_path_length,\n     planner_data_->parameters.backward_path_length);\n+#else\n+  data.current_lanelets =\n+    util::getCurrentLanesFromPath(*getPreviousModuleOutput().reference_path, planner_data_);\n+#endif\n \n   // keep avoidance state\n   data.state = avoidance_data_.state;\n@@ -2955,8 +2965,13 @@ PathWithLaneId AvoidanceModule::calcCenterLinePath(\n     \"p.backward_path_length = %f, longest_dist_to_shift_line = %f, backward_length = %f\",\n     p.backward_path_length, longest_dist_to_shift_line, backward_length);\n \n+#ifdef USE_OLD_ARCHITECTURE\n   const lanelet::ConstLanelets current_lanes =\n     util::calcLaneAroundPose(route_handler, pose, p.forward_path_length, backward_length);\n+#else\n+  const lanelet::ConstLanelets current_lanes =\n+    util::getCurrentLanesFromPath(*getPreviousModuleOutput().reference_path, planner_data_);\n+#endif\n   centerline_path = util::getCenterLinePath(\n     *route_handler, current_lanes, pose, backward_length, p.forward_path_length, p);\n "
        }
    ],
    "autowarefoundation/autoware.universe/3044": [
        {
            "sha": "0771a406516dc0d614ef1540ac6448a1ca6fb05e",
            "filename": "control/mpc_lateral_controller/src/mpc.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d49e07972d2d848d69adb53c12533ce45578991b/control%2Fmpc_lateral_controller%2Fsrc%2Fmpc.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d49e07972d2d848d69adb53c12533ce45578991b/control%2Fmpc_lateral_controller%2Fsrc%2Fmpc.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fmpc_lateral_controller%2Fsrc%2Fmpc.cpp?ref=d49e07972d2d848d69adb53c12533ce45578991b",
            "patch": "@@ -253,8 +253,11 @@ void MPC::setReferenceTrajectory(\n \n void MPC::resetPrevResult(const autoware_auto_vehicle_msgs::msg::SteeringReport & current_steer)\n {\n-  m_raw_steer_cmd_prev = current_steer.steering_tire_angle;\n-  m_raw_steer_cmd_pprev = current_steer.steering_tire_angle;\n+  // Consider limit. The prev value larger than limiation brakes the optimization constraint and\n+  // resluts in optimization failure.\n+  const float steer_lim_f = static_cast<float>(m_steer_lim);\n+  m_raw_steer_cmd_prev = std::clamp(current_steer.steering_tire_angle, -steer_lim_f, steer_lim_f);\n+  m_raw_steer_cmd_pprev = std::clamp(current_steer.steering_tire_angle, -steer_lim_f, steer_lim_f);\n }\n \n bool MPC::getData("
        }
    ],
    "autowarefoundation/autoware.universe/3051": [
        {
            "sha": "af71d7d980dc5bf01df6acf73aa3b5180f7550b4",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/lane_change_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9c19b9f8389dd005b548bb98219e8853763c6659/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9c19b9f8389dd005b548bb98219e8853763c6659/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp?ref=9c19b9f8389dd005b548bb98219e8853763c6659",
            "patch": "@@ -80,6 +80,7 @@ void LaneChangeModule::onEntry()\n   current_state_ = ModuleStatus::SUCCESS;\n #else\n   current_state_ = ModuleStatus::IDLE;\n+  waitApproval();\n #endif\n   current_lane_change_state_ = LaneChangeStates::Normal;\n   updateLaneChangeStatus();"
        }
    ],
    "autowarefoundation/autoware.universe/3055": [
        {
            "sha": "741669f65fdcdc1c16dae63619657870f0429009",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/36fb4441be9a29c63e36141547ffa83f72f35f3a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/36fb4441be9a29c63e36141547ffa83f72f35f3a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=36fb4441be9a29c63e36141547ffa83f72f35f3a",
            "patch": "@@ -751,10 +751,12 @@ void AvoidanceModule::fillShiftLine(AvoidancePlanningData & data, DebugData & de\n \n   /**\n    * Find the nearest object that should be avoid. When the ego follows reference path,\n-   * if the lateral distance is smaller than minimum margin, the ego should avoid the object.\n+   * if the both of following two conditions are satisfied, the module surely avoid the object.\n+   * Condition1: there is risk to collide with object without avoidance.\n+   * Condition2: there is enough space to avoid.\n    */\n   for (const auto & o : data.target_objects) {\n-    if (o.avoid_required) {\n+    if (o.avoid_required && o.is_avoidable) {\n       data.avoid_required = true;\n       data.stop_target_object = o;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/3056": [
        {
            "sha": "8a4cf3ecbb8d6527d8af41720e3aa7a0bd06950e",
            "filename": "system/system_error_monitor/src/system_error_monitor_core.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1ddc74e28245c0048ab1cc61044ca0c19c10e622/system%2Fsystem_error_monitor%2Fsrc%2Fsystem_error_monitor_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1ddc74e28245c0048ab1cc61044ca0c19c10e622/system%2Fsystem_error_monitor%2Fsrc%2Fsystem_error_monitor_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fsystem_error_monitor%2Fsrc%2Fsystem_error_monitor_core.cpp?ref=1ddc74e28245c0048ab1cc61044ca0c19c10e622",
            "patch": "@@ -443,7 +443,7 @@ void AutowareErrorMonitor::onTimer()\n   if (!isDataReady()) {\n     if ((this->now() - initialized_time_).seconds() > params_.data_ready_timeout) {\n       RCLCPP_WARN_THROTTLE(\n-        get_logger(), *get_clock(), std::chrono::milliseconds(1000).count(),\n+        get_logger(), *get_clock(), std::chrono::milliseconds(5000).count(),\n         \"input data is timeout\");\n       updateTimeoutHazardStatus();\n       publishHazardStatus(hazard_status_);"
        }
    ],
    "autowarefoundation/autoware.universe/3061": [
        {
            "sha": "df95dbae0ccfcae64789a1a6799a451a9e2f9f79",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/lane_change_module.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fe3edca43bdf2f8390853701f78546b45f02dfd4/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fe3edca43bdf2f8390853701f78546b45f02dfd4/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp?ref=fe3edca43bdf2f8390853701f78546b45f02dfd4",
            "patch": "@@ -236,8 +236,13 @@ CandidateOutput LaneChangeModule::planCandidate() const\n   const auto current_lanes = util::getCurrentLanes(planner_data_);\n   const auto lane_change_lanes = getLaneChangeLanes(current_lanes, lane_change_lane_length_);\n \n+#ifdef USE_OLD_ARCHITECTURE\n   [[maybe_unused]] const auto [found_valid_path, found_safe_path] =\n     getSafePath(lane_change_lanes, check_distance_, selected_path);\n+#else\n+  selected_path = status_.lane_change_path;\n+#endif\n+\n   selected_path.path.header = planner_data_->route_handler->getRouteHeader();\n \n   if (isAbortState()) {\n@@ -273,6 +278,10 @@ BehaviorModuleOutput LaneChangeModule::planWaitingApproval()\n   BehaviorModuleOutput out;\n   out.path = std::make_shared<PathWithLaneId>(prev_approved_path_);\n \n+#ifndef USE_OLD_ARCHITECTURE\n+  updateLaneChangeStatus();\n+#endif\n+\n   const auto candidate = planCandidate();\n   path_candidate_ = std::make_shared<PathWithLaneId>(candidate.path_candidate);\n   path_reference_ = getPreviousModuleOutput().reference_path;"
        }
    ],
    "autowarefoundation/autoware.universe/3064": [
        {
            "sha": "8d03bfaee187749fe6c75e9e17b7918d3616a6f2",
            "filename": "perception/tensorrt_yolox/src/tensorrt_yolox_node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/222387c2dd40366c8f01bd48de684279267e8e15/perception%2Ftensorrt_yolox%2Fsrc%2Ftensorrt_yolox_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/222387c2dd40366c8f01bd48de684279267e8e15/perception%2Ftensorrt_yolox%2Fsrc%2Ftensorrt_yolox_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftensorrt_yolox%2Fsrc%2Ftensorrt_yolox_node.cpp?ref=222387c2dd40366c8f01bd48de684279267e8e15",
            "patch": "@@ -148,8 +148,8 @@ void TrtYoloXNode::replaceLabelMap()\n     if (label == \"PERSON\") {\n       label = \"PEDESTRIAN\";\n     } else if (\n-      label != \"CAR\" || label != \"PEDESTRIAN\" || label != \"BUS\" || label != \"TRUCK\" ||\n-      label != \"BICYCLE\" || label != \"MOTORCYCLE\") {\n+      label != \"CAR\" && label != \"PEDESTRIAN\" && label != \"BUS\" && label != \"TRUCK\" &&\n+      label != \"BICYCLE\" && label != \"MOTORCYCLE\") {\n       label = \"UNKNOWN\";\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3066": [
        {
            "sha": "b83b9a57f0934fcc24fdcb746b4ff8b6427ad5d0",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 4,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/00aab6da84827cee8c66b441ede0d9059a508321/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/00aab6da84827cee8c66b441ede0d9059a508321/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=00aab6da84827cee8c66b441ede0d9059a508321",
            "patch": "@@ -116,10 +116,6 @@ bool AvoidanceModule::isExecutionRequested() const\n   // Check ego is in preferred lane\n #ifdef USE_OLD_ARCHITECTURE\n   const auto current_lanes = util::getCurrentLanes(planner_data_);\n-#else\n-  const auto current_lanes =\n-    util::getCurrentLanesFromPath(*getPreviousModuleOutput().reference_path, planner_data_);\n-#endif\n   lanelet::ConstLanelet current_lane;\n   lanelet::utils::query::getClosestLanelet(\n     current_lanes, planner_data_->self_odometry->pose.pose, &current_lane);\n@@ -128,6 +124,7 @@ bool AvoidanceModule::isExecutionRequested() const\n   if (num != 0) {\n     return false;\n   }\n+#endif\n \n   // Check avoidance targets exist\n   const auto avoid_data = calcAvoidancePlanningData(debug_data_);"
        }
    ],
    "autowarefoundation/autoware.universe/3069": [
        {
            "sha": "c7511bf572f4ae83062dafd08111cae816917de4",
            "filename": "system/velodyne_monitor/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d001ee2b351364aea35744963edb1ea66b953271/system%2Fvelodyne_monitor%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d001ee2b351364aea35744963edb1ea66b953271/system%2Fvelodyne_monitor%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fvelodyne_monitor%2FCMakeLists.txt?ref=d001ee2b351364aea35744963edb1ea66b953271",
            "patch": "@@ -2,6 +2,7 @@ cmake_minimum_required(VERSION 3.14)\n project(velodyne_monitor)\n \n find_package(autoware_cmake REQUIRED)\n+find_package(fmt)\n autoware_package()\n \n ### Target executable"
        }
    ],
    "autowarefoundation/autoware.universe/3072": [
        {
            "sha": "f9510ecd7e8e5a4b1992ea400c4942eaa7e7a21d",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/lane_change_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/be64c8e78877e28e66a2a08415438a913205350e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/be64c8e78877e28e66a2a08415438a913205350e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp?ref=be64c8e78877e28e66a2a08415438a913205350e",
            "patch": "@@ -299,6 +299,7 @@ BehaviorModuleOutput LaneChangeModule::planWaitingApproval()\n   BehaviorModuleOutput out;\n   out.path = std::make_shared<PathWithLaneId>(prev_approved_path_);\n   out.reference_path = getPreviousModuleOutput().reference_path;\n+  out.turn_signal_info = getPreviousModuleOutput().turn_signal_info;\n \n #ifndef USE_OLD_ARCHITECTURE\n   updateLaneChangeStatus();"
        }
    ],
    "autowarefoundation/autoware.universe/3073": [
        {
            "sha": "ed0d753a68eccb1d5a08d1cbc95980a138d50ad0",
            "filename": "sensing/pointcloud_preprocessor/include/pointcloud_preprocessor/vector_map_filter/lanelet2_map_filter_nodelet.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c47d0435ec3a30c9a5f83ae3a46756351979a515/sensing%2Fpointcloud_preprocessor%2Finclude%2Fpointcloud_preprocessor%2Fvector_map_filter%2Flanelet2_map_filter_nodelet.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c47d0435ec3a30c9a5f83ae3a46756351979a515/sensing%2Fpointcloud_preprocessor%2Finclude%2Fpointcloud_preprocessor%2Fvector_map_filter%2Flanelet2_map_filter_nodelet.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Finclude%2Fpointcloud_preprocessor%2Fvector_map_filter%2Flanelet2_map_filter_nodelet.hpp?ref=c47d0435ec3a30c9a5f83ae3a46756351979a515",
            "patch": "@@ -23,6 +23,7 @@\n #include <autoware_auto_mapping_msgs/msg/had_map_bin.hpp>\n #include <sensor_msgs/msg/point_cloud2.hpp>\n \n+#include <pcl/common/centroid.h>\n #include <pcl/filters/voxel_grid.h>\n #include <pcl_conversions/pcl_conversions.h>\n "
        }
    ],
    "autowarefoundation/autoware.universe/3084": [
        {
            "sha": "89a91c6b6a675cccf1ec112b68616f78462ae180",
            "filename": "planning/surround_obstacle_checker/include/surround_obstacle_checker/node.hpp",
            "status": "modified",
            "additions": 0,
            "deletions": 3,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b301312fa059e74c9c5fe75ea234082032f924e6/planning%2Fsurround_obstacle_checker%2Finclude%2Fsurround_obstacle_checker%2Fnode.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b301312fa059e74c9c5fe75ea234082032f924e6/planning%2Fsurround_obstacle_checker%2Finclude%2Fsurround_obstacle_checker%2Fnode.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fsurround_obstacle_checker%2Finclude%2Fsurround_obstacle_checker%2Fnode.hpp?ref=b301312fa059e74c9c5fe75ea234082032f924e6",
            "patch": "@@ -23,7 +23,6 @@\n #include <vehicle_info_util/vehicle_info_util.hpp>\n \n #include <autoware_auto_perception_msgs/msg/predicted_objects.hpp>\n-#include <autoware_auto_planning_msgs/msg/trajectory.hpp>\n #include <diagnostic_msgs/msg/diagnostic_status.hpp>\n #include <diagnostic_msgs/msg/key_value.hpp>\n #include <nav_msgs/msg/odometry.hpp>\n@@ -46,8 +45,6 @@ namespace surround_obstacle_checker\n \n using autoware_auto_perception_msgs::msg::PredictedObjects;\n using autoware_auto_perception_msgs::msg::Shape;\n-using autoware_auto_planning_msgs::msg::Trajectory;\n-using autoware_auto_planning_msgs::msg::TrajectoryPoint;\n using motion_utils::VehicleStopChecker;\n using tier4_planning_msgs::msg::VelocityLimit;\n using tier4_planning_msgs::msg::VelocityLimitClearCommand;"
        }
    ],
    "autowarefoundation/autoware.universe/3092": [
        {
            "sha": "86b20833ec4df95bcb5696dcd3f72e1fb6ca2d95",
            "filename": "localization/pose_initializer/launch/pose_initializer.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1fd50aeec3335ee2050a202cbd2a0ebc33b55615/localization%2Fpose_initializer%2Flaunch%2Fpose_initializer.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1fd50aeec3335ee2050a202cbd2a0ebc33b55615/localization%2Fpose_initializer%2Flaunch%2Fpose_initializer.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fpose_initializer%2Flaunch%2Fpose_initializer.launch.xml?ref=1fd50aeec3335ee2050a202cbd2a0ebc33b55615",
            "patch": "@@ -9,8 +9,8 @@\n     <remap from=\"stop_check_twist\" to=\"/sensing/vehicle_velocity_converter/twist_with_covariance\"/>\n     <remap from=\"gnss_pose_cov\" to=\"/sensing/gnss/pose_with_covariance\"/>\n     <remap from=\"pose_reset\" to=\"/initialpose3d\"/>\n-    <remap from=\"ekf_trigger_node\" to=\"/localization/pose_estimator/trigger_node\"/>\n-    <remap from=\"ndt_trigger_node\" to=\"/localization/pose_twist_fusion_filter/trigger_node\"/>\n+    <remap from=\"ekf_trigger_node\" to=\"/localization/pose_twist_fusion_filter/trigger_node\"/>\n+    <remap from=\"ndt_trigger_node\" to=\"/localization/pose_estimator/trigger_node\"/>\n     <param name=\"map_loader_name\" value=\"/map/pointcloud_map_loader\"/>\n     <remap from=\"~/pointcloud_map\" to=\"/map/pointcloud_map\"/>\n     <remap from=\"~/partial_map_load\" to=\"/map/get_partial_pointcloud_map\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/3095": [
        {
            "sha": "b2f5dfae394258b7179f53096b8d128cbf285be5",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/pull_over_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a6df5175f7c7e6c7b54ff49a2b88c016c39ade7b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a6df5175f7c7e6c7b54ff49a2b88c016c39ade7b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp?ref=a6df5175f7c7e6c7b54ff49a2b88c016c39ade7b",
            "patch": "@@ -132,6 +132,7 @@ void PullOverModule::resetStatus()\n   pull_over_path_candidates_.clear();\n   closest_start_pose_.reset();\n   goal_candidates_.clear();\n+  prev_goal_id_.reset();\n }\n \n // This function is needed for waiting for planner_data_"
        }
    ],
    "autowarefoundation/autoware.universe/3096": [
        {
            "sha": "92db4cd0b853e47a623eff104757a76b52ffdd79",
            "filename": "perception/lidar_centerpoint/config/centerpoint_tiny.param.yaml",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/33711f67f6f47e1047673fa4d5aa0df3b961db9b/perception%2Flidar_centerpoint%2Fconfig%2Fcenterpoint_tiny.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/33711f67f6f47e1047673fa4d5aa0df3b961db9b/perception%2Flidar_centerpoint%2Fconfig%2Fcenterpoint_tiny.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_centerpoint%2Fconfig%2Fcenterpoint_tiny.param.yaml?ref=33711f67f6f47e1047673fa4d5aa0df3b961db9b",
            "patch": "@@ -1,15 +1,15 @@\n /**:\n   ros__parameters:\n-    class_names: [\"CAR\", \"PEDESTRIAN\", \"BICYCLE\"]\n+    class_names: [\"CAR\", \"TRUCK\", \"BUS\", \"BICYCLE\", \"PEDESTRIAN\"]\n     point_feature_size: 4\n     max_voxel_size: 40000\n-    point_cloud_range: [-89.6, -89.6, -3.0, 89.6, 89.6, 5.0]\n-    voxel_size: [0.32, 0.32, 8.0]\n+    point_cloud_range: [-76.8, -76.8, -2.0, 76.8, 76.8, 4.0]\n+    voxel_size: [0.32, 0.32, 6.0]\n     downsample_factor: 2\n     encoder_in_feature_size: 9\n     # post-process params\n     circle_nms_dist_threshold: 0.5\n     iou_nms_target_class_names: [\"CAR\"]\n     iou_nms_search_distance_2d: 10.0\n     iou_nms_threshold: 0.1\n-    yaw_norm_thresholds: [0.3, 0.0, 0.3]\n+    yaw_norm_thresholds: [0.3, 0.3, 0.3, 0.3, 0.0]"
        }
    ],
    "autowarefoundation/autoware.universe/3099": [
        {
            "sha": "a9f51d7bce7c410630cb176f7334152017bf5530",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/486145dad23a9d63d8a671923ea37c58622af37e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/486145dad23a9d63d8a671923ea37c58622af37e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=486145dad23a9d63d8a671923ea37c58622af37e",
            "patch": "@@ -1115,8 +1115,8 @@ AvoidLineArray AvoidanceModule::calcRawShiftLinesFromObjects(\n         if (!data.avoiding_now) {\n           o.reason = AvoidanceDebugFactor::REMAINING_DISTANCE_LESS_THAN_ZERO;\n           debug.unavoidable_objects.push_back(o);\n+          continue;\n         }\n-        continue;\n       }\n \n       // This is the case of exceeding the jerk limit. Use the sharp avoidance ego speed.\n@@ -1129,8 +1129,8 @@ AvoidLineArray AvoidanceModule::calcRawShiftLinesFromObjects(\n         if (!data.avoiding_now) {\n           o.reason = AvoidanceDebugFactor::TOO_LARGE_JERK;\n           debug.unavoidable_objects.push_back(o);\n+          continue;\n         }\n-        continue;\n       }\n     }\n     const auto avoiding_distance ="
        }
    ],
    "autowarefoundation/autoware.universe/3100": [
        {
            "sha": "fd9c31f3a617e592280800d6c40dbfa682d03c76",
            "filename": "planning/behavior_path_planner/src/util/lane_change/util.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/41901b863ac027e4fa1a78328413f043ef0d9f6f/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/41901b863ac027e4fa1a78328413f043ef0d9f6f/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp?ref=41901b863ac027e4fa1a78328413f043ef0d9f6f",
            "patch": "@@ -315,7 +315,8 @@ std::pair<bool, bool> getLaneChangePaths(\n   const auto required_total_min_distance =\n     util::calcLaneChangeBuffer(common_parameter, num_to_preferred_lane);\n \n-  const auto arc_position_from_current = lanelet::utils::getArcCoordinates(original_lanelets, pose);\n+  [[maybe_unused]] const auto arc_position_from_current =\n+    lanelet::utils::getArcCoordinates(original_lanelets, pose);\n   const auto arc_position_from_target = lanelet::utils::getArcCoordinates(target_lanelets, pose);\n \n   const auto target_lane_length = lanelet::utils::getLaneletLength2d(target_lanelets);"
        }
    ],
    "autowarefoundation/autoware.universe/3103": [
        {
            "sha": "57f67a247d2b9ba2ea9a6d022ad5151a2846952f",
            "filename": "system/system_error_monitor/src/system_error_monitor_core.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/89504cf5c389c49de2704c022549f80afeea4e68/system%2Fsystem_error_monitor%2Fsrc%2Fsystem_error_monitor_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/89504cf5c389c49de2704c022549f80afeea4e68/system%2Fsystem_error_monitor%2Fsrc%2Fsystem_error_monitor_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fsystem_error_monitor%2Fsrc%2Fsystem_error_monitor_core.cpp?ref=89504cf5c389c49de2704c022549f80afeea4e68",
            "patch": "@@ -410,6 +410,10 @@ bool AutowareErrorMonitor::isDataReady()\n bool AutowareErrorMonitor::isDataHeartbeatTimeout()\n {\n   auto isTimeout = [this](const rclcpp::Time & last_stamp, const double threshold) {\n+    if (last_stamp.get_clock_type() != this->now().get_clock_type()) {\n+      RCLCPP_ERROR_THROTTLE(get_logger(), *get_clock(), 5000, \"clock type is different...\");\n+      return false;\n+    }\n     const auto time_diff = this->now() - last_stamp;\n     return time_diff.seconds() > threshold;\n   };"
        }
    ],
    "autowarefoundation/autoware.universe/3105": [
        {
            "sha": "c2bee10f972f12df20886c2ecdd84e896f8cab2e",
            "filename": "planning/planning_debug_tools/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3a1f9506172a5bdc5cc547819b012614134ff6f2/planning%2Fplanning_debug_tools%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3a1f9506172a5bdc5cc547819b012614134ff6f2/planning%2Fplanning_debug_tools%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2FCMakeLists.txt?ref=3a1f9506172a5bdc5cc547819b012614134ff6f2",
            "patch": "@@ -50,5 +50,6 @@ ament_auto_package(\n install(PROGRAMS\n   scripts/trajectory_visualizer.py\n   scripts/closest_velocity_checker.py\n+  scripts/perception_reproducer.py\n   DESTINATION lib/${PROJECT_NAME}\n )"
        }
    ],
    "autowarefoundation/autoware.universe/3108": [
        {
            "sha": "53a629fafa0cc52a9b864231b81cb81827ee0f07",
            "filename": "control/autonomous_emergency_braking/CMakeLists.txt",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/84830efb2386dc91db0ca3eee6e2e356a7786282/control%2Fautonomous_emergency_braking%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/84830efb2386dc91db0ca3eee6e2e356a7786282/control%2Fautonomous_emergency_braking%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fautonomous_emergency_braking%2FCMakeLists.txt?ref=84830efb2386dc91db0ca3eee6e2e356a7786282",
            "patch": "@@ -4,6 +4,14 @@ project(autonomous_emergency_braking)\n find_package(autoware_cmake REQUIRED)\n autoware_package()\n \n+find_package(PCL REQUIRED)\n+\n+include_directories(\n+  include\n+  SYSTEM\n+  ${PCL_INCLUDE_DIRS}\n+)\n+\n set(AEB_NODE ${PROJECT_NAME}_node)\n ament_auto_add_library(${AEB_NODE} SHARED\n   src/node.cpp"
        }
    ],
    "autowarefoundation/autoware.universe/3110": [
        {
            "sha": "523f24171d66f677eaa7cadae895c211403331a8",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 3,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8775be4f3e8bf326b2fb62e99b1f8f55e47f4d7f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8775be4f3e8bf326b2fb62e99b1f8f55e47f4d7f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=8775be4f3e8bf326b2fb62e99b1f8f55e47f4d7f",
            "patch": "@@ -113,6 +113,9 @@ bool AvoidanceModule::isExecutionRequested() const\n     return true;\n   }\n \n+  // Check avoidance targets exist\n+  auto avoid_data = calcAvoidancePlanningData(debug_data_);\n+\n   // Check ego is in preferred lane\n #ifdef USE_OLD_ARCHITECTURE\n   const auto current_lanes = util::getCurrentLanes(planner_data_);\n@@ -124,10 +127,13 @@ bool AvoidanceModule::isExecutionRequested() const\n   if (num != 0) {\n     return false;\n   }\n-#endif\n+#else\n+  fillShiftLine(avoid_data, debug_data_);\n \n-  // Check avoidance targets exist\n-  const auto avoid_data = calcAvoidancePlanningData(debug_data_);\n+  if (avoid_data.unapproved_new_sl.empty()) {\n+    return false;\n+  }\n+#endif\n \n   if (parameters_->publish_debug_marker) {\n     setDebugData(avoid_data, path_shifter_, debug_data_);"
        }
    ],
    "autowarefoundation/autoware.universe/3122": [
        {
            "sha": "8342b0efad0ce1a148b27b2a6db1f0de6ae016aa",
            "filename": "sensing/pointcloud_preprocessor/src/crop_box_filter/crop_box_filter_nodelet.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/71cf3633edb0aa433e4240bdbfa5b8dcde430f74/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/71cf3633edb0aa433e4240bdbfa5b8dcde430f74/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp?ref=71cf3633edb0aa433e4240bdbfa5b8dcde430f74",
            "patch": "@@ -133,7 +133,7 @@ void CropBoxFilterComponent::faster_filter(\n       *reinterpret_cast<const float *>(&input->data[global_offset + z_offset]), 1);\n \n     if (transform_info.need_transform) {\n-      if (std::isfinite(point[0]) && std::isfinite(point[1]), std::isfinite(point[2])) {\n+      if (std::isfinite(point[0]) && std::isfinite(point[1]) && std::isfinite(point[2])) {\n         point = transform_info.eigen_transform * point;\n       } else {\n         // TODO(sykwer): Implement the appropriate logic for `max range point` and `invalid point`."
        }
    ],
    "autowarefoundation/autoware.universe/3123": [
        {
            "sha": "b8172f26e2e78be1ce9e1370d79d1645fd094fe1",
            "filename": "sensing/pointcloud_preprocessor/src/crop_box_filter/crop_box_filter_nodelet.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 7,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f6da8534ccf781c601760b6515d72500cf0989f2/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f6da8534ccf781c601760b6515d72500cf0989f2/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp?ref=f6da8534ccf781c601760b6515d72500cf0989f2",
            "patch": "@@ -132,14 +132,13 @@ void CropBoxFilterComponent::faster_filter(\n       *reinterpret_cast<const float *>(&input->data[global_offset + y_offset]),\n       *reinterpret_cast<const float *>(&input->data[global_offset + z_offset]), 1);\n \n+    if (!std::isfinite(point[0]) || !std::isfinite(point[1]) || !std::isfinite(point[2])) {\n+      RCLCPP_WARN(this->get_logger(), \"Ignoring point containing NaN values\");\n+      continue;\n+    }\n+\n     if (transform_info.need_transform) {\n-      if (std::isfinite(point[0]) && std::isfinite(point[1]) && std::isfinite(point[2])) {\n-        point = transform_info.eigen_transform * point;\n-      } else {\n-        // TODO(sykwer): Implement the appropriate logic for `max range point` and `invalid point`.\n-        // https://github.com/ros-perception/perception_pcl/blob/628aaec1dc73ef4adea01e9d28f11eb417b948fd/pcl_ros/src/transforms.cpp#L185-L201\n-        RCLCPP_ERROR(this->get_logger(), \"Not implemented logic\");\n-      }\n+      point = transform_info.eigen_transform * point;\n     }\n \n     bool point_is_inside = point[2] > param_.min_z && point[2] < param_.max_z &&"
        }
    ],
    "autowarefoundation/autoware.universe/3131": [
        {
            "sha": "5199641a9f23f24ae38c9aff463b9029614a04c3",
            "filename": "planning/static_centerline_optimizer/src/static_centerline_optimizer_node.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 2,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c6b9b8b1718b80d840c6539f1387593326b2f9fb/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c6b9b8b1718b80d840c6539f1387593326b2f9fb/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp?ref=c6b9b8b1718b80d840c6539f1387593326b2f9fb",
            "patch": "@@ -374,8 +374,14 @@ std::vector<TrajectoryPoint> StaticCenterlineOptimizerNode::plan_path(\n     utils::get_center_pose(*route_handler_ptr_, route_lane_ids.front());\n \n   // ego nearest search parameters\n-  const double ego_nearest_dist_threshold = declare_parameter<double>(\"ego_nearest_dist_threshold\");\n-  const double ego_nearest_yaw_threshold = declare_parameter<double>(\"ego_nearest_yaw_threshold\");\n+  const double ego_nearest_dist_threshold =\n+    has_parameter(\"ego_nearest_dist_threshold\")\n+      ? get_parameter(\"ego_nearest_dist_threshold\").as_double()\n+      : declare_parameter<double>(\"ego_nearest_dist_threshold\");\n+  const double ego_nearest_yaw_threshold =\n+    has_parameter(\"ego_nearest_yaw_threshold\")\n+      ? get_parameter(\"ego_nearest_yaw_threshold\").as_double()\n+      : declare_parameter<double>(\"ego_nearest_yaw_threshold\");\n \n   // extract path with lane id from lanelets\n   const auto raw_path_with_lane_id = utils::get_path_with_lane_id("
        }
    ],
    "autowarefoundation/autoware.universe/3132": [
        {
            "sha": "8f4e56c84164eaaf5aa8e55fc40057e9d6e5d429",
            "filename": "common/tier4_state_rviz_plugin/src/autoware_state_panel.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/37ff297cc7b9cf7ace3748ade30593d9d73348f4/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/37ff297cc7b9cf7ace3748ade30593d9d73348f4/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_state_rviz_plugin%2Fsrc%2Fautoware_state_panel.cpp?ref=37ff297cc7b9cf7ace3748ade30593d9d73348f4",
            "patch": "@@ -528,6 +528,9 @@ void AutowareStatePanel::onShift(\n     case autoware_auto_vehicle_msgs::msg::GearReport::DRIVE:\n       gear_label_ptr_->setText(\"DRIVE\");\n       break;\n+    case autoware_auto_vehicle_msgs::msg::GearReport::NEUTRAL:\n+      gear_label_ptr_->setText(\"NEUTRAL\");\n+      break;\n     case autoware_auto_vehicle_msgs::msg::GearReport::LOW:\n       gear_label_ptr_->setText(\"LOW\");\n       break;"
        }
    ],
    "autowarefoundation/autoware.universe/3155": [
        {
            "sha": "7190975e27c556525b58f61e3f6d73e8403b27f5",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fea016c5bc601249ca7bd41adc40e0301ea7e914/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fea016c5bc601249ca7bd41adc40e0301ea7e914/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=fea016c5bc601249ca7bd41adc40e0301ea7e914",
            "patch": "@@ -759,6 +759,7 @@ void AvoidanceModule::fillShiftLine(AvoidancePlanningData & data, DebugData & de\n     if (o.avoid_required && o.is_avoidable) {\n       data.avoid_required = true;\n       data.stop_target_object = o;\n+      break;\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3179": [
        {
            "sha": "76218a925c91d9a1967d474746dd8b76ebafb457",
            "filename": "planning/behavior_path_planner/src/utilities.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9a0db4286596271e8e113a10236de2aed1a5fa11/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9a0db4286596271e8e113a10236de2aed1a5fa11/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futilities.cpp?ref=9a0db4286596271e8e113a10236de2aed1a5fa11",
            "patch": "@@ -1979,7 +1979,7 @@ PathWithLaneId getCenterLinePath(\n     route_handler.getCenterLinePath(lanelet_sequence, s_backward, s_forward, true);\n   const auto resampled_path_with_lane_id = motion_utils::resamplePath(\n     raw_path_with_lane_id, parameter.input_path_interval, parameter.enable_akima_spline_first);\n-  return raw_path_with_lane_id;\n+  return resampled_path_with_lane_id;\n }\n \n // for lane following"
        }
    ],
    "autowarefoundation/autoware.universe/3186": [
        {
            "sha": "92ede8b3a9c052ffdea841adf3363664aea62619",
            "filename": "control/autonomous_emergency_braking/src/node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f28bd2abd912365a281a26ae032532409a2b65db/control%2Fautonomous_emergency_braking%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f28bd2abd912365a281a26ae032532409a2b65db/control%2Fautonomous_emergency_braking%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fautonomous_emergency_braking%2Fsrc%2Fnode.cpp?ref=f28bd2abd912365a281a26ae032532409a2b65db",
            "patch": "@@ -216,7 +216,7 @@ bool AEB::isDataReady()\n   }\n \n   if (use_imu_path_ && !imu_ptr_) {\n-    return missing(\"object pointcloud\");\n+    return missing(\"imu\");\n   }\n \n   if (use_predicted_trajectory_ && !predicted_traj_ptr_) {"
        }
    ],
    "autowarefoundation/autoware.universe/3187": [
        {
            "sha": "c97a1ceb5328f146708afef84e730a78df48f21d",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d9b2ffb3cf2259aeb8ae0974ba1945efeaef3901/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d9b2ffb3cf2259aeb8ae0974ba1945efeaef3901/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=d9b2ffb3cf2259aeb8ae0974ba1945efeaef3901",
            "patch": "@@ -221,7 +221,8 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n \n   /* calculate final stop lines */\n   std::optional<size_t> stop_line_idx =\n-    std::make_optional<size_t>(stop_lines_idx_opt.value().collision_stop_line);\n+    stop_lines_idx_opt ? std::make_optional<size_t>(stop_lines_idx_opt.value().collision_stop_line)\n+                       : std::nullopt;\n   if (external_go) {\n     is_entry_prohibited = false;\n   } else if (external_stop) {"
        }
    ],
    "autowarefoundation/autoware.universe/3188": [
        {
            "sha": "e28f5fce66edea98beb7d2cac33f0880dd069b67",
            "filename": "map/map_loader/test/test_pointcloud_map_loader_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/efbf18f2390ef639e969e3d0bedeceefd0a6ddd6/map%2Fmap_loader%2Ftest%2Ftest_pointcloud_map_loader_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/efbf18f2390ef639e969e3d0bedeceefd0a6ddd6/map%2Fmap_loader%2Ftest%2Ftest_pointcloud_map_loader_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2Ftest%2Ftest_pointcloud_map_loader_module.cpp?ref=efbf18f2390ef639e969e3d0bedeceefd0a6ddd6",
            "patch": "@@ -83,7 +83,7 @@ TEST_F(TestPointcloudMapLoaderModule, LoadPCDFilesNoDownsampleTest)\n \n   auto pointcloud_sub = node->create_subscription<sensor_msgs::msg::PointCloud2>(\n     \"pointcloud_map_no_downsample\", durable_qos,\n-    [pointcloud_received, pointcloud_msg](const sensor_msgs::msg::PointCloud2::SharedPtr msg) {\n+    [pointcloud_received, pointcloud_msg](const sensor_msgs::msg::PointCloud2::ConstSharedPtr msg) {\n       *pointcloud_received = true;\n       *pointcloud_msg = *msg;\n     });"
        }
    ],
    "autowarefoundation/autoware.universe/3193": [
        {
            "sha": "7eb43152d16368faec4a0086e645dc2194535aa4",
            "filename": "planning/obstacle_avoidance_planner/src/mpt_optimizer.cpp",
            "status": "modified",
            "additions": 19,
            "deletions": 9,
            "changes": 28,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f515d515479ddd9842bad46126811072a25eb233/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f515d515479ddd9842bad46126811072a25eb233/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp?ref=f515d515479ddd9842bad46126811072a25eb233",
            "patch": "@@ -171,9 +171,12 @@ double calcLateralDistToBounds(\n         tier4_autoware_utils::calcDistance2d(pose.position, *intersect_point) *\n         (is_point_left ? 1.0 : -1.0);\n \n-      closest_dist_to_bound =\n-        is_left_bound ? std::min(dist_to_bound - additional_offset, closest_dist_to_bound)\n-                      : std::max(dist_to_bound + additional_offset, closest_dist_to_bound);\n+      // the bound which is closest to the centerline will be chosen\n+      const double tmp_dist_to_bound =\n+        is_left_bound ? dist_to_bound - additional_offset : dist_to_bound + additional_offset;\n+      if (std::abs(tmp_dist_to_bound) < std::abs(closest_dist_to_bound)) {\n+        closest_dist_to_bound = tmp_dist_to_bound;\n+      }\n     }\n   }\n \n@@ -782,12 +785,19 @@ void MPTOptimizer::updateBounds(\n     mpt_param_.soft_clearance_from_road + vehicle_info_.vehicle_width_m / 2.0;\n \n   // calculate distance to left/right bound on each reference point\n-  for (auto & ref_point : ref_points) {\n-    const double dist_to_left_bound =\n-      calcLateralDistToBounds(ref_point.pose, left_bound, soft_road_clearance, true);\n-    const double dist_to_right_bound =\n-      calcLateralDistToBounds(ref_point.pose, right_bound, soft_road_clearance, false);\n-    ref_point.bounds = Bounds{dist_to_right_bound, dist_to_left_bound};\n+  // NOTE: Reference points is sometimes not fully covered by the drivable area.\n+  //       In some edge cases like U-turn, the wrong bound may be found. To avoid finding the wrong\n+  //       bound, some beginning bounds are copied from the following one.\n+  const size_t min_ref_point_index = std::min(\n+    static_cast<size_t>(std::ceil(1.0 / mpt_param_.delta_arc_length)), ref_points.size() - 1);\n+  for (size_t i = 0; i < ref_points.size(); ++i) {\n+    const auto ref_point_for_bound_search = ref_points.at(std::max(min_ref_point_index, i));\n+    const double dist_to_left_bound = calcLateralDistToBounds(\n+      ref_point_for_bound_search.pose, left_bound, soft_road_clearance, true);\n+    const double dist_to_right_bound = calcLateralDistToBounds(\n+      ref_point_for_bound_search.pose, right_bound, soft_road_clearance, false);\n+\n+    ref_points.at(i).bounds = Bounds{dist_to_right_bound, dist_to_left_bound};\n   }\n \n   // extend violated bounds, where the input path is outside the drivable area"
        }
    ],
    "autowarefoundation/autoware.universe/3195": [
        {
            "sha": "107a77393d5a24d65285a5012a0246ad088affcb",
            "filename": "common/motion_utils/src/resample/resample.cpp",
            "status": "modified",
            "additions": 68,
            "deletions": 7,
            "changes": 75,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bbc5288a9c8d26cd74dbf3f592a346514c8bb0e2/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bbc5288a9c8d26cd74dbf3f592a346514c8bb0e2/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp?ref=bbc5288a9c8d26cd74dbf3f592a346514c8bb0e2",
            "patch": "@@ -179,8 +179,38 @@ autoware_auto_planning_msgs::msg::PathWithLaneId resamplePath(\n   const std::vector<double> & resampled_arclength, const bool use_akima_spline_for_xy,\n   const bool use_lerp_for_z, const bool use_zero_order_hold_for_v)\n {\n+  auto resampling_arclength = resampled_arclength;\n+\n+  // Add resampling_arclength to insert input points which have multiple lane_ids\n+  for (size_t i = 0; i < input_path.points.size(); ++i) {\n+    if (input_path.points.at(i).lane_ids.size() < 2) {\n+      continue;\n+    }\n+\n+    const double distance_to_resampling_point = calcSignedArcLength(input_path.points, 0, i);\n+    for (size_t i = 1; i < resampling_arclength.size(); ++i) {\n+      if (\n+        resampling_arclength.at(i - 1) <= distance_to_resampling_point &&\n+        distance_to_resampling_point < resampling_arclength.at(i)) {\n+        const double dist_to_prev_point =\n+          std::fabs(distance_to_resampling_point - resampling_arclength.at(i - 1));\n+        const double dist_to_following_point =\n+          std::fabs(resampling_arclength.at(i) - distance_to_resampling_point);\n+        if (dist_to_prev_point < motion_utils::overlap_threshold) {\n+          resampling_arclength.at(i - 1) = distance_to_resampling_point;\n+        } else if (dist_to_following_point < motion_utils::overlap_threshold) {\n+          resampling_arclength.at(i) = distance_to_resampling_point;\n+        } else {\n+          resampling_arclength.insert(\n+            resampling_arclength.begin() + i, distance_to_resampling_point);\n+        }\n+        break;\n+      }\n+    }\n+  }\n+\n   // validate arguments\n-  if (!resample_utils::validate_arguments(input_path.points, resampled_arclength)) {\n+  if (!resample_utils::validate_arguments(input_path.points, resampling_arclength)) {\n     return input_path;\n   }\n \n@@ -233,33 +263,64 @@ autoware_auto_planning_msgs::msg::PathWithLaneId resamplePath(\n     lane_ids.push_back(input_path.points.at(i).lane_ids);\n   }\n \n-  if (input_arclength.back() < resampled_arclength.back()) {\n+  if (input_arclength.back() < resampling_arclength.back()) {\n     std::cerr << \"[motion_utils]: resampled path length is longer than input path length\"\n               << std::endl;\n     return input_path;\n   }\n \n   // Interpolate\n   const auto lerp = [&](const auto & input) {\n-    return interpolation::lerp(input_arclength, input, resampled_arclength);\n+    return interpolation::lerp(input_arclength, input, resampling_arclength);\n   };\n \n   auto closest_segment_indices =\n-    interpolation::calc_closest_segment_indices(input_arclength, resampled_arclength);\n+    interpolation::calc_closest_segment_indices(input_arclength, resampling_arclength);\n \n   const auto zoh = [&](const auto & input) {\n     return interpolation::zero_order_hold(input_arclength, input, closest_segment_indices);\n   };\n \n   const auto interpolated_pose =\n-    resamplePoseVector(input_pose, resampled_arclength, use_akima_spline_for_xy, use_lerp_for_z);\n+    resamplePoseVector(input_pose, resampling_arclength, use_akima_spline_for_xy, use_lerp_for_z);\n   const auto interpolated_v_lon = use_zero_order_hold_for_v ? zoh(v_lon) : lerp(v_lon);\n   const auto interpolated_v_lat = use_zero_order_hold_for_v ? zoh(v_lat) : lerp(v_lat);\n   const auto interpolated_heading_rate = lerp(heading_rate);\n   const auto interpolated_is_final = zoh(is_final);\n-  const auto interpolated_lane_ids = zoh(lane_ids);\n \n-  if (interpolated_pose.size() != resampled_arclength.size()) {\n+  // interpolate lane_ids\n+  std::vector<std::vector<int64_t>> interpolated_lane_ids;\n+  interpolated_lane_ids.resize(resampling_arclength.size());\n+  constexpr double epsilon = 1e-6;\n+  for (size_t i = 0; i < resampling_arclength.size(); ++i) {\n+    const size_t seg_idx = std::min(closest_segment_indices.at(i), input_path.points.size() - 2);\n+    const auto & prev_lane_ids = input_path.points.at(seg_idx).lane_ids;\n+    const auto & next_lane_ids = input_path.points.at(seg_idx + 1).lane_ids;\n+\n+    if (std::abs(input_arclength.at(seg_idx) - resampling_arclength.at(i)) <= epsilon) {\n+      interpolated_lane_ids.at(i).insert(\n+        interpolated_lane_ids.at(i).end(), prev_lane_ids.begin(), prev_lane_ids.end());\n+    } else if (std::abs(input_arclength.at(seg_idx + 1) - resampling_arclength.at(i)) <= epsilon) {\n+      interpolated_lane_ids.at(i).insert(\n+        interpolated_lane_ids.at(i).end(), next_lane_ids.begin(), next_lane_ids.end());\n+    } else {\n+      // extract lane_ids those prev_lane_ids and next_lane_ids have in common\n+      for (const auto target_lane_id : prev_lane_ids) {\n+        if (\n+          std::find(next_lane_ids.begin(), next_lane_ids.end(), target_lane_id) !=\n+          next_lane_ids.end()) {\n+          interpolated_lane_ids.at(i).push_back(target_lane_id);\n+        }\n+      }\n+      // If there are no common lane_ids, the prev_lane_ids is assigned.\n+      if (interpolated_lane_ids.at(i).empty()) {\n+        interpolated_lane_ids.at(i).insert(\n+          interpolated_lane_ids.at(i).end(), prev_lane_ids.begin(), prev_lane_ids.end());\n+      }\n+    }\n+  }\n+\n+  if (interpolated_pose.size() != resampling_arclength.size()) {\n     std::cerr << \"[motion_utils]: Resampled pose size is different from resampled arclength\"\n               << std::endl;\n     return input_path;"
        }
    ],
    "autowarefoundation/autoware.universe/3207": [
        {
            "sha": "9e3ea7ed3ab4d7c22e398888c743f258951edb0c",
            "filename": "common/tier4_screen_capture_rviz_plugin/src/screen_capture_panel.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b047b2d826175e12580226b5b1e5b946d607fdba/common%2Ftier4_screen_capture_rviz_plugin%2Fsrc%2Fscreen_capture_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b047b2d826175e12580226b5b1e5b946d607fdba/common%2Ftier4_screen_capture_rviz_plugin%2Fsrc%2Fscreen_capture_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_screen_capture_rviz_plugin%2Fsrc%2Fscreen_capture_panel.cpp?ref=b047b2d826175e12580226b5b1e5b946d607fdba",
            "patch": "@@ -28,7 +28,7 @@ void setFormatDate(QLabel * line, double time)\n   char buffer[128];\n   auto seconds = static_cast<time_t>(time);\n   strftime(buffer, sizeof(buffer), \"%Y-%m-%d-%H-%M-%S\", localtime(&seconds));\n-  line->setText(QString(\"- \") + QString(buffer) + QString(\".mp4\"));\n+  line->setText(QString(\"- \") + QString(buffer));\n }\n \n AutowareScreenCapturePanel::AutowareScreenCapturePanel(QWidget * parent)\n@@ -104,7 +104,8 @@ void AutowareScreenCapturePanel::onRateChanged() {}\n \n void AutowareScreenCapturePanel::onClickScreenCapture()\n {\n-  const std::string time_text = \"capture/\" + ros_time_label_->text().toStdString();\n+  const std::string time_text =\n+    \"capture/\" + file_name_prefix_->text().toStdString() + ros_time_label_->text().toStdString();\n   getDisplayContext()->getViewManager()->getRenderPanel()->getRenderWindow()->captureScreenShot(\n     time_text + \".png\");\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3210": [
        {
            "sha": "6e05947f17a320c5b9c724bdee0f2d404868d769",
            "filename": "launch/tier4_perception_launch/launch/object_recognition/detection/pointcloud_map_filter.launch.py",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4434ae1825ca1dfcacf4310ed7a25a2262615870/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fpointcloud_map_filter.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4434ae1825ca1dfcacf4310ed7a25a2262615870/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fpointcloud_map_filter.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fpointcloud_map_filter.launch.py?ref=4434ae1825ca1dfcacf4310ed7a25a2262615870",
            "patch": "@@ -60,6 +60,11 @@ def create_normal_pipeline(self):\n                 parameters=[\n                     {\n                         \"distance_threshold\": self.distance_threshold,\n+                        \"timer_interval_ms\": self.timer_interval_ms,\n+                        \"use_dynamic_map_loading\": self.use_dynamic_map_loading,\n+                        \"map_update_distance_threshold\": self.map_update_distance_threshold,\n+                        \"map_loader_radius\": self.map_loader_radius,\n+                        \"input_frame\": \"map\",\n                     }\n                 ],\n                 extra_arguments=["
        }
    ],
    "autowarefoundation/autoware.universe/3216": [
        {
            "sha": "b1a34230d3b0a068a53d082b494bc7ecf21ada0b",
            "filename": "perception/map_based_prediction/src/map_based_prediction_node.cpp",
            "status": "modified",
            "additions": 96,
            "deletions": 5,
            "changes": 101,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/992dd87d3038790855a0c6db7f00bcbae1d69960/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/992dd87d3038790855a0c6db7f00bcbae1d69960/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp?ref=992dd87d3038790855a0c6db7f00bcbae1d69960",
            "patch": "@@ -188,6 +188,25 @@ void updateLateralKinematicsVector(\n   }\n }\n \n+/**\n+ * @brief calc absolute normalized yaw difference between lanelet and object\n+ *\n+ * @param object\n+ * @param lanelet\n+ * @return double\n+ */\n+double calcAbsYawDiffBetweenLaneletAndObject(\n+  const TrackedObject & object, const lanelet::ConstLanelet & lanelet)\n+{\n+  const double object_yaw = tf2::getYaw(object.kinematics.pose_with_covariance.pose.orientation);\n+  const double lane_yaw =\n+    lanelet::utils::getLaneletAngle(lanelet, object.kinematics.pose_with_covariance.pose.position);\n+  const double delta_yaw = object_yaw - lane_yaw;\n+  const double normalized_delta_yaw = tier4_autoware_utils::normalizeRadian(delta_yaw);\n+  const double abs_norm_delta = std::fabs(normalized_delta_yaw);\n+  return abs_norm_delta;\n+}\n+\n lanelet::ConstLanelets getLanelets(const map_based_prediction::LaneletsData & data)\n {\n   lanelet::ConstLanelets lanelets;\n@@ -213,7 +232,9 @@ EntryPoint getCrosswalkEntryPoint(const lanelet::ConstLanelet & crosswalk)\n   return std::make_pair(front_entry_point, back_entry_point);\n }\n \n-bool withinLanelet(const TrackedObject & object, const lanelet::ConstLanelet & lanelet)\n+bool withinLanelet(\n+  const TrackedObject & object, const lanelet::ConstLanelet & lanelet,\n+  const bool use_yaw_information = false, const float yaw_threshold = 0.6)\n {\n   using Point = boost::geometry::model::d2::point_xy<double>;\n \n@@ -222,11 +243,24 @@ bool withinLanelet(const TrackedObject & object, const lanelet::ConstLanelet & l\n \n   auto polygon = lanelet.polygon2d().basicPolygon();\n   boost::geometry::correct(polygon);\n+  bool with_in_polygon = boost::geometry::within(p_object, polygon);\n \n-  return boost::geometry::within(p_object, polygon);\n+  if (!use_yaw_information) {\n+    return with_in_polygon;\n+  } else {\n+    // use yaw angle to compare\n+    const double abs_yaw_diff = calcAbsYawDiffBetweenLaneletAndObject(object, lanelet);\n+    if (abs_yaw_diff < yaw_threshold) {\n+      return with_in_polygon;\n+    } else {\n+      return false;\n+    }\n+  }\n }\n \n-bool withinRoadLanelet(const TrackedObject & object, const lanelet::LaneletMapPtr & lanelet_map_ptr)\n+bool withinRoadLanelet(\n+  const TrackedObject & object, const lanelet::LaneletMapPtr & lanelet_map_ptr,\n+  const bool use_yaw_information = false)\n {\n   using Point = boost::geometry::model::d2::point_xy<double>;\n \n@@ -249,7 +283,7 @@ bool withinRoadLanelet(const TrackedObject & object, const lanelet::LaneletMapPt\n       }\n     }\n \n-    if (withinLanelet(object, lanelet.second)) {\n+    if (withinLanelet(object, lanelet.second, use_yaw_information)) {\n       return true;\n     }\n   }\n@@ -387,6 +421,61 @@ bool hasPotentialToReach(\n   return false;\n }\n \n+/**\n+ * @brief change label for prediction\n+ *\n+ * @param label\n+ * @return ObjectClassification::_label_type\n+ */\n+ObjectClassification::_label_type changeLabelForPrediction(\n+  const ObjectClassification::_label_type & label, const TrackedObject & object,\n+  const lanelet::LaneletMapPtr & lanelet_map_ptr_)\n+{\n+  // for car like vehicle do not change labels\n+  if (\n+    label == ObjectClassification::CAR || label == ObjectClassification::BUS ||\n+    label == ObjectClassification::TRUCK || label == ObjectClassification::TRAILER ||\n+    label == ObjectClassification::UNKNOWN) {\n+    return label;\n+  } else if (  // for bicycle and motorcycle\n+    label == ObjectClassification::MOTORCYCLE || label == ObjectClassification::BICYCLE) {\n+    // if object is within road lanelet and satisfies yaw constraints\n+    const bool within_road_lanelet = withinRoadLanelet(object, lanelet_map_ptr_, true);\n+    const float high_speed_threshold = 25.0 / 18.0 * 5.0;  // High speed bycicle 25 km/h\n+    const bool high_speed_object =\n+      object.kinematics.twist_with_covariance.twist.linear.x > high_speed_threshold;\n+\n+    // if the object is within lanelet, do the same estimation with vehicle\n+    if (within_road_lanelet) {\n+      return ObjectClassification::MOTORCYCLE;\n+    } else if (high_speed_object) {\n+      // high speed object outside road lanelet will move like unknown object\n+      return ObjectClassification::UNKNOWN;\n+    } else {\n+      return label == ObjectClassification::BICYCLE;\n+    }\n+  } else if (label == ObjectClassification::PEDESTRIAN) {\n+    const bool within_road_lanelet = withinRoadLanelet(object, lanelet_map_ptr_, true);\n+    const float max_velocity_for_human_mps =\n+      25.0 / 18.0 * 5.0;  // Max human being motion speed is 25km/h\n+    const bool high_speed_object =\n+      object.kinematics.twist_with_covariance.twist.linear.x > max_velocity_for_human_mps;\n+    // fast, human-like object: like segway\n+    if (within_road_lanelet && high_speed_object) {\n+      return label;  // currently do nothing\n+      // return ObjectClassification::MOTORCYCLE;\n+    } else if (high_speed_object) {\n+      return label;  // currently do nothing\n+      // fast human outside road lanelet will move like unknown object\n+      // return ObjectClassification::UNKNOWN;\n+    } else {\n+      return label;\n+    }\n+  } else {\n+    return label;\n+  }\n+}\n+\n MapBasedPredictionNode::MapBasedPredictionNode(const rclcpp::NodeOptions & node_options)\n : Node(\"map_based_prediction\", node_options), debug_accumulated_time_(0.0)\n {\n@@ -514,7 +603,9 @@ void MapBasedPredictionNode::objectsCallback(const TrackedObjects::ConstSharedPt\n       transformed_object.kinematics.pose_with_covariance.pose = pose_in_map.pose;\n     }\n \n-    const auto & label = transformed_object.classification.front().label;\n+    // get tracking label and update it for the prediction\n+    const auto & label_ = transformed_object.classification.front().label;\n+    const auto label = changeLabelForPrediction(label_, object, lanelet_map_ptr_);\n \n     // For crosswalk user\n     if (label == ObjectClassification::PEDESTRIAN || label == ObjectClassification::BICYCLE) {"
        }
    ],
    "autowarefoundation/autoware.universe/3232": [
        {
            "sha": "6349d724c635c06e52cc298d41acd7b047fccf67",
            "filename": "common/motion_utils/src/distance/distance.cpp",
            "status": "modified",
            "additions": 0,
            "deletions": 4,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/19ebe5af8601a8d5009641f38a38654a12b9fa2f/common%2Fmotion_utils%2Fsrc%2Fdistance%2Fdistance.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/19ebe5af8601a8d5009641f38a38654a12b9fa2f/common%2Fmotion_utils%2Fsrc%2Fdistance%2Fdistance.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fmotion_utils%2Fsrc%2Fdistance%2Fdistance.cpp?ref=19ebe5af8601a8d5009641f38a38654a12b9fa2f",
            "patch": "@@ -28,13 +28,9 @@ bool validCheckDecelPlan(\n   const double a_max = a_target + std::abs(a_margin);\n \n   if (v_end < v_min || v_max < v_end) {\n-    std::cerr << \"[validCheckDecelPlan] valid check error! v_target = \" << v_target\n-              << \", v_end = \" << v_end << std::endl;\n     return false;\n   }\n   if (a_end < a_min || a_max < a_end) {\n-    std::cerr << \"[validCheckDecelPlan] valid check error! a_target = \" << a_target\n-              << \", a_end = \" << a_end << std::endl;\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3235": [
        {
            "sha": "c658b29ccd30ba23ba3ab5400556eb53e2792b1a",
            "filename": "launch/tier4_control_launch/launch/control.launch.py",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7b4140d861074e18703d99990a41e9579192ce44/launch%2Ftier4_control_launch%2Flaunch%2Fcontrol.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7b4140d861074e18703d99990a41e9579192ce44/launch%2Ftier4_control_launch%2Flaunch%2Fcontrol.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_control_launch%2Flaunch%2Fcontrol.launch.py?ref=7b4140d861074e18703d99990a41e9579192ce44",
            "patch": "@@ -82,6 +82,7 @@ def launch_setup(context, *args, **kwargs):\n         parameters=[\n             {\n                 \"lateral_controller_mode\": LaunchConfiguration(\"lateral_controller_mode\"),\n+                \"longitudinal_controller_mode\": LaunchConfiguration(\"longitudinal_controller_mode\"),\n             },\n             nearest_search_param,\n             trajectory_follower_node_param,"
        }
    ],
    "autowarefoundation/autoware.universe/3243": [
        {
            "sha": "b63a29c5b37518694e2f64cf94c75f799aefa623",
            "filename": "sensing/pointcloud_preprocessor/src/crop_box_filter/crop_box_filter_nodelet.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1ed70d4c6de4ec53bbeb8f73d07516c8be8caafe/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1ed70d4c6de4ec53bbeb8f73d07516c8be8caafe/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fcrop_box_filter%2Fcrop_box_filter_nodelet.cpp?ref=1ed70d4c6de4ec53bbeb8f73d07516c8be8caafe",
            "patch": "@@ -79,7 +79,7 @@ CropBoxFilterComponent::CropBoxFilterComponent(const rclcpp::NodeOptions & optio\n     p.max_x = static_cast<float>(declare_parameter(\"max_x\", 1.0));\n     p.max_y = static_cast<float>(declare_parameter(\"max_y\", 1.0));\n     p.max_z = static_cast<float>(declare_parameter(\"max_z\", 1.0));\n-    p.negative = static_cast<float>(declare_parameter(\"negative\", false));\n+    p.negative = static_cast<bool>(declare_parameter(\"negative\", false));\n     if (tf_input_frame_.empty()) {\n       throw std::invalid_argument(\"Crop box requires non-empty input_frame\");\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/3247": [
        {
            "sha": "cf046e7feba75426fb157dae65c3b555b780493b",
            "filename": "planning/behavior_path_planner/src/util/lane_change/util.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 3,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e20a5232717f04e06c6164c2e8e089adfce44c49/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e20a5232717f04e06c6164c2e8e089adfce44c49/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp?ref=e20a5232717f04e06c6164c2e8e089adfce44c49",
            "patch": "@@ -337,10 +337,13 @@ std::pair<bool, bool> getLaneChangePaths(\n   LaneChangeTargetObjectIndices dynamic_object_indices;\n \n   candidate_paths->reserve(lane_change_sampling_num);\n-  for (double acceleration = 0.0; acceleration >= maximum_deceleration;\n-       acceleration -= acceleration_resolution) {\n+  for (double sampled_acc = 0.0; sampled_acc >= maximum_deceleration;\n+       sampled_acc -= acceleration_resolution) {\n     const auto prepare_speed =\n-      std::max(current_velocity + acceleration * prepare_duration, minimum_lane_change_velocity);\n+      std::max(current_velocity + sampled_acc * prepare_duration, minimum_lane_change_velocity);\n+\n+    // compute actual acceleration\n+    const double acceleration = (prepare_speed - current_velocity) / prepare_duration;\n \n     // get path on original lanes\n     const double prepare_distance = std::max("
        }
    ],
    "autowarefoundation/autoware.universe/3248": [
        {
            "sha": "c3864b7d2957cd06202818c519c27678ddf46fc4",
            "filename": "control/autonomous_emergency_braking/src/node.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 23,
            "changes": 28,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5641f38f970cc441b5b62f2faa5bbdc4028775c6/control%2Fautonomous_emergency_braking%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5641f38f970cc441b5b62f2faa5bbdc4028775c6/control%2Fautonomous_emergency_braking%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fautonomous_emergency_braking%2Fsrc%2Fnode.cpp?ref=5641f38f970cc441b5b62f2faa5bbdc4028775c6",
            "patch": "@@ -451,31 +451,18 @@ void AEB::addMarker(\n   const double color_r, const double color_g, const double color_b, const double color_a,\n   const std::string & path_ns, const std::string & poly_ns, MarkerArray & debug_markers)\n {\n-  // transform to map\n-  geometry_msgs::msg::TransformStamped transform_stamped{};\n-  try {\n-    transform_stamped = tf_buffer_.lookupTransform(\n-      \"map\", \"base_link\", current_time, rclcpp::Duration::from_seconds(0.5));\n-  } catch (tf2::TransformException & ex) {\n-    RCLCPP_ERROR_STREAM(get_logger(), \"[AEB] Failed to look up transform from base_link to map\");\n-    return;\n-  }\n-\n   auto path_marker = tier4_autoware_utils::createDefaultMarker(\n-    \"map\", current_time, path_ns, 0L, Marker::LINE_STRIP,\n+    \"base_link\", current_time, path_ns, 0L, Marker::LINE_STRIP,\n     tier4_autoware_utils::createMarkerScale(0.2, 0.2, 0.2),\n     tier4_autoware_utils::createMarkerColor(color_r, color_g, color_b, color_a));\n   path_marker.points.resize(path.size());\n   for (size_t i = 0; i < path.size(); ++i) {\n-    const auto & pose = path.at(i);\n-    geometry_msgs::msg::Pose map_pose;\n-    tf2::doTransform(pose, map_pose, transform_stamped);\n-    path_marker.points.at(i) = map_pose.position;\n+    path_marker.points.at(i) = path.at(i).position;\n   }\n   debug_markers.markers.push_back(path_marker);\n \n   auto polygon_marker = tier4_autoware_utils::createDefaultMarker(\n-    \"map\", current_time, poly_ns, 0, Marker::LINE_LIST,\n+    \"base_link\", current_time, poly_ns, 0, Marker::LINE_LIST,\n     tier4_autoware_utils::createMarkerScale(0.03, 0.0, 0.0),\n     tier4_autoware_utils::createMarkerColor(color_r, color_g, color_b, color_a));\n   for (const auto & poly : polygons) {\n@@ -484,13 +471,8 @@ void AEB::addMarker(\n       const auto & boost_np = poly.outer().at((dp_idx + 1) % poly.outer().size());\n       const auto curr_point = tier4_autoware_utils::createPoint(boost_cp.x(), boost_cp.y(), 0.0);\n       const auto next_point = tier4_autoware_utils::createPoint(boost_np.x(), boost_np.y(), 0.0);\n-\n-      geometry_msgs::msg::Point map_curr_point;\n-      geometry_msgs::msg::Point map_next_point;\n-      tf2::doTransform(curr_point, map_curr_point, transform_stamped);\n-      tf2::doTransform(next_point, map_next_point, transform_stamped);\n-      polygon_marker.points.push_back(map_curr_point);\n-      polygon_marker.points.push_back(map_next_point);\n+      polygon_marker.points.push_back(curr_point);\n+      polygon_marker.points.push_back(next_point);\n     }\n   }\n   debug_markers.markers.push_back(polygon_marker);"
        }
    ],
    "autowarefoundation/autoware.universe/3250": [
        {
            "sha": "18a1710532e0ce6f5b750d51c2dead462c746ed4",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0dc64dbb6e3817cda13bf90eafad9ae1f2388a2c/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0dc64dbb6e3817cda13bf90eafad9ae1f2388a2c/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=0dc64dbb6e3817cda13bf90eafad9ae1f2388a2c",
            "patch": "@@ -449,6 +449,10 @@ lanelet::ConstLanelets RouteHandler::getLaneletSequenceAfter(\n     if (!getNextLaneletWithinRoute(current_lanelet, &next_lanelet)) {\n       break;\n     }\n+    // loop check\n+    if (lanelet.id() == next_lanelet.id()) {\n+      break;\n+    }\n     lanelet_sequence_forward.push_back(next_lanelet);\n     current_lanelet = next_lanelet;\n     length +=\n@@ -473,6 +477,12 @@ lanelet::ConstLanelets RouteHandler::getLaneletSequenceUpTo(\n     if (!getPreviousLaneletsWithinRoute(current_lanelet, &candidate_lanelets)) {\n       break;\n     }\n+    // loop check\n+    if (std::any_of(\n+          candidate_lanelets.begin(), candidate_lanelets.end(),\n+          [lanelet](auto & prev_llt) { return lanelet.id() == prev_llt.id(); })) {\n+      break;\n+    }\n \n     // If lanelet_sequence_backward with input lanelet contains all candidate lanelets,\n     // break the loop."
        }
    ],
    "autowarefoundation/autoware.universe/3251": [
        {
            "sha": "ccb385ff80ca1904c7521a510ac7fc8df1d5fbc2",
            "filename": "launch/tier4_perception_launch/launch/object_recognition/detection/pointcloud_map_filter.launch.py",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7dd5504ad13ebff36124b291b0cef0f8c2bc2548/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fpointcloud_map_filter.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7dd5504ad13ebff36124b291b0cef0f8c2bc2548/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fpointcloud_map_filter.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fpointcloud_map_filter.launch.py?ref=7dd5504ad13ebff36124b291b0cef0f8c2bc2548",
            "patch": "@@ -117,10 +117,17 @@ def create_down_sample_pipeline(self):\n                     (\"input\", down_sample_topic),\n                     (\"map\", \"/map/pointcloud_map\"),\n                     (\"output\", LaunchConfiguration(\"output_topic\")),\n+                    (\"map_loader_service\", \"/map/get_differential_pointcloud_map\"),\n+                    (\"pose_with_covariance\", \"/localization/pose_estimator/pose_with_covariance\"),\n                 ],\n                 parameters=[\n                     {\n                         \"distance_threshold\": self.distance_threshold,\n+                        \"timer_interval_ms\": self.timer_interval_ms,\n+                        \"use_dynamic_map_loading\": self.use_dynamic_map_loading,\n+                        \"map_update_distance_threshold\": self.map_update_distance_threshold,\n+                        \"map_loader_radius\": self.map_loader_radius,\n+                        \"input_frame\": \"map\",\n                     }\n                 ],\n                 extra_arguments=["
        }
    ],
    "autowarefoundation/autoware.universe/3252": [
        {
            "sha": "c72e162e11f6785f26949369dd74cec987d03a48",
            "filename": "localization/ndt_scan_matcher/src/ndt_scan_matcher_core.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/877d5577f835490928602bf0449ea5e433605c08/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/877d5577f835490928602bf0449ea5e433605c08/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp?ref=877d5577f835490928602bf0449ea5e433605c08",
            "patch": "@@ -313,8 +313,8 @@ void NDTScanMatcher::callback_initial_pose(\n     // transform pose_frame to map_frame\n     auto mapTF_initial_pose_msg_ptr =\n       std::make_shared<geometry_msgs::msg::PoseWithCovarianceStamped>();\n-    // mapTF_initial_pose_msg_ptr->header.stamp = initial_pose_msg_ptr->header.stamp;\n     *mapTF_initial_pose_msg_ptr = transform(*initial_pose_msg_ptr, *TF_pose_to_map_ptr);\n+    mapTF_initial_pose_msg_ptr->header.stamp = initial_pose_msg_ptr->header.stamp;\n     initial_pose_msg_ptr_array_.push_back(mapTF_initial_pose_msg_ptr);\n   }\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3257": [
        {
            "sha": "34a2478ba83bbc750a428f374858c37da78fb71f",
            "filename": "planning/behavior_path_planner/src/util/lane_change/util.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4883c9f94daf7a3e5d3e40cff7d7078040863383/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4883c9f94daf7a3e5d3e40cff7d7078040863383/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp?ref=4883c9f94daf7a3e5d3e40cff7d7078040863383",
            "patch": "@@ -371,6 +371,15 @@ std::pair<bool, bool> getLaneChangePaths(\n     // lane changing start pose is at the end of prepare segment\n     const auto & lane_changing_start_pose = prepare_segment.points.back().point.pose;\n \n+    const auto target_distance_from_lane_change_start_pose = util::getArcLengthToTargetLanelet(\n+      original_lanelets, target_lanelets.front(), lane_changing_start_pose);\n+    // In new architecture, there is a possibility that the lane change start pose is behind of the\n+    // target lanelet, even if the condition prepare_distance > target_distance is satisfied. In\n+    // that case, the lane change shouldn't be executed.\n+    if (target_distance_from_lane_change_start_pose > 0.0) {\n+      break;\n+    }\n+\n     const auto shift_length =\n       lanelet::utils::getLateralDistanceToClosestLanelet(target_lanelets, lane_changing_start_pose);\n "
        }
    ],
    "autowarefoundation/autoware.universe/3260": [
        {
            "sha": "16050cf5eba9bf2fbe062c359440f205170c9af5",
            "filename": "planning/behavior_path_planner/src/util/geometric_parallel_parking/geometric_parallel_parking.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b7f43429b1347f29e308f8d69b12330a8aa97476/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Fgeometric_parallel_parking%2Fgeometric_parallel_parking.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b7f43429b1347f29e308f8d69b12330a8aa97476/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Fgeometric_parallel_parking%2Fgeometric_parallel_parking.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Fgeometric_parallel_parking%2Fgeometric_parallel_parking.cpp?ref=b7f43429b1347f29e308f8d69b12330a8aa97476",
            "patch": "@@ -298,7 +298,7 @@ bool GeometricParallelParking::planPullOut(\n       paths.back().points.end(),\n       road_center_line_path.points.begin() + 1,  // to avoid overlapped point\n       road_center_line_path.points.end());\n-    removeOverlappingPoints(paths.back());\n+    paths.back() = removeOverlappingPoints(paths.back());\n \n     // if the end point is the goal, set the velocity to 0\n     if (!goal_is_behind) {"
        }
    ],
    "autowarefoundation/autoware.universe/3261": [
        {
            "sha": "c2df606fbaf4111135c945f9829afa51bfed17d9",
            "filename": "planning/static_centerline_optimizer/rviz/static_centerline_optimizer.rviz",
            "status": "modified",
            "additions": 54,
            "deletions": 41,
            "changes": 95,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ae83cc96a91985a234c7a205174d5ff014def58e/planning%2Fstatic_centerline_optimizer%2Frviz%2Fstatic_centerline_optimizer.rviz",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ae83cc96a91985a234c7a205174d5ff014def58e/planning%2Fstatic_centerline_optimizer%2Frviz%2Fstatic_centerline_optimizer.rviz",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fstatic_centerline_optimizer%2Frviz%2Fstatic_centerline_optimizer.rviz?ref=ae83cc96a91985a234c7a205174d5ff014def58e",
            "patch": "@@ -3,10 +3,7 @@ Panels:\n     Help Height: 0\n     Name: Displays\n     Property Tree Widget:\n-      Expanded:\n-        - /Raw Centerline1/Topic1\n-        - /DrivableArea1/Topic1\n-        - /Optimized Centerline1/View Footprint1\n+      Expanded: ~\n       Splitter Ratio: 0.550000011920929\n     Tree Height: 386\n   - Class: rviz_common/Selection\n@@ -111,21 +108,11 @@ Visualization Manager:\n           Namespaces:\n             center_lane_line: true\n             center_line_arrows: true\n-            crosswalk_lanelets: true\n             lane_start_bound: false\n-            lanelet direction: true\n             lanelet_id: false\n             left_lane_bound: true\n-            parking_lots: true\n-            parking_space: true\n-            pedestrian_marking: true\n             right_lane_bound: true\n             road_lanelets: false\n-            stop_lines: true\n-            traffic_light: true\n-            traffic_light_id: false\n-            traffic_light_triangle: true\n-            walkway_lanelets: true\n           Topic:\n             Depth: 5\n             Durability Policy: Transient Local\n@@ -135,7 +122,8 @@ Visualization Manager:\n           Value: true\n       Enabled: true\n       Name: Map\n-    - Class: rviz_plugins/PathWithLaneIdFootprint\n+    - Class: rviz_plugins/PathWithLaneId\n+      Color Border Vel Max: 3\n       Enabled: true\n       Name: Raw Centerline\n       Topic:\n@@ -146,6 +134,11 @@ Visualization Manager:\n         Reliability Policy: Reliable\n         Value: /static_centerline_optimizer/input_centerline\n       Value: true\n+      View Drivable Area:\n+        Alpha: 0.9990000128746033\n+        Color: 0; 148; 205\n+        Value: true\n+        Width: 0.30000001192092896\n       View Footprint:\n         Alpha: 1\n         Color: 230; 230; 50\n@@ -156,36 +149,19 @@ Visualization Manager:\n         Vehicle Width: 1.8300000429153442\n       View LaneId:\n         Scale: 0.10000000149011612\n-        Value: true\n-      View Point:\n-        Alpha: 1\n-        Color: 0; 60; 255\n-        Offset: 0\n-        Radius: 0.10000000149011612\n         Value: false\n-    - Class: rviz_plugins/PathWithLaneId\n-      Color Border Vel Max: 3\n-      Enabled: true\n-      Name: DrivableArea\n-      Topic:\n-        Depth: 5\n-        Durability Policy: Transient Local\n-        Filter size: 10\n-        History Policy: Keep Last\n-        Reliability Policy: Reliable\n-        Value: /static_centerline_optimizer/input_centerline\n-      Value: true\n-      View Drivable Area:\n-        Alpha: 0.9990000128746033\n-        Color: 0; 148; 205\n-        Value: true\n-        Width: 0.30000001192092896\n       View Path:\n         Alpha: 1\n         Color: 0; 0; 0\n         Constant Color: false\n         Value: false\n         Width: 2\n+      View Point:\n+        Alpha: 1\n+        Color: 0; 60; 255\n+        Offset: 0\n+        Radius: 0.10000000149011612\n+        Value: false\n       View Text Velocity:\n         Scale: 0.30000001192092896\n         Value: false\n@@ -195,7 +171,8 @@ Visualization Manager:\n         Constant Color: false\n         Scale: 0.30000001192092896\n         Value: false\n-    - Class: rviz_plugins/TrajectoryFootprint\n+    - Class: rviz_plugins/Trajectory\n+      Color Border Vel Max: 3\n       Enabled: true\n       Name: Optimized Centerline\n       Topic:\n@@ -214,15 +191,31 @@ Visualization Manager:\n         Value: true\n         Vehicle Length: 4.769999980926514\n         Vehicle Width: 1.8300000429153442\n+      View Path:\n+        Alpha: 1\n+        Color: 0; 0; 0\n+        Constant Color: false\n+        Value: false\n+        Width: 2\n       View Point:\n         Alpha: 1\n         Color: 0; 60; 255\n         Offset: 0\n         Radius: 0.10000000149011612\n         Value: false\n+      View Text Velocity:\n+        Scale: 0.30000001192092896\n+        Value: false\n+      View Velocity:\n+        Alpha: 1\n+        Color: 0; 0; 0\n+        Constant Color: false\n+        Scale: 0.30000001192092896\n+        Value: false\n     - Class: rviz_common/Group\n       Displays:\n-        - Class: rviz_plugins/PathFootprint\n+        - Class: rviz_plugins/Path\n+          Color Border Vel Max: 3\n           Enabled: false\n           Name: Raw Centerline (Path type)\n           Topic:\n@@ -233,6 +226,11 @@ Visualization Manager:\n             Reliability Policy: Reliable\n             Value: /static_centerline_optimizer/debug/raw_centerline\n           Value: false\n+          View Drivable Area:\n+            Alpha: 0.9990000128746033\n+            Color: 0; 148; 205\n+            Value: true\n+            Width: 0.30000001192092896\n           View Footprint:\n             Alpha: 1\n             Color: 230; 230; 50\n@@ -241,12 +239,27 @@ Visualization Manager:\n             Value: true\n             Vehicle Length: 4.769999980926514\n             Vehicle Width: 1.8300000429153442\n+          View Path:\n+            Alpha: 1\n+            Color: 0; 0; 0\n+            Constant Color: false\n+            Value: true\n+            Width: 2\n           View Point:\n             Alpha: 1\n             Color: 0; 60; 255\n             Offset: 0\n             Radius: 0.10000000149011612\n             Value: false\n+          View Text Velocity:\n+            Scale: 0.30000001192092896\n+            Value: false\n+          View Velocity:\n+            Alpha: 1\n+            Color: 0; 0; 0\n+            Constant Color: false\n+            Scale: 0.30000001192092896\n+            Value: true\n         - Class: rviz_default_plugins/MarkerArray\n           Enabled: true\n           Name: MarkerArray\n@@ -412,7 +425,7 @@ Window Geometry:\n   Hide Right Dock: false\n   InitialPoseButtonPanel:\n     collapsed: false\n-  QMainWindow State: 000000ff00000000fd00000004000000000000019200000357fc020000000efb0000001200530065006c0065006300740069006f006e00000001e10000009b0000005c00fffffffb000000120056006900650077007300200054006f006f02000001df000002110000018500000122fb000000200054006f006f006c002000500072006f0070006500720074006900650073003203000002880000011d000002210000017afb000000100044006900730070006c006100790073010000003e000001c0000000ca00fffffffc0000020400000191000000c40100001dfa000000000100000002fb0000000a0056006900650077007301000000000000033c0000010000fffffffb0000001e0054006f006f006c002000500072006f00700065007200740069006500730100000000ffffffff0000008a00fffffffb0000002000730065006c0065006300740069006f006e00200062007500660066006500720200000138000000aa0000023a00000294fb00000014005700690064006500530074006500720065006f02000000e6000000d2000003ee0000030bfb0000000c004b0069006e0065006300740200000186000001060000030c00000261fb0000000c00430061006d0065007200610100000682000000eb0000000000000000fb0000000a0049006d0061006700650100000505000002680000000000000000fb0000002c0049006e0069007400690061006c0050006f007300650042007500740074006f006e00500061006e0065006c000000068f000000de0000007a00fffffffb0000002c0049006e0069007400690061006c0050006f007300650042007500740074006f006e00500061006e0065006c000000068f000000de0000000000000000fb00000030005200650063006f0067006e006900740069006f006e0052006500730075006c0074004f006e0049006d00610067006500000001d3000000af0000000000000000fb00000024004100750074006f00770061007200650053007400610074006500500061006e0065006c000000029b000000fb0000026e00ffffff000000010000015f000006fffc0200000002fb0000001e0054006f006f006c002000500072006f00700065007200740069006500730100000041000000780000000000000000fb0000001200530065006c0065006300740069006f006e010000025a000000b200000000000000000000000200000e7a0000005afc0100000001fb0000000a00560069006500770073030000004e00000080000002e10000019700000003000007800000005afc0100000002fb0000000800540069006d00650100000000000007800000027100fffffffb0000000800540069006d00650100000000000004500000000000000000000005e80000035700000004000000040000000800000008fc0000000100000002000000010000000a0054006f006f006c00730100000000ffffffff0000000000000000\n+  QMainWindow State: 000000ff00000000fd00000004000000000000019200000357fc020000000efb0000001200530065006c0065006300740069006f006e00000001e10000009b0000005c00fffffffb000000120056006900650077007300200054006f006f02000001df000002110000018500000122fb000000200054006f006f006c002000500072006f0070006500720074006900650073003203000002880000011d000002210000017afb000000100044006900730070006c006100790073010000003e000001c0000000ca00fffffffc0000020400000191000000c40100001dfa000000000100000002fb0000000a0056006900650077007301000000000000033c0000010000fffffffb0000001e0054006f006f006c002000500072006f00700065007200740069006500730100000000ffffffff0000008a00fffffffb0000002000730065006c0065006300740069006f006e00200062007500660066006500720200000138000000aa0000023a00000294fb00000014005700690064006500530074006500720065006f02000000e6000000d2000003ee0000030bfb0000000c004b0069006e0065006300740200000186000001060000030c00000261fb0000000c00430061006d0065007200610100000682000000eb0000000000000000fb0000000a0049006d0061006700650100000505000002680000000000000000fb0000002c0049006e0069007400690061006c0050006f007300650042007500740074006f006e00500061006e0065006c000000068f000000de0000007a00fffffffb0000002c0049006e0069007400690061006c0050006f007300650042007500740074006f006e00500061006e0065006c000000068f000000de0000000000000000fb00000030005200650063006f0067006e006900740069006f006e0052006500730075006c0074004f006e0049006d00610067006500000001d3000000af0000000000000000fb00000024004100750074006f00770061007200650053007400610074006500500061006e0065006c000000029b000000fb0000017c00ffffff000000010000015f000006fffc0200000002fb0000001e0054006f006f006c002000500072006f00700065007200740069006500730100000041000000780000000000000000fb0000001200530065006c0065006300740069006f006e010000025a000000b200000000000000000000000200000e7a0000005afc0100000001fb0000000a00560069006500770073030000004e00000080000002e10000019700000003000007800000005afc0100000002fb0000000800540069006d00650100000000000007800000027100fffffffb0000000800540069006d00650100000000000004500000000000000000000005e80000035700000004000000040000000800000008fc0000000100000002000000010000000a0054006f006f006c00730100000000ffffffff0000000000000000\n   Selection:\n     collapsed: false\n   Time:"
        }
    ],
    "autowarefoundation/autoware.universe/3270": [
        {
            "sha": "5631022fd5c0bca347257eb61ec56c205bc722e0",
            "filename": "planning/behavior_path_planner/src/util/pull_over/goal_searcher.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/80478ff3e795ec025588b573418f30ce557fed1e/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Fpull_over%2Fgoal_searcher.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/80478ff3e795ec025588b573418f30ce557fed1e/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Fpull_over%2Fgoal_searcher.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Fpull_over%2Fgoal_searcher.cpp?ref=80478ff3e795ec025588b573418f30ce557fed1e",
            "patch": "@@ -84,6 +84,9 @@ GoalCandidates GoalSearcher::search(const Pose & original_goal_pose)\n \n     const double offset_from_center_line = distance_from_left_bound.value() + margin_from_boundary;\n     const Pose original_search_pose = calcOffsetPose(center_pose, 0, -offset_from_center_line, 0);\n+    const double longitudinal_distance_from_original_goal =\n+      std::abs(motion_utils::calcSignedArcLength(\n+        center_line_path.points, original_goal_pose.position, original_search_pose.position));\n     original_search_poses.push_back(original_search_pose);  // for createAreaPolygon\n     Pose search_pose{};\n     // search goal_pose in lateral direction\n@@ -109,8 +112,7 @@ GoalCandidates GoalSearcher::search(const Pose & original_goal_pose)\n       goal_candidate.id = goal_id;\n       goal_id++;\n       // use longitudinal_distance as distance_from_original_goal\n-      goal_candidate.distance_from_original_goal = std::abs(motion_utils::calcSignedArcLength(\n-        center_line_path.points, original_goal_pose.position, search_pose.position));\n+      goal_candidate.distance_from_original_goal = longitudinal_distance_from_original_goal;\n       goal_candidates.push_back(goal_candidate);\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3275": [
        {
            "sha": "de6ac222246c92102b89536cb494bd1d1cf59fac",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 20,
            "deletions": 3,
            "changes": 23,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/98bef9aeca1f9bd8737d072e6d454547da4093db/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/98bef9aeca1f9bd8737d072e6d454547da4093db/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=98bef9aeca1f9bd8737d072e6d454547da4093db",
            "patch": "@@ -3272,6 +3272,8 @@ void AvoidanceModule::addNewShiftLines(\n   }\n \n   const auto current_shift_lines = path_shifter.getShiftLines();\n+  const auto new_shift_length = new_shift_lines.front().end_shift_length;\n+  const auto new_shift_end_idx = new_shift_lines.front().end_idx;\n \n   DEBUG_PRINT(\"min_start_idx = %lu\", min_start_idx);\n \n@@ -3288,10 +3290,25 @@ void AvoidanceModule::addNewShiftLines(\n     if (sl.start_idx >= min_start_idx) {\n       DEBUG_PRINT(\n         \"sl.start_idx = %lu, this sl starts after new proposal. remove this one.\", sl.start_idx);\n-    } else {\n-      DEBUG_PRINT(\"sl.start_idx = %lu, no conflict. keep this one.\", sl.start_idx);\n-      future.push_back(sl);\n+      continue;\n+    }\n+\n+    if (sl.end_idx >= new_shift_end_idx) {\n+      if (\n+        sl.end_shift_length > -1e-3 && new_shift_length > -1e-3 &&\n+        sl.end_shift_length < new_shift_length) {\n+        continue;\n+      }\n+\n+      if (\n+        sl.end_shift_length < 1e-3 && new_shift_length < 1e-3 &&\n+        sl.end_shift_length > new_shift_length) {\n+        continue;\n+      }\n     }\n+\n+    DEBUG_PRINT(\"sl.start_idx = %lu, no conflict. keep this one.\", sl.start_idx);\n+    future.push_back(sl);\n   }\n \n   path_shifter.setShiftLines(future);"
        }
    ],
    "autowarefoundation/autoware.universe/3284": [
        {
            "sha": "6c73edcae3365cebec0f9b4b3749337794c02b55",
            "filename": "planning/behavior_path_planner/src/util/lane_change/util.cpp",
            "status": "modified",
            "additions": 18,
            "deletions": 10,
            "changes": 28,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/667aebaf217a559478ac6335b0a0ef91a641ac5c/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/667aebaf217a559478ac6335b0a0ef91a641ac5c/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp?ref=667aebaf217a559478ac6335b0a0ef91a641ac5c",
            "patch": "@@ -1038,32 +1038,35 @@ std::vector<DrivableLanes> combineDrivableLanes(\n   };\n \n   auto updated_drivable_lanes_vec = original_drivable_lanes_vec;\n+  size_t new_drivable_lanes_idx = 0;\n   for (auto & updated_drivable_lanes : updated_drivable_lanes_vec) {\n     // calculated corresponding index of new_drivable_lanes\n-    const auto new_drivable_lanes = [&]() -> std::optional<DrivableLanes> {\n-      for (const auto & new_drivable_lanes : new_drivable_lanes_vec) {\n+    const auto opt_new_drivable_lanes_idx = [&]() -> std::optional<size_t> {\n+      for (size_t n_idx = 0; n_idx < new_drivable_lanes_vec.size(); ++n_idx) {\n         for (const auto & ll : convert_to_lanes(updated_drivable_lanes)) {\n-          if (has_same_lane(ll, convert_to_lanes(new_drivable_lanes))) {\n-            return new_drivable_lanes;\n+          if (has_same_lane(ll, convert_to_lanes(new_drivable_lanes_vec.at(n_idx)))) {\n+            return n_idx;\n           }\n         }\n       }\n       return std::nullopt;\n     }();\n-    if (!new_drivable_lanes) {\n+    if (!opt_new_drivable_lanes_idx) {\n       continue;\n     }\n+    new_drivable_lanes_idx = *opt_new_drivable_lanes_idx;\n+    const auto & new_drivable_lanes = new_drivable_lanes_vec.at(new_drivable_lanes_idx);\n \n     // update left lane\n-    if (has_same_lane(updated_drivable_lanes.left_lane, convert_to_lanes(*new_drivable_lanes))) {\n-      updated_drivable_lanes.left_lane = new_drivable_lanes->left_lane;\n+    if (has_same_lane(updated_drivable_lanes.left_lane, convert_to_lanes(new_drivable_lanes))) {\n+      updated_drivable_lanes.left_lane = new_drivable_lanes.left_lane;\n     }\n     // update right lane\n-    if (has_same_lane(updated_drivable_lanes.right_lane, convert_to_lanes(*new_drivable_lanes))) {\n-      updated_drivable_lanes.right_lane = new_drivable_lanes->right_lane;\n+    if (has_same_lane(updated_drivable_lanes.right_lane, convert_to_lanes(new_drivable_lanes))) {\n+      updated_drivable_lanes.right_lane = new_drivable_lanes.right_lane;\n     }\n     // update middle lanes\n-    for (const auto & middle_lane : convert_to_lanes(*new_drivable_lanes)) {\n+    for (const auto & middle_lane : convert_to_lanes(new_drivable_lanes)) {\n       if (!has_same_lane(middle_lane, convert_to_lanes(updated_drivable_lanes))) {\n         updated_drivable_lanes.middle_lanes.push_back(middle_lane);\n       }\n@@ -1084,6 +1087,11 @@ std::vector<DrivableLanes> combineDrivableLanes(\n         std::cend(middle_lanes));\n     }\n   }\n+  // NOTE: If original_drivable_lanes_vec is shorter than new_drivable_lanes_vec, push back remained\n+  // new_drivable_lanes_vec.\n+  updated_drivable_lanes_vec.insert(\n+    updated_drivable_lanes_vec.end(), new_drivable_lanes_vec.begin() + new_drivable_lanes_idx + 1,\n+    new_drivable_lanes_vec.end());\n \n   return updated_drivable_lanes_vec;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3288": [
        {
            "sha": "fca182525677c17f58acccf74f066ebeb8e5bda5",
            "filename": "planning/obstacle_stop_planner/src/node.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 5,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a44cf4d8a961364787bd04568888a04009868ea9/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a44cf4d8a961364787bd04568888a04009868ea9/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp?ref=a44cf4d8a961364787bd04568888a04009868ea9",
            "patch": "@@ -1130,12 +1130,16 @@ void ObstacleStopPlannerNode::insertVelocity(\n         }\n \n         size_t stop_seg_idx = 0;\n-        const double lon_offset =\n-          calcLongitudinalOffsetToSegment(output, stop_point.index, getPoint(stop_point.point));\n-        if (lon_offset < 0) {\n-          stop_seg_idx = std::max(static_cast<size_t>(0), stop_point.index - 1);\n+        if (stop_point.index < output.size() - 1) {\n+          const double lon_offset =\n+            calcLongitudinalOffsetToSegment(output, stop_point.index, getPoint(stop_point.point));\n+          if (lon_offset < 0) {\n+            stop_seg_idx = std::max(static_cast<size_t>(0), stop_point.index - 1);\n+          } else {\n+            stop_seg_idx = std::min(output.size() - 2, stop_point.index);\n+          }\n         } else {\n-          stop_seg_idx = std::min(output.size() - 2, stop_point.index);\n+          stop_seg_idx = output.size() - 2;\n         }\n \n         return calcSignedArcLength("
        }
    ],
    "autowarefoundation/autoware.universe/3295": [
        {
            "sha": "e291000d9c07debb7f6a70814115ffa839bb7dda",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e42dcbd3abf594b7a70e71f6eeab0f519e2b3da7/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e42dcbd3abf594b7a70e71f6eeab0f519e2b3da7/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=e42dcbd3abf594b7a70e71f6eeab0f519e2b3da7",
            "patch": "@@ -78,6 +78,15 @@ BehaviorModuleOutput PlannerManager::run(const std::shared_ptr<PlannerData> & da\n     const auto result = run(candidate_module_opt.get(), data, approved_path_data);\n     processing_time_.at(name) += stop_watch_.toc(name, true);\n \n+    // if the candidate module fails to generate path, use approved modules output and discard the\n+    // failed candidate module.\n+    if (candidate_module_opt.get()->getCurrentStatus() == ModuleStatus::FAILURE) {\n+      deleteExpiredModules(candidate_module_opt.get());\n+      candidate_module_opt_ = boost::none;\n+      processing_time_.at(\"total_time\") = stop_watch_.toc(\"total_time\", true);\n+      return approved_path_data;\n+    }\n+\n     /**\n      * STEP5: if the candidate module's modification is NOT approved yet, return the result.\n      * NOTE: the result is output of the candidate module, but the output path don't contains path"
        }
    ],
    "autowarefoundation/autoware.universe/3315": [
        {
            "sha": "9dd3b1d7b51e6144e7281bc9b4a45a017a4adf68",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/lane_change_module.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/85921c04d9d3c95c2b09bce267dc28cb95d124cd/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/85921c04d9d3c95c2b09bce267dc28cb95d124cd/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp?ref=85921c04d9d3c95c2b09bce267dc28cb95d124cd",
            "patch": "@@ -549,8 +549,8 @@ bool LaneChangeModule::isNearEndOfLane() const\n   const auto & current_pose = getEgoPose();\n   const double threshold = util::calcTotalLaneChangeLength(planner_data_->parameters);\n \n-  return std::max(0.0, util::getDistanceToEndOfLane(current_pose, status_.current_lanes)) <\n-         threshold;\n+  return (std::max(0.0, util::getDistanceToEndOfLane(current_pose, status_.current_lanes)) -\n+          threshold) < planner_data_->parameters.backward_length_buffer_for_end_of_lane;\n }\n \n bool LaneChangeModule::isCurrentVelocityLow() const"
        }
    ],
    "autowarefoundation/autoware.universe/3321": [
        {
            "sha": "0e5eebc621e39f325a972d3e8e126a7973f0743a",
            "filename": "common/trtexec_vendor/CMakeLists.txt",
            "status": "modified",
            "additions": 4,
            "deletions": 9,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2c05f7076b8d9fa892a444f2f86cab6dce2f7ebe/common%2Ftrtexec_vendor%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2c05f7076b8d9fa892a444f2f86cab6dce2f7ebe/common%2Ftrtexec_vendor%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftrtexec_vendor%2FCMakeLists.txt?ref=2c05f7076b8d9fa892a444f2f86cab6dce2f7ebe",
            "patch": "@@ -17,27 +17,22 @@ find_package(CUDNN)\n find_package(tensorrt_cmake_module REQUIRED)\n find_package(TENSORRT)\n \n-if(NOT (${CUDA_FOUND} AND ${CUDNN_FOUND} AND ${TENSORRT_FOUND}))\n+if(NOT (CUDA_FOUND AND CUDNN_FOUND AND TENSORRT_FOUND))\n   message(WARNING \"cuda, cudnn, tensorrt libraries are not found\")\n   return()\n endif()\n \n-if(${TENSORRT_VERSION} VERSION_LESS 8.2.1)\n+if(TENSORRT_VERSION VERSION_LESS 8.2.1)\n   message(WARNING \"The tensorrt version less than 8.2.1 isn't supported.\")\n   return()\n endif()\n \n set(TRTEXEC_DEFAULT_BIN /usr/src/tensorrt/bin/trtexec)\n if(NOT EXISTS TRTEXEC_DEFAULT_BIN)\n   include(FetchContent)\n-  if(${TENSORRT_VERSION} VERSION_EQUAL 8.4.2)\n-    set(TENSORRT_VERSION 8.4.1)\n-  elseif(${TENSORRT_VERSION} VERSION_LESS_EQUAL 8.2.5 AND ${TENSORRT_VERSION} VERSION_GREATER 8.2.1)\n-    set(TENSORRT_VERSION 8.2.1)\n-  endif()\n   fetchcontent_declare(tensorrt\n     GIT_REPOSITORY https://github.com/NVIDIA/TensorRT\n-    GIT_TAG ${TENSORRT_VERSION}\n+    GIT_TAG release/${TENSORRT_VERSION_MAJOR}.${TENSORRT_VERSION_MINOR}\n     GIT_SUBMODULES \"\"\n   )\n   fetchcontent_getproperties(tensorrt)\n@@ -52,7 +47,7 @@ if(NOT EXISTS TRTEXEC_DEFAULT_BIN)\n     ${tensorrt_SOURCE_DIR}/samples/common/sampleReporting.cpp\n     ${tensorrt_SOURCE_DIR}/samples/common/logger.cpp\n   )\n-  if(${TENSORRT_VERSION} VERSION_GREATER_EQUAL 8.4)\n+  if(TENSORRT_VERSION VERSION_GREATER_EQUAL 8.4)\n     list(APPEND TRTEXEC_SOURCES\n       ${tensorrt_SOURCE_DIR}/samples/common/sampleUtils.cpp\n     )"
        }
    ],
    "autowarefoundation/autoware.universe/3322": [
        {
            "sha": "3183bc8fcb10865318c79476c514e625af4fd839",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 24,
            "deletions": 5,
            "changes": 29,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ee17321bdf4d1aa68eb6c32d2c1f0c3765fea4f9/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ee17321bdf4d1aa68eb6c32d2c1f0c3765fea4f9/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=ee17321bdf4d1aa68eb6c32d2c1f0c3765fea4f9",
            "patch": "@@ -752,9 +752,12 @@ void AvoidanceModule::fillShiftLine(AvoidancePlanningData & data, DebugData & de\n    * if the both of following two conditions are satisfied, the module surely avoid the object.\n    * Condition1: there is risk to collide with object without avoidance.\n    * Condition2: there is enough space to avoid.\n+   * In TOO_LARGE_JERK condition, it is possible to avoid object by deceleration even if the flag\n+   * is_avoidable is FALSE. So, the module inserts stop point for such a object.\n    */\n   for (const auto & o : data.target_objects) {\n-    if (o.avoid_required && o.is_avoidable) {\n+    const auto enough_space = o.is_avoidable || o.reason == AvoidanceDebugFactor::TOO_LARGE_JERK;\n+    if (o.avoid_required && enough_space) {\n       data.avoid_required = true;\n       data.stop_target_object = o;\n       break;\n@@ -1075,7 +1078,11 @@ AvoidLineArray AvoidanceModule::calcRawShiftLinesFromObjects(\n       avoidance_debug_array_false_and_push_back(AvoidanceDebugFactor::INSUFFICIENT_LATERAL_MARGIN);\n       o.reason = AvoidanceDebugFactor::INSUFFICIENT_LATERAL_MARGIN;\n       debug.unavoidable_objects.push_back(o);\n-      continue;\n+      if (o.avoid_required) {\n+        break;\n+      } else {\n+        continue;\n+      }\n     }\n \n     const auto is_object_on_right = isOnRight(o);\n@@ -1084,7 +1091,11 @@ AvoidLineArray AvoidanceModule::calcRawShiftLinesFromObjects(\n       avoidance_debug_array_false_and_push_back(AvoidanceDebugFactor::SAME_DIRECTION_SHIFT);\n       o.reason = AvoidanceDebugFactor::SAME_DIRECTION_SHIFT;\n       debug.unavoidable_objects.push_back(o);\n-      continue;\n+      if (o.avoid_required) {\n+        break;\n+      } else {\n+        continue;\n+      }\n     }\n \n     const auto avoiding_shift = shift_length - current_ego_shift;\n@@ -1114,7 +1125,11 @@ AvoidLineArray AvoidanceModule::calcRawShiftLinesFromObjects(\n         if (!data.avoiding_now) {\n           o.reason = AvoidanceDebugFactor::REMAINING_DISTANCE_LESS_THAN_ZERO;\n           debug.unavoidable_objects.push_back(o);\n-          continue;\n+          if (o.avoid_required) {\n+            break;\n+          } else {\n+            continue;\n+          }\n         }\n       }\n \n@@ -1128,7 +1143,11 @@ AvoidLineArray AvoidanceModule::calcRawShiftLinesFromObjects(\n         if (!data.avoiding_now) {\n           o.reason = AvoidanceDebugFactor::TOO_LARGE_JERK;\n           debug.unavoidable_objects.push_back(o);\n-          continue;\n+          if (o.avoid_required) {\n+            break;\n+          } else {\n+            continue;\n+          }\n         }\n       }\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/3327": [
        {
            "sha": "d6440d931717d73d86ff730df2d5efadeed7c339",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/util.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/763f34b34c33c766484de31f3aa82db462571f13/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/763f34b34c33c766484de31f3aa82db462571f13/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Futil.cpp?ref=763f34b34c33c766484de31f3aa82db462571f13",
            "patch": "@@ -58,7 +58,8 @@ std::optional<size_t> insertPoint(\n   } else {\n     // copy with velocity from prior point\n     const size_t prior_ind = closest_idx > 0 ? closest_idx - 1 : 0;\n-    inserted_point = inout_path->points.at(prior_ind);\n+    inserted_point.point.longitudinal_velocity_mps =\n+      inout_path->points.at(prior_ind).point.longitudinal_velocity_mps;\n   }\n   inserted_point.point.pose = in_pose;\n "
        }
    ],
    "autowarefoundation/autoware.universe/3333": [
        {
            "sha": "884140000e74cf8de950769d5d21891f9d2ba01d",
            "filename": "planning/behavior_velocity_planner/src/scene_module/run_out/manager.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 4,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6cabbb5370096a44deffee81187a8769a65dd7a4/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fmanager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6cabbb5370096a44deffee81187a8769a65dd7a4/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fmanager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Frun_out%2Fmanager.cpp?ref=6cabbb5370096a44deffee81187a8769a65dd7a4",
            "patch": "@@ -45,10 +45,18 @@ RunOutModuleManager::RunOutModuleManager(rclcpp::Node & node)\n \n   {\n     auto & p = planner_param_.common;\n-    p.normal_min_jerk = node.declare_parameter<double>(\".normal.min_jerk\");\n-    p.normal_min_acc = node.declare_parameter<double>(\".normal.min_acc\");\n-    p.limit_min_jerk = node.declare_parameter<double>(\".limit.min_jerk\");\n-    p.limit_min_acc = node.declare_parameter<double>(\".limit.min_acc\");\n+    p.normal_min_jerk = node.has_parameter(\"normal.min_jerk\")\n+                          ? node.get_parameter(\"normal.min_jerk\").get_value<double>()\n+                          : node.declare_parameter<double>(\"normal.min_jerk\");\n+    p.normal_min_acc = node.has_parameter(\"normal.min_acc\")\n+                         ? node.get_parameter(\"normal.min_acc\").get_value<double>()\n+                         : node.declare_parameter<double>(\"normal.min_acc\");\n+    p.limit_min_jerk = node.has_parameter(\"limit.min_jerk\")\n+                         ? node.get_parameter(\"limit.min_jerk\").get_value<double>()\n+                         : node.declare_parameter<double>(\"limit.min_jerk\");\n+    p.limit_min_acc = node.has_parameter(\"limit.min_acc\")\n+                        ? node.get_parameter(\"limit.min_acc\").get_value<double>()\n+                        : node.declare_parameter<double>(\"limit.min_acc\");\n   }\n \n   {"
        }
    ],
    "autowarefoundation/autoware.universe/3340": [
        {
            "sha": "56a7541337950ae8e7d16865b863386177da46c2",
            "filename": "launch/tier4_simulator_launch/launch/simulator.launch.xml",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/505e314a11c383a996af9fab2326e80767843869/launch%2Ftier4_simulator_launch%2Flaunch%2Fsimulator.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/505e314a11c383a996af9fab2326e80767843869/launch%2Ftier4_simulator_launch%2Flaunch%2Fsimulator.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_simulator_launch%2Flaunch%2Fsimulator.launch.xml?ref=505e314a11c383a996af9fab2326e80767843869",
            "patch": "@@ -39,12 +39,14 @@\n   <group unless=\"$(var scenario_simulation)\">\n     <!-- Occupancy Grid -->\n     <push-ros-namespace namespace=\"occupancy_grid_map\"/>\n-    <include file=\"$(find-pkg-share tier4_perception_launch)/launch/occupancy_grid_map/laserscan_based_occupancy_grid_map.launch.py\">\n+    <include file=\"$(find-pkg-share tier4_perception_launch)/launch/occupancy_grid_map/probabilistic_occupancy_grid_map.launch.xml\">\n       <arg name=\"input_obstacle_pointcloud\" value=\"true\"/>\n       <arg name=\"input_obstacle_and_raw_pointcloud\" value=\"false\"/>\n       <arg name=\"input/obstacle_pointcloud\" value=\"/perception/obstacle_segmentation/pointcloud\"/>\n       <arg name=\"output\" value=\"/perception/occupancy_grid_map/map\"/>\n-      <arg name=\"param_file\" value=\"$(find-pkg-share probabilistic_occupancy_grid_map)/config/laserscan_based_occupancy_grid_map.param.yaml\"/>\n+      <arg name=\"method\" value=\"laserscan_based_occupancy_grid_map\"/>\n+      <arg name=\"map_origin\" value=\"base_link\"/>\n+      <arg name=\"scan_origin\" value=\"base_link\"/>\n     </include>\n   </group>\n "
        }
    ],
    "autowarefoundation/autoware.universe/3342": [
        {
            "sha": "52a7e71b760d86ce4a4d75f0bebd942af82b3bd6",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/scene_module_interface.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 5,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9fa2795e1f2ed174efc62bed1d9a15cca5502b0c/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9fa2795e1f2ed174efc62bed1d9a15cca5502b0c/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp?ref=9fa2795e1f2ed174efc62bed1d9a15cca5502b0c",
            "patch": "@@ -67,11 +67,7 @@ class SceneModuleInterface\n     rtc_interface_ptr_map_(rtc_interface_ptr_map)\n   {\n #ifdef USE_OLD_ARCHITECTURE\n-    std::string module_ns;\n-    module_ns.resize(name.size());\n-    std::transform(name.begin(), name.end(), module_ns.begin(), tolower);\n-\n-    const auto ns = std::string(\"~/debug/\") + module_ns;\n+    const auto ns = std::string(\"~/debug/\") + util::convertToSnakeCase(name);\n     pub_debug_marker_ = node.create_publisher<MarkerArray>(ns, 20);\n #endif\n "
        }
    ],
    "autowarefoundation/autoware.universe/3345": [
        {
            "sha": "ac38ca9ef60b747a88f1e893a463cb3f4b772953",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/lane_change_module.cpp",
            "status": "modified",
            "additions": 18,
            "deletions": 20,
            "changes": 38,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1e23aa431df86b4eb9086c19e3bd99b8eb1d0c39/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1e23aa431df86b4eb9086c19e3bd99b8eb1d0c39/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Flane_change_module.cpp?ref=1e23aa431df86b4eb9086c19e3bd99b8eb1d0c39",
            "patch": "@@ -813,43 +813,41 @@ void LaneChangeModule::updateOutputTurnSignal(BehaviorModuleOutput & output)\n \n void LaneChangeModule::calcTurnSignalInfo()\n {\n-  const auto get_blinker_pose =\n-    [this](const PathWithLaneId & path, const lanelet::ConstLanelets & lanes, const double length) {\n-      const auto & points = path.points;\n-      const auto arc_front = lanelet::utils::getArcCoordinates(lanes, points.front().point.pose);\n-      for (const auto & point : points) {\n-        const auto & pt = point.point.pose;\n-        const auto arc_current = lanelet::utils::getArcCoordinates(lanes, pt);\n-        const auto diff = arc_current.length - arc_front.length;\n-        if (diff > length) {\n-          return pt;\n-        }\n+  const auto get_blinker_pose = [this](const PathWithLaneId & path, const double length) {\n+    double accumulated_length = 0.0;\n+    for (size_t i = 0; i < path.points.size() - 1; ++i) {\n+      accumulated_length +=\n+        tier4_autoware_utils::calcDistance2d(path.points.at(i), path.points.at(i + 1));\n+      if (accumulated_length > length) {\n+        return path.points.at(i).point.pose;\n       }\n+    }\n \n-      RCLCPP_WARN(getLogger(), \"unable to determine blinker pose...\");\n-      return points.front().point.pose;\n-    };\n+    RCLCPP_WARN(getLogger(), \"unable to determine blinker pose...\");\n+    return path.points.front().point.pose;\n+  };\n \n   const auto & path = status_.lane_change_path;\n   TurnSignalInfo turn_signal_info{};\n \n   turn_signal_info.desired_start_point = std::invoke([&]() {\n     const auto blinker_start_duration = planner_data_->parameters.turn_signal_search_time;\n     const auto prepare_duration = parameters_->prepare_duration;\n-    const auto prepare_to_blinker_start_diff = prepare_duration - blinker_start_duration;\n-    if (prepare_to_blinker_start_diff < 1e-5) {\n+    const auto diff_time = prepare_duration - blinker_start_duration;\n+    if (diff_time < 1e-5) {\n       return path.path.points.front().point.pose;\n     }\n \n-    return get_blinker_pose(path.path, path.reference_lanelets, prepare_to_blinker_start_diff);\n+    const auto current_twist = getEgoTwist();\n+    const auto diff_length = std::abs(current_twist.linear.x) * diff_time;\n+    return get_blinker_pose(path.path, diff_length);\n   });\n   turn_signal_info.desired_end_point = path.shift_line.end;\n \n   turn_signal_info.required_start_point = path.shift_line.start;\n-  const auto mid_lane_change_length = path.length.prepare / 2;\n+  const auto mid_lane_change_length = path.length.lane_changing / 2;\n   const auto & shifted_path = path.shifted_path.path;\n-  turn_signal_info.required_end_point =\n-    get_blinker_pose(shifted_path, path.target_lanelets, mid_lane_change_length);\n+  turn_signal_info.required_end_point = get_blinker_pose(shifted_path, mid_lane_change_length);\n \n   status_.lane_change_path.turn_signal_info = turn_signal_info;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3346": [
        {
            "sha": "cb5d70a855d7eeb9cf8690649840b1a5a43651a4",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 2,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/84fc9d148b7cb790c6a1fde3c9c3529dacc705a5/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/84fc9d148b7cb790c6a1fde3c9c3529dacc705a5/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=84fc9d148b7cb790c6a1fde3c9c3529dacc705a5",
            "patch": "@@ -294,17 +294,22 @@ std::pair<SceneModulePtr, BehaviorModuleOutput> PlannerManager::runCandidateModu\n     processing_time_.at(name) += stop_watch_.toc(name, true);\n   }\n \n-  const auto remove_failure_modules = [this](auto & m) {\n+  const auto remove_expired_modules = [this](auto & m) {\n     if (m->getCurrentStatus() == ModuleStatus::FAILURE) {\n       deleteExpiredModules(m);\n       return true;\n     }\n \n+    if (m->getCurrentStatus() == ModuleStatus::SUCCESS) {\n+      deleteExpiredModules(m);\n+      return true;\n+    }\n+\n     return false;\n   };\n \n   executable_modules.erase(\n-    std::remove_if(executable_modules.begin(), executable_modules.end(), remove_failure_modules),\n+    std::remove_if(executable_modules.begin(), executable_modules.end(), remove_expired_modules),\n     executable_modules.end());\n \n   if (executable_modules.empty()) {"
        }
    ],
    "autowarefoundation/autoware.universe/3347": [
        {
            "sha": "82cc349e84254ea0d78209d1106bfe56534d8a7f",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e013471d13c99d4f6480785dac8e026e32deb688/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e013471d13c99d4f6480785dac8e026e32deb688/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=e013471d13c99d4f6480785dac8e026e32deb688",
            "patch": "@@ -3170,8 +3170,8 @@ CandidateOutput AvoidanceModule::planCandidate() const\n \n   if (!data.safe_new_sl.empty()) {  // clip from shift start index for visualize\n     util::clipPathLength(\n-      shifted_path.path, data.safe_new_sl.front().start_idx, 0.0,\n-      std::numeric_limits<double>::max());\n+      shifted_path.path, data.safe_new_sl.front().start_idx, std::numeric_limits<double>::max(),\n+      0.0);\n \n     const auto sl = getNonStraightShiftLine(data.safe_new_sl);\n     const auto sl_front = data.safe_new_sl.front();"
        }
    ],
    "autowarefoundation/autoware.universe/3348": [
        {
            "sha": "a665d4329aa2e1903385bc4aa6ea755c6e17f535",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cb6ae4312d15e70b8c897279fd30fdd4d94925c5/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cb6ae4312d15e70b8c897279fd30fdd4d94925c5/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=cb6ae4312d15e70b8c897279fd30fdd4d94925c5",
            "patch": "@@ -2152,8 +2152,8 @@ void AvoidanceModule::addReturnShiftLineFromEgo(\n     // avoidance points: No, shift points: No -> set the ego position to the last shift point\n     // so that the return-shift will be generated from ego position.\n     if (!has_candidate_point && !has_registered_point) {\n-      last_sl.end = getEgoPose();\n       last_sl.end_idx = avoidance_data_.ego_closest_path_index;\n+      last_sl.end = avoidance_data_.reference_path.points.at(last_sl.end_idx).point.pose;\n       last_sl.end_shift_length = getCurrentBaseShift();\n     }\n   }\n@@ -2188,8 +2188,8 @@ void AvoidanceModule::addReturnShiftLineFromEgo(\n     // set the return-shift from ego.\n     DEBUG_PRINT(\n       \"return shift already exists, but they are all candidates. Add return shift for overwrite.\");\n-    last_sl.end = getEgoPose();\n     last_sl.end_idx = avoidance_data_.ego_closest_path_index;\n+    last_sl.end = avoidance_data_.reference_path.points.at(last_sl.end_idx).point.pose;\n     last_sl.end_shift_length = current_base_shift;\n   }\n \n@@ -2284,7 +2284,7 @@ void AvoidanceModule::addReturnShiftLineFromEgo(\n     al.start_shift_length = last_sl.end_shift_length;\n     sl_candidates.push_back(al);\n     printShiftLines(AvoidLineArray{al}, \"return point\");\n-    debug_data_.extra_return_shift = AvoidLineArray{al};\n+    debug_data_.extra_return_shift.push_back(al);\n \n     // TODO(Horibe) think how to store the current object\n     current_raw_shift_lines.push_back(al);"
        }
    ],
    "autowarefoundation/autoware.universe/3351": [
        {
            "sha": "432cdb53197fad5021f6372235b9eed1a0e3b8e7",
            "filename": "planning/behavior_velocity_planner/docs/blind_spot/blind-spot.drawio.svg",
            "status": "renamed",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3305ccbc7ff091ad62e8cc1b22716e6e0cdb818b/planning%2Fbehavior_velocity_planner%2Fdocs%2Fblind_spot%2Fblind-spot.drawio.svg",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3305ccbc7ff091ad62e8cc1b22716e6e0cdb818b/planning%2Fbehavior_velocity_planner%2Fdocs%2Fblind_spot%2Fblind-spot.drawio.svg",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fdocs%2Fblind_spot%2Fblind-spot.drawio.svg?ref=3305ccbc7ff091ad62e8cc1b22716e6e0cdb818b",
            "previous_filename": "planning/behavior_velocity_planner/docs/blind_spot/bliind-spot.drawio.svg"
        }
    ],
    "autowarefoundation/autoware.universe/3352": [
        {
            "sha": "f1663b96c362695010cf27594780a032cc2ae113",
            "filename": "planning/obstacle_cruise_planner/docs/debug.md",
            "status": "modified",
            "additions": 7,
            "deletions": 7,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/38786953f2c19df43fbdc6095310a428c5e5decc/planning%2Fobstacle_cruise_planner%2Fdocs%2Fdebug.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/38786953f2c19df43fbdc6095310a428c5e5decc/planning%2Fobstacle_cruise_planner%2Fdocs%2Fdebug.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Fdocs%2Fdebug.md?ref=38786953f2c19df43fbdc6095310a428c5e5decc",
            "patch": "@@ -6,40 +6,40 @@\n \n Green polygons which is a detection area is visualized by `detection_polygons` in the `~/debug/marker` topic.\n \n-![detection_area](./image/detection_area.png)\n+![detection_area](../image/detection_area.png)\n \n ### Collision point\n \n Red point which is a collision point with obstacle is visualized by `collision_points` in the `~/debug/marker` topic.\n \n-![collision_point](./image/collision_point.png)\n+![collision_point](../image/collision_point.png)\n \n ### Obstacle for cruise\n \n Yellow sphere which is a obstacle for cruise is visualized by `obstacles_to_cruise` in the `~/debug/marker` topic.\n \n-![obstacle_to_cruise](./image/obstacle_to_cruise.png)\n+![obstacle_to_cruise](../image/obstacle_to_cruise.png)\n \n ### Obstacle for stop\n \n Red sphere which is a obstacle for stop is visualized by `obstacles_to_stop` in the `~/debug/marker` topic.\n \n-![obstacle_to_stop](./image/obstacle_to_stop.png)\n+![obstacle_to_stop](../image/obstacle_to_stop.png)\n \n <!-- ### Obstacle ignored to cruise or stop intentionally -->\n \n <!-- Green sphere which is a obstacle ignored intentionally to cruise or stop is visualized by `intentionally_ignored_obstacles` in the `~/debug/marker` topic. -->\n \n-<!-- ![intentionally_ignored_obstacle](./image/intentionally_ignored_obstacle.png) -->\n+<!-- ![intentionally_ignored_obstacle](../image/intentionally_ignored_obstacle.png) -->\n \n ### Obstacle cruise wall\n \n Yellow wall which means a safe distance to cruise if the ego's front meets the wall is visualized in the `~/debug/cruise_wall_marker` topic.\n \n-![obstacle_to_cruise](./image/obstacle_to_cruise.png)\n+![obstacle_to_cruise](../image/obstacle_to_cruise.png)\n \n ### Obstacle stop wall\n \n Red wall which means a safe distance to stop if the ego's front meets the wall is visualized in the `~/debug/stop_wall_marker` topic.\n \n-![obstacle_to_stop](./image/obstacle_to_stop.png)\n+![obstacle_to_stop](../image/obstacle_to_stop.png)"
        }
    ],
    "autowarefoundation/autoware.universe/3353": [
        {
            "sha": "cf32c027e6af45a55bc847677b9fc1ba1cc92a05",
            "filename": "perception/traffic_light_ssd_fine_detector/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/581f984cda1cffe1ac2f774e44a842d59bf8ca17/perception%2Ftraffic_light_ssd_fine_detector%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/581f984cda1cffe1ac2f774e44a842d59bf8ca17/perception%2Ftraffic_light_ssd_fine_detector%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_ssd_fine_detector%2FREADME.md?ref=581f984cda1cffe1ac2f774e44a842d59bf8ca17",
            "patch": "@@ -8,7 +8,7 @@ It is a package for traffic light detection using MobileNetV2 and SSDLite.\n \n ### Pretrained Model\n \n-The model is based on [pytorch-ssd](https://github.com/qfgaohao/pytorch-ssd) and the pretrained model could be downloaded from [here](https://storage.googleapis.com/models-hao/mb2-ssd-lite-mp-0_686.pth).\n+The model is based on [pytorch-ssd](https://github.com/qfgaohao/pytorch-ssd) and the pretrained model could be downloaded from [here](https://drive.google.com/file/d/1puI6ltKZKJ4RoiCO-ypivzEysHaDVBsa/view).\n \n ### Training Data\n "
        }
    ],
    "autowarefoundation/autoware.universe/3354": [
        {
            "sha": "0b5ca05762795f90af6f849162e0bce91b0ec3e7",
            "filename": "localization/ndt_scan_matcher/src/ndt_scan_matcher_core.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3990377a1273368578fccfd160ce513828b5a4ec/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3990377a1273368578fccfd160ce513828b5a4ec/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp?ref=3990377a1273368578fccfd160ce513828b5a4ec",
            "patch": "@@ -328,6 +328,11 @@ void NDTScanMatcher::callback_regularization_pose(\n void NDTScanMatcher::callback_sensor_points(\n   sensor_msgs::msg::PointCloud2::ConstSharedPtr sensor_points_sensorTF_msg_ptr)\n {\n+  if (sensor_points_sensorTF_msg_ptr->data.empty()) {\n+    RCLCPP_WARN_STREAM_THROTTLE(this->get_logger(), *this->get_clock(), 1, \"Empty sensor points!\");\n+    return;\n+  }\n+\n   // mutex ndt_ptr_\n   std::lock_guard<std::mutex> lock(ndt_ptr_mtx_);\n "
        }
    ],
    "autowarefoundation/autoware.universe/3357": [
        {
            "sha": "7f0fbdd27e3feaeec3df2a9a2acf004e0d1dfe18",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance_by_lc/module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/75aee09e5a1639f59fcf3f5f72a6438231d8e2ef/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance_by_lc%2Fmodule.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/75aee09e5a1639f59fcf3f5f72a6438231d8e2ef/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance_by_lc%2Fmodule.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance_by_lc%2Fmodule.cpp?ref=75aee09e5a1639f59fcf3f5f72a6438231d8e2ef",
            "patch": "@@ -996,7 +996,7 @@ std::pair<bool, bool> AvoidanceByLCModule::getSafePath(\n #else\n   const auto o_front = avoidance_data_.target_objects.front();\n   const auto direction = isOnRight(o_front) ? Direction::LEFT : Direction::RIGHT;\n-  const auto found_safe_path = utils::lane_change::getLaneChangePaths(\n+  const auto found_safe_path = util::lane_change::getLaneChangePaths(\n     *getPreviousModuleOutput().path, *route_handler, current_lanes, lane_change_lanes, current_pose,\n     current_twist, planner_data_->dynamic_object, common_parameters, *parameters_->lane_change,\n     check_distance, direction, &valid_paths, &object_debug_);"
        }
    ],
    "autowarefoundation/autoware.universe/3358": [
        {
            "sha": "986af8c6888f5303cfc7937dc4af8ef68eafbcb7",
            "filename": "control/mpc_lateral_controller/src/mpc.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 5,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6c74311eba7496988eac1c93f96292017ea679e9/control%2Fmpc_lateral_controller%2Fsrc%2Fmpc.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6c74311eba7496988eac1c93f96292017ea679e9/control%2Fmpc_lateral_controller%2Fsrc%2Fmpc.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fmpc_lateral_controller%2Fsrc%2Fmpc.cpp?ref=6c74311eba7496988eac1c93f96292017ea679e9",
            "patch": "@@ -24,9 +24,6 @@\n #include <utility>\n #include <vector>\n \n-#define DEG2RAD 3.1415926535 / 180.0\n-#define RAD2DEG 180.0 / 3.1415926535\n-\n namespace autoware::motion::control::mpc_lateral_controller\n {\n using namespace std::literals::chrono_literals;\n@@ -297,7 +294,8 @@ bool MPC::getData(\n   if (std::fabs(data->yaw_err) > m_admissible_yaw_error_rad) {\n     RCLCPP_WARN_SKIPFIRST_THROTTLE(\n       m_logger, *m_clock, duration, \"yaw error is over limit. error = %f deg, limit %f deg\",\n-      RAD2DEG * data->yaw_err, RAD2DEG * m_admissible_yaw_error_rad);\n+      tier4_autoware_utils::rad2deg(data->yaw_err),\n+      tier4_autoware_utils::rad2deg(m_admissible_yaw_error_rad));\n     return false;\n   }\n \n@@ -594,7 +592,7 @@ MPCMatrix MPC::generateMPCMatrix(\n     /* get reference input (feed-forward) */\n     m_vehicle_model_ptr->setCurvature(ref_smooth_k);\n     m_vehicle_model_ptr->calculateReferenceInput(Uref);\n-    if (std::fabs(Uref(0, 0)) < DEG2RAD * m_param.zero_ff_steer_deg) {\n+    if (std::fabs(Uref(0, 0)) < tier4_autoware_utils::deg2rad(m_param.zero_ff_steer_deg)) {\n       Uref(0, 0) = 0.0;  // ignore curvature noise\n     }\n     m.Uref_ex.block(i * DIM_U, 0, DIM_U, 1) = Uref;"
        }
    ],
    "autowarefoundation/autoware.universe/3360": [
        {
            "sha": "f727c0e58d327f1cb8bc2456a9f55dbfd0291552",
            "filename": "planning/static_centerline_optimizer/launch/static_centerline_optimizer.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7d87c7f1f2cd2be0945931effc103e0ba16240fa/planning%2Fstatic_centerline_optimizer%2Flaunch%2Fstatic_centerline_optimizer.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7d87c7f1f2cd2be0945931effc103e0ba16240fa/planning%2Fstatic_centerline_optimizer%2Flaunch%2Fstatic_centerline_optimizer.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fstatic_centerline_optimizer%2Flaunch%2Fstatic_centerline_optimizer.launch.xml?ref=7d87c7f1f2cd2be0945931effc103e0ba16240fa",
            "patch": "@@ -21,6 +21,7 @@\n     name=\"obstacle_avoidance_planner_param\"\n     default=\"$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/motion_planning/obstacle_avoidance_planner/obstacle_avoidance_planner.param.yaml\"\n   />\n+  <arg name=\"mission_planner_param\" default=\"$(find-pkg-share autoware_launch)/config/planning/mission_planning/mission_planner/mission_planner.param.yaml\"/>\n \n   <!-- Global parameters (for PathFootprint in tier4_planning_rviz_plugin) -->\n   <!-- Do not add \"group\" in order to propagate global parameters -->\n@@ -61,6 +62,7 @@\n     <!-- component param -->\n     <param from=\"$(var map_loader_param)\"/>\n     <param from=\"$(var obstacle_avoidance_planner_param)\"/>\n+    <param from=\"$(var mission_planner_param)\"/>\n     <!-- node param -->\n     <param from=\"$(find-pkg-share static_centerline_optimizer)/config/static_centerline_optimizer.param.yaml\"/>\n   </node>"
        }
    ],
    "autowarefoundation/autoware.universe/3369": [
        {
            "sha": "b38dc17a563716cd818418958e674c28c3945e5e",
            "filename": "planning/behavior_path_planner/src/util/lane_change/util.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 9,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7a46a2fe2dea4be0f4669b306bce04094068558d/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7a46a2fe2dea4be0f4669b306bce04094068558d/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futil%2Flane_change%2Futil.cpp?ref=7a46a2fe2dea4be0f4669b306bce04094068558d",
            "patch": "@@ -349,7 +349,7 @@ bool getLaneChangePaths(\n       minimum_prepare_length);\n \n     if (prepare_length < target_length) {\n-      RCLCPP_ERROR_STREAM(\n+      RCLCPP_DEBUG(\n         rclcpp::get_logger(\"behavior_path_planner\").get_child(\"util\").get_child(\"lane_change\"),\n         \"prepare length is shorter than distance to target lane!!\");\n       break;\n@@ -366,7 +366,7 @@ bool getLaneChangePaths(\n #endif\n \n     if (prepare_segment.points.empty()) {\n-      RCLCPP_ERROR_STREAM(\n+      RCLCPP_DEBUG(\n         rclcpp::get_logger(\"behavior_path_planner\").get_child(\"util\").get_child(\"lane_change\"),\n         \"prepare segment is empty!!\");\n       continue;\n@@ -381,7 +381,7 @@ bool getLaneChangePaths(\n     // target lanelet, even if the condition prepare_length > target_length is satisfied. In\n     // that case, the lane change shouldn't be executed.\n     if (target_length_from_lane_change_start_pose > 0.0) {\n-      RCLCPP_ERROR_STREAM(\n+      RCLCPP_DEBUG(\n         rclcpp::get_logger(\"behavior_path_planner\").get_child(\"util\").get_child(\"lane_change\"),\n         \"[only new arch] lane change start pose is behind target lanelet!!\");\n       break;\n@@ -396,7 +396,7 @@ bool getLaneChangePaths(\n       calcLaneChangingLength(lane_changing_velocity, shift_length, common_parameter, parameter);\n \n     if (lane_changing_length + prepare_length > dist_to_end_of_current_lanes) {\n-      RCLCPP_ERROR_STREAM(\n+      RCLCPP_DEBUG(\n         rclcpp::get_logger(\"behavior_path_planner\").get_child(\"util\").get_child(\"lane_change\"),\n         \"lane changing path too long\");\n       continue;\n@@ -411,7 +411,7 @@ bool getLaneChangePaths(\n         s_start + lane_changing_length + parameter.lane_change_finish_judge_buffer +\n           required_total_min_length >\n         s_goal) {\n-        RCLCPP_ERROR_STREAM(\n+        RCLCPP_DEBUG(\n           rclcpp::get_logger(\"behavior_path_planner\").get_child(\"util\").get_child(\"lane_change\"),\n           \"length of lane changing path is longer than length to goal!!\");\n         continue;\n@@ -423,7 +423,7 @@ bool getLaneChangePaths(\n       target_lane_length, lane_changing_length, lane_changing_velocity, required_total_min_length);\n \n     if (target_segment.points.empty()) {\n-      RCLCPP_ERROR_STREAM(\n+      RCLCPP_DEBUG(\n         rclcpp::get_logger(\"behavior_path_planner\").get_child(\"util\").get_child(\"lane_change\"),\n         \"target segment is empty!! something wrong...\");\n       continue;\n@@ -438,7 +438,7 @@ bool getLaneChangePaths(\n       lc_length.lane_changing, forward_path_length, resample_interval, is_goal_in_route);\n \n     if (target_lane_reference_path.points.empty()) {\n-      RCLCPP_ERROR_STREAM(\n+      RCLCPP_DEBUG(\n         rclcpp::get_logger(\"behavior_path_planner\").get_child(\"util\").get_child(\"lane_change\"),\n         \"target_lane_reference_path is empty!!\");\n       continue;\n@@ -454,7 +454,7 @@ bool getLaneChangePaths(\n       target_lanelets, sorted_lane_ids, acceleration, lc_length, lc_velocity, parameter);\n \n     if (!candidate_path) {\n-      RCLCPP_ERROR_STREAM(\n+      RCLCPP_DEBUG(\n         rclcpp::get_logger(\"behavior_path_planner\").get_child(\"util\").get_child(\"lane_change\"),\n         \"no candidate path!!\");\n       continue;\n@@ -471,7 +471,7 @@ bool getLaneChangePaths(\n #endif\n \n     if (!is_valid) {\n-      RCLCPP_ERROR_STREAM(\n+      RCLCPP_DEBUG(\n         rclcpp::get_logger(\"behavior_path_planner\").get_child(\"util\").get_child(\"lane_change\"),\n         \"invalid candidate path!!\");\n       continue;"
        }
    ],
    "autowarefoundation/autoware.universe/3374": [
        {
            "sha": "4518e9436c3d102a701994af6671fee233c47660",
            "filename": "perception/compare_map_segmentation/include/compare_map_segmentation/multi_voxel_grid_map_update.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9f0ecd46cfbc59f6f32e47deedfd2df8b6895c19/perception%2Fcompare_map_segmentation%2Finclude%2Fcompare_map_segmentation%2Fmulti_voxel_grid_map_update.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9f0ecd46cfbc59f6f32e47deedfd2df8b6895c19/perception%2Fcompare_map_segmentation%2Finclude%2Fcompare_map_segmentation%2Fmulti_voxel_grid_map_update.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fcompare_map_segmentation%2Finclude%2Fcompare_map_segmentation%2Fmulti_voxel_grid_map_update.hpp?ref=9f0ecd46cfbc59f6f32e47deedfd2df8b6895c19",
            "patch": "@@ -312,6 +312,6 @@ class MultiVoxelGrid : public pcl::VoxelGrid<PointT>\n   Eigen::Vector4f min_p, max_p;\n };\n \n-};  // namespace compare_map_segmentation\n+}  // namespace compare_map_segmentation\n \n #endif  // COMPARE_MAP_SEGMENTATION__MULTI_VOXEL_GRID_MAP_UPDATE_HPP_"
        }
    ],
    "autowarefoundation/autoware.universe/3377": [
        {
            "sha": "97e6069f7d1d578c86c0203fc889d1cca2c3fdc8",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_over/pull_over_module.cpp",
            "status": "modified",
            "additions": 17,
            "deletions": 6,
            "changes": 23,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/402a30c0de6903a20a46fcae9e1970817f18a216/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/402a30c0de6903a20a46fcae9e1970817f18a216/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_over%2Fpull_over_module.cpp?ref=402a30c0de6903a20a46fcae9e1970817f18a216",
            "patch": "@@ -839,7 +839,7 @@ PathWithLaneId PullOverModule::generateStopPath()\n   // if stop pose is closer than min_stop_distance, stop as soon as possible\n   const double ego_to_stop_distance = calcSignedArcLengthFromEgo(reference_path, stop_pose);\n   const auto min_stop_distance = calcFeasibleDecelDistance(0.0);\n-  if (ego_to_stop_distance < min_stop_distance) {\n+  if (min_stop_distance && ego_to_stop_distance < *min_stop_distance) {\n     return generateFeasibleStopPath();\n   }\n \n@@ -1093,9 +1093,15 @@ boost::optional<double> PullOverModule::calcFeasibleDecelDistance(\n     return 0.0;\n   }\n \n-  const auto min_stop_distance = calcDecelDistWithJerkAndAccConstraints(\n+  auto min_stop_distance = calcDecelDistWithJerkAndAccConstraints(\n     v_now, target_velocity, a_now, -a_lim, j_lim, -1.0 * j_lim);\n \n+  if (!min_stop_distance) {\n+    return {};\n+  }\n+\n+  min_stop_distance = std::max(*min_stop_distance, 0.0);\n+\n   return min_stop_distance;\n }\n \n@@ -1118,17 +1124,22 @@ void PullOverModule::decelerateForTurnSignal(const Pose & stop_pose, PathWithLan\n   const Pose & current_pose = planner_data_->self_odometry->pose.pose;\n \n   for (auto & point : path.points) {\n-    const auto distance_to_stop = std::max(\n+    const double distance_to_stop = std::max(\n       0.0, calcSignedArcLength(path.points, point.point.pose.position, stop_pose.position));\n     const float decel_vel =\n       std::min(point.point.longitudinal_velocity_mps, static_cast<float>(distance_to_stop / time));\n     const double distance_from_ego = calcSignedArcLengthFromEgo(path, stop_pose);\n     const auto min_decel_distance = calcFeasibleDecelDistance(decel_vel);\n-    if (!min_decel_distance) {\n+\n+    // when current velocity already lower than decel_vel, min_decel_distance will be 0.0,\n+    // and do not need to decelerate.\n+    // skip next process to avoid inserting decel point at the same current position.\n+    constexpr double eps_distance = 0.1;\n+    if (!min_decel_distance || *min_decel_distance < eps_distance) {\n       continue;\n     }\n \n-    if (0.0 < *min_decel_distance && *min_decel_distance < distance_from_ego) {\n+    if (*min_decel_distance < distance_from_ego) {\n       point.point.longitudinal_velocity_mps = decel_vel;\n     } else {\n       insertDecelPoint(current_pose.position, *min_decel_distance, decel_vel, path.points);\n@@ -1138,7 +1149,7 @@ void PullOverModule::decelerateForTurnSignal(const Pose & stop_pose, PathWithLan\n   const double stop_point_length = calcSignedArcLength(path.points, 0, stop_pose.position);\n   const auto min_stop_distance = calcFeasibleDecelDistance(0.0);\n \n-  if (*min_stop_distance && min_stop_distance < stop_point_length) {\n+  if (min_stop_distance && *min_stop_distance < stop_point_length) {\n     const auto stop_point = util::insertStopPoint(stop_point_length, path);\n   }\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3384": [
        {
            "sha": "dc9cce5fff9cf734f4f7d58d4a5aa859614584cc",
            "filename": "perception/lidar_apollo_segmentation_tvm/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1e998b24b5b81d3059c203ca87399656b75a67f9/perception%2Flidar_apollo_segmentation_tvm%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1e998b24b5b81d3059c203ca87399656b75a67f9/perception%2Flidar_apollo_segmentation_tvm%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_apollo_segmentation_tvm%2Fpackage.xml?ref=1e998b24b5b81d3059c203ca87399656b75a67f9",
            "patch": "@@ -20,6 +20,7 @@\n   <depend>rclcpp</depend>\n   <depend>sensor_msgs</depend>\n   <depend>tf2_eigen</depend>\n+  <depend>tf2_geometry_msgs</depend>\n   <depend>tf2_ros</depend>\n   <depend>tier4_perception_msgs</depend>\n   <depend>tvm_utility</depend>"
        }
    ],
    "autowarefoundation/autoware.universe/3408": [
        {
            "sha": "c26b795a261ee18075fb8d55700762e67eea81c3",
            "filename": "planning/behavior_path_planner/src/behavior_path_planner_node.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 7,
            "changes": 20,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f6387eb50ef5da6cb9a77ae840ed586ebfa8998f/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f6387eb50ef5da6cb9a77ae840ed586ebfa8998f/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp?ref=f6387eb50ef5da6cb9a77ae840ed586ebfa8998f",
            "patch": "@@ -1125,14 +1125,20 @@ void BehaviorPathPlannerNode::run()\n   // NOTE: In order to keep backward_path_length at least, resampling interval is added to the\n   // backward.\n   const auto current_pose = planner_data_->self_odometry->pose.pose;\n-  const size_t current_seg_idx = planner_data_->findEgoSegmentIndex(path->points);\n-  path->points = motion_utils::cropPoints(\n-    path->points, current_pose.position, current_seg_idx,\n-    planner_data_->parameters.forward_path_length,\n-    planner_data_->parameters.backward_path_length + planner_data_->parameters.input_path_interval);\n-\n   if (!path->points.empty()) {\n-    path_publisher_->publish(*path);\n+    const size_t current_seg_idx = planner_data_->findEgoSegmentIndex(path->points);\n+    path->points = motion_utils::cropPoints(\n+      path->points, current_pose.position, current_seg_idx,\n+      planner_data_->parameters.forward_path_length,\n+      planner_data_->parameters.backward_path_length +\n+        planner_data_->parameters.input_path_interval);\n+\n+    if (!path->points.empty()) {\n+      path_publisher_->publish(*path);\n+    } else {\n+      RCLCPP_ERROR_THROTTLE(\n+        get_logger(), *get_clock(), 5000, \"behavior path output is empty! Stop publish.\");\n+    }\n   } else {\n     RCLCPP_ERROR_THROTTLE(\n       get_logger(), *get_clock(), 5000, \"behavior path output is empty! Stop publish.\");"
        }
    ],
    "autowarefoundation/autoware.universe/3410": [
        {
            "sha": "16c5c2cac164fd008dd9a4a5297125eb1435df0f",
            "filename": "planning/planning_test_utils/include/planning_interface_test_manager/planning_interface_test_manager_utils.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cb5629414c879d807e0fa5fc5d3027ae7b4bd13c/planning%2Fplanning_test_utils%2Finclude%2Fplanning_interface_test_manager%2Fplanning_interface_test_manager_utils.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cb5629414c879d807e0fa5fc5d3027ae7b4bd13c/planning%2Fplanning_test_utils%2Finclude%2Fplanning_interface_test_manager%2Fplanning_interface_test_manager_utils.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_test_utils%2Finclude%2Fplanning_interface_test_manager%2Fplanning_interface_test_manager_utils.hpp?ref=cb5629414c879d807e0fa5fc5d3027ae7b4bd13c",
            "patch": "@@ -334,7 +334,7 @@ void publishScenarioData(\n template <typename T>\n void createSubscription(\n   rclcpp::Node::SharedPtr test_node, std::string topic_name,\n-  std::function<void(const typename T::SharedPtr)> callback,\n+  std::function<void(const typename T::ConstSharedPtr)> callback,\n   std::shared_ptr<rclcpp::Subscription<T>> & subscriber)\n {\n   if constexpr (std::is_same_v<T, Trajectory>) {\n@@ -350,7 +350,7 @@ void setSubscriber(\n   std::shared_ptr<rclcpp::Subscription<T>> & subscriber, size_t & count)\n {\n   createSubscription(\n-    test_node, topic_name, [&count](const typename T::SharedPtr) { count++; }, subscriber);\n+    test_node, topic_name, [&count](const typename T::ConstSharedPtr) { count++; }, subscriber);\n }\n \n void updateNodeOptions("
        }
    ],
    "autowarefoundation/autoware.universe/3425": [
        {
            "sha": "5e37c7d35c91be2badda6d5b71a6067a9759418b",
            "filename": "planning/planning_test_utils/include/planning_interface_test_manager/planning_interface_test_manager.hpp",
            "status": "modified",
            "additions": 0,
            "deletions": 3,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0104a87664a8707ccfe236fad746bdb39ef0f7ab/planning%2Fplanning_test_utils%2Finclude%2Fplanning_interface_test_manager%2Fplanning_interface_test_manager.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0104a87664a8707ccfe236fad746bdb39ef0f7ab/planning%2Fplanning_test_utils%2Finclude%2Fplanning_interface_test_manager%2Fplanning_interface_test_manager.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_test_utils%2Finclude%2Fplanning_interface_test_manager%2Fplanning_interface_test_manager.hpp?ref=0104a87664a8707ccfe236fad746bdb39ef0f7ab",
            "patch": "@@ -91,9 +91,6 @@ class PlanningInterfaceTestManager\n public:\n   PlanningInterfaceTestManager();\n \n-  void declareVehicleInfoParams(rclcpp::NodeOptions & node_options);\n-  void declareNearestSearchDistanceParams(rclcpp::NodeOptions & node_options);\n-\n   void publishOdometry(rclcpp::Node::SharedPtr target_node, std::string topic_name);\n   void publishInitialPose(rclcpp::Node::SharedPtr target_node, std::string topic_name);\n   void publishMaxVelocity(rclcpp::Node::SharedPtr target_node, std::string topic_name);"
        }
    ],
    "autowarefoundation/autoware.universe/3433": [
        {
            "sha": "98047ef70b06b07f0a6fa534262f78e38632897b",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2125cfd2d153ebec4e504c225be51ce8f3b3d700/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2125cfd2d153ebec4e504c225be51ce8f3b3d700/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=2125cfd2d153ebec4e504c225be51ce8f3b3d700",
            "patch": "@@ -2575,7 +2575,8 @@ void AvoidanceModule::modifyPathVelocityToPreventAccelerationOnAvoidance(Shifted\n \n   // apply velocity limit\n   constexpr size_t V_LIM_APPLY_IDX_MARGIN = 0;\n-  for (size_t i = insert_idx + V_LIM_APPLY_IDX_MARGIN; i < N; ++i) {\n+  for (size_t i = insert_idx + V_LIM_APPLY_IDX_MARGIN; i < std::min(path.path.points.size(), N);\n+       ++i) {\n     path.path.points.at(i).point.longitudinal_velocity_mps =\n       std::min(path.path.points.at(i).point.longitudinal_velocity_mps, static_cast<float>(vmax));\n   }\n@@ -3047,7 +3048,7 @@ AvoidLineArray AvoidanceModule::findNewShiftLine(\n     ss << \"i = \" << i << \", id = \" << candidate.id;\n     const auto pfx = ss.str().c_str();\n \n-    if (prev_reference_.points.size() != prev_linear_shift_path_.path.points.size()) {\n+    if (prev_reference_.points.size() != prev_linear_shift_path_.shift_length.size()) {\n       throw std::logic_error(\"prev_reference_ and prev_linear_shift_path_ must have same size.\");\n     }\n \n@@ -3455,7 +3456,7 @@ boost::optional<double> AvoidanceModule::getMildDecelDistance(const double targe\n \n double AvoidanceModule::getRelativeLengthFromPath(const AvoidLine & avoid_line) const\n {\n-  if (prev_reference_.points.size() != prev_linear_shift_path_.path.points.size()) {\n+  if (prev_reference_.points.size() != prev_linear_shift_path_.shift_length.size()) {\n     throw std::logic_error(\"prev_reference_ and prev_linear_shift_path_ must have same size.\");\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3434": [
        {
            "sha": "0a592d436083609a2095c040eee92d4b4ff0b92b",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 46,
            "deletions": 18,
            "changes": 64,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/988a7d0f9f413a8ec66a86f5563ac5d713c10593/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/988a7d0f9f413a8ec66a86f5563ac5d713c10593/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=988a7d0f9f413a8ec66a86f5563ac5d713c10593",
            "patch": "@@ -389,10 +389,7 @@ BehaviorModuleOutput PlannerManager::runApprovedModules(const std::shared_ptr<Pl\n       candidate_module_ptrs_.push_back(*itr);\n     }\n \n-    approved_module_ptrs_.erase(\n-      std::remove_if(\n-        approved_module_ptrs_.begin(), approved_module_ptrs_.end(), waiting_approval_modules),\n-      approved_module_ptrs_.end());\n+    approved_module_ptrs_.erase(itr, approved_module_ptrs_.end());\n   }\n \n   /**\n@@ -427,24 +424,55 @@ BehaviorModuleOutput PlannerManager::runApprovedModules(const std::shared_ptr<Pl\n     return results.at(output_module_name);\n   }();\n \n+  const auto not_success_itr = std::find_if(\n+    approved_module_ptrs_.rbegin(), approved_module_ptrs_.rend(),\n+    [](const auto & m) { return m->getCurrentStatus() != ModuleStatus::SUCCESS; });\n+\n+  // convert reverse iterator -> iterator\n+  const auto success_itr = std::prev(not_success_itr).base() - 1;\n+\n   /**\n-   * 1.remove success modules. these modules' outputs are used as valid plan.\n-   * 2.update root lanelet if lane change module succeeded path planning, and finished correctly.\n+   * there is no succeeded module. return.\n    */\n-  {\n-    const auto itr = std::find_if(\n-      approved_module_ptrs_.begin(), approved_module_ptrs_.end(),\n-      [](const auto & m) { return m->getCurrentStatus() == ModuleStatus::SUCCESS; });\n+  if (success_itr == approved_module_ptrs_.end()) {\n+    return approved_modules_output;\n+  }\n \n-    if (itr == approved_module_ptrs_.begin()) {\n-      if ((*itr)->name().find(\"lane_change\") != std::string::npos) {\n-        root_lanelet_ = updateRootLanelet(data);\n-      }\n+  const auto lane_change_itr = std::find_if(\n+    success_itr, approved_module_ptrs_.end(),\n+    [](const auto & m) { return m->name().find(\"lane_change\") != std::string::npos; });\n \n-      clearCandidateModules();\n-      deleteExpiredModules(*itr);\n-      approved_module_ptrs_.erase(itr);\n-    }\n+  /**\n+   * remove success modules according to Last In First Out(LIFO) policy. when the next module is in\n+   * ModuleStatus::RUNNING, the previous module keeps running even if it is in\n+   * ModuleStatus::SUCCESS.\n+   */\n+  if (lane_change_itr == approved_module_ptrs_.end()) {\n+    std::for_each(\n+      success_itr, approved_module_ptrs_.end(), [this](auto & m) { deleteExpiredModules(m); });\n+\n+    approved_module_ptrs_.erase(success_itr, approved_module_ptrs_.end());\n+    clearCandidateModules();\n+\n+    return approved_modules_output;\n+  }\n+\n+  /**\n+   * as an exception, when there is lane change module is in succeeded modules, it doesn't remove\n+   * any modules if module whose status is NOT ModuleStatus::SUCCESS exists. this is because the\n+   * root lanelet is updated at the moment of lane change module's unregistering, and that causes\n+   * change First In module's input.\n+   */\n+  if (not_success_itr == approved_module_ptrs_.rend()) {\n+    std::for_each(\n+      success_itr, approved_module_ptrs_.end(), [this](auto & m) { deleteExpiredModules(m); });\n+\n+    approved_module_ptrs_.erase(success_itr, approved_module_ptrs_.end());\n+    clearCandidateModules();\n+\n+    root_lanelet_ = updateRootLanelet(data);\n+\n+    return approved_modules_output;\n   }\n \n   return approved_modules_output;"
        }
    ],
    "autowarefoundation/autoware.universe/3436": [
        {
            "sha": "9f607ef172c03bb952a34176254f7fd1d6e64131",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/60d3ba61973b9e9ba07605a47e16c0452dfda0ac/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/60d3ba61973b9e9ba07605a47e16c0452dfda0ac/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=60d3ba61973b9e9ba07605a47e16c0452dfda0ac",
            "patch": "@@ -124,6 +124,11 @@ bool AvoidanceModule::isExecutionRequested() const\n #else\n   fillShiftLine(avoid_data, debug_data_);\n \n+  // there is object that should be avoid. return true.\n+  if (!!avoid_data.stop_target_object) {\n+    return true;\n+  }\n+\n   if (avoid_data.unapproved_new_sl.empty()) {\n     return false;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3472": [
        {
            "sha": "ab2788a7c755b9ede51db7a9d068a8520baf7242",
            "filename": "planning/static_centerline_optimizer/src/static_centerline_optimizer_node.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 4,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/532ce9fdc0ceb91716fe83ecb62829b416f02d80/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/532ce9fdc0ceb91716fe83ecb62829b416f02d80/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp?ref=532ce9fdc0ceb91716fe83ecb62829b416f02d80",
            "patch": "@@ -233,7 +233,6 @@ void StaticCenterlineOptimizerNode::run()\n   load_map(lanelet2_input_file_path);\n   const auto route_lane_ids = plan_route(start_lanelet_id, end_lanelet_id);\n   const auto optimized_traj_points = plan_path(route_lane_ids);\n-  evaluate(route_lane_ids, optimized_traj_points);\n   save_map(lanelet2_output_file_path, route_lane_ids, optimized_traj_points);\n }\n \n@@ -445,6 +444,9 @@ void StaticCenterlineOptimizerNode::on_plan_path(\n     return;\n   }\n \n+  // publish unsafe_footprints\n+  evaluate(route_lane_ids, optimized_traj_points);\n+\n   // create output data\n   auto target_traj_point = optimized_traj_points.cbegin();\n   bool is_end_lanelet = false;\n@@ -486,9 +488,13 @@ void StaticCenterlineOptimizerNode::evaluate(\n   const std::vector<TrajectoryPoint> & optimized_traj_points)\n {\n   const auto route_lanelets = get_lanelets_from_ids(*route_handler_ptr_, route_lane_ids);\n-\n-  const auto dist_thresh_vec = declare_parameter<std::vector<double>>(\"marker_color_dist_thresh\");\n-  const auto marker_color_vec = declare_parameter<std::vector<std::string>>(\"marker_color\");\n+  const auto dist_thresh_vec =\n+    has_parameter(\"marker_color_dist_thresh\")\n+      ? get_parameter(\"marker_color_dist_thresh\").as_double_array()\n+      : declare_parameter<std::vector<double>>(\"marker_color_dist_thresh\");\n+  const auto marker_color_vec = has_parameter(\"marker_color\")\n+                                  ? get_parameter(\"marker_color\").as_string_array()\n+                                  : declare_parameter<std::vector<std::string>>(\"marker_color\");\n   const auto get_marker_color = [&](const double dist) -> boost::optional<std::array<double, 3>> {\n     for (size_t i = 0; i < dist_thresh_vec.size(); ++i) {\n       const double dist_thresh = dist_thresh_vec.at(i);"
        }
    ],
    "autowarefoundation/autoware.universe/3477": [
        {
            "sha": "22e248fbfd14001cda13b375eadda3c4579604f2",
            "filename": "perception/map_based_prediction/src/map_based_prediction_node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0bf21071fba407ca4f5095b0b61833d6e671c5d0/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0bf21071fba407ca4f5095b0b61833d6e671c5d0/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fmap_based_prediction%2Fsrc%2Fmap_based_prediction_node.cpp?ref=0bf21071fba407ca4f5095b0b61833d6e671c5d0",
            "patch": "@@ -450,9 +450,10 @@ ObjectClassification::_label_type changeLabelForPrediction(\n       return ObjectClassification::MOTORCYCLE;\n     } else if (high_speed_object) {\n       // high speed object outside road lanelet will move like unknown object\n-      return ObjectClassification::UNKNOWN;\n+      // return ObjectClassification::UNKNOWN; // temporary disabled\n+      return label;\n     } else {\n-      return label == ObjectClassification::BICYCLE;\n+      return ObjectClassification::BICYCLE;\n     }\n   } else if (label == ObjectClassification::PEDESTRIAN) {\n     const bool within_road_lanelet = withinRoadLanelet(object, lanelet_map_ptr_, true);"
        }
    ],
    "autowarefoundation/autoware.universe/3478": [
        {
            "sha": "a37aa79288177a9078b38d1974d6073f33116fa4",
            "filename": "common/autoware_auto_perception_rviz_plugin/include/object_detection/object_polygon_display_base.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/66a8651a68a726f495470d26dbb96d71a17a8253/common%2Fautoware_auto_perception_rviz_plugin%2Finclude%2Fobject_detection%2Fobject_polygon_display_base.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/66a8651a68a726f495470d26dbb96d71a17a8253/common%2Fautoware_auto_perception_rviz_plugin%2Finclude%2Fobject_detection%2Fobject_polygon_display_base.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fautoware_auto_perception_rviz_plugin%2Finclude%2Fobject_detection%2Fobject_polygon_display_base.hpp?ref=66a8651a68a726f495470d26dbb96d71a17a8253",
            "patch": "@@ -81,15 +81,14 @@ class AUTOWARE_AUTO_PERCEPTION_RVIZ_PLUGIN_PUBLIC ObjectPolygonDisplayBase\n     m_default_topic{default_topic}\n   {\n     m_display_type_property = new rviz_common::properties::EnumProperty(\n-      \"Polygon Type\", \"3d\", \"Type of the polygon to display object.\", this, SLOT(updatePalette()));\n+      \"Polygon Type\", \"3d\", \"Type of the polygon to display object.\");\n     // Option values here must correspond to indices in palette_textures_ array in onInitialize()\n     // below.\n     m_display_type_property->addOption(\"3d\", 0);\n     m_display_type_property->addOption(\"2d\", 1);\n     m_display_type_property->addOption(\"Disable\", 2);\n     m_simple_visualize_mode_property = new rviz_common::properties::EnumProperty(\n-      \"Visualization Type\", \"Normal\", \"Simplicity of the polygon to display object.\", this,\n-      SLOT(updatePalette()));\n+      \"Visualization Type\", \"Normal\", \"Simplicity of the polygon to display object.\");\n     m_simple_visualize_mode_property->addOption(\"Normal\", 0);\n     m_simple_visualize_mode_property->addOption(\"Simple\", 1);\n     // iterate over default values to create and initialize the properties."
        }
    ],
    "autowarefoundation/autoware.universe/3488": [
        {
            "sha": "97255c08eeb1fb38896792b09aab04f1ed5ba1b7",
            "filename": "planning/behavior_path_planner/docs/behavior_path_planner_lane_change_design.md",
            "status": "modified",
            "additions": 13,
            "deletions": 11,
            "changes": 24,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3881d6dfac0329921429d3f18da282280b51b9e1/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_lane_change_design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3881d6dfac0329921429d3f18da282280b51b9e1/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_lane_change_design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_lane_change_design.md?ref=3881d6dfac0329921429d3f18da282280b51b9e1",
            "patch": "@@ -22,33 +22,35 @@ The lane change candidate path is divided into two phases: preparation and lane-\n The preparation trajectory is the candidate path's first and the straight portion generated along the ego vehicle's current lane. The length of the preparation trajectory is computed as follows.\n \n ```C++\n-lane_change_prepare_distance = max(current_speed * lane_change_prepare_duration + 0.5 * deceleration * lane_change_prepare_duration^2, minimum_lane_change_prepare_distance)\n+lane_change_prepare_distance = current_speed * lane_change_prepare_duration + 0.5 * deceleration * lane_change_prepare_duration^2\n ```\n \n During the preparation phase, the turn signal will be activated when the remaining distance is equal to or less than `lane_change_search_distance`.\n \n ### Lane-changing phase\n \n-The lane-changing phase consist of the shifted path that moves ego from current lane to the target lane. Total distance of lane-changing phase is as follows.\n+The lane-changing phase consist of the shifted path that moves ego from current lane to the target lane. Total distance of lane-changing phase is as follows. Note that during the lane changing phase, the ego vehicle travels at a constant speed.\n \n ```C++\n-lane_change_prepare_velocity = current_speed + deceleration * lane_change_prepare_duration\n-lane_changing_distance = max(lane_change_prepare_velocity * lane_changing_duration + 0.5 * deceleration * lane_changing_duration^2, minimum_lane_change_length + backward_length_buffer_for_end_of_lane)\n+lane_change_prepare_velocity = std::max(current_speed + deceleration * lane_change_prepare_duration, minimum_lane_changing_velocity)\n+lane_changing_distance = lane_change_prepare_velocity * lane_changing_duration\n ```\n \n The `backward_length_buffer_for_end_of_lane` is added to allow some window for any possible delay, such as control or mechanical delay during brake lag.\n \n #### Multiple candidate path samples\n \n Lane change velocity is affected by the ego vehicle's current velocity. High velocity requires longer preparation and lane changing distance. However we also need to plan lane changing trajectories in case ego vehicle slows down.\n-Computing candidate paths that assumes ego vehicle's slows down is performed by substituting predetermined deceleration value into `lane_change_prepare_distance`, `lane_change_prepare_velocity` and `lane_changing_distance` equation.\n+Computing candidate paths that assumes ego vehicle's slows down is performed by substituting predetermined deceleration value into `prepare_length`, `prepare_velocity` and `lane_changing_length` equation.\n \n-The predetermined deceleration are a set of value that starts from `deceleration = 0.0`, and decrease by `acceleration_resolution` until it reaches`deceleration = -maximum_deceleration`. The `acceleration_resolution` is determine by the following\n+The predetermined deceleration are a set of value that starts from `deceleration = 0.0`, and decrease by `acceleration_resolution` until it reaches`deceleration = -maximum_deceleration`. `maximum_deceleration` is defined in the `common.param` file as `normal.min_acc`. The `acceleration_resolution` is determine by the following\n \n ```C++\n acceleration_resolution = maximum_deceleration / lane_change_sampling_num\n ```\n \n+Note that when the `current_velocity` is lower than `minimum_lane_changing_velocity`, the vehicle needs to accelerate its velocity to `minimum_lane_changing_velocity`. Therefore, the acceleration becomes positive value (not deceleration).\n+\n The following figure illustrates when `lane_change_sampling_num = 4`. Assuming that `maximum_deceleration = 1.0` then `a0 == 0.0 == no deceleration`, `a1 == 0.25`, `a2 == 0.5`, `a3 == 0.75` and `a4 == 1.0 == maximum_deceleration`. `a0` is the expected lane change trajectories should ego vehicle do not decelerate, and `a1`'s path is the expected lane change trajectories should ego vehicle decelerate at `0.25 m/s^2`.\n \n ![path_samples](../image/lane_change/lane_change-candidate_path_samples.png)\n@@ -311,10 +313,11 @@ The parameter `prepare_phase_ignore_target_speed_thresh` can be configured to ig\n \n #### If the lane is blocked and multiple lane changes\n \n-When driving on the public road with other vehicles, there exist scenarios where lane changes cannot be executed. Suppose the candidate path is evaluated as unsafe, for example, due to incoming vehicles in the adjacent lane. In that case, the ego vehicle can't change lanes, and it is impossible to reach the goal. Therefore, the ego vehicle must stop earlier at a certain distance and wait for the adjacent lane to be evaluated as safe. The minimum stopping distance computation is as follows.\n+When driving on the public road with other vehicles, there exist scenarios where lane changes cannot be executed. Suppose the candidate path is evaluated as unsafe, for example, due to incoming vehicles in the adjacent lane. In that case, the ego vehicle can't change lanes, and it is impossible to reach the goal. Therefore, the ego vehicle must stop earlier at a certain distance and wait for the adjacent lane to be evaluated as safe. The minimum stopping distance can be computed from shift length and minimum lane changing velocity.\n \n ```C++\n-minimum_lane_change_distance = num_of_lane_changes * (minimum_lane_change_length + backward_length_buffer_for_end_of_lane)\n+lane_changing_time = f(shift_length, lat_acceleration, lat_jerk)\n+minimum_lane_change_distance = minimum_prepare_length + minimum_lane_changing_velocity * lane_changing_time + backward_length_buffer_for_end_of_lane\n ```\n \n The following figure illustrates when the lane is blocked in multiple lane changes cases.\n@@ -409,14 +412,13 @@ The following parameters are configurable in `lane_change.param.yaml`.\n \n | Name                                     | Unit   | Type   | Description                                                                             | Default value |\n | :--------------------------------------- | ------ | ------ | --------------------------------------------------------------------------------------- | ------------- |\n-| `lane_change_prepare_duration`           | [m]    | double | The preparation time for the ego vehicle to be ready to perform lane change.            | 4.0           |\n+| `prepare_duration`                       | [m]    | double | The preparation time for the ego vehicle to be ready to perform lane change.            | 4.0           |\n | `lane_changing_safety_check_duration`    | [m]    | double | The total time that is taken to complete the lane-changing task.                        | 8.0           |\n-| `minimum_lane_change_length`             | [m]    | double | The minimum distance needed for changing lanes.                                         | 16.5          |\n | `backward_length_buffer_for_end_of_lane` | [m]    | double | The end of lane buffer to ensure ego vehicle has enough distance to start lane change   | 2.0           |\n | `lane_change_finish_judge_buffer`        | [m]    | double | The additional buffer used to confirm lane change process completion                    | 3.0           |\n | `lane_changing_lateral_jerk`             | [m/s3] | double | Lateral jerk value for lane change path generation                                      | 0.5           |\n | `lane_changing_lateral_acc`              | [m/s2] | double | Lateral acceleration value for lane change path generation                              | 0.5           |\n-| `minimum_lane_change_velocity`           | [m/s]  | double | Minimum speed during lane changing process.                                             | 2.78          |\n+| `minimum_lane_changing_velocity`         | [m/s]  | double | Minimum speed during lane changing process.                                             | 2.78          |\n | `prediction_time_resolution`             | [s]    | double | Time resolution for object's path interpolation and collision check.                    | 0.5           |\n | `lane_change_sampling_num`               | [-]    | int    | Number of possible lane-changing trajectories that are being influenced by deceleration | 10            |\n "
        }
    ],
    "autowarefoundation/autoware.universe/3494": [
        {
            "sha": "357f5a9ada3d8963ec26750f3a80600bdce19a38",
            "filename": "planning/motion_velocity_smoother/src/motion_velocity_smoother_node.cpp",
            "status": "modified",
            "additions": 16,
            "deletions": 12,
            "changes": 28,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/87008dc1535283613cfe0a2857133fe6bc571ae0/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/87008dc1535283613cfe0a2857133fe6bc571ae0/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp?ref=87008dc1535283613cfe0a2857133fe6bc571ae0",
            "patch": "@@ -826,19 +826,23 @@ void MotionVelocitySmootherNode::applyExternalVelocityLimit(TrajectoryPoints & t\n   trajectory_utils::applyMaximumVelocityLimit(\n     0, traj.size(), max_velocity_with_deceleration_, traj);\n \n-  const size_t closest_idx = findNearestIndexFromEgo(traj);\n-\n-  double dist = 0.0;\n-  for (size_t idx = closest_idx; idx < traj.size() - 1; ++idx) {\n-    dist += tier4_autoware_utils::calcDistance2d(traj.at(idx), traj.at(idx + 1));\n-    if (dist > external_velocity_limit_.dist) {\n-      trajectory_utils::applyMaximumVelocityLimit(\n-        idx + 1, traj.size(), external_velocity_limit_.velocity, traj);\n-      return;\n-    }\n+  // insert the point at the distance of external velocity limit\n+  const auto & current_pose = current_odometry_ptr_->pose.pose;\n+  const size_t closest_seg_idx = motion_utils::findFirstNearestSegmentIndexWithSoftConstraints(\n+    traj, current_pose, node_param_.ego_nearest_dist_threshold,\n+    node_param_.ego_nearest_yaw_threshold);\n+  const auto inserted_index =\n+    motion_utils::insertTargetPoint(closest_seg_idx, external_velocity_limit_.dist, traj);\n+  if (!inserted_index) {\n+    traj.back().longitudinal_velocity_mps = std::min(\n+      traj.back().longitudinal_velocity_mps, static_cast<float>(external_velocity_limit_.velocity));\n+    return;\n   }\n-  traj.back().longitudinal_velocity_mps = std::min(\n-    traj.back().longitudinal_velocity_mps, static_cast<float>(external_velocity_limit_.velocity));\n+\n+  // apply external velocity limit from the inserted point\n+  trajectory_utils::applyMaximumVelocityLimit(\n+    *inserted_index, traj.size(), external_velocity_limit_.velocity, traj);\n+\n   RCLCPP_DEBUG(\n     get_logger(), \"externalVelocityLimit : limit_vel = %.3f\", external_velocity_limit_.velocity);\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3516": [
        {
            "sha": "de667136aa917f054ddb84e8088fa04b6ead1c3f",
            "filename": "planning/obstacle_stop_planner/src/node.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/230cfff5e861c4a620cbc2f4661a6e690a12e38f/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/230cfff5e861c4a620cbc2f4661a6e690a12e38f/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp?ref=230cfff5e861c4a620cbc2f4661a6e690a12e38f",
            "patch": "@@ -1129,6 +1129,10 @@ void ObstacleStopPlannerNode::insertVelocity(\n           return 0.0;\n         }\n \n+        if (ego_seg_idx == output.size() - 1) {\n+          return 0.0;\n+        }\n+\n         size_t stop_seg_idx = 0;\n         if (stop_point.index < output.size() - 1) {\n           const double lon_offset ="
        }
    ],
    "autowarefoundation/autoware.universe/3517": [
        {
            "sha": "b28c42f68ed7f69d4fa94904401610096ccb0d60",
            "filename": "common/rtc_manager_rviz_plugin/src/rtc_manager_panel.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/191077f79357c4f9655e1e0510cc564da88c23b9/common%2Frtc_manager_rviz_plugin%2Fsrc%2Frtc_manager_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/191077f79357c4f9655e1e0510cc564da88c23b9/common%2Frtc_manager_rviz_plugin%2Fsrc%2Frtc_manager_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Frtc_manager_rviz_plugin%2Fsrc%2Frtc_manager_panel.cpp?ref=191077f79357c4f9655e1e0510cc564da88c23b9",
            "patch": "@@ -454,6 +454,7 @@ void RTCManagerPanel::onRTCStatus(const CooperateStatusArray::ConstSharedPtr msg\n     }\n     cnt++;\n   }\n+  rtc_table_->update();\n }\n }  // namespace rviz_plugins\n "
        }
    ],
    "autowarefoundation/autoware.universe/3519": [
        {
            "sha": "9e6c5167f1f4f69fe69ed3f547d015974e0fceda",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6982ef89bb547c5a5eb978290be211684f271fa9/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6982ef89bb547c5a5eb978290be211684f271fa9/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=6982ef89bb547c5a5eb978290be211684f271fa9",
            "patch": "@@ -408,7 +408,7 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n       }\n     }\n \n-    if (!occlusion_first_stop_activated_) {\n+    if (!occlusion_first_stop_activated_ && occlusion_first_stop_line_idx) {\n       planning_utils::setVelocityFromIndex(\n         occlusion_first_stop_line_idx.value(), 0.0 /* [m/s] */, path);\n       debug_data_.occlusion_first_stop_wall_pose ="
        }
    ],
    "autowarefoundation/autoware.universe/3523": [
        {
            "sha": "7cff04192d0845c25900a229f57a44310f515e67",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/158c88fc94df1abc87ea9cd4e75fd6008ec8a0b0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/158c88fc94df1abc87ea9cd4e75fd6008ec8a0b0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=158c88fc94df1abc87ea9cd4e75fd6008ec8a0b0",
            "patch": "@@ -1323,7 +1323,7 @@ AvoidLineArray AvoidanceModule::trimShiftLine(\n \n   // - Combine avoid points that have almost same gradient (again)\n   {\n-    const auto CHANGE_SHIFT_THRESHOLD = 0.2;\n+    const auto CHANGE_SHIFT_THRESHOLD = 0.5;\n     trimSimilarGradShiftLine(sl_array_trimmed, CHANGE_SHIFT_THRESHOLD);\n     debug.trim_similar_grad_shift_third = sl_array_trimmed;\n     printShiftLines(sl_array_trimmed, \"after trim_similar_grad_shift_second\");"
        }
    ],
    "autowarefoundation/autoware.universe/3524": [
        {
            "sha": "73f8c7d569e4d934c5b955ca8fb32e64e13bc1a0",
            "filename": "planning/behavior_velocity_planner/src/node.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/deabc6edbad0c14fb0d3cd339009be0d8e905078/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/deabc6edbad0c14fb0d3cd339009be0d8e905078/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fnode.cpp?ref=deabc6edbad0c14fb0d3cd339009be0d8e905078",
            "patch": "@@ -230,6 +230,11 @@ bool BehaviorVelocityPlannerNode::isDataReady(\n       get_logger(), clock, 3000, \"Waiting for the initialization of velocity smoother\");\n     return false;\n   }\n+  if (!d.occupancy_grid) {\n+    RCLCPP_INFO_THROTTLE(\n+      get_logger(), clock, 3000, \"Waiting for the initialization of occupancy grid map\");\n+    return false;\n+  }\n   return true;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3528": [
        {
            "sha": "050f64124ba1bb45dc11808c1fa69f150699079b",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 24,
            "deletions": 24,
            "changes": 48,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2517e2724bdf33bf34189263abceeefea2d6921b/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2517e2724bdf33bf34189263abceeefea2d6921b/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=2517e2724bdf33bf34189263abceeefea2d6921b",
            "patch": "@@ -244,23 +244,14 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n     ego_lane_with_next_lane, objects_ptr, closest_idx, time_delay);\n \n   /* check occlusion on detection lane */\n-  const auto first_inside_detection_idx_ip_opt =\n-    first_detection_area ? util::getFirstPointInsidePolygon(\n-                             path_ip, lane_interval_ip_opt.value(), first_detection_area.value())\n-                         : std::nullopt;\n-  const std::pair<size_t, size_t> lane_detection_interval_ip =\n-    first_inside_detection_idx_ip_opt\n-      ? std::make_pair(\n-          first_inside_detection_idx_ip_opt.value(), std::get<1>(lane_interval_ip_opt.value()))\n-      : lane_interval_ip_opt.value();\n   const double occlusion_dist_thr = std::fabs(\n     std::pow(planner_param_.occlusion.max_vehicle_velocity_for_rss, 2) /\n     (2 * planner_param_.occlusion.min_vehicle_brake_for_rss));\n   const bool is_occlusion_cleared =\n     (enable_occlusion_detection_ && first_detection_area && !occlusion_attention_lanelets.empty())\n       ? isOcclusionCleared(\n           *planner_data_->occupancy_grid, occlusion_attention_area, first_detection_area.value(),\n-          path_ip, lane_detection_interval_ip, detection_divisions_.value(), occlusion_dist_thr)\n+          path_ip, lane_interval_ip, detection_divisions_.value(), occlusion_dist_thr)\n       : true;\n   const auto occlusion_peeking_line_idx_opt =\n     first_detection_area\n@@ -284,12 +275,11 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n   std::optional<std::pair<size_t, size_t>> insert_creep_during_occlusion = std::nullopt;\n   if (!is_occlusion_cleared) {\n     if (!default_stop_line_idx_opt) {\n-      occlusion_stop_required = true;\n-      stop_line_idx = occlusion_peeking_line_idx = occlusion_peeking_line_idx_opt;\n-      is_occluded_ = true;\n-      occlusion_state_ = OcclusionState::CREEP_SECOND_STOP_LINE;\n-      RCLCPP_WARN(logger_, \"directly stop at occlusion stop line because collision line not found\");\n-    } else if (before_creep_state_machine_.getState() == StateMachine::State::GO) {\n+      RCLCPP_DEBUG(logger_, \"occlusion is detected but default stop line is not set or generated\");\n+      RCLCPP_DEBUG(logger_, \"===== plan end =====\");\n+      return true;\n+    }\n+    if (before_creep_state_machine_.getState() == StateMachine::State::GO) {\n       occlusion_stop_required = true;\n       stop_line_idx = occlusion_peeking_line_idx = occlusion_peeking_line_idx_opt;\n       // clear first stop line\n@@ -299,10 +289,13 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n       is_occluded_ = true;\n       occlusion_state_ = OcclusionState::CREEP_SECOND_STOP_LINE;\n     } else {\n-      const double dist_default_stop_line = motion_utils::calcSignedArcLength(\n-        path_ip.points, current_pose.position,\n-        path->points.at(default_stop_line_idx_opt.value()).point.pose.position);\n-      if (dist_default_stop_line < planner_param_.common.stop_overshoot_margin) {\n+      const bool approached_stop_line =\n+        motion_utils::calcSignedArcLength(\n+          path_ip.points, current_pose.position,\n+          path->points.at(default_stop_line_idx_opt.value()).point.pose.position) <\n+        planner_param_.common.stop_overshoot_margin;\n+      const bool is_stopped = planner_data_->isVehicleStopped();\n+      if (is_stopped && approached_stop_line) {\n         // start waiting at the first stop line\n         before_creep_state_machine_.setStateWithMarginTime(\n           StateMachine::State::GO, logger_.get_child(\"occlusion state_machine\"), *clock_);\n@@ -396,7 +389,7 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n   }\n \n   /* make decision */\n-  const double baselink2front = planner_data_->vehicle_info_.vehicle_length_m;\n+  const double baselink2front = planner_data_->vehicle_info_.max_longitudinal_offset_m;\n   if (!occlusion_activated_) {\n     is_go_out_ = false;\n     /* in case of creeping */\n@@ -953,16 +946,23 @@ bool IntersectionModule::isOcclusionCleared(\n   const std::vector<lanelet::CompoundPolygon3d> & detection_areas,\n   const lanelet::CompoundPolygon3d & first_detection_area,\n   const autoware_auto_planning_msgs::msg::PathWithLaneId & path_ip,\n-  const std::pair<size_t, size_t> & lane_interval,\n+  const std::pair<size_t, size_t> & lane_interval_ip,\n   const std::vector<util::DetectionLaneDivision> & lane_divisions,\n   const double occlusion_dist_thr) const\n {\n   const auto first_detection_area_idx =\n-    util::getFirstPointInsidePolygon(path_ip, lane_interval, first_detection_area);\n+    util::getFirstPointInsidePolygon(path_ip, lane_interval_ip, first_detection_area);\n   if (!first_detection_area_idx) {\n     return false;\n   }\n \n+  const auto first_inside_detection_idx_ip_opt =\n+    util::getFirstPointInsidePolygon(path_ip, lane_interval_ip, first_detection_area);\n+  const std::pair<size_t, size_t> lane_detection_interval_ip =\n+    first_inside_detection_idx_ip_opt\n+      ? std::make_pair(first_inside_detection_idx_ip_opt.value(), std::get<1>(lane_interval_ip))\n+      : lane_interval_ip;\n+\n   const int width = occ_grid.info.width;\n   const int height = occ_grid.info.height;\n   const double reso = occ_grid.info.resolution;\n@@ -1061,7 +1061,7 @@ bool IntersectionModule::isOcclusionCleared(\n   cv::Mat distance_grid(width, height, CV_8UC1, cv::Scalar(undef_pixel));\n   cv::Mat projection_ind_grid(width, height, CV_32S, cv::Scalar(-1));\n \n-  const auto [lane_start, lane_end] = lane_interval;\n+  const auto [lane_start, lane_end] = lane_detection_interval_ip;\n   for (int i = static_cast<int>(lane_end); i >= static_cast<int>(lane_start); i--) {\n     const auto & path_pos = path_ip.points.at(i).point.pose.position;\n     const int idx_x = (path_pos.x - origin.x) / reso;"
        }
    ],
    "autowarefoundation/autoware.universe/3529": [
        {
            "sha": "f96ae0e1bbaac911e5faac716dac915d297cad6e",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a85746ad89b38ba3d69fa329cf5a54073a5a8d44/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a85746ad89b38ba3d69fa329cf5a54073a5a8d44/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=a85746ad89b38ba3d69fa329cf5a54073a5a8d44",
            "patch": "@@ -396,7 +396,7 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n   }\n \n   /* make decision */\n-  const double baselink2front = planner_data_->vehicle_info_.vehicle_length_m;\n+  const double baselink2front = planner_data_->vehicle_info_.max_longitudinal_offset_m;\n   if (!occlusion_activated_) {\n     is_go_out_ = false;\n     /* in case of creeping */"
        }
    ],
    "autowarefoundation/autoware.universe/3531": [
        {
            "sha": "2fdd76bfc8a93abe0245364226fc002ebfc20ef8",
            "filename": "planning/obstacle_avoidance_planner/src/mpt_optimizer.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a6869f42f90cee4a3f9b32d06652e12dafa66312/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a6869f42f90cee4a3f9b32d06652e12dafa66312/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp?ref=a6869f42f90cee4a3f9b32d06652e12dafa66312",
            "patch": "@@ -887,7 +887,7 @@ void MPTOptimizer::avoidSuddenSteering(\n   if (!prev_ref_points_ptr_) {\n     return;\n   }\n-  const size_t prev_idx = trajectory_utils::findEgoIndex(\n+  const size_t prev_ego_idx = trajectory_utils::findEgoIndex(\n     *prev_ref_points_ptr_, tier4_autoware_utils::getPose(ref_points.front()), ego_nearest_param_);\n \n   const double max_bound_fixing_length = ego_vel * mpt_param_.max_bound_fixing_time;\n@@ -899,7 +899,9 @@ void MPTOptimizer::avoidSuddenSteering(\n     std::min(ego_idx + static_cast<size_t>(max_bound_fixing_idx), ref_points.size());\n \n   for (size_t i = 0; i < max_fixed_bound_idx; ++i) {\n-    const auto & prev_bounds = prev_ref_points_ptr_->at(prev_idx + i).bounds;\n+    const size_t prev_idx = std::min(\n+      prev_ego_idx + i, static_cast<size_t>(static_cast<int>(prev_ref_points_ptr_->size()) - 1));\n+    const auto & prev_bounds = prev_ref_points_ptr_->at(prev_idx).bounds;\n \n     ref_points.at(i).bounds.upper_bound = prev_bounds.upper_bound;\n     ref_points.at(i).bounds.lower_bound = prev_bounds.lower_bound;"
        }
    ],
    "autowarefoundation/autoware.universe/3540": [
        {
            "sha": "1dfd1014834e1befbbdb1f15d746eb3f9cccd78f",
            "filename": "planning/behavior_path_planner/CMakeLists.txt",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1aade25752d5344e3283f991ba8d7e6b57138f53/planning%2Fbehavior_path_planner%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1aade25752d5344e3283f991ba8d7e6b57138f53/planning%2Fbehavior_path_planner%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2FCMakeLists.txt?ref=1aade25752d5344e3283f991ba8d7e6b57138f53",
            "patch": "@@ -69,7 +69,7 @@ else()\n     src/scene_module/avoidance/manager.cpp\n     src/scene_module/avoidance_by_lc/manager.cpp\n     src/scene_module/pull_out/manager.cpp\n-    src/scene_module/pull_over/manager.cpp\n+    src/scene_module/goal_planner/manager.cpp\n     src/scene_module/side_shift/manager.cpp\n     src/scene_module/lane_change/manager.cpp\n     ${common_src}"
        }
    ],
    "autowarefoundation/autoware.universe/3541": [
        {
            "sha": "99abd2288f08ee0e593cdf99e862650403786e8c",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3392d8477c1267e8414b7e9e264df5de2eb7d66b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3392d8477c1267e8414b7e9e264df5de2eb7d66b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=3392d8477c1267e8414b7e9e264df5de2eb7d66b",
            "patch": "@@ -345,7 +345,7 @@ bool GoalPlannerModule::isExecutionRequested() const\n     route_handler->isAllowedGoalModification() || checkOriginalGoalIsInShoulder();\n   const double request_length =\n     allow_goal_modification ? calcModuleRequestLength() : parameters_->minimum_request_length;\n-  if (self_to_goal_arc_length > request_length) {\n+  if (self_to_goal_arc_length < 0.0 || self_to_goal_arc_length > request_length) {\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3552": [
        {
            "sha": "94a6750b8300682ece9fa737b839365f3231f995",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/88659f479345c12f404b52bd25595aa65346d6d6/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/88659f479345c12f404b52bd25595aa65346d6d6/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=88659f479345c12f404b52bd25595aa65346d6d6",
            "patch": "@@ -387,7 +387,7 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n       occlusion_first_stop_safety_ = false;\n       occlusion_first_stop_distance_ = dist_1st_stopline;\n     }\n-    occlusion_safety_ = false;\n+    occlusion_safety_ = is_occlusion_cleared;\n     occlusion_stop_distance_ = dist_2nd_stopline;\n   } else {\n     /* collision */"
        }
    ],
    "autowarefoundation/autoware.universe/3555": [
        {
            "sha": "13efd541245fea7a4bef785977360a758ad10896",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fe9407a75c2d5947d1adb086f5c4bf0732bbe039/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fe9407a75c2d5947d1adb086f5c4bf0732bbe039/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=fe9407a75c2d5947d1adb086f5c4bf0732bbe039",
            "patch": "@@ -327,8 +327,10 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n     }\n   } else if (occlusion_state_ != OcclusionState::CLEARED) {\n     // previously occlusion existed, but now it is clear\n-    if (!util::isOverTargetIndex(\n-          *path, closest_idx, current_pose, default_stop_line_idx_opt.value())) {\n+    if (\n+      default_stop_line_idx_opt &&\n+      !util::isOverTargetIndex(\n+        *path, closest_idx, current_pose, default_stop_line_idx_opt.value())) {\n       stop_line_idx = default_stop_line_idx_opt.value();\n     } else if (\n       static_pass_judge_line_opt &&"
        }
    ],
    "autowarefoundation/autoware.universe/3561": [
        {
            "sha": "a33217d2551b375a24920080207bd5d55cac66df",
            "filename": "planning/behavior_path_planner/src/utils/goal_planner/default_fixed_goal_planner.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 3,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/21676cb44030448ae8011c6aa5a5eb1f7308b195/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgoal_planner%2Fdefault_fixed_goal_planner.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/21676cb44030448ae8011c6aa5a5eb1f7308b195/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgoal_planner%2Fdefault_fixed_goal_planner.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgoal_planner%2Fdefault_fixed_goal_planner.cpp?ref=21676cb44030448ae8011c6aa5a5eb1f7308b195",
            "patch": "@@ -50,12 +50,16 @@ boost::optional<BehaviorModuleOutput> DefaultFixedGoalPlanner::getReferencePath(\n   const double yaw_threshold = planner_data->parameters.ego_nearest_yaw_threshold;\n \n   lanelet::ConstLanelet current_lane{};\n-  if (!route_handler->getClosestLaneletWithConstrainsWithinRoute(\n+  if (route_handler->getClosestLaneletWithConstrainsWithinRoute(\n         current_pose, &current_lane, dist_threshold, yaw_threshold)) {\n-    return {};  // TODO(Horibe)\n+    return utils::getReferencePath(current_lane, planner_data);\n   }\n \n-  return utils::getReferencePath(current_lane, planner_data);\n+  if (route_handler->getClosestLaneletWithinRoute(current_pose, &current_lane)) {\n+    return utils::getReferencePath(current_lane, planner_data);\n+  }\n+\n+  return {};  // something wrong\n }\n \n PathWithLaneId DefaultFixedGoalPlanner::modifyPathForSmoothGoalConnection("
        }
    ],
    "autowarefoundation/autoware.universe/3571": [
        {
            "sha": "f5a15916f31a9a0c25a47bd00a17667ae80d086e",
            "filename": "perception/lidar_centerpoint/README.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c779c44d16fcfc9d525d665e0a02d34239cefc34/perception%2Flidar_centerpoint%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c779c44d16fcfc9d525d665e0a02d34239cefc34/perception%2Flidar_centerpoint%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_centerpoint%2FREADME.md?ref=c779c44d16fcfc9d525d665e0a02d34239cefc34",
            "patch": "@@ -56,8 +56,8 @@ You can download the onnx format of trained models by clicking on the links belo\n - Centerpoint : [pts_voxel_encoder_centerpoint.onnx](https://awf.ml.dev.web.auto/perception/models/centerpoint/v2/pts_voxel_encoder_centerpoint.onnx), [pts_backbone_neck_head_centerpoint.onnx](https://awf.ml.dev.web.auto/perception/models/centerpoint/v2/pts_backbone_neck_head_centerpoint.onnx)\n - Centerpoint tiny: [pts_voxel_encoder_centerpoint_tiny.onnx](https://awf.ml.dev.web.auto/perception/models/centerpoint/v2/pts_voxel_encoder_centerpoint_tiny.onnx), [pts_backbone_neck_head_centerpoint_tiny.onnx](https://awf.ml.dev.web.auto/perception/models/centerpoint/v2/pts_backbone_neck_head_centerpoint_tiny.onnx)\n \n-`Centerpoint` was trained in `nuScenes` (~110k lidar frames) [8] and TIER IV's internal database (~11k lidar frames) for 60 epochs.\n-`Centerpoint tiny` was trained in `Argoverse 2` (~28k lidar frames) [9] and TIER IV's internal database (~11k lidar frames) for 20 epochs.\n+`Centerpoint` was trained in `nuScenes` (~28k lidar frames) [8] and TIER IV's internal database (~11k lidar frames) for 60 epochs.\n+`Centerpoint tiny` was trained in `Argoverse 2` (~110k lidar frames) [9] and TIER IV's internal database (~11k lidar frames) for 20 epochs.\n \n ## Standalone inference and visualization\n "
        }
    ],
    "autowarefoundation/autoware.universe/3578": [
        {
            "sha": "f1516512c8993313bede2453073445cd139b3e53",
            "filename": "common/tier4_planning_rviz_plugin/src/path/display.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 9,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c18587a1660f2fdf22d441234b28c9f9e964ec0a/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Fpath%2Fdisplay.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c18587a1660f2fdf22d441234b28c9f9e964ec0a/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Fpath%2Fdisplay.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Fpath%2Fdisplay.cpp?ref=c18587a1660f2fdf22d441234b28c9f9e964ec0a",
            "patch": "@@ -33,9 +33,8 @@ void AutowarePathWithLaneIdDisplay::preProcessMessageDetail()\n         VehicleInfoUtil(*rviz_ros_node_.lock()->get_raw_node()).getVehicleInfo());\n       updateVehicleInfo();\n     } catch (const std::exception & e) {\n-      RCLCPP_WARN_THROTTLE(\n-        rviz_ros_node_.lock()->get_raw_node()->get_logger(),\n-        *rviz_ros_node_.lock()->get_raw_node()->get_clock(), 5000, \"Failed to get vehicle_info: %s\",\n+      RCLCPP_WARN_ONCE(\n+        rviz_ros_node_.lock()->get_raw_node()->get_logger(), \"Failed to get vehicle_info: %s\",\n         e.what());\n     }\n   }\n@@ -113,9 +112,8 @@ void AutowarePathDisplay::preProcessMessageDetail()\n         VehicleInfoUtil(*rviz_ros_node_.lock()->get_raw_node()).getVehicleInfo());\n       updateVehicleInfo();\n     } catch (const std::exception & e) {\n-      RCLCPP_WARN_THROTTLE(\n-        rviz_ros_node_.lock()->get_raw_node()->get_logger(),\n-        *rviz_ros_node_.lock()->get_raw_node()->get_clock(), 5000, \"Failed to get vehicle_info: %s\",\n+      RCLCPP_WARN_ONCE(\n+        rviz_ros_node_.lock()->get_raw_node()->get_logger(), \"Failed to get vehicle_info: %s\",\n         e.what());\n     }\n   }\n@@ -131,9 +129,8 @@ void AutowareTrajectoryDisplay::preProcessMessageDetail()\n         VehicleInfoUtil(*rviz_ros_node_.lock()->get_raw_node()).getVehicleInfo());\n       updateVehicleInfo();\n     } catch (const std::exception & e) {\n-      RCLCPP_WARN_THROTTLE(\n-        rviz_ros_node_.lock()->get_raw_node()->get_logger(),\n-        *rviz_ros_node_.lock()->get_raw_node()->get_clock(), 5000, \"Failed to get vehicle_info: %s\",\n+      RCLCPP_WARN_ONCE(\n+        rviz_ros_node_.lock()->get_raw_node()->get_logger(), \"Failed to get vehicle_info: %s\",\n         e.what());\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3601": [
        {
            "sha": "5db1381d5090506aea08e4d90ead11571cddf18a",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/172f6eb0f18c33b7363fb6d378ecf44497fa8fda/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/172f6eb0f18c33b7363fb6d378ecf44497fa8fda/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=172f6eb0f18c33b7363fb6d378ecf44497fa8fda",
            "patch": "@@ -345,7 +345,11 @@ bool GoalPlannerModule::isExecutionRequested() const\n     route_handler->isAllowedGoalModification() || checkOriginalGoalIsInShoulder();\n   const double request_length =\n     allow_goal_modification ? calcModuleRequestLength() : parameters_->minimum_request_length;\n-  if (self_to_goal_arc_length < 0.0 || self_to_goal_arc_length > request_length) {\n+  const double backward_goal_search_length =\n+    allow_goal_modification ? parameters_->backward_goal_search_length : 0.0;\n+  if (\n+    self_to_goal_arc_length < -backward_goal_search_length ||\n+    self_to_goal_arc_length > request_length) {\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3603": [
        {
            "sha": "fca5f73b608e27f93eccfcd1dfc75365eded08f7",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/debug.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/33e46c1844e548a8785d98b6adc385e4b26585af/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/33e46c1844e548a8785d98b6adc385e4b26585af/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fdebug.cpp?ref=33e46c1844e548a8785d98b6adc385e4b26585af",
            "patch": "@@ -223,7 +223,7 @@ visualization_msgs::msg::MarkerArray IntersectionModule::createVirtualWallMarker\n       &wall_marker, now);\n   }\n \n-  auto id = 0;\n+  auto id = planning_utils::bitShift(module_id_);\n   for (auto & marker : wall_marker.markers) {\n     if (marker.action == visualization_msgs::msg::Marker::ADD) {\n       marker.id = id;"
        }
    ],
    "autowarefoundation/autoware.universe/3611": [
        {
            "sha": "40bb32fbf3efbae9f6a2de2375adffd52dd57223",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 6,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fda95d929e5a281b5769cb10542ff789249e7a95/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fda95d929e5a281b5769cb10542ff789249e7a95/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=fda95d929e5a281b5769cb10542ff789249e7a95",
            "patch": "@@ -48,19 +48,21 @@ BehaviorModuleOutput PlannerManager::run(const std::shared_ptr<PlannerData> & da\n \n   auto result_output = [&]() {\n     const bool is_any_module_running = std::any_of(\n-      scene_modules_.begin(), scene_modules_.end(),\n-      [](const auto & module) { return module->getCurrentStatus() == BT::NodeStatus::RUNNING; });\n-    if (\n-      !is_any_module_running &&\n-      utils::isEgoOutOfRoute(\n-        data->self_odometry->pose.pose, data->prev_modified_goal, data->route_handler)) {\n+      approved_module_ptrs_.begin(), approved_module_ptrs_.end(),\n+      [](const auto & m) { return m->getCurrentStatus() == ModuleStatus::RUNNING; });\n+\n+    const bool is_out_of_route = utils::isEgoOutOfRoute(\n+      data->self_odometry->pose.pose, data->prev_modified_goal, data->route_handler);\n+\n+    if (!is_any_module_running && is_out_of_route) {\n       BehaviorModuleOutput output{};\n       const auto output_path =\n         utils::createGoalAroundPath(data->route_handler, data->prev_modified_goal);\n       output.path = std::make_shared<PathWithLaneId>(output_path);\n       output.reference_path = std::make_shared<PathWithLaneId>(output_path);\n       return output;\n     }\n+\n     while (rclcpp::ok()) {\n       /**\n        * STEP1: get approved modules' output"
        }
    ],
    "autowarefoundation/autoware.universe/3630": [
        {
            "sha": "a718f97f20d82bbaec9588fd5c24ed21d892dcfd",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 1,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ce77ea3e7d9938931ac3d1a59b97d417fc168623/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ce77ea3e7d9938931ac3d1a59b97d417fc168623/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=ce77ea3e7d9938931ac3d1a59b97d417fc168623",
            "patch": "@@ -47,10 +47,17 @@ BehaviorModuleOutput PlannerManager::run(const std::shared_ptr<PlannerData> & da\n     manager_ptrs_.begin(), manager_ptrs_.end(), [&data](const auto & m) { m->setData(data); });\n \n   auto result_output = [&]() {\n-    const bool is_any_module_running = std::any_of(\n+    const bool is_any_approved_module_running = std::any_of(\n       approved_module_ptrs_.begin(), approved_module_ptrs_.end(),\n       [](const auto & m) { return m->getCurrentStatus() == ModuleStatus::RUNNING; });\n \n+    const bool is_any_candidate_module_running = std::any_of(\n+      candidate_module_ptrs_.begin(), candidate_module_ptrs_.end(),\n+      [](const auto & m) { return m->getCurrentStatus() == ModuleStatus::RUNNING; });\n+\n+    const bool is_any_module_running =\n+      is_any_approved_module_running || is_any_candidate_module_running;\n+\n     const bool is_out_of_route = utils::isEgoOutOfRoute(\n       data->self_odometry->pose.pose, data->prev_modified_goal, data->route_handler);\n "
        }
    ],
    "autowarefoundation/autoware.universe/3631": [
        {
            "sha": "a69fdea549646e3e69d3f2adb02490452c74b5c9",
            "filename": "planning/behavior_path_planner/src/turn_signal_decider.cpp",
            "status": "modified",
            "additions": 23,
            "deletions": 4,
            "changes": 27,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a36f9095b54720486536a54a5e5a1772ae45504b/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a36f9095b54720486536a54a5e5a1772ae45504b/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp?ref=a36f9095b54720486536a54a5e5a1772ae45504b",
            "patch": "@@ -28,6 +28,16 @@\n \n namespace behavior_path_planner\n {\n+double calc_distance(\n+  const PathWithLaneId & path, const Pose & current_pose, const size_t current_seg_idx,\n+  const Pose & input_point, const double nearest_dist_threshold, const double nearest_yaw_threshold)\n+{\n+  const size_t nearest_seg_idx = motion_utils::findFirstNearestSegmentIndexWithSoftConstraints(\n+    path.points, input_point, nearest_dist_threshold, nearest_yaw_threshold);\n+  return motion_utils::calcSignedArcLength(\n+    path.points, current_pose.position, current_seg_idx, input_point.position, nearest_seg_idx);\n+}\n+\n TurnIndicatorsCommand TurnSignalDecider::getTurnSignal(\n   const std::shared_ptr<const PlannerData> & planner_data, const PathWithLaneId & path,\n   const TurnSignalInfo & turn_signal_info)\n@@ -73,6 +83,16 @@ TurnIndicatorsCommand TurnSignalDecider::getTurnSignal(\n \n   if (!intersection_turn_signal_info) {\n     initialize_intersection_info();\n+    const auto & desired_end_point = turn_signal_info.desired_end_point;\n+    const double dist_to_end_point = calc_distance(\n+      extended_path, current_pose, ego_seg_idx, desired_end_point, nearest_dist_threshold,\n+      nearest_yaw_threshold);\n+    if (dist_to_end_point < 0.0) {\n+      TurnIndicatorsCommand updated_turn_signal;\n+      updated_turn_signal.stamp = turn_signal_info.turn_signal.stamp;\n+      updated_turn_signal.command = TurnIndicatorsCommand::NO_COMMAND;\n+      return updated_turn_signal;\n+    }\n     return turn_signal_info.turn_signal;\n   } else if (\n     turn_signal_info.turn_signal.command == TurnIndicatorsCommand::NO_COMMAND ||\n@@ -224,10 +244,9 @@ TurnIndicatorsCommand TurnSignalDecider::resolve_turn_signal(\n   const double nearest_dist_threshold, const double nearest_yaw_threshold)\n {\n   const auto get_distance = [&](const Pose & input_point) {\n-    const size_t nearest_seg_idx = motion_utils::findFirstNearestSegmentIndexWithSoftConstraints(\n-      path.points, input_point, nearest_dist_threshold, nearest_yaw_threshold);\n-    return motion_utils::calcSignedArcLength(\n-      path.points, current_pose.position, current_seg_idx, input_point.position, nearest_seg_idx);\n+    return calc_distance(\n+      path, current_pose, current_seg_idx, input_point, nearest_dist_threshold,\n+      nearest_yaw_threshold);\n   };\n \n   const auto & inter_desired_start_point = intersection_signal_info.desired_start_point;"
        }
    ],
    "autowarefoundation/autoware.universe/3645": [
        {
            "sha": "76a3305390da856b65270323fb41f118324f5c3e",
            "filename": "launch/tier4_perception_launch/launch/object_recognition/detection/camera_lidar_fusion_based_detection.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bd9a1e815bb512ab0a205805b8c18197a0056780/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bd9a1e815bb512ab0a205805b8c18197a0056780/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml?ref=bd9a1e815bb512ab0a205805b8c18197a0056780",
            "patch": "@@ -230,7 +230,7 @@\n     <include file=\"$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml\">\n       <arg name=\"input/object0\" value=\"$(var merger/input/objects)\"/>\n       <arg name=\"input/object1\" value=\"clustering/camera_lidar_fusion/objects\"/>\n-      <arg name=\"output/object\" value=\"camera_lidar_fusion/objects\"/>\n+      <arg name=\"output/object\" value=\"$(var lidar_detection_model)_roi_cluster_fusion/objects\"/>\n       <arg name=\"priority_mode\" value=\"0\"/>\n     </include>\n   </group>\n@@ -239,7 +239,7 @@\n     <let name=\"merger/output/objects\" value=\"objects_before_filter\" if=\"$(var use_object_filter)\"/>\n     <let name=\"merger/output/objects\" value=\"$(var output/objects)\" unless=\"$(var use_object_filter)\"/>\n     <include file=\"$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml\">\n-      <arg name=\"input/object0\" value=\"camera_lidar_fusion/objects\"/>\n+      <arg name=\"input/object0\" value=\"$(var lidar_detection_model)_roi_cluster_fusion/objects\"/>\n       <arg name=\"input/object1\" value=\"detection_by_tracker/objects\"/>\n       <arg name=\"output/object\" value=\"$(var merger/output/objects)\"/>\n     </include>"
        }
    ],
    "autowarefoundation/autoware.universe/3649": [
        {
            "sha": "49d19c91c93c1ca8e2d7d4f6f16b8ccb9afe06dc",
            "filename": "planning/behavior_path_planner/src/utils/avoidance/utils.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bd6fcc2248999fbc31db015ed60b7a04c5cffcab/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bd6fcc2248999fbc31db015ed60b7a04c5cffcab/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp?ref=bd6fcc2248999fbc31db015ed60b7a04c5cffcab",
            "patch": "@@ -187,7 +187,7 @@ void fillLongitudinalAndLengthByClosestEnvelopeFootprint(\n   const PathWithLaneId & path, const Point & ego_pos, ObjectData & obj)\n {\n   double min_distance = std::numeric_limits<double>::max();\n-  double max_distance = std::numeric_limits<double>::min();\n+  double max_distance = std::numeric_limits<double>::lowest();\n   for (const auto & p : obj.envelope_poly.outer()) {\n     const auto point = tier4_autoware_utils::createPoint(p.x(), p.y(), 0.0);\n     const double arc_length = motion_utils::calcSignedArcLength(path.points, ego_pos, point);"
        }
    ],
    "autowarefoundation/autoware.universe/3652": [
        {
            "sha": "d7ff3b5a7c99451d81ec096d6608a8153feadf84",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/00399cd63a1e2b618f0784900983f5b9912cbe05/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/00399cd63a1e2b618f0784900983f5b9912cbe05/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=00399cd63a1e2b618f0784900983f5b9912cbe05",
            "patch": "@@ -446,6 +446,9 @@ BehaviorModuleOutput PlannerManager::runApprovedModules(const std::shared_ptr<Pl\n     if (itr != approved_module_ptrs_.end()) {\n       clearCandidateModules();\n       candidate_module_ptrs_.push_back(*itr);\n+\n+      std::for_each(\n+        std::next(itr), approved_module_ptrs_.end(), [this](auto & m) { deleteExpiredModules(m); });\n     }\n \n     approved_module_ptrs_.erase(itr, approved_module_ptrs_.end());"
        }
    ],
    "autowarefoundation/autoware.universe/3661": [
        {
            "sha": "5ebb5980dc4d5e68dfc5f8082a966f018ccb5aac",
            "filename": "planning/planning_test_utils/include/planning_interface_test_manager/planning_interface_test_manager_utils.hpp",
            "status": "modified",
            "additions": 4,
            "deletions": 3,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/33515b43dfc03cd4c4b1c113ca278e3fd7c4237a/planning%2Fplanning_test_utils%2Finclude%2Fplanning_interface_test_manager%2Fplanning_interface_test_manager_utils.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/33515b43dfc03cd4c4b1c113ca278e3fd7c4237a/planning%2Fplanning_test_utils%2Finclude%2Fplanning_interface_test_manager%2Fplanning_interface_test_manager_utils.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_test_utils%2Finclude%2Fplanning_interface_test_manager%2Fplanning_interface_test_manager_utils.hpp?ref=33515b43dfc03cd4c4b1c113ca278e3fd7c4237a",
            "patch": "@@ -342,10 +342,11 @@ void spinSomeNodes(\n   rclcpp::Node::SharedPtr test_node, rclcpp::Node::SharedPtr target_node,\n   const int repeat_count = 1)\n {\n+  rclcpp::executors::SingleThreadedExecutor executor;\n+  executor.add_node(test_node);\n+  executor.add_node(target_node);\n   for (int i = 0; i < repeat_count; i++) {\n-    rclcpp::spin_some(test_node);\n-    rclcpp::sleep_for(std::chrono::milliseconds(100));\n-    rclcpp::spin_some(target_node);\n+    executor.spin_some(std::chrono::milliseconds(100));\n     rclcpp::sleep_for(std::chrono::milliseconds(100));\n   }\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3662": [
        {
            "sha": "53b18545c3c79ff921b69db7fc0ed07e97ba979f",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 2,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/20d092011cf3e536616702f8731dd3cf504ad36f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/20d092011cf3e536616702f8731dd3cf504ad36f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=20d092011cf3e536616702f8731dd3cf504ad36f",
            "patch": "@@ -2877,24 +2877,35 @@ CandidateOutput AvoidanceModule::planCandidate() const\n \n BehaviorModuleOutput AvoidanceModule::planWaitingApproval()\n {\n+  const auto & data = avoidance_data_;\n+\n   // we can execute the plan() since it handles the approval appropriately.\n   BehaviorModuleOutput out = plan();\n+\n #ifndef USE_OLD_ARCHITECTURE\n   if (path_shifter_.getShiftLines().empty()) {\n     out.turn_signal_info = getPreviousModuleOutput().turn_signal_info;\n   }\n #endif\n+\n+  const auto all_unavoidable = std::all_of(\n+    data.target_objects.begin(), data.target_objects.end(),\n+    [](const auto & o) { return !o.is_avoidable; });\n+\n   const auto candidate = planCandidate();\n-  constexpr double threshold_to_update_status = -1.0e-03;\n-  if (candidate.start_distance_to_path_change > threshold_to_update_status) {\n+  if (!avoidance_data_.safe_new_sl.empty()) {\n     updateCandidateRTCStatus(candidate);\n     waitApproval();\n+  } else if (all_unavoidable) {\n+    waitApproval();\n   } else {\n     clearWaitingApproval();\n     removeCandidateRTCStatus();\n   }\n+\n   path_candidate_ = std::make_shared<PathWithLaneId>(candidate.path_candidate);\n   path_reference_ = getPreviousModuleOutput().reference_path;\n+\n   return out;\n }\n \n@@ -3142,6 +3153,7 @@ void AvoidanceModule::updateData()\n void AvoidanceModule::processOnEntry()\n {\n   initVariables();\n+  waitApproval();\n }\n \n void AvoidanceModule::processOnExit()"
        }
    ],
    "autowarefoundation/autoware.universe/3667": [
        {
            "sha": "21e2404f6bbc6886775f52f3b7862c023104085c",
            "filename": "map/map_loader/README.md",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5110e31d26a1638c65c6f0b922987a0b7696bdfa/map%2Fmap_loader%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5110e31d26a1638c65c6f0b922987a0b7696bdfa/map%2Fmap_loader%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2FREADME.md?ref=5110e31d26a1638c65c6f0b922987a0b7696bdfa",
            "patch": "@@ -103,11 +103,11 @@ If you have multiple rosbags, an example directory structure would be as follows\n ```bash\n sample-map-rosbag\n \u251c\u2500\u2500 lanelet2_map.osm\n-\u251c\u2500\u2500 pointcloud_map\n-\u251c\u2500\u2500 pcd_00.pcd\n-\u251c\u2500\u2500 pcd_01.pcd\n-\u251c\u2500\u2500 pcd_02.pcd\n-\u251c\u2500\u2500 ...\n+\u251c\u2500\u2500 pointcloud_map.pcd\n+\u2502 \u251c\u2500\u2500 A.pcd\n+\u2502 \u251c\u2500\u2500 B.pcd\n+\u2502 \u251c\u2500\u2500 C.pcd\n+\u2502 \u2514\u2500\u2500 ...\n \u2514\u2500\u2500 pointcloud_map_metadata.yaml\n ```\n "
        }
    ],
    "autowarefoundation/autoware.universe/3670": [
        {
            "sha": "0e8b157a9941163af991a6a78f64bd15fc33ed90",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e6157dd2dcf92ec7c0bf6181d540e742f124182a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e6157dd2dcf92ec7c0bf6181d540e742f124182a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=e6157dd2dcf92ec7c0bf6181d540e742f124182a",
            "patch": "@@ -176,8 +176,8 @@ void GoalPlannerModule::onTimer()\n                                     const GoalCandidate & goal_candidate) {\n     planner->setPlannerData(planner_data_);\n     auto pull_over_path = planner->plan(goal_candidate.goal_pose);\n-    pull_over_path->goal_id = goal_candidate.id;\n     if (pull_over_path && isCrossingPossible(*pull_over_path)) {\n+      pull_over_path->goal_id = goal_candidate.id;\n       path_candidates.push_back(*pull_over_path);\n       // calculate closest pull over start pose for stop path\n       const double start_arc_length ="
        }
    ],
    "autowarefoundation/autoware.universe/3672": [
        {
            "sha": "412bab01d6b9c349dd5279ed339a1e04149d8e41",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/scene_module_manager_interface.hpp",
            "status": "modified",
            "additions": 5,
            "deletions": 3,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2774e53b6b4ed05f5f5163142febbf2d5dc3caca/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2774e53b6b4ed05f5f5163142febbf2d5dc3caca/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp?ref=2774e53b6b4ed05f5f5163142febbf2d5dc3caca",
            "patch": "@@ -225,9 +225,11 @@ class SceneModuleManagerInterface\n     });\n     registered_modules_.clear();\n \n-    idling_module_->onExit();\n-    idling_module_->publishRTCStatus();\n-    idling_module_.reset();\n+    if (idling_module_ != nullptr) {\n+      idling_module_->onExit();\n+      idling_module_->publishRTCStatus();\n+      idling_module_.reset();\n+    }\n \n     pub_debug_marker_->publish(MarkerArray{});\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3678": [
        {
            "sha": "1fbdd6b5423941c4884fe282a24dce7992662f23",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2f766d2fa13c49753b69c7ed05c2ba8a0e33b27a/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2f766d2fa13c49753b69c7ed05c2ba8a0e33b27a/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=2f766d2fa13c49753b69c7ed05c2ba8a0e33b27a",
            "patch": "@@ -999,7 +999,9 @@ bool isEgoOutOfRoute(\n   const Pose & self_pose, const std::optional<PoseWithUuidStamped> & modified_goal,\n   const std::shared_ptr<RouteHandler> & route_handler)\n {\n-  const Pose & goal_pose = modified_goal ? modified_goal->pose : route_handler->getGoalPose();\n+  const Pose & goal_pose = (modified_goal && modified_goal->uuid == route_handler->getRouteUuid())\n+                             ? modified_goal->pose\n+                             : route_handler->getGoalPose();\n   const auto shoulder_lanes = route_handler->getShoulderLanelets();\n \n   lanelet::ConstLanelet goal_lane;"
        }
    ],
    "autowarefoundation/autoware.universe/3689": [
        {
            "sha": "7d635f0cedcad5b224b8a628bea2fd2b43099645",
            "filename": "common/tier4_planning_rviz_plugin/include/path/display.hpp",
            "status": "modified",
            "additions": 42,
            "deletions": 7,
            "changes": 49,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ee0431e86d2250359f7e8ac8508c15b43456820f/common%2Ftier4_planning_rviz_plugin%2Finclude%2Fpath%2Fdisplay.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ee0431e86d2250359f7e8ac8508c15b43456820f/common%2Ftier4_planning_rviz_plugin%2Finclude%2Fpath%2Fdisplay.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_planning_rviz_plugin%2Finclude%2Fpath%2Fdisplay.hpp?ref=ee0431e86d2250359f7e8ac8508c15b43456820f",
            "patch": "@@ -54,20 +54,55 @@ void visualizeBound(\n   bound_object->estimateVertexCount(bound.size() * 2);\n   bound_object->begin(\"BaseWhiteNoLighting\", Ogre::RenderOperation::OT_TRIANGLE_STRIP);\n \n+  // calculate normal vector of bound and widths depending on the normal vector\n+  std::vector<float> normal_vector_angles;\n+  std::vector<float> adaptive_widths;\n   for (size_t i = 0; i < bound.size(); ++i) {\n-    const auto & curr_p = i == bound.size() - 1 ? bound.at(i - 1) : bound.at(i);\n-    const auto & next_p = i == bound.size() - 1 ? bound.at(i) : bound.at(i + 1);\n-    const auto yaw = tier4_autoware_utils::calcAzimuthAngle(curr_p, next_p);\n-    const auto x_offset = static_cast<float>(width * 0.5 * std::sin(yaw));\n-    const auto y_offset = static_cast<float>(width * 0.5 * std::cos(yaw));\n+    const auto [normal_vector_angle, adaptive_width] = [&]() -> std::pair<float, float> {\n+      if (i == 0) {\n+        return std::make_pair(\n+          tier4_autoware_utils::calcAzimuthAngle(bound.at(i), bound.at(i + 1)) + M_PI_2, width);\n+      }\n+      if (i == bound.size() - 1) {\n+        return std::make_pair(\n+          tier4_autoware_utils::calcAzimuthAngle(bound.at(i - 1), bound.at(i)) + M_PI_2, width);\n+      }\n+      const auto & prev_p = bound.at(i - 1);\n+      const auto & curr_p = bound.at(i);\n+      const auto & next_p = bound.at(i + 1);\n+\n+      const float curr_to_prev_angle = tier4_autoware_utils::calcAzimuthAngle(curr_p, prev_p);\n+      const float curr_to_next_angle = tier4_autoware_utils::calcAzimuthAngle(curr_p, next_p);\n+      const float normal_vector_angle = (curr_to_prev_angle + curr_to_next_angle) / 2.0;\n+\n+      const float diff_angle =\n+        tier4_autoware_utils::normalizeRadian(normal_vector_angle - curr_to_next_angle);\n+      if (diff_angle == 0.0) {\n+        return std::make_pair(normal_vector_angle, width);\n+      }\n+\n+      return std::make_pair(normal_vector_angle, width / std::sin(diff_angle));\n+    }();\n+\n+    normal_vector_angles.push_back(normal_vector_angle);\n+    adaptive_widths.push_back(adaptive_width);\n+  }\n+\n+  // calculate triangle\n+  for (size_t i = 0; i < bound.size(); ++i) {\n+    const float normal_vector_angle = normal_vector_angles.at(i);\n+    const float adaptive_width = adaptive_widths.at(i);\n+\n+    const auto x_offset = static_cast<float>(adaptive_width * 0.5 * std::cos(normal_vector_angle));\n+    const auto y_offset = static_cast<float>(adaptive_width * 0.5 * std::sin(normal_vector_angle));\n     auto target_lp = bound.at(i);\n-    target_lp.x = target_lp.x - x_offset;\n+    target_lp.x = target_lp.x + x_offset;\n     target_lp.y = target_lp.y + y_offset;\n     target_lp.z = target_lp.z;\n     bound_object->position(target_lp.x, target_lp.y, target_lp.z);\n     bound_object->colour(color);\n     auto target_rp = bound.at(i);\n-    target_rp.x = target_rp.x + x_offset;\n+    target_rp.x = target_rp.x - x_offset;\n     target_rp.y = target_rp.y - y_offset;\n     target_rp.z = target_rp.z;\n     bound_object->position(target_rp.x, target_rp.y, target_rp.z);"
        }
    ],
    "autowarefoundation/autoware.universe/3701": [
        {
            "sha": "439b68e9032ddd6ac137151ddb766c71e4e2359c",
            "filename": "planning/obstacle_avoidance_planner/src/mpt_optimizer.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9485d306b0f5e4845424471cbc6ab07fe2ed1020/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9485d306b0f5e4845424471cbc6ab07fe2ed1020/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp?ref=9485d306b0f5e4845424471cbc6ab07fe2ed1020",
            "patch": "@@ -921,7 +921,7 @@ void MPTOptimizer::keepMinimumBoundsWidth(std::vector<ReferencePoint> & ref_poin\n       // Only the Lower bound is cut out. Widen the bounds towards the lower bound since cut out too\n       // much.\n       b.lower_bound =\n-        std::min(b.lower_bound, original_b.upper_bound + mpt_param_.min_drivable_width);\n+        std::min(b.lower_bound, original_b.upper_bound - mpt_param_.min_drivable_width);\n       continue;\n     }\n     // extend longitudinal if it overlaps out_of_upper_bound_sections\n@@ -971,7 +971,7 @@ void MPTOptimizer::keepMinimumBoundsWidth(std::vector<ReferencePoint> & ref_poin\n       // Only the Upper bound is cut out. Widen the bounds towards the upper bound since cut out too\n       // much.\n       b.upper_bound =\n-        std::max(b.upper_bound, original_b.lower_bound - mpt_param_.min_drivable_width);\n+        std::max(b.upper_bound, original_b.lower_bound + mpt_param_.min_drivable_width);\n       continue;\n     }\n     // extend longitudinal if it overlaps out_of_lower_bound_sections"
        }
    ],
    "autowarefoundation/autoware.universe/3709": [
        {
            "sha": "d596fde7d8b9c04fd47bcbaa4804c4af3adcd8c3",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/scene_module_manager_interface.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f57201ff27b1485081e5d24623bc93cfe1e84695/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f57201ff27b1485081e5d24623bc93cfe1e84695/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp?ref=f57201ff27b1485081e5d24623bc93cfe1e84695",
            "patch": "@@ -74,6 +74,7 @@ class SceneModuleManagerInterface\n   SceneModulePtr getNewModule()\n   {\n     if (idling_module_ != nullptr) {\n+      idling_module_->onEntry();\n       return idling_module_;\n     }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3712": [
        {
            "sha": "80ead93b5a77b976d399e2e4e32b81d981e6d63f",
            "filename": "planning/behavior_velocity_planner/src/scene_module/intersection/scene_intersection.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8a6301ba7e29b7e6d25a4775a37ad720323f6206/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8a6301ba7e29b7e6d25a4775a37ad720323f6206/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fintersection%2Fscene_intersection.cpp?ref=8a6301ba7e29b7e6d25a4775a37ad720323f6206",
            "patch": "@@ -328,7 +328,10 @@ bool IntersectionModule::modifyPathVelocity(PathWithLaneId * path, StopReason *\n       stop_line_idx = occlusion_first_stop_line_idx;\n       // insert creep velocity [default_stop_line, occlusion_stop_line)\n       insert_creep_during_occlusion =\n-        std::make_pair(default_stop_line_idx_opt.value(), occlusion_peeking_line_idx_opt.value());\n+        default_stop_line_idx_opt && occlusion_peeking_line_idx_opt\n+          ? std::make_optional<std::pair<size_t, size_t>>(\n+              default_stop_line_idx_opt.value(), occlusion_peeking_line_idx_opt.value())\n+          : std::nullopt;\n       occlusion_state_ = OcclusionState::BEFORE_FIRST_STOP_LINE;\n     }\n   } else if (occlusion_state_ != OcclusionState::CLEARED) {"
        }
    ],
    "autowarefoundation/autoware.universe/3713": [
        {
            "sha": "47569ed2bd82c3c34e1972b99f26f1bd3465288a",
            "filename": "launch/tier4_perception_launch/launch/perception.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ece8a839b6205b0e06a5cfced354e3d3e9125e4d/launch%2Ftier4_perception_launch%2Flaunch%2Fperception.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ece8a839b6205b0e06a5cfced354e3d3e9125e4d/launch%2Ftier4_perception_launch%2Flaunch%2Fperception.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fperception.launch.xml?ref=ece8a839b6205b0e06a5cfced354e3d3e9125e4d",
            "patch": "@@ -36,6 +36,7 @@\n   <arg name=\"image_raw7\" default=\"/sensing/camera/camera7/image_rect_color\"/>\n   <arg name=\"camera_info7\" default=\"/sensing/camera/camera7/camera_info\"/>\n   <arg name=\"image_number\" default=\"6\" description=\"choose image raw number(1-8)\"/>\n+  <arg name=\"object_recognition_detection_fusion_sync_param_path\" description=\"you need change the size of 'input_offset_ms' in the file in this path when you want to change image_number\"/>\n   <arg name=\"use_vector_map\" default=\"true\" description=\"use vector map in prediction\"/>\n   <arg name=\"use_pointcloud_map\" default=\"true\" description=\"use pointcloud map in detection\"/>\n   <arg name=\"use_object_filter\" default=\"true\" description=\"use object filter\"/>\n@@ -113,6 +114,7 @@\n           <arg name=\"image_raw7\" value=\"$(var image_raw7)\"/>\n           <arg name=\"camera_info7\" value=\"$(var camera_info7)\"/>\n           <arg name=\"image_number\" value=\"$(var image_number)\"/>\n+          <arg name=\"sync_param_path\" value=\"$(var object_recognition_detection_fusion_sync_param_path)\"/>\n           <arg name=\"use_pointcloud_map\" value=\"$(var use_pointcloud_map)\"/>\n           <arg name=\"use_object_filter\" value=\"$(var use_object_filter)\"/>\n           <arg name=\"use_pointcloud_container\" value=\"$(var use_pointcloud_container)\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/3715": [
        {
            "sha": "12e054cd0531f3da85067a76dd72dcb0880b8b25",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4b86dbfb8c4d39f42c86ed64910f82bff85dda7f/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4b86dbfb8c4d39f42c86ed64910f82bff85dda7f/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=4b86dbfb8c4d39f42c86ed64910f82bff85dda7f",
            "patch": "@@ -1018,7 +1018,10 @@ bool isEgoOutOfRoute(\n   }\n \n   // If ego vehicle is over goal on goal lane, return true\n-  if (lanelet::utils::isInLanelet(self_pose, goal_lane)) {\n+  lanelet::ConstLanelet closest_lane;\n+  const double yaw_threshold = tier4_autoware_utils::deg2rad(90);\n+  if (lanelet::utils::query::getClosestLaneletWithConstrains(\n+        {goal_lane}, self_pose, &closest_lane, 0.0, yaw_threshold)) {\n     constexpr double buffer = 1.0;\n     const auto ego_arc_coord = lanelet::utils::getArcCoordinates({goal_lane}, self_pose);\n     const auto goal_arc_coord ="
        }
    ],
    "autowarefoundation/autoware.universe/3716": [
        {
            "sha": "2747a8fd262c5d3b05147804c044933bc58fe3b0",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 41,
            "deletions": 7,
            "changes": 48,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/13b8e43d3a24877cff7d781c2c145e6ef0877f5c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/13b8e43d3a24877cff7d781c2c145e6ef0877f5c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=13b8e43d3a24877cff7d781c2c145e6ef0877f5c",
            "patch": "@@ -169,14 +169,49 @@ boost::optional<std::pair<size_t, geometry_msgs::msg::Point>> intersectBound(\n   return boost::none;\n }\n \n+double calcDistanceFromPointToSegment(\n+  const geometry_msgs::msg::Point & segment_start_point,\n+  const geometry_msgs::msg::Point & segment_end_point,\n+  const geometry_msgs::msg::Point & target_point)\n+{\n+  const auto & a = segment_start_point;\n+  const auto & b = segment_end_point;\n+  const auto & p = target_point;\n+\n+  const double dot_val = (b.x - a.x) * (p.x - a.x) + (b.y - a.y) * (p.y - a.y);\n+  const double squared_segment_length = tier4_autoware_utils::calcSquaredDistance2d(a, b);\n+  if (0 <= dot_val && dot_val <= squared_segment_length) {\n+    const double numerator = std::abs((p.x - a.x) * (a.y - b.y) - (p.y - a.y) * (a.x - b.x));\n+    const double denominator = std::sqrt(std::pow(a.x - b.x, 2) + std::pow(a.y - b.y, 2));\n+    return numerator / denominator;\n+  }\n+\n+  // target_point is outside the segment.\n+  return std::min(\n+    tier4_autoware_utils::calcDistance2d(a, p), tier4_autoware_utils::calcDistance2d(b, p));\n+}\n+\n PolygonPoint transformBoundFrenetCoordinate(\n-  const std::vector<geometry_msgs::msg::Point> & points, const geometry_msgs::msg::Point & point)\n+  const std::vector<geometry_msgs::msg::Point> & bound_points,\n+  const geometry_msgs::msg::Point & target_point)\n {\n-  const size_t seg_idx = motion_utils::findNearestSegmentIndex(points, point);\n+  // NOTE: findNearestSegmentIndex cannot be used since a bound's interval is sometimes too large to\n+  // find wrong nearest index.\n+  std::vector<double> dist_to_bound_segment_vec;\n+  for (size_t i = 0; i < bound_points.size() - 1; ++i) {\n+    const double dist_to_bound_segment =\n+      calcDistanceFromPointToSegment(bound_points.at(i), bound_points.at(i + 1), target_point);\n+    dist_to_bound_segment_vec.push_back(dist_to_bound_segment);\n+  }\n+\n+  const size_t min_dist_seg_idx = std::distance(\n+    dist_to_bound_segment_vec.begin(),\n+    std::min_element(dist_to_bound_segment_vec.begin(), dist_to_bound_segment_vec.end()));\n   const double lon_dist_to_segment =\n-    motion_utils::calcLongitudinalOffsetToSegment(points, seg_idx, point);\n-  const double lat_dist = motion_utils::calcLateralOffset(points, point, seg_idx);\n-  return PolygonPoint{point, seg_idx, lon_dist_to_segment, lat_dist};\n+    motion_utils::calcLongitudinalOffsetToSegment(bound_points, min_dist_seg_idx, target_point);\n+  const double lat_dist_to_segment =\n+    motion_utils::calcLateralOffset(bound_points, target_point, min_dist_seg_idx);\n+  return PolygonPoint{target_point, min_dist_seg_idx, lon_dist_to_segment, lat_dist_to_segment};\n }\n \n std::vector<PolygonPoint> generatePolygonInsideBounds(\n@@ -2854,8 +2889,7 @@ void extractObstaclesFromDrivableArea(\n     }\n   }\n \n-  for (size_t i = 0; i < 2; ++i) {  // for loop for right and left\n-    const bool is_object_right = (i == 0);\n+  for (const bool is_object_right : {true, false}) {\n     const auto & polygons = is_object_right ? right_polygons : left_polygons;\n     if (polygons.empty()) {\n       continue;"
        }
    ],
    "autowarefoundation/autoware.universe/3718": [
        {
            "sha": "cc2b5d20692bed02fa65fcaac72621c048496ed2",
            "filename": "planning/behavior_path_planner/src/behavior_path_planner_node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f80410753a64f9e50382a344fbf11be68d2a1aa9/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f80410753a64f9e50382a344fbf11be68d2a1aa9/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp?ref=f80410753a64f9e50382a344fbf11be68d2a1aa9",
            "patch": "@@ -1460,9 +1460,9 @@ bool BehaviorPathPlannerNode::keepInputPoints(\n   const std::vector<std::shared_ptr<SceneModuleStatus>> & statuses) const\n {\n #ifdef USE_OLD_ARCHITECTURE\n-  const std::vector<std::string> target_modules = {\"PullOver\", \"Avoidance\"};\n+  const std::vector<std::string> target_modules = {\"GoalPlanner\", \"Avoidance\"};\n #else\n-  const std::vector<std::string> target_modules = {\"pull_over\", \"avoidance\"};\n+  const std::vector<std::string> target_modules = {\"goal_planner\", \"avoidance\"};\n #endif\n \n   const auto target_status = ModuleStatus::RUNNING;"
        }
    ],
    "autowarefoundation/autoware.universe/3719": [
        {
            "sha": "6d1654c6a961576f1355add116d82d1bb4778a93",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0d915a080f7a9248627a08808fc3a6d4d582d6ef/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0d915a080f7a9248627a08808fc3a6d4d582d6ef/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=0d915a080f7a9248627a08808fc3a6d4d582d6ef",
            "patch": "@@ -190,6 +190,7 @@ std::vector<PolygonPoint> generatePolygonInsideBounds(\n   }\n \n   std::vector<PolygonPoint> inside_poly;\n+  bool has_intersection = false;  // NOTE: between obstacle polygon and bound\n   for (int i = 0; i < static_cast<int>(full_polygon.size()); ++i) {\n     const auto & curr_poly = full_polygon.at(i);\n     const auto & prev_poly = full_polygon.at(i == 0 ? full_polygon.size() - 1 : i - 1);\n@@ -214,6 +215,7 @@ std::vector<PolygonPoint> generatePolygonInsideBounds(\n       bound, intersection->first, intersection->second);\n     const auto intersect_point =\n       PolygonPoint{intersection->second, intersection->first, lon_dist, 0.0};\n+    has_intersection = true;\n \n     if (is_prev_outside && !is_curr_outside) {\n       inside_poly.push_back(intersect_point);\n@@ -226,7 +228,10 @@ std::vector<PolygonPoint> generatePolygonInsideBounds(\n     continue;\n   }\n \n-  return inside_poly;\n+  if (has_intersection) {\n+    return inside_poly;\n+  }\n+  return std::vector<PolygonPoint>{};\n }\n \n std::vector<geometry_msgs::msg::Point> convertToGeometryPoints("
        }
    ],
    "autowarefoundation/autoware.universe/3720": [
        {
            "sha": "5a5c1135d4c58b6002a9316901a133d9ecc4c6e9",
            "filename": "planning/behavior_path_planner/src/utils/path_utils.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 4,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1fb461f2862a47e4eb9dc4e551bad2ba2f9293e1/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1fb461f2862a47e4eb9dc4e551bad2ba2f9293e1/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp?ref=1fb461f2862a47e4eb9dc4e551bad2ba2f9293e1",
            "patch": "@@ -101,16 +101,14 @@ PathWithLaneId resamplePathWithSpline(\n \n   const auto start_s = std::max(target_section.first, 0.0);\n   const auto end_s = std::min(target_section.second, s_vec.back());\n-  for (double s = start_s; s < end_s; s += interval) {\n+  for (double s = start_s; s < end_s - epsilon; s += interval) {\n     if (!has_almost_same_value(s_out, s)) {\n       s_out.push_back(s);\n     }\n   }\n \n   // Insert Terminal Point\n-  if (!has_almost_same_value(s_out, end_s)) {\n-    s_out.push_back(end_s);\n-  }\n+  s_out.push_back(end_s);\n \n   // Insert Stop Point\n   const auto closest_stop_dist = motion_utils::calcDistanceToForwardStopPoint(transformed_path);"
        }
    ],
    "autowarefoundation/autoware.universe/3721": [
        {
            "sha": "fb99d04f89e91fbf48262bb420dee58080f5633e",
            "filename": "planning/behavior_path_planner/src/utils/geometric_parallel_parking/geometric_parallel_parking.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/503b6b3804101383b0436c3334d52f79119776e2/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgeometric_parallel_parking%2Fgeometric_parallel_parking.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/503b6b3804101383b0436c3334d52f79119776e2/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgeometric_parallel_parking%2Fgeometric_parallel_parking.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgeometric_parallel_parking%2Fgeometric_parallel_parking.cpp?ref=503b6b3804101383b0436c3334d52f79119776e2",
            "patch": "@@ -352,7 +352,9 @@ PathWithLaneId GeometricParallelParking::generateStraightPath(const Pose & start\n   auto path = planner_data_->route_handler->getCenterLinePath(\n     current_lanes, current_arc_position.length, start_arc_position.length, true);\n   path.header = planner_data_->route_handler->getRouteHeader();\n-  path.points.back().point.longitudinal_velocity_mps = 0;\n+  if (!path.points.empty()) {\n+    path.points.back().point.longitudinal_velocity_mps = 0;\n+  }\n \n   return path;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3727": [
        {
            "sha": "3ce69aa265090d3aea675f86bffc1148029dae51",
            "filename": "planning/planning_debug_tools/scripts/trajectory_visualizer.py",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/627982b179f460cc5cd94c3ae9d2a9f2a49c3fee/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/627982b179f460cc5cd94c3ae9d2a9f2a49c3fee/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py?ref=627982b179f460cc5cd94c3ae9d2a9f2a49c3fee",
            "patch": "@@ -332,7 +332,6 @@ def plotTrajectoryVelocity(self, data):\n             self.update_behavior_path_planner_path = False\n             if len(y) != 0:\n                 self.max_vel = max(10.0, np.max(y))\n-                self.min_vel = np.min(y)\n \n         if self.update_behavior_velocity_planner_path:\n             x = self.CalcArcLengthPath(behavior_velocity_planner_path)\n@@ -396,6 +395,9 @@ def plotTrajectoryVelocity(self, data):\n                 y = [self.velocity_limit, self.velocity_limit]\n                 self.im12.set_data(x, y)\n \n+            if len(y) != 0:\n+                self.min_vel = np.min(y)\n+\n         # change y-range\n         self.ax1.set_ylim([self.min_vel - 1.0, self.max_vel + 1.0])\n "
        }
    ],
    "autowarefoundation/autoware.universe/3730": [
        {
            "sha": "316d78be401e4d40f78d79ead276c24e12e43aaa",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8e960992aa656e00064d5f1e6c3cc844adf3ad9e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8e960992aa656e00064d5f1e6c3cc844adf3ad9e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=8e960992aa656e00064d5f1e6c3cc844adf3ad9e",
            "patch": "@@ -2585,6 +2585,11 @@ void AvoidanceModule::modifyPathVelocityToPreventAccelerationOnAvoidance(Shifted\n     *ego_velocity_starting_avoidance_ptr_ = getEgoSpeed();\n   }\n \n+  // update ego velocity if the ego is faster than saved velocity.\n+  if (*ego_velocity_starting_avoidance_ptr_ < getEgoSpeed()) {\n+    *ego_velocity_starting_avoidance_ptr_ = getEgoSpeed();\n+  }\n+\n   // calc index and velocity to NO_ACCEL_TIME_THR\n   const auto v0 = *ego_velocity_starting_avoidance_ptr_;\n   auto vmax = 0.0;"
        }
    ],
    "autowarefoundation/autoware.universe/3733": [
        {
            "sha": "c6c7b378f2ac7c5fc9eef57147a08055ae4020e1",
            "filename": "planning/behavior_velocity_planner/src/scene_module/crosswalk/debug.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/88291e67ff01fbdf723e05e24c8b26fa5f71ea77/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/88291e67ff01fbdf723e05e24c8b26fa5f71ea77/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_planner%2Fsrc%2Fscene_module%2Fcrosswalk%2Fdebug.cpp?ref=88291e67ff01fbdf723e05e24c8b26fa5f71ea77",
            "patch": "@@ -257,7 +257,8 @@ visualization_msgs::msg::MarkerArray WalkwayModule::createVirtualWallMarkerArray\n     stop_poses.push_back(p_front);\n   }\n   appendMarkerArray(\n-    virtual_wall_marker_creator_walkway_->createStopVirtualWallMarker(stop_poses, \"walkway\", now),\n+    virtual_wall_marker_creator_walkway_->createStopVirtualWallMarker(\n+      stop_poses, \"walkway\", now, 0.0, std::to_string(module_id_) + \"_\"),\n     &wall_marker);\n   return wall_marker;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3735": [
        {
            "sha": "091f3405e2815482c3a9b9f17bdbb8fa0f75d725",
            "filename": "common/motion_utils/src/resample/resample.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 8,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/42d9e67610b011af3d651cf4fa7f8bdae06e1a56/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/42d9e67610b011af3d651cf4fa7f8bdae06e1a56/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp?ref=42d9e67610b011af3d651cf4fa7f8bdae06e1a56",
            "patch": "@@ -188,21 +188,21 @@ autoware_auto_planning_msgs::msg::PathWithLaneId resamplePath(\n     }\n \n     const double distance_to_resampling_point = calcSignedArcLength(input_path.points, 0, i);\n-    for (size_t i = 1; i < resampling_arclength.size(); ++i) {\n+    for (size_t j = 1; j < resampling_arclength.size(); ++j) {\n       if (\n-        resampling_arclength.at(i - 1) <= distance_to_resampling_point &&\n-        distance_to_resampling_point < resampling_arclength.at(i)) {\n+        resampling_arclength.at(j - 1) <= distance_to_resampling_point &&\n+        distance_to_resampling_point < resampling_arclength.at(j)) {\n         const double dist_to_prev_point =\n-          std::fabs(distance_to_resampling_point - resampling_arclength.at(i - 1));\n+          std::fabs(distance_to_resampling_point - resampling_arclength.at(j - 1));\n         const double dist_to_following_point =\n-          std::fabs(resampling_arclength.at(i) - distance_to_resampling_point);\n+          std::fabs(resampling_arclength.at(j) - distance_to_resampling_point);\n         if (dist_to_prev_point < motion_utils::overlap_threshold) {\n-          resampling_arclength.at(i - 1) = distance_to_resampling_point;\n+          resampling_arclength.at(j - 1) = distance_to_resampling_point;\n         } else if (dist_to_following_point < motion_utils::overlap_threshold) {\n-          resampling_arclength.at(i) = distance_to_resampling_point;\n+          resampling_arclength.at(j) = distance_to_resampling_point;\n         } else {\n           resampling_arclength.insert(\n-            resampling_arclength.begin() + i, distance_to_resampling_point);\n+            resampling_arclength.begin() + j, distance_to_resampling_point);\n         }\n         break;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/3736": [
        {
            "sha": "7837c61ec65935fd056bc4d9d44df9abf9dccb9d",
            "filename": "simulator/simple_planning_simulator/launch/simple_planning_simulator.launch.py",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/938a21f0b3b10245e522b44f37282c07e07eb032/simulator%2Fsimple_planning_simulator%2Flaunch%2Fsimple_planning_simulator.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/938a21f0b3b10245e522b44f37282c07e07eb032/simulator%2Fsimple_planning_simulator%2Flaunch%2Fsimple_planning_simulator.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Flaunch%2Fsimple_planning_simulator.launch.py?ref=938a21f0b3b10245e522b44f37282c07e07eb032",
            "patch": "@@ -80,7 +80,12 @@ def launch_setup(context, *args, **kwargs):\n         executable=\"static_transform_publisher\",\n         name=\"static_map_to_odom_tf_publisher\",\n         output=\"screen\",\n-        arguments=[\"0.0\", \"0.0\", \"0.0\", \"0\", \"0\", \"0\", \"map\", \"odom\"],\n+        arguments=[\n+            \"--frame-id\",\n+            \"map\",\n+            \"--child-frame-id\",\n+            \"odom\",\n+        ],\n     )\n \n     group = GroupAction([simple_planning_simulator_node, map_to_odom_tf_publisher])"
        }
    ],
    "autowarefoundation/autoware.universe/3737": [
        {
            "sha": "1bd7caa19a220c0a490bed474c976176836d5841",
            "filename": "system/system_error_monitor/src/system_error_monitor_core.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 2,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/94c153c469efb7dfaa22f9c6da28f20ecc374f0d/system%2Fsystem_error_monitor%2Fsrc%2Fsystem_error_monitor_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/94c153c469efb7dfaa22f9c6da28f20ecc374f0d/system%2Fsystem_error_monitor%2Fsrc%2Fsystem_error_monitor_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fsystem_error_monitor%2Fsrc%2Fsystem_error_monitor_core.cpp?ref=94c153c469efb7dfaa22f9c6da28f20ecc374f0d",
            "patch": "@@ -213,7 +213,11 @@ int isInNoFaultCondition(\n AutowareErrorMonitor::AutowareErrorMonitor()\n : Node(\n     \"system_error_monitor\",\n-    rclcpp::NodeOptions().automatically_declare_parameters_from_overrides(true))\n+    rclcpp::NodeOptions().automatically_declare_parameters_from_overrides(true)),\n+  diag_array_stamp_(0, 0, this->get_clock()->get_clock_type()),\n+  autoware_state_stamp_(0, 0, this->get_clock()->get_clock_type()),\n+  current_gate_mode_stamp_(0, 0, this->get_clock()->get_clock_type()),\n+  control_mode_stamp_(0, 0, this->get_clock()->get_clock_type())\n {\n   // Parameter\n   get_parameter_or<int>(\"update_rate\", params_.update_rate, 10);\n@@ -385,7 +389,7 @@ void AutowareErrorMonitor::onControlMode(\n bool AutowareErrorMonitor::isDataReady()\n {\n   if (!diag_array_) {\n-    RCLCPP_WARN_THROTTLE(get_logger(), *get_clock(), 5000, \"waiting for diag_array msg...\");\n+    RCLCPP_INFO_THROTTLE(get_logger(), *get_clock(), 5000, \"waiting for diag_array msg...\");\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3738": [
        {
            "sha": "150aa60db472e46cc591b900cca8cab6764567cf",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/interface.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1371feddffbdec3c44f34aedd309a23915fdd24a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1371feddffbdec3c44f34aedd309a23915fdd24a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp?ref=1371feddffbdec3c44f34aedd309a23915fdd24a",
            "patch": "@@ -224,9 +224,7 @@ BehaviorModuleOutput LaneChangeInterface::planWaitingApproval()\n   out.path = std::make_shared<PathWithLaneId>(*getPreviousModuleOutput().path);\n   out.reference_path = getPreviousModuleOutput().reference_path;\n   out.turn_signal_info = getPreviousModuleOutput().turn_signal_info;\n-\n-  out.drivable_area_info.drivable_lanes =\n-    getPreviousModuleOutput().drivable_area_info.drivable_lanes;\n+  out.drivable_area_info = getPreviousModuleOutput().drivable_area_info;\n \n   module_type_->setPreviousModulePaths(\n     getPreviousModuleOutput().reference_path, getPreviousModuleOutput().path);"
        }
    ],
    "autowarefoundation/autoware.universe/3739": [
        {
            "sha": "45cced45996022778ef6d2bb8cbd0be1f5045df4",
            "filename": "planning/obstacle_stop_planner/src/planner_utils.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/719f19322556d4f36c2d7d297f8f118e18c932f4/planning%2Fobstacle_stop_planner%2Fsrc%2Fplanner_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/719f19322556d4f36c2d7d297f8f118e18c932f4/planning%2Fobstacle_stop_planner%2Fsrc%2Fplanner_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2Fsrc%2Fplanner_utils.cpp?ref=719f19322556d4f36c2d7d297f8f118e18c932f4",
            "patch": "@@ -455,9 +455,9 @@ TrajectoryPoints extendTrajectory(const TrajectoryPoints & input, const double e\n   }\n \n   const auto goal_point = input.back();\n-  double interpolation_distance = 0.1;\n+  constexpr double interpolation_distance = 0.1;\n \n-  double extend_sum = 0.0;\n+  double extend_sum = interpolation_distance;\n   while (extend_sum <= (extend_distance - interpolation_distance)) {\n     const auto extend_trajectory_point = getExtendTrajectoryPoint(extend_sum, goal_point);\n     output.push_back(extend_trajectory_point);"
        }
    ],
    "autowarefoundation/autoware.universe/3741": [
        {
            "sha": "554a0fe081b5cbbc1c6718b6a34319d7ab5d4dfe",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 16,
            "deletions": 1,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/95faf3a39ef3eafb0714673b46fe5831af8178e2/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/95faf3a39ef3eafb0714673b46fe5831af8178e2/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=95faf3a39ef3eafb0714673b46fe5831af8178e2",
            "patch": "@@ -224,6 +224,7 @@ std::vector<PolygonPoint> generatePolygonInsideBounds(\n     full_polygon.push_back(polygon_point);\n   }\n \n+  // 1. check the case where the polygon intersects the bound\n   std::vector<PolygonPoint> inside_poly;\n   bool has_intersection = false;  // NOTE: between obstacle polygon and bound\n   for (int i = 0; i < static_cast<int>(full_polygon.size()); ++i) {\n@@ -262,10 +263,24 @@ std::vector<PolygonPoint> generatePolygonInsideBounds(\n     inside_poly.push_back(intersect_point);\n     continue;\n   }\n-\n   if (has_intersection) {\n     return inside_poly;\n   }\n+\n+  // 2. check the case where the polygon does not intersect the bound\n+  const bool is_polygon_fully_inside_bounds = [&]() {\n+    for (const auto & curr_poly : full_polygon) {\n+      const bool is_curr_outside = curr_poly.is_outside_bounds(is_object_right);\n+      if (is_curr_outside) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }();\n+  if (is_polygon_fully_inside_bounds) {\n+    return full_polygon;\n+  }\n+\n   return std::vector<PolygonPoint>{};\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3746": [
        {
            "sha": "ef5b0facd236eb20d0c2ef4fef47d18c19b159f9",
            "filename": "planning/obstacle_stop_planner/README.md",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/84c0351b9b55c09b19c4ee8e494f8cd3055abf12/planning%2Fobstacle_stop_planner%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/84c0351b9b55c09b19c4ee8e494f8cd3055abf12/planning%2Fobstacle_stop_planner%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2FREADME.md?ref=84c0351b9b55c09b19c4ee8e494f8cd3055abf12",
            "patch": "@@ -37,10 +37,10 @@\n | `max_velocity`                         | double | max velocity [m/s]                                                                        |\n | `chattering_threshold`                 | double | even if the obstacle disappears, the stop judgment continues for chattering_threshold [s] |\n | `enable_z_axis_obstacle_filtering`     | bool   | filter obstacles in z axis (height) [-]                                                   |\n-| `z_axis_filtering_buffer`              | double | additional buffer for z axis filtering [m]]                                               |\n-| `use_predicted_objects`                | bool   | whether to use predicted objects for collision and slowdown detection [-]]                |\n-| `predicted_object_filtering_threshold` | double | threshold for filtering predicted objects [valid only publish_obstacle_polygon true](m)]  |\n-| `publish_obstacle_polygon`             | bool   | if use_predicted_objects is true, node publishes collision polygon [-]]                   |\n+| `z_axis_filtering_buffer`              | double | additional buffer for z axis filtering [m]                                                |\n+| `use_predicted_objects`                | bool   | whether to use predicted objects for collision and slowdown detection [-]                 |\n+| `predicted_object_filtering_threshold` | double | threshold for filtering predicted objects [valid only publish_obstacle_polygon true] [m]  |\n+| `publish_obstacle_polygon`             | bool   | if use_predicted_objects is true, node publishes collision polygon [-]                    |\n \n ## Obstacle Stop Planner\n "
        }
    ],
    "autowarefoundation/autoware.universe/3755": [
        {
            "sha": "a4448d0a709b06001a1c844ef86f54122cef2408",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/scene_module_interface.hpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2c9bb2423f00b444bebccb05097ca1cf2a2a63bb/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2c9bb2423f00b444bebccb05097ca1cf2a2a63bb/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp?ref=2c9bb2423f00b444bebccb05097ca1cf2a2a63bb",
            "patch": "@@ -68,7 +68,11 @@ class SceneModuleInterface\n     clock_{node.get_clock()},\n     is_waiting_approval_{false},\n     is_locked_new_module_launch_{false},\n+#ifdef USE_OLD_ARCHITECTURE\n     current_state_{ModuleStatus::SUCCESS},\n+#else\n+    current_state_{ModuleStatus::IDLE},\n+#endif\n     rtc_interface_ptr_map_(rtc_interface_ptr_map),\n     steering_factor_interface_ptr_(\n       std::make_unique<SteeringFactorInterface>(&node, utils::convertToSnakeCase(name)))"
        }
    ],
    "autowarefoundation/autoware.universe/3756": [
        {
            "sha": "3518d31f608144aa64b9a63945c4faf065c13eff",
            "filename": "planning/behavior_path_planner/src/utils/lane_change/utils.cpp",
            "status": "modified",
            "additions": 0,
            "deletions": 2,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d2df34afb511acb2a3e3f00322cb380afcade9a7/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Flane_change%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d2df34afb511acb2a3e3f00322cb380afcade9a7/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Flane_change%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Flane_change%2Futils.cpp?ref=d2df34afb511acb2a3e3f00322cb380afcade9a7",
            "patch": "@@ -173,8 +173,6 @@ std::optional<LaneChangePath> constructCandidatePath(\n         lane_changing_start_point.point.longitudinal_velocity_mps);\n       continue;\n     }\n-    point.point.longitudinal_velocity_mps =\n-      std::min(point.point.longitudinal_velocity_mps, static_cast<float>(lane_changing_velocity));\n     const auto nearest_idx =\n       motion_utils::findNearestIndex(target_segment.points, point.point.pose);\n     point.lane_ids = target_segment.points.at(*nearest_idx).lane_ids;"
        }
    ],
    "autowarefoundation/autoware.universe/3758": [
        {
            "sha": "2de726ac82315c47c40f4eaa9dc8a0a752cf7e52",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a23244e4730c6bc9ec317858c567dc7fd749bbd1/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a23244e4730c6bc9ec317858c567dc7fd749bbd1/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=a23244e4730c6bc9ec317858c567dc7fd749bbd1",
            "patch": "@@ -1376,6 +1376,14 @@ void generateDrivableArea(\n   auto left_bound = calcBound(route_handler, lanes, enable_expanding_polygon, true);\n   auto right_bound = calcBound(route_handler, lanes, enable_expanding_polygon, false);\n \n+  if (left_bound.empty() || right_bound.empty()) {\n+    auto clock{rclcpp::Clock{RCL_ROS_TIME}};\n+    RCLCPP_ERROR_STREAM_THROTTLE(\n+      rclcpp::get_logger(\"behavior_path_planner\").get_child(\"utils\"), clock, 1000,\n+      \"The right or left bound of drivable area is empty\");\n+    return;\n+  }\n+\n   // Insert points after goal\n   lanelet::ConstLanelet goal_lanelet;\n   if ("
        }
    ],
    "autowarefoundation/autoware.universe/3764": [
        {
            "sha": "6a743b6e9d9c19c51c8549661c913fcc895049f5",
            "filename": "perception/lidar_centerpoint/launch/centerpoint_vs_centerpoint-tiny/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/788c9b8b13170246043514d9406db434f7e270ef/perception%2Flidar_centerpoint%2Flaunch%2Fcenterpoint_vs_centerpoint-tiny%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/788c9b8b13170246043514d9406db434f7e270ef/perception%2Flidar_centerpoint%2Flaunch%2Fcenterpoint_vs_centerpoint-tiny%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_centerpoint%2Flaunch%2Fcenterpoint_vs_centerpoint-tiny%2FREADME.md?ref=788c9b8b13170246043514d9406db434f7e270ef",
            "patch": "@@ -124,7 +124,7 @@ ros2 launch lidar_centerpoint centerpoint_vs_centerpoint-tiny.launch.xml\n \n Then you will see two rviz window show immediately. On the left is the result for lidar centerpoint tiny, and on the right is the result for lidar centerpoint.\n \n-![two rviz2 display centerpoint and centerpoint_tiny](https://i.imgur.com/YAYehrf.jpg)\n+![two rviz2 display centerpoint and centerpoint_tiny](https://github.com/autowarefoundation/autoware.universe/assets/58775300/2a89063a-8e0e-4f59-8d48-f339d4f7c0ff)\n \n ## Troubleshooting\n "
        }
    ],
    "autowarefoundation/autoware.universe/3766": [
        {
            "sha": "4a0f6944be56164e7600e528c89c881a9fbae0b4",
            "filename": "planning/behavior_path_planner/docs/behavior_path_planner_goal_planner_design.md",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e83c7b15adf6fc6bac4ce7c9946bbba748a66a3a/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_goal_planner_design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e83c7b15adf6fc6bac4ce7c9946bbba748a66a3a/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_goal_planner_design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_goal_planner_design.md?ref=e83c7b15adf6fc6bac4ce7c9946bbba748a66a3a",
            "patch": "@@ -124,7 +124,7 @@ Either one is activated when all conditions are met.\n | th_arrived_distance        | [m]    | double | distance threshold for arrival of path termination                                                                                      | 1.0           |\n | th_stopped_velocity        | [m/s]  | double | velocity threshold for arrival of path termination                                                                                      | 0.01          |\n | th_stopped_time            | [s]    | double | time threshold for arrival of path termination                                                                                          | 2.0           |\n-| pull_over_velocity         | [m/s]  | double | decelerate to this speed by the goal search area                                                                                        | 2.0           |\n+| pull_over_velocity         | [m/s]  | double | decelerate to this speed by the goal search area                                                                                        | 3.0           |\n | pull_over_minimum_velocity | [m/s]  | double | speed of pull_over after stopping once. this prevents excessive acceleration.                                                           | 1.38          |\n | margin_from_boundary       | [m]    | double | distance margin from edge of the shoulder lane                                                                                          | 0.5           |\n | decide_path_distance       | [m]    | double | decide path if it approaches this distance relative to the parking position. after that, no path planning and goal search are performed | 10.0          |\n@@ -171,8 +171,8 @@ searched for in certain range of the shoulder lane.\n | backward_goal_search_length     | [m]  | double | length of backward range to be explored from the original goal                                                                                                                                                           | 20.0           |\n | goal_search_interval            | [m]  | double | distance interval for goal search                                                                                                                                                                                        | 2.0            |\n | longitudinal_margin             | [m]  | double | margin between ego-vehicle at the goal position and obstacles                                                                                                                                                            | 3.0            |\n-| max_lateral_offset              | [m]  | double | maximum offset of goal search in the lateral direction                                                                                                                                                                   | 3.0            |\n-| lateral_offset_interval         | [m]  | double | distance interval of goal search in the lateral direction                                                                                                                                                                | 3.0            |\n+| max_lateral_offset              | [m]  | double | maximum offset of goal search in the lateral direction                                                                                                                                                                   | 0.5            |\n+| lateral_offset_interval         | [m]  | double | distance interval of goal search in the lateral direction                                                                                                                                                                | 0.25           |\n | ignore_distance_from_lane_start | [m]  | double | distance from start of pull over lanes for ignoring goal candidates                                                                                                                                                      | 15.0           |\n \n ## **Path Generation**\n@@ -202,7 +202,7 @@ The lateral jerk is searched for among the predetermined minimum and maximum val\n | maximum_lateral_jerk          | [m/s3] | double | maximum lateral jerk                                                | 2.0           |\n | minimum_lateral_jerk          | [m/s3] | double | minimum lateral jerk                                                | 0.5           |\n | deceleration_interval         | [m]    | double | distance of deceleration section                                    | 15.0          |\n-| after_shift_straight_distance | [m]    | double | straight line distance after pull over end point                    | 5.0           |\n+| after_shift_straight_distance | [m]    | double | straight line distance after pull over end point                    | 1.0           |\n \n ### **geometric parallel parking**\n "
        }
    ],
    "autowarefoundation/autoware.universe/3768": [
        {
            "sha": "6e26fbfac2d0697b2ba61551276b3784f52d84f0",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/scene_module_manager_interface.hpp",
            "status": "modified",
            "additions": 14,
            "deletions": 13,
            "changes": 27,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/170aa3c695a70b6c2355f0b0461b866021a41bd4/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/170aa3c695a70b6c2355f0b0461b866021a41bd4/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp?ref=170aa3c695a70b6c2355f0b0461b866021a41bd4",
            "patch": "@@ -73,13 +73,13 @@ class SceneModuleManagerInterface\n \n   SceneModulePtr getNewModule()\n   {\n-    if (idling_module_ != nullptr) {\n-      idling_module_->onEntry();\n-      return idling_module_;\n+    if (idling_module_ptr_ != nullptr) {\n+      idling_module_ptr_->onEntry();\n+      return idling_module_ptr_;\n     }\n \n-    idling_module_ = createNewSceneModuleInstance();\n-    return idling_module_;\n+    idling_module_ptr_ = createNewSceneModuleInstance();\n+    return idling_module_ptr_;\n   }\n \n   bool isExecutionRequested(\n@@ -118,6 +118,7 @@ class SceneModuleManagerInterface\n     }\n \n     module_ptr.reset();\n+    idling_module_ptr_.reset();\n \n     pub_debug_marker_->publish(MarkerArray{});\n   }\n@@ -183,9 +184,9 @@ class SceneModuleManagerInterface\n       marker_id += marker_offset;\n     }\n \n-    if (registered_modules_.empty() && idling_module_ != nullptr) {\n-      appendMarkerArray(idling_module_->getInfoMarkers(), &info_markers);\n-      appendMarkerArray(idling_module_->getDebugMarkers(), &debug_markers);\n+    if (registered_modules_.empty() && idling_module_ptr_ != nullptr) {\n+      appendMarkerArray(idling_module_ptr_->getInfoMarkers(), &info_markers);\n+      appendMarkerArray(idling_module_ptr_->getDebugMarkers(), &debug_markers);\n     }\n \n     pub_info_marker_->publish(info_markers);\n@@ -226,10 +227,10 @@ class SceneModuleManagerInterface\n     });\n     registered_modules_.clear();\n \n-    if (idling_module_ != nullptr) {\n-      idling_module_->onExit();\n-      idling_module_->publishRTCStatus();\n-      idling_module_.reset();\n+    if (idling_module_ptr_ != nullptr) {\n+      idling_module_ptr_->onExit();\n+      idling_module_ptr_->publishRTCStatus();\n+      idling_module_ptr_.reset();\n     }\n \n     pub_debug_marker_->publish(MarkerArray{});\n@@ -264,7 +265,7 @@ class SceneModuleManagerInterface\n \n   std::vector<SceneModulePtr> registered_modules_;\n \n-  SceneModulePtr idling_module_;\n+  SceneModulePtr idling_module_ptr_;\n \n   std::unordered_map<std::string, std::shared_ptr<RTCInterface>> rtc_interface_ptr_map_;\n "
        }
    ],
    "autowarefoundation/autoware.universe/3772": [
        {
            "sha": "9fc741ad8f8ce6100459d43e3340d9e0783fd918",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 32,
            "deletions": 23,
            "changes": 55,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/480b49c4153ec6ba6c8fa5a501cfbaeb9f83ebfa/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/480b49c4153ec6ba6c8fa5a501cfbaeb9f83ebfa/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=480b49c4153ec6ba6c8fa5a501cfbaeb9f83ebfa",
            "patch": "@@ -1424,21 +1424,38 @@ void generateDrivableArea(\n     std::reverse(right_bound.begin(), right_bound.end());\n   }\n \n-  // Get Closest segment for the start point\n-  constexpr double front_length = 0.5;\n-  const auto front_pose = path.points.empty() ? current_pose : path.points.front().point.pose;\n-  const size_t front_left_start_idx =\n-    findNearestSegmentIndexFromLateralDistance(left_bound, front_pose.position);\n-  const size_t front_right_start_idx =\n-    findNearestSegmentIndexFromLateralDistance(right_bound, front_pose.position);\n-  const auto left_start_point =\n-    calcLongitudinalOffsetStartPoint(left_bound, front_pose, front_left_start_idx, -front_length);\n-  const auto right_start_point =\n-    calcLongitudinalOffsetStartPoint(right_bound, front_pose, front_right_start_idx, -front_length);\n-  const size_t left_start_idx =\n-    findNearestSegmentIndexFromLateralDistance(left_bound, left_start_point);\n-  const size_t right_start_idx =\n-    findNearestSegmentIndexFromLateralDistance(right_bound, right_start_point);\n+  path.left_bound.clear();\n+  path.right_bound.clear();\n+\n+  const auto [left_start_idx, right_start_idx] = [&]() {\n+    const size_t current_seg_idx = planner_data->findEgoSegmentIndex(path.points);\n+    const auto cropped_path_points = motion_utils::cropPoints(\n+      path.points, current_pose.position, current_seg_idx,\n+      planner_data->parameters.forward_path_length,\n+      planner_data->parameters.backward_path_length + planner_data->parameters.input_path_interval);\n+\n+    constexpr double front_length = 0.5;\n+    const auto front_pose =\n+      cropped_path_points.empty() ? current_pose : cropped_path_points.front().point.pose;\n+    const size_t front_left_start_idx =\n+      findNearestSegmentIndexFromLateralDistance(left_bound, front_pose.position);\n+    const size_t front_right_start_idx =\n+      findNearestSegmentIndexFromLateralDistance(right_bound, front_pose.position);\n+    const auto left_start_point =\n+      calcLongitudinalOffsetStartPoint(left_bound, front_pose, front_left_start_idx, -front_length);\n+    const auto right_start_point = calcLongitudinalOffsetStartPoint(\n+      right_bound, front_pose, front_right_start_idx, -front_length);\n+    const size_t left_start_idx =\n+      findNearestSegmentIndexFromLateralDistance(left_bound, left_start_point);\n+    const size_t right_start_idx =\n+      findNearestSegmentIndexFromLateralDistance(right_bound, right_start_point);\n+\n+    // Insert a start point\n+    path.left_bound.push_back(left_start_point);\n+    path.right_bound.push_back(right_start_point);\n+\n+    return std::make_pair(left_start_idx, right_start_idx);\n+  }();\n \n   // Get Closest segment for the goal point\n   const auto goal_pose = path.points.empty() ? current_pose : path.points.back().point.pose;\n@@ -1456,14 +1473,6 @@ void generateDrivableArea(\n     goal_right_start_idx,\n     findNearestSegmentIndexFromLateralDistance(right_bound, right_goal_point));\n \n-  // Store Data\n-  path.left_bound.clear();\n-  path.right_bound.clear();\n-\n-  // Insert a start point\n-  path.left_bound.push_back(left_start_point);\n-  path.right_bound.push_back(right_start_point);\n-\n   // Insert middle points\n   for (size_t i = left_start_idx + 1; i <= left_goal_idx; ++i) {\n     const auto & next_point = left_bound.at(i);"
        }
    ],
    "autowarefoundation/autoware.universe/3781": [
        {
            "sha": "e6d881011becbe7f888135f0c7ee0df842f1dec7",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 20,
            "changes": 24,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7469fd4283df99be2db4d8afd71eb4a640e76a9b/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7469fd4283df99be2db4d8afd71eb4a640e76a9b/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=7469fd4283df99be2db4d8afd71eb4a640e76a9b",
            "patch": "@@ -1937,7 +1937,7 @@ double getDistanceToCrosswalk(\n \n   lanelet::ConstLanelet current_lanelet;\n   if (!lanelet::utils::query::getClosestLanelet(lanelets, current_pose, &current_lanelet)) {\n-    return std::numeric_limits<double>::max();\n+    return std::numeric_limits<double>::infinity();\n   }\n \n   double distance = 0;\n@@ -1946,24 +1946,8 @@ double getDistanceToCrosswalk(\n     if (llt == current_lanelet) {\n       is_after_current_lanelet = true;\n     }\n-    // check lane change tag\n-    bool is_lane_change_yes = false;\n-    const auto right_line = llt.rightBound();\n-    if (right_line.hasAttribute(lanelet::AttributeNamesString::LaneChange)) {\n-      const auto attr = right_line.attribute(lanelet::AttributeNamesString::LaneChange);\n-      if (attr.value() == std::string(\"yes\")) {\n-        is_lane_change_yes = true;\n-      }\n-    }\n-    const auto left_line = llt.leftBound();\n-    if (left_line.hasAttribute(lanelet::AttributeNamesString::LaneChange)) {\n-      const auto attr = left_line.attribute(lanelet::AttributeNamesString::LaneChange);\n-      if (attr.value() == std::string(\"yes\")) {\n-        is_lane_change_yes = true;\n-      }\n-    }\n \n-    if (is_after_current_lanelet && !is_lane_change_yes) {\n+    if (is_after_current_lanelet) {\n       const auto conflicting_crosswalks = overall_graphs.conflictingInGraph(llt, 1);\n       if (!(conflicting_crosswalks.empty())) {\n         // create centerline\n@@ -1975,7 +1959,7 @@ double getDistanceToCrosswalk(\n         }\n \n         // create crosswalk polygon and calculate distance\n-        double min_distance_to_crosswalk = std::numeric_limits<double>::max();\n+        double min_distance_to_crosswalk = std::numeric_limits<double>::infinity();\n         for (const auto & crosswalk : conflicting_crosswalks) {\n           lanelet::CompoundPolygon2d lanelet_crosswalk_polygon = crosswalk.polygon2d();\n           Polygon2d polygon;\n@@ -2010,7 +1994,7 @@ double getDistanceToCrosswalk(\n     distance += lanelet::utils::getLaneletLength3d(llt);\n   }\n \n-  return std::numeric_limits<double>::max();\n+  return std::numeric_limits<double>::infinity();\n }\n \n double getSignedDistance("
        }
    ],
    "autowarefoundation/autoware.universe/3796": [
        {
            "sha": "96026cab532ecb57d3f58ed41512b38ff7b79c58",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 9,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a831c92f8c6ecbdf85790a75c84f69c2cc11f76f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a831c92f8c6ecbdf85790a75c84f69c2cc11f76f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=a831c92f8c6ecbdf85790a75c84f69c2cc11f76f",
            "patch": "@@ -320,16 +320,15 @@ bool GoalPlannerModule::isExecutionRequested() const\n     return false;\n   }\n \n-  // if goal modification is not allowed and goal_pose in current_lanes,\n-  // plan path to the original fixed goal\n+  // if goal modification is not allowed\n+  // 1) goal_pose is in current_lanes, plan path to the original fixed goal\n+  // 2) goal_pose is NOT in current_lanes, do not execute goal_planner\n   if (!allow_goal_modification_) {\n-    if (std::any_of(\n-          current_lanes.begin(), current_lanes.end(),\n-          [&](const lanelet::ConstLanelet & current_lane) {\n-            return lanelet::utils::isInLanelet(goal_pose, current_lane);\n-          })) {\n-      return true;\n-    }\n+    // check if goal_pose is in current_lanes.\n+    return std::any_of(\n+      current_lanes.begin(), current_lanes.end(), [&](const lanelet::ConstLanelet & current_lane) {\n+        return lanelet::utils::isInLanelet(goal_pose, current_lane);\n+      });\n   }\n \n   // if (A) or (B) is met execute pull over"
        }
    ],
    "autowarefoundation/autoware.universe/3799": [
        {
            "sha": "7c00d354653744beae4b19157170bf981122b10b",
            "filename": "planning/behavior_path_planner/src/utils/lane_change/utils.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ae3adec7293bb80141de0cb459c4614136bd2b73/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Flane_change%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ae3adec7293bb80141de0cb459c4614136bd2b73/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Flane_change%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Flane_change%2Futils.cpp?ref=ae3adec7293bb80141de0cb459c4614136bd2b73",
            "patch": "@@ -531,9 +531,13 @@ PathWithLaneId getReferencePathFromTargetLane(\n         next_lane_change_buffer;\n       return std::min(dist_from_lc_start, s_goal);\n     }\n-    return std::min(dist_from_lc_start, target_lane_length);\n+    return std::min(dist_from_lc_start, target_lane_length - next_lane_change_buffer);\n   });\n \n+  if (s_end - s_start < lane_changing_length) {\n+    return PathWithLaneId();\n+  }\n+\n   RCLCPP_DEBUG(\n     rclcpp::get_logger(\"behavior_path_planner\")\n       .get_child(\"lane_change\")"
        }
    ],
    "autowarefoundation/autoware.universe/3804": [
        {
            "sha": "b21112d50cfc402df4c02bdcf6b9bded0018ca7c",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/095955bb2966673d6dc9ec8949ece2c669e46613/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/095955bb2966673d6dc9ec8949ece2c669e46613/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=095955bb2966673d6dc9ec8949ece2c669e46613",
            "patch": "@@ -3164,7 +3164,6 @@ void AvoidanceModule::updateData()\n void AvoidanceModule::processOnEntry()\n {\n   initVariables();\n-  initRTCStatus();\n   waitApproval();\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3813": [
        {
            "sha": "1b42c3f9d39dd968aee66472fba074cbbecfd12f",
            "filename": "planning/behavior_path_planner/src/utils/path_utils.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 2,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1d2d9aa7319704050063602daf7d3f46e329ff2f/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1d2d9aa7319704050063602daf7d3f46e329ff2f/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp?ref=1d2d9aa7319704050063602daf7d3f46e329ff2f",
            "patch": "@@ -101,14 +101,18 @@ PathWithLaneId resamplePathWithSpline(\n \n   const auto start_s = std::max(target_section.first, 0.0);\n   const auto end_s = std::min(target_section.second, s_vec.back());\n-  for (double s = start_s; s < end_s - epsilon; s += interval) {\n+  for (double s = start_s; s < end_s; s += interval) {\n     if (!has_almost_same_value(s_out, s)) {\n       s_out.push_back(s);\n     }\n   }\n \n   // Insert Terminal Point\n-  s_out.push_back(end_s);\n+  if (!has_almost_same_value(s_out, end_s)) {\n+    s_out.push_back(end_s);\n+  } else {\n+    s_out.back() = end_s;\n+  }\n \n   // Insert Stop Point\n   const auto closest_stop_dist = motion_utils::calcDistanceToForwardStopPoint(transformed_path);"
        }
    ],
    "autowarefoundation/autoware.universe/3814": [
        {
            "sha": "d16323b7fc602b24760fdb4d0d78fd832fa99512",
            "filename": "sensing/pointcloud_preprocessor/src/concatenate_data/concatenate_data_nodelet.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/78888e3208fa0def7c5f81dc7d3d9842a8e9f5bb/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fconcatenate_data%2Fconcatenate_data_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/78888e3208fa0def7c5f81dc7d3d9842a8e9f5bb/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fconcatenate_data%2Fconcatenate_data_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fconcatenate_data%2Fconcatenate_data_nodelet.cpp?ref=78888e3208fa0def7c5f81dc7d3d9842a8e9f5bb",
            "patch": "@@ -327,6 +327,13 @@ void PointCloudConcatenateDataSynchronizerComponent::convertToXYZICloud(\n   sensor_msgs::msg::PointCloud2::SharedPtr & output_ptr)\n {\n   output_ptr->header = input_ptr->header;\n+\n+  if (input_ptr->data.empty()) {\n+    RCLCPP_WARN_STREAM_THROTTLE(\n+      this->get_logger(), *this->get_clock(), 1000, \"Empty sensor points!\");\n+    return;\n+  }\n+\n   PointCloud2Modifier<PointXYZI> output_modifier{*output_ptr, input_ptr->header.frame_id};\n   output_modifier.reserve(input_ptr->width);\n "
        }
    ],
    "autowarefoundation/autoware.universe/3825": [
        {
            "sha": "110fff125ffbb119d4dec0c3346325637859f8ea",
            "filename": "map/map_loader/src/lanelet2_map_loader/lanelet2_map_loader_node.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 0,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/82cbbdb6105ac011c547684f260d3e838b295834/map%2Fmap_loader%2Fsrc%2Flanelet2_map_loader%2Flanelet2_map_loader_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/82cbbdb6105ac011c547684f260d3e838b295834/map%2Fmap_loader%2Fsrc%2Flanelet2_map_loader%2Flanelet2_map_loader_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2Fsrc%2Flanelet2_map_loader%2Flanelet2_map_loader_node.cpp?ref=82cbbdb6105ac011c547684f260d3e838b295834",
            "patch": "@@ -41,6 +41,7 @@\n #include <rclcpp/rclcpp.hpp>\n \n #include <lanelet2_core/LaneletMap.h>\n+#include <lanelet2_core/geometry/LineString.h>\n #include <lanelet2_io/Io.h>\n #include <lanelet2_projection/UTM.h>\n \n@@ -107,6 +108,16 @@ lanelet::LaneletMapPtr Lanelet2MapLoaderNode::load_map(\n         point.y() = point.attribute(\"local_y\").asDouble().value();\n       }\n     }\n+\n+    // realign lanelet borders using updated points\n+    for (lanelet::Lanelet lanelet : map->laneletLayer) {\n+      auto left = lanelet.leftBound();\n+      auto right = lanelet.rightBound();\n+      std::tie(left, right) = lanelet::geometry::align(left, right);\n+      lanelet.setLeftBound(left);\n+      lanelet.setRightBound(right);\n+    }\n+\n     return map;\n   } else {\n     RCLCPP_ERROR(rclcpp::get_logger(\"map_loader\"), \"lanelet2_map_projector_type is not supported\");"
        }
    ],
    "autowarefoundation/autoware.universe/3830": [
        {
            "sha": "5bda4cdafd7e3d4e6b2290433e3ae999205a92e0",
            "filename": "common/tier4_planning_rviz_plugin/src/path/display.cpp",
            "status": "modified",
            "additions": 15,
            "deletions": 17,
            "changes": 32,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/75f91da0aba1defe44d5e0585a23e871a1b00337/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Fpath%2Fdisplay.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/75f91da0aba1defe44d5e0585a23e871a1b00337/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Fpath%2Fdisplay.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Fpath%2Fdisplay.cpp?ref=75f91da0aba1defe44d5e0585a23e871a1b00337",
            "patch": "@@ -53,23 +53,21 @@ void AutowarePathWithLaneIdDisplay::preVisualizePathFootprintDetail(\n   const autoware_auto_planning_msgs::msg::PathWithLaneId::ConstSharedPtr msg_ptr)\n {\n   const size_t size = msg_ptr->points.size();\n-  if (size > lane_id_obj_ptrs_.size()) {\n-    for (std::size_t i = lane_id_obj_ptrs_.size(); i < size; i++) {\n-      std::unique_ptr<Ogre::SceneNode> node_ptr;\n-      node_ptr.reset(scene_node_->createChildSceneNode());\n-      auto text_ptr =\n-        std::make_unique<rviz_rendering::MovableText>(\"not initialized\", \"Liberation Sans\", 0.1);\n-      text_ptr->setVisible(false);\n-      text_ptr->setTextAlignment(\n-        rviz_rendering::MovableText::H_CENTER, rviz_rendering::MovableText::V_ABOVE);\n-      node_ptr->attachObject(text_ptr.get());\n-      lane_id_obj_ptrs_.push_back(std::make_pair(std::move(node_ptr), std::move(text_ptr)));\n-    }\n-  } else {\n-    for (std::size_t i = lane_id_obj_ptrs_.size() - 1; i >= size; i--) {\n-      scene_node_->removeChild(lane_id_obj_ptrs_.at(i).first.get());\n-    }\n-    lane_id_obj_ptrs_.resize(size);\n+  // clear previous text\n+  for (const auto & [node_ptr, text_ptr] : lane_id_obj_ptrs_) {\n+    scene_node_->removeChild(node_ptr.get());\n+  }\n+  lane_id_obj_ptrs_.clear();\n+  for (std::size_t i = 0; i < size; i++) {\n+    std::unique_ptr<Ogre::SceneNode> node_ptr;\n+    node_ptr.reset(scene_node_->createChildSceneNode());\n+    auto text_ptr =\n+      std::make_unique<rviz_rendering::MovableText>(\"not initialized\", \"Liberation Sans\", 0.1);\n+    text_ptr->setVisible(false);\n+    text_ptr->setTextAlignment(\n+      rviz_rendering::MovableText::H_CENTER, rviz_rendering::MovableText::V_ABOVE);\n+    node_ptr->attachObject(text_ptr.get());\n+    lane_id_obj_ptrs_.push_back(std::make_pair(std::move(node_ptr), std::move(text_ptr)));\n   }\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3832": [
        {
            "sha": "2361ad35101b0686820dc0779762b45822740c51",
            "filename": "planning/behavior_velocity_occlusion_spot_module/src/debug.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/27a65af90b2dbabef064044e93107c2f650cb1dd/planning%2Fbehavior_velocity_occlusion_spot_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/27a65af90b2dbabef064044e93107c2f650cb1dd/planning%2Fbehavior_velocity_occlusion_spot_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_occlusion_spot_module%2Fsrc%2Fdebug.cpp?ref=27a65af90b2dbabef064044e93107c2f650cb1dd",
            "patch": "@@ -221,14 +221,13 @@ MarkerArray OcclusionSpotModule::createVirtualWallMarkerArray()\n   MarkerArray wall_marker;\n   std::string module_name = \"occlusion_spot\";\n   std::vector<Pose> slow_down_poses;\n-  size_t module_id = 0;\n   for (size_t id = 0; id < debug_data_.debug_poses.size(); id++) {\n     const auto p_front =\n       calcOffsetPose(debug_data_.debug_poses.at(id), debug_data_.baselink_to_front, 0.0, 0.0);\n     slow_down_poses.push_back(p_front);\n     appendMarkerArray(\n       virtual_wall_marker_creator_->createSlowDownVirtualWallMarker(\n-        slow_down_poses, module_name, current_time, module_id),\n+        slow_down_poses, module_name, current_time),\n       &wall_marker, current_time);\n   }\n   return wall_marker;"
        }
    ],
    "autowarefoundation/autoware.universe/3833": [
        {
            "sha": "bc4b3f537c2538f6c281ddb14fe34d9874041516",
            "filename": "planning/behavior_velocity_blind_spot_module/src/debug.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2f0b59b7ce7b3707a858e0fd6caf9706148abbbd/planning%2Fbehavior_velocity_blind_spot_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2f0b59b7ce7b3707a858e0fd6caf9706148abbbd/planning%2Fbehavior_velocity_blind_spot_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_blind_spot_module%2Fsrc%2Fdebug.cpp?ref=2f0b59b7ce7b3707a858e0fd6caf9706148abbbd",
            "patch": "@@ -116,7 +116,7 @@ visualization_msgs::msg::MarkerArray BlindSpotModule::createVirtualWallMarkerArr\n   if (!isActivated() && !is_over_pass_judge_line_) {\n     appendMarkerArray(\n       virtual_wall_marker_creator_->createStopVirtualWallMarker(\n-        {debug_data_.virtual_wall_pose}, \"blind_spot\", now),\n+        {debug_data_.virtual_wall_pose}, \"blind_spot\", now, 0.0, std::to_string(module_id_) + \"_\"),\n       &wall_marker, now);\n   }\n   return wall_marker;"
        }
    ],
    "autowarefoundation/autoware.universe/3835": [
        {
            "sha": "69aba34677ddb2be535f84f843a02713cf5d7746",
            "filename": "planning/behavior_velocity_stop_line_module/src/debug.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1a683bf688128996ccd02236424dce9fedaec183/planning%2Fbehavior_velocity_stop_line_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1a683bf688128996ccd02236424dce9fedaec183/planning%2Fbehavior_velocity_stop_line_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_stop_line_module%2Fsrc%2Fdebug.cpp?ref=1a683bf688128996ccd02236424dce9fedaec183",
            "patch": "@@ -107,7 +107,8 @@ visualization_msgs::msg::MarkerArray StopLineModule::createVirtualWallMarkerArra\n     *debug_data_.stop_pose, debug_data_.base_link2front, 0.0, 0.0);\n   if (state_ == State::APPROACH || state_ == State::STOPPED) {\n     appendMarkerArray(\n-      virtual_wall_marker_creator_->createStopVirtualWallMarker({p_front}, \"stopline\", now),\n+      virtual_wall_marker_creator_->createStopVirtualWallMarker(\n+        {p_front}, \"stopline\", now, 0.0, std::to_string(module_id_) + \"_\"),\n       &wall_marker, now);\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3836": [
        {
            "sha": "1cda69524ec32dea6eaa0c37118f0a2fd3e3a6c2",
            "filename": "planning/behavior_velocity_no_stopping_area_module/src/debug.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7bb4ef4c4467caea236e87d47e8db871ae904d54/planning%2Fbehavior_velocity_no_stopping_area_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7bb4ef4c4467caea236e87d47e8db871ae904d54/planning%2Fbehavior_velocity_no_stopping_area_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_no_stopping_area_module%2Fsrc%2Fdebug.cpp?ref=7bb4ef4c4467caea236e87d47e8db871ae904d54",
            "patch": "@@ -174,7 +174,8 @@ visualization_msgs::msg::MarkerArray NoStoppingAreaModule::createVirtualWallMark\n     stop_poses.push_back(p_front);\n   }\n   appendMarkerArray(\n-    virtual_wall_marker_creator_->createStopVirtualWallMarker(stop_poses, \"no_stopping_area\", now),\n+    virtual_wall_marker_creator_->createStopVirtualWallMarker(\n+      stop_poses, \"no_stopping_area\", now, 0.0, std::to_string(module_id_) + \"_\"),\n     &wall_marker, now);\n \n   return wall_marker;"
        }
    ],
    "autowarefoundation/autoware.universe/3837": [
        {
            "sha": "983aa5c3c0e89860e386881425d4d38daaf6d5b0",
            "filename": "planning/behavior_velocity_out_of_lane_module/src/scene_out_of_lane.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 15,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0a34879e11d306dab904cdd3c93b25f2e4e2763c/planning%2Fbehavior_velocity_out_of_lane_module%2Fsrc%2Fscene_out_of_lane.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0a34879e11d306dab904cdd3c93b25f2e4e2763c/planning%2Fbehavior_velocity_out_of_lane_module%2Fsrc%2Fscene_out_of_lane.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_out_of_lane_module%2Fsrc%2Fscene_out_of_lane.cpp?ref=0a34879e11d306dab904cdd3c93b25f2e4e2763c",
            "patch": "@@ -165,22 +165,11 @@ MarkerArray OutOfLaneModule::createDebugMarkerArray()\n \n MarkerArray OutOfLaneModule::createVirtualWallMarkerArray()\n {\n-  const auto current_time = this->clock_->now();\n-\n-  MarkerArray wall_marker;\n-  std::string module_name = \"out_of_lane\";\n   std::vector<Pose> slow_down_poses;\n-  for (const auto & slowdown : debug_data_.slowdowns) {\n-    const auto p_front = calcOffsetPose(slowdown.point.point.pose, params_.front_offset, 0.0, 0.0);\n-    slow_down_poses.push_back(p_front);\n-    auto markers = virtual_wall_marker_creator_->createSlowDownVirtualWallMarker(\n-      slow_down_poses, module_name, current_time, static_cast<int32_t>(module_id_));\n-    for (auto & m : markers.markers) {\n-      m.id += static_cast<int>(wall_marker.markers.size());\n-      wall_marker.markers.push_back(std::move(m));\n-    }\n-  }\n-  return wall_marker;\n+  for (const auto & slowdown : debug_data_.slowdowns)\n+    slow_down_poses.push_back(slowdown.point.point.pose);\n+  return virtual_wall_marker_creator_->createSlowDownVirtualWallMarker(\n+    slow_down_poses, \"out_of_lane\", clock_->now(), params_.front_offset);\n }\n \n std::vector<SlowdownToInsert> calculate_slowdown_points("
        }
    ],
    "autowarefoundation/autoware.universe/3839": [
        {
            "sha": "b715ef2da4bc6843105f44951bab1581735b4932",
            "filename": "planning/behavior_velocity_virtual_traffic_light_module/src/debug.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 18,
            "changes": 23,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ef686ae930f94fade06dffa87c7bac4602e542f7/planning%2Fbehavior_velocity_virtual_traffic_light_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ef686ae930f94fade06dffa87c7bac4602e542f7/planning%2Fbehavior_velocity_virtual_traffic_light_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_virtual_traffic_light_module%2Fsrc%2Fdebug.cpp?ref=ef686ae930f94fade06dffa87c7bac4602e542f7",
            "patch": "@@ -52,28 +52,15 @@ namespace\n \n visualization_msgs::msg::MarkerArray VirtualTrafficLightModule::createVirtualWallMarkerArray()\n {\n-  visualization_msgs::msg::MarkerArray wall_marker;\n-\n   const auto & d = module_data_;\n-  const auto now = clock_->now();\n-\n   // virtual_wall_stop_line\n-  if (d.stop_head_pose_at_stop_line) {\n-    appendMarkerArray(\n-      virtual_wall_marker_creator_->createStopVirtualWallMarker(\n-        {*d.stop_head_pose_at_stop_line}, \"virtual_traffic_light\", now),\n-      &wall_marker, now);\n-  }\n-\n+  std::vector<geometry_msgs::msg::Pose> wall_poses;\n+  if (d.stop_head_pose_at_stop_line) wall_poses.push_back(*d.stop_head_pose_at_stop_line);\n   // virtual_wall_end_line\n-  if (d.stop_head_pose_at_end_line) {\n-    appendMarkerArray(\n-      virtual_wall_marker_creator_->createStopVirtualWallMarker(\n-        {*d.stop_head_pose_at_end_line}, \"virtual_traffic_light\", now),\n-      &wall_marker, now);\n-  }\n+  if (d.stop_head_pose_at_end_line) wall_poses.push_back(*d.stop_head_pose_at_end_line);\n \n-  return wall_marker;\n+  return virtual_wall_marker_creator_->createStopVirtualWallMarker(\n+    wall_poses, \"virtual_traffic_light\", clock_->now(), 0.0, std::to_string(module_id_));\n }\n \n visualization_msgs::msg::MarkerArray VirtualTrafficLightModule::createDebugMarkerArray()"
        }
    ],
    "autowarefoundation/autoware.universe/3843": [
        {
            "sha": "5011b602599f626d781e854253b9cccab907d82c",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/scene_module_manager_interface.hpp",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a35fbee7a9456e22e57cc1d54bab258ba70ba788/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a35fbee7a9456e22e57cc1d54bab258ba70ba788/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_manager_interface.hpp?ref=a35fbee7a9456e22e57cc1d54bab258ba70ba788",
            "patch": "@@ -206,6 +206,10 @@ class SceneModuleManagerInterface\n \n   bool isSimultaneousExecutableAsApprovedModule() const\n   {\n+    if (registered_modules_.empty()) {\n+      return enable_simultaneous_execution_as_approved_module_;\n+    }\n+\n     return std::all_of(\n       registered_modules_.begin(), registered_modules_.end(), [](const SceneModulePtr & module) {\n         return module->isSimultaneousExecutableAsApprovedModule();\n@@ -214,6 +218,10 @@ class SceneModuleManagerInterface\n \n   bool isSimultaneousExecutableAsCandidateModule() const\n   {\n+    if (registered_modules_.empty()) {\n+      return enable_simultaneous_execution_as_candidate_module_;\n+    }\n+\n     return std::all_of(\n       registered_modules_.begin(), registered_modules_.end(), [](const SceneModulePtr & module) {\n         return module->isSimultaneousExecutableAsCandidateModule();"
        }
    ],
    "autowarefoundation/autoware.universe/3849": [
        {
            "sha": "dd38b85a2b56df265af485de12c1f88701841dbe",
            "filename": "sensing/pointcloud_preprocessor/src/distortion_corrector/distortion_corrector.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/081aa249152596c5739e7f86a84616d5de16f79c/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fdistortion_corrector%2Fdistortion_corrector.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/081aa249152596c5739e7f86a84616d5de16f79c/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fdistortion_corrector%2Fdistortion_corrector.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fdistortion_corrector%2Fdistortion_corrector.cpp?ref=081aa249152596c5739e7f86a84616d5de16f79c",
            "patch": "@@ -222,7 +222,6 @@ bool DistortionCorrectorComponent::undistortPointCloud(\n \n   // For performance, do not instantiate `rclcpp::Time` inside of the for-loop\n   double twist_stamp = rclcpp::Time(twist_it->header.stamp).seconds();\n-  double imu_stamp = rclcpp::Time(imu_it->header.stamp).seconds();\n \n   // For performance, instantiate outside of the for-loop\n   tf2::Quaternion baselink_quat{};\n@@ -251,6 +250,9 @@ bool DistortionCorrectorComponent::undistortPointCloud(\n     }\n \n     if (use_imu_ && !angular_velocity_queue_.empty()) {\n+      // For performance, do not instantiate `rclcpp::Time` inside of the for-loop\n+      double imu_stamp = rclcpp::Time(imu_it->header.stamp).seconds();\n+\n       for (;\n            (imu_it != std::end(angular_velocity_queue_) - 1 &&\n             *it_time_stamp > rclcpp::Time(imu_it->header.stamp).seconds());"
        }
    ],
    "autowarefoundation/autoware.universe/3856": [
        {
            "sha": "e6b6cbad6e33cf1fe911fd72accca84f92f35ca0",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 1,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/12c7bb1272210365033e93b9f59d38ff85c880b9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/12c7bb1272210365033e93b9f59d38ff85c880b9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=12c7bb1272210365033e93b9f59d38ff85c880b9",
            "patch": "@@ -1090,7 +1090,20 @@ bool isEgoOutOfRoute(\n         \"cannot find closest road lanelet\");\n       return false;\n     }\n-    return lanelet::utils::isInLanelet(self_pose, closest_road_lane);\n+\n+    if (lanelet::utils::isInLanelet(self_pose, closest_road_lane)) {\n+      return true;\n+    }\n+\n+    // check previous lanes for backward driving (e.g. pull out)\n+    const auto prev_lanes = route_handler->getPreviousLanelets(closest_road_lane);\n+    for (const auto & lane : prev_lanes) {\n+      if (lanelet::utils::isInLanelet(self_pose, lane)) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n   });\n   if (!is_in_shoulder_lane && !is_in_road_lane) {\n     return true;"
        }
    ],
    "autowarefoundation/autoware.universe/3866": [
        {
            "sha": "6a3a9ce94f6393d054c2b9d6dc329a0e89eac3c1",
            "filename": "planning/behavior_path_planner/src/scene_module/pull_out/pull_out_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9868133c974071af296e82db895e18fde77667bf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9868133c974071af296e82db895e18fde77667bf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fpull_out%2Fpull_out_module.cpp?ref=9868133c974071af296e82db895e18fde77667bf",
            "patch": "@@ -390,6 +390,9 @@ void PullOutModule::incrementPathIndex()\n \n PathWithLaneId PullOutModule::getCurrentPath() const\n {\n+  if (status_.pull_out_path.partial_paths.size() <= status_.current_path_idx) {\n+    return PathWithLaneId{};\n+  }\n   return status_.pull_out_path.partial_paths.at(status_.current_path_idx);\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3867": [
        {
            "sha": "2f4d8e1cf7b0e3667f3894e7562e31694fd5faad",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/33c2db3c9ab3ecab6234fede7987b38cfd33ef0d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/33c2db3c9ab3ecab6234fede7987b38cfd33ef0d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=33c2db3c9ab3ecab6234fede7987b38cfd33ef0d",
            "patch": "@@ -1020,6 +1020,9 @@ bool GoalPlannerModule::incrementPathIndex()\n \n PathWithLaneId GoalPlannerModule::getCurrentPath() const\n {\n+  if (status_.pull_over_path->partial_paths.size() <= status_.current_path_idx) {\n+    return PathWithLaneId{};\n+  }\n   return status_.pull_over_path->partial_paths.at(status_.current_path_idx);\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3869": [
        {
            "sha": "b0c9f549650fd08306c295b53783188aedf2e06d",
            "filename": "simulator/dummy_perception_publisher/src/node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fb0ca6375e09274f3d955d61dd1fd21ed444d734/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fb0ca6375e09274f3d955d61dd1fd21ed444d734/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp?ref=fb0ca6375e09274f3d955d61dd1fd21ed444d734",
            "patch": "@@ -170,7 +170,7 @@ DummyPerceptionPublisherNode::DummyPerceptionPublisherNode()\n   if (publish_ground_truth_objects_) {\n     ground_truth_objects_pub_ =\n       this->create_publisher<autoware_auto_perception_msgs::msg::TrackedObjects>(\n-        \"~output/debug/ground_truth_objects\", qos);\n+        \"~/output/debug/ground_truth_objects\", qos);\n   }\n \n   using std::chrono_literals::operator\"\"ms;"
        }
    ],
    "autowarefoundation/autoware.universe/3873": [
        {
            "sha": "88a5a532f170c0c9a3234a5d0fb33c7ec17f0e6c",
            "filename": "planning/behavior_path_planner/src/utils/path_utils.cpp",
            "status": "modified",
            "additions": 32,
            "deletions": 16,
            "changes": 48,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/748226baf4402cf07d7ef65f30f798b9573e2d7b/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/748226baf4402cf07d7ef65f30f798b9573e2d7b/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp?ref=748226baf4402cf07d7ef65f30f798b9573e2d7b",
            "patch": "@@ -68,11 +68,23 @@ PathWithLaneId resamplePathWithSpline(\n     transformed_path.at(i) = path.points.at(i).point;\n   }\n \n-  constexpr double epsilon = 0.2;\n-  const auto has_almost_same_value = [&](const auto & vec, const auto x) {\n-    if (vec.empty()) return false;\n-    const auto has_close = [&](const auto v) { return std::abs(v - x) < epsilon; };\n-    return std::find_if(vec.begin(), vec.end(), has_close) != vec.end();\n+  const auto find_almost_same_values = [&](const std::vector<double> & vec, double x) {\n+    constexpr double epsilon = 0.2;\n+    const auto is_close = [&](double v, double x) { return std::abs(v - x) < epsilon; };\n+\n+    std::vector<size_t> indices;\n+    if (vec.empty()) {\n+      return boost::optional<std::vector<size_t>>();\n+    }\n+\n+    for (size_t i = 0; i < vec.size(); ++i) {\n+      if (is_close(vec[i], x)) {\n+        indices.push_back(i);\n+      }\n+    }\n+\n+    return indices.empty() ? boost::optional<std::vector<size_t>>()\n+                           : boost::optional<std::vector<size_t>>(indices);\n   };\n \n   // Get lane ids that are not duplicated\n@@ -88,7 +100,7 @@ PathWithLaneId resamplePathWithSpline(\n       }\n       unique_lane_ids.insert(lane_id);\n \n-      if (!has_almost_same_value(s_in, s)) {\n+      if (!find_almost_same_values(s_in, s)) {\n         s_in.push_back(s);\n       }\n     }\n@@ -99,22 +111,26 @@ PathWithLaneId resamplePathWithSpline(\n   const auto start_s = std::max(target_section.first, 0.0);\n   const auto end_s = std::min(target_section.second, s_vec.back());\n   for (double s = start_s; s < end_s; s += interval) {\n-    if (!has_almost_same_value(s_out, s)) {\n+    if (!find_almost_same_values(s_out, s)) {\n       s_out.push_back(s);\n     }\n   }\n \n-  // Insert Terminal Point\n-  if (!has_almost_same_value(s_out, end_s)) {\n-    s_out.push_back(end_s);\n-  } else {\n-    s_out.back() = end_s;\n-  }\n-\n   // Insert Stop Point\n   const auto closest_stop_dist = motion_utils::calcDistanceToForwardStopPoint(transformed_path);\n-  if (closest_stop_dist && !has_almost_same_value(s_out, *closest_stop_dist)) {\n-    s_out.push_back(*closest_stop_dist);\n+  if (closest_stop_dist) {\n+    const auto close_indices = find_almost_same_values(s_out, *closest_stop_dist);\n+    if (close_indices) {\n+      // Update the smallest index\n+      s_out.at(close_indices->at(0)) = *closest_stop_dist;\n+\n+      // Remove the rest of the indices in descending order\n+      for (size_t i = close_indices->size() - 1; i > 0; --i) {\n+        s_out.erase(s_out.begin() + close_indices->at(i));\n+      }\n+    } else {\n+      s_out.push_back(*closest_stop_dist);\n+    }\n   }\n \n   if (s_out.empty()) {"
        }
    ],
    "autowarefoundation/autoware.universe/3879": [
        {
            "sha": "5fc367665e2569f5fbfd1bf77637e8f1c21f99f8",
            "filename": "planning/planning_debug_tools/scripts/perception_reproducer.py",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3973f84d482546c240024fff975fe6741893c7a9/planning%2Fplanning_debug_tools%2Fscripts%2Fperception_reproducer.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3973f84d482546c240024fff975fe6741893c7a9/planning%2Fplanning_debug_tools%2Fscripts%2Fperception_reproducer.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2Fscripts%2Fperception_reproducer.py?ref=3973f84d482546c240024fff975fe6741893c7a9",
            "patch": "@@ -146,8 +146,8 @@ def __init__(self, args):\n         # load rosbag\n         print(\"Stared loading rosbag\")\n         if os.path.isdir(args.bag):\n-            for bag_file in sorted(os.listdir(args.directory)):\n-                self.load_rosbag(args.directory + \"/\" + bag_file)\n+            for bag_file in sorted(os.listdir(args.bag)):\n+                self.load_rosbag(args.bag + \"/\" + bag_file)\n         else:\n             self.load_rosbag(args.bag)\n         print(\"Ended loading rosbag\")"
        }
    ],
    "autowarefoundation/autoware.universe/3881": [
        {
            "sha": "0ce274a31f76b38a97afd5f7640110992ba82dff",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7cdcfd0d246ea4044f9b3622e0dfd04ca53dec05/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7cdcfd0d246ea4044f9b3622e0dfd04ca53dec05/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=7cdcfd0d246ea4044f9b3622e0dfd04ca53dec05",
            "patch": "@@ -394,6 +394,7 @@ void AvoidanceModule::fillShiftLine(AvoidancePlanningData & data, DebugData & de\n {\n   constexpr double AVOIDING_SHIFT_THR = 0.1;\n   data.avoiding_now = std::abs(getCurrentShift()) > AVOIDING_SHIFT_THR;\n+  data.candidate_path = utils::avoidance::toShiftedPath(data.reference_path);\n \n   auto path_shifter = path_shifter_;\n \n@@ -468,7 +469,6 @@ void AvoidanceModule::fillShiftLine(AvoidancePlanningData & data, DebugData & de\n    */\n   if (!data.safe && data.avoid_required) {\n     data.yield_required = data.found_avoidance_path && data.avoid_required;\n-    data.candidate_path = utils::avoidance::toShiftedPath(data.reference_path);\n     RCLCPP_WARN_THROTTLE(\n       getLogger(), *clock_, 5000, \"not found safe avoidance path. transit yield maneuver...\");\n   }\n@@ -479,7 +479,6 @@ void AvoidanceModule::fillShiftLine(AvoidancePlanningData & data, DebugData & de\n    */\n   if (!data.safe && registered) {\n     data.yield_required = true;\n-    data.candidate_path = utils::avoidance::toShiftedPath(data.reference_path);\n     RCLCPP_WARN_THROTTLE(\n       getLogger(), *clock_, 5000,\n       \"found safe avoidance path, but it is not safe. canceling avoidance path...\");"
        }
    ],
    "autowarefoundation/autoware.universe/3884": [
        {
            "sha": "b78d212af04690cb92ba980c52b07f22a76e23ef",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 3,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c16989aa684a04cdc65ea78c6c79cf49459be518/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c16989aa684a04cdc65ea78c6c79cf49459be518/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=c16989aa684a04cdc65ea78c6c79cf49459be518",
            "patch": "@@ -552,8 +552,13 @@ void GoalPlannerModule::selectSafePullOverPath()\n     if (search_start_offset_pose) {\n       decelerateBeforeSearchStart(*search_start_offset_pose, first_path);\n     } else {\n-      // if already passed the search start pose, set pull_over_velocity to first_path.\n+      // if already passed the search start offset pose, set pull_over_velocity to first_path.\n+      const auto min_decel_distance = calcFeasibleDecelDistance(parameters_->pull_over_velocity);\n       for (auto & p : first_path.points) {\n+        const double distance_from_ego = calcSignedArcLengthFromEgo(first_path, p.point.pose);\n+        if (min_decel_distance && distance_from_ego < *min_decel_distance) {\n+          continue;\n+        }\n         p.point.longitudinal_velocity_mps = std::min(\n           p.point.longitudinal_velocity_mps, static_cast<float>(parameters_->pull_over_velocity));\n       }\n@@ -942,8 +947,13 @@ PathWithLaneId GoalPlannerModule::generateStopPath()\n   if (search_start_offset_pose) {\n     decelerateBeforeSearchStart(*search_start_offset_pose, reference_path);\n   } else {\n-    // if already passed the search start pose, set pull_over_velocity to reference_path.\n+    // if already passed the search start offset pose, set pull_over_velocity to reference_path.\n+    const auto min_decel_distance = calcFeasibleDecelDistance(pull_over_velocity);\n     for (auto & p : reference_path.points) {\n+      const double distance_from_ego = calcSignedArcLengthFromEgo(reference_path, p.point.pose);\n+      if (min_decel_distance && distance_from_ego < *min_decel_distance) {\n+        continue;\n+      }\n       p.point.longitudinal_velocity_mps =\n         std::min(p.point.longitudinal_velocity_mps, static_cast<float>(pull_over_velocity));\n     }\n@@ -1239,7 +1249,7 @@ void GoalPlannerModule::decelerateForTurnSignal(const Pose & stop_pose, PathWith\n       0.0, calcSignedArcLength(path.points, point.point.pose.position, stop_pose.position));\n     const float decel_vel =\n       std::min(point.point.longitudinal_velocity_mps, static_cast<float>(distance_to_stop / time));\n-    const double distance_from_ego = calcSignedArcLengthFromEgo(path, stop_pose);\n+    const double distance_from_ego = calcSignedArcLengthFromEgo(path, point.point.pose);\n     const auto min_decel_distance = calcFeasibleDecelDistance(decel_vel);\n \n     // when current velocity already lower than decel_vel, min_decel_distance will be 0.0,"
        }
    ],
    "autowarefoundation/autoware.universe/3887": [
        {
            "sha": "c6df2a8cf9e8008d00764f0849c7278ae678d425",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/dd014aae7d6f5e8589ced55803e79f6155a933b0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/dd014aae7d6f5e8589ced55803e79f6155a933b0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=dd014aae7d6f5e8589ced55803e79f6155a933b0",
            "patch": "@@ -3186,6 +3186,12 @@ void AvoidanceModule::updateData()\n   if (prev_reference_.points.empty()) {\n     prev_reference_ = avoidance_data_.reference_path;\n   }\n+  if (prev_driving_lanes_.empty()) {\n+    prev_driving_lanes_ = utils::calcLaneAroundPose(\n+      planner_data_->route_handler, avoidance_data_.reference_pose,\n+      planner_data_->parameters.forward_path_length,\n+      planner_data_->parameters.backward_path_length);\n+  }\n #endif\n \n   fillShiftLine(avoidance_data_, debug_data_);"
        }
    ],
    "autowarefoundation/autoware.universe/3891": [
        {
            "sha": "68a69bd52f931bfa51a00417af4433347b31f245",
            "filename": "planning/behavior_velocity_intersection_module/src/debug.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/003f926c4347718d6b8ec57204bca81640093e80/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/003f926c4347718d6b8ec57204bca81640093e80/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fdebug.cpp?ref=003f926c4347718d6b8ec57204bca81640093e80",
            "patch": "@@ -257,6 +257,7 @@ motion_utils::VirtualWalls MergeFromPrivateRoadModule::createVirtualWalls()\n     wall.style = motion_utils::VirtualWallType::stop;\n     wall.pose = debug_data_.virtual_wall_pose;\n     wall.text = \"merge_from_private_road\";\n+    virtual_walls.push_back(wall);\n   }\n   return virtual_walls;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/3892": [
        {
            "sha": "bcf4cf77543b431c05491acb33bac7181818c264",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/interface.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a0d9bb641be3be018f76ebd961b945128ae16fe6/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a0d9bb641be3be018f76ebd961b945128ae16fe6/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp?ref=a0d9bb641be3be018f76ebd961b945128ae16fe6",
            "patch": "@@ -338,6 +338,11 @@ MarkerArray LaneChangeInterface::getModuleVirtualWall()\n {\n   using marker_utils::lane_change_markers::createLaneChangingVirtualWallMarker;\n   MarkerArray marker;\n+\n+  if (!parameters_->publish_debug_marker) {\n+    return marker;\n+  }\n+\n   if (isWaitingApproval() || current_state_ != ModuleStatus::RUNNING) {\n     return marker;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3893": [
        {
            "sha": "0060a3cc1b80813c452f32238a9a952bde147934",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 36,
            "deletions": 14,
            "changes": 50,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4ecdfa5a4f863b176682f8a971b8d3628de5fed5/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4ecdfa5a4f863b176682f8a971b8d3628de5fed5/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=4ecdfa5a4f863b176682f8a971b8d3628de5fed5",
            "patch": "@@ -276,37 +276,59 @@ bool GoalPlannerModule::isExecutionRequested() const\n   if (current_state_ == ModuleStatus::RUNNING) {\n     return true;\n   }\n-  const auto & route_handler = planner_data_->route_handler;\n \n-  // if current position is far from goal, do not execute pull over\n+  const auto & route_handler = planner_data_->route_handler;\n   const Pose & current_pose = planner_data_->self_odometry->pose.pose;\n   const Pose & goal_pose = route_handler->getGoalPose();\n+\n+  // if goal is shoulder lane, allow goal modification\n+  allow_goal_modification_ =\n+    route_handler->isAllowedGoalModification() || checkOriginalGoalIsInShoulder();\n+\n+  // check if goal_pose is in current_lanes.\n   lanelet::ConstLanelet current_lane{};\n   const lanelet::ConstLanelets current_lanes = utils::getCurrentLanes(planner_data_);\n   lanelet::utils::query::getClosestLanelet(current_lanes, current_pose, &current_lane);\n+  const bool goal_is_in_current_lanes = std::any_of(\n+    current_lanes.begin(), current_lanes.end(), [&](const lanelet::ConstLanelet & current_lane) {\n+      return lanelet::utils::isInLanelet(goal_pose, current_lane);\n+    });\n+\n+  // check that goal is in current neghibor shoulder lane\n+  const bool goal_is_in_current_shoulder_lanes = std::invoke([&]() {\n+    lanelet::ConstLanelet neighbor_shoulder_lane{};\n+    for (const auto & lane : current_lanes) {\n+      const bool has_shoulder_lane =\n+        left_side_parking_ ? route_handler->getLeftShoulderLanelet(lane, &neighbor_shoulder_lane)\n+                           : route_handler->getRightShoulderLanelet(lane, &neighbor_shoulder_lane);\n+      if (has_shoulder_lane && lanelet::utils::isInLanelet(goal_pose, neighbor_shoulder_lane)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  });\n+\n+  // if goal is not in current_lanes and current_shoulder_lanes, do not execute goal_planner,\n+  // because goal arc coordinates cannot be calculated.\n+  if (!goal_is_in_current_lanes && !goal_is_in_current_shoulder_lanes) {\n+    return false;\n+  }\n+\n+  // if goal arc coordinates can be calculated, check if goal is in request_length\n   const double self_to_goal_arc_length =\n     utils::getSignedDistance(current_pose, goal_pose, current_lanes);\n-  allow_goal_modification_ =\n-    route_handler->isAllowedGoalModification() || checkOriginalGoalIsInShoulder();\n   const double request_length =\n     allow_goal_modification_ ? calcModuleRequestLength() : parameters_->minimum_request_length;\n-  const double backward_goal_search_length =\n-    allow_goal_modification_ ? parameters_->backward_goal_search_length : 0.0;\n-  if (\n-    self_to_goal_arc_length < -backward_goal_search_length ||\n-    self_to_goal_arc_length > request_length) {\n+  if (self_to_goal_arc_length < 0.0 || self_to_goal_arc_length > request_length) {\n+    // if current position is far from goal or behind goal, do not execute goal_planner\n     return false;\n   }\n \n   // if goal modification is not allowed\n   // 1) goal_pose is in current_lanes, plan path to the original fixed goal\n   // 2) goal_pose is NOT in current_lanes, do not execute goal_planner\n   if (!allow_goal_modification_) {\n-    // check if goal_pose is in current_lanes.\n-    return std::any_of(\n-      current_lanes.begin(), current_lanes.end(), [&](const lanelet::ConstLanelet & current_lane) {\n-        return lanelet::utils::isInLanelet(goal_pose, current_lane);\n-      });\n+    return goal_is_in_current_lanes;\n   }\n \n   // if (A) or (B) is met execute pull over"
        }
    ],
    "autowarefoundation/autoware.universe/3898": [
        {
            "sha": "ea6f709d02a156e0f4995e03185adf887850f2ce",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/parameters.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/efa58f702805762c19d575ec59944f75f54da011/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fparameters.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/efa58f702805762c19d575ec59944f75f54da011/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fparameters.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fparameters.hpp?ref=efa58f702805762c19d575ec59944f75f54da011",
            "patch": "@@ -118,8 +118,8 @@ struct BehaviorPathPlannerParameters\n   double turn_signal_shift_length_threshold;\n   bool turn_signal_on_swerving;\n \n-  double enable_akima_spline_first;\n-  double enable_cog_on_centerline;\n+  bool enable_akima_spline_first;\n+  bool enable_cog_on_centerline;\n   double input_path_interval;\n   double output_path_interval;\n "
        }
    ],
    "autowarefoundation/autoware.universe/3900": [
        {
            "sha": "c015a2659193ecd82ab76d12c3b574fe85d018fc",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 58,
            "deletions": 45,
            "changes": 103,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8f69b62e8d4a67b842284b2f91d547905b286d60/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8f69b62e8d4a67b842284b2f91d547905b286d60/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=8f69b62e8d4a67b842284b2f91d547905b286d60",
            "patch": "@@ -1521,17 +1521,18 @@ std::vector<geometry_msgs::msg::Point> calcBound(\n     }\n     return points;\n   };\n-  // a function to get polygon with a designated id\n-  const auto get_corresponding_polygon_index = [&](const auto & polygon, const auto & target_id) {\n-    for (size_t poly_idx = 0; poly_idx < polygon.size(); ++poly_idx) {\n-      if (polygon[poly_idx].id() == target_id) {\n-        // NOTE: If there are duplicated points in polygon, the early one will be returned.\n-        return poly_idx;\n+  // a function to get polygon with a designated point id\n+  const auto get_corresponding_polygon_index =\n+    [&](const auto & polygon, const auto & target_point_id) {\n+      for (size_t poly_point_idx = 0; poly_point_idx < polygon.size(); ++poly_point_idx) {\n+        if (polygon[poly_point_idx].id() == target_point_id) {\n+          // NOTE: If there are duplicated points in polygon, the early one will be returned.\n+          return poly_point_idx;\n+        }\n       }\n-    }\n-    // This means calculation has some errors.\n-    return polygon.size() - 1;\n-  };\n+      // This means calculation has some errors.\n+      return polygon.size() - 1;\n+    };\n   const auto mod = [&](const int a, const int b) {\n     return (a + b) % b;  // NOTE: consider negative value\n   };\n@@ -1548,52 +1549,57 @@ std::vector<geometry_msgs::msg::Point> calcBound(\n \n   std::optional<lanelet::Polygon3d> current_polygon{std::nullopt};\n   std::vector<size_t> current_polygon_border_indices;\n-  for (size_t point_idx = 0; point_idx < bound_points.size(); ++point_idx) {\n-    const auto & point = bound_points.at(point_idx);\n-    const auto polygon = getPolygonByPoint(route_handler, point, \"hatched_road_markings\");\n+  for (size_t bound_point_idx = 0; bound_point_idx < bound_points.size(); ++bound_point_idx) {\n+    const auto & bound_point = bound_points.at(bound_point_idx);\n+    const auto polygon = getPolygonByPoint(route_handler, bound_point, \"hatched_road_markings\");\n \n     bool will_close_polygon{false};\n     if (!current_polygon) {\n       if (!polygon) {\n-        output_points.push_back(lanelet::utils::conversion::toGeomMsgPt(point));\n+        output_points.push_back(lanelet::utils::conversion::toGeomMsgPt(bound_point));\n       } else {\n         // There is a new additional polygon to expand\n         current_polygon = polygon;\n         current_polygon_border_indices.push_back(\n-          get_corresponding_polygon_index(*current_polygon, point.id()));\n+          get_corresponding_polygon_index(*current_polygon, bound_point.id()));\n       }\n     } else {\n       if (!polygon) {\n         will_close_polygon = true;\n       } else {\n         current_polygon_border_indices.push_back(\n-          get_corresponding_polygon_index(*current_polygon, point.id()));\n+          get_corresponding_polygon_index(*current_polygon, bound_point.id()));\n       }\n     }\n \n-    if (point_idx == bound_points.size() - 1 && current_polygon) {\n+    if (bound_point_idx == bound_points.size() - 1 && current_polygon) {\n       // If drivable lanes ends earlier than polygon, close the polygon\n       will_close_polygon = true;\n     }\n \n     if (will_close_polygon) {\n       // The current additional polygon ends to expand\n-      const size_t current_polygon_points_num = current_polygon->size();\n-      const bool is_polygon_opposite_direction = [&]() {\n-        const size_t modulo_diff = mod(\n-          static_cast<int>(current_polygon_border_indices[1]) -\n-            static_cast<int>(current_polygon_border_indices[0]),\n-          current_polygon_points_num);\n-        return modulo_diff == 1;\n-      }();\n-\n-      const int target_points_num =\n-        current_polygon_points_num - current_polygon_border_indices.size() + 1;\n-      for (int poly_idx = 0; poly_idx <= target_points_num; ++poly_idx) {\n-        const int target_poly_idx = current_polygon_border_indices.front() +\n-                                    poly_idx * (is_polygon_opposite_direction ? -1 : 1);\n+      if (current_polygon_border_indices.size() == 1) {\n         output_points.push_back(lanelet::utils::conversion::toGeomMsgPt(\n-          (*current_polygon)[mod(target_poly_idx, current_polygon_points_num)]));\n+          (*current_polygon)[current_polygon_border_indices.front()]));\n+      } else {\n+        const size_t current_polygon_points_num = current_polygon->size();\n+        const bool is_polygon_opposite_direction = [&]() {\n+          const size_t modulo_diff = mod(\n+            static_cast<int>(current_polygon_border_indices[1]) -\n+              static_cast<int>(current_polygon_border_indices[0]),\n+            current_polygon_points_num);\n+          return modulo_diff == 1;\n+        }();\n+\n+        const int target_points_num =\n+          current_polygon_points_num - current_polygon_border_indices.size() + 1;\n+        for (int poly_idx = 0; poly_idx <= target_points_num; ++poly_idx) {\n+          const int target_poly_idx = current_polygon_border_indices.front() +\n+                                      poly_idx * (is_polygon_opposite_direction ? -1 : 1);\n+          output_points.push_back(lanelet::utils::conversion::toGeomMsgPt(\n+            (*current_polygon)[mod(target_poly_idx, current_polygon_points_num)]));\n+        }\n       }\n       current_polygon = std::nullopt;\n       current_polygon_border_indices.clear();\n@@ -1641,20 +1647,27 @@ void makeBoundLongitudinallyMonotonic(PathWithLaneId & path, const bool is_bound\n         const auto bound_pose_with_lat_offset =\n           tier4_autoware_utils::calcOffsetPose(bound_pose, 0.0, lat_offset, 0.0);\n \n+        const bool maybe_monotonic = [&]() {\n+          if (b_idx == original_bound.size() - 1) {\n+            return true;\n+          }\n+          const double theta = tier4_autoware_utils::normalizeRadian(\n+            tier4_autoware_utils::calcAzimuthAngle(\n+              original_bound.at(b_idx), original_bound.at(b_idx + 1)) -\n+            tier4_autoware_utils::calcAzimuthAngle(\n+              bound_pose.position, bound_pose_with_lat_offset.position));\n+          return (is_points_left && 0 < theta) || (!is_points_left && theta < 0);\n+        }();\n+\n         // skip non monotonic points\n-        for (size_t candidate_idx = b_idx + 1; candidate_idx < original_bound.size() - 1;\n-             ++candidate_idx) {\n-          const auto intersect_point = drivable_area_processing::intersect(\n-            bound_pose.position, bound_pose_with_lat_offset.position,\n-            original_bound.at(candidate_idx), original_bound.at(candidate_idx + 1));\n-\n-          if (intersect_point) {\n-            const double theta = tier4_autoware_utils::normalizeRadian(\n-              tier4_autoware_utils::calcAzimuthAngle(\n-                bound_pose.position, original_bound.at(candidate_idx)) -\n-              tier4_autoware_utils::calcAzimuthAngle(\n-                bound_pose.position, bound_pose_with_lat_offset.position));\n-            if ((is_points_left && 0 < theta) || (!is_points_left && theta < 0)) {\n+        if (maybe_monotonic) {\n+          for (size_t candidate_idx = b_idx + 1; candidate_idx < original_bound.size() - 1;\n+               ++candidate_idx) {\n+            const auto intersect_point = drivable_area_processing::intersect(\n+              bound_pose.position, bound_pose_with_lat_offset.position,\n+              original_bound.at(candidate_idx), original_bound.at(candidate_idx + 1));\n+\n+            if (intersect_point) {\n               monotonic_bound.push_back(*intersect_point);\n               b_idx = candidate_idx;\n               break;"
        }
    ],
    "autowarefoundation/autoware.universe/3910": [
        {
            "sha": "2c7e32d771b2cc949337647b7e7fc69703ef29ba",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/scene_module_interface.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cb0ab9816e17316ddffabe6e3fd3fbeab90be9e0/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cb0ab9816e17316ddffabe6e3fd3fbeab90be9e0/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fscene_module_interface.hpp?ref=cb0ab9816e17316ddffabe6e3fd3fbeab90be9e0",
            "patch": "@@ -505,6 +505,7 @@ class SceneModuleInterface\n   void setStopReason(const std::string & stop_reason, const PathWithLaneId & path)\n   {\n     stop_reason_.reason = stop_reason;\n+    stop_reason_.stop_factors.clear();\n \n     if (!stop_pose_) {\n       stop_reason_.reason = \"\";"
        }
    ],
    "autowarefoundation/autoware.universe/3914": [
        {
            "sha": "9f1133db901bff4aa3ed63a567b5589e198d3cd1",
            "filename": "perception/compare_map_segmentation/src/voxel_grid_map_loader.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/05bfaccc5181f502399f97c3a618ebb4772a3a4c/perception%2Fcompare_map_segmentation%2Fsrc%2Fvoxel_grid_map_loader.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/05bfaccc5181f502399f97c3a618ebb4772a3a4c/perception%2Fcompare_map_segmentation%2Fsrc%2Fvoxel_grid_map_loader.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fcompare_map_segmentation%2Fsrc%2Fvoxel_grid_map_loader.cpp?ref=05bfaccc5181f502399f97c3a618ebb4772a3a4c",
            "patch": "@@ -307,6 +307,7 @@ VoxelGridDynamicMapLoader::VoxelGridDynamicMapLoader(\n   }\n \n   const auto period_ns = rclcpp::Rate(timer_interval_ms).period();\n+  timer_callback_group_ = node->create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);\n   map_update_timer_ = rclcpp::create_timer(\n     node, node->get_clock(), period_ns, std::bind(&VoxelGridDynamicMapLoader::timer_callback, this),\n     timer_callback_group_);"
        }
    ],
    "autowarefoundation/autoware.universe/3919": [
        {
            "sha": "0494b57dcfab9bf519e252bda439d81329a873bb",
            "filename": "map/map_loader/README.md",
            "status": "modified",
            "additions": 60,
            "deletions": 40,
            "changes": 100,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/36989cc30dd44c3229de8766ae9790b9c10ef289/map%2Fmap_loader%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/36989cc30dd44c3229de8766ae9790b9c10ef289/map%2Fmap_loader%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2FREADME.md?ref=36989cc30dd44c3229de8766ae9790b9c10ef289",
            "patch": "@@ -14,6 +14,66 @@ Currently, it supports the following two types:\n - Send partial pointcloud map loading via ROS 2 service\n - Send differential pointcloud map loading via ROS 2 service\n \n+### Prerequisites\n+\n+#### Prerequisites on pointcloud map file(s)\n+\n+You may provide either a single .pcd file or multiple .pcd files. If you are using multiple PCD data and either of `enable_partial_load`, `enable_differential_load` or `enable_selected_load` are set true, it MUST obey the following rules:\n+\n+1. **It must be divided by straight lines parallel to the x-axis and y-axis**. The system does not support division by diagonal lines or curved lines.\n+2. **The division size along each axis should be equal.**\n+3. **The division size should be about 20m x 20m.** Particularly, care should be taken as using too large division size (for example, more than 100m) may have adverse effects on dynamic map loading features in [ndt_scan_matcher](https://github.com/autowarefoundation/autoware.universe/tree/main/localization/ndt_scan_matcher) and [compare_map_segmentation](https://github.com/autowarefoundation/autoware.universe/tree/main/perception/compare_map_segmentation).\n+4. **All the split maps should not overlap with each other.**\n+5. **Metadata file should also be provided.** The metadata structure description is provided below.\n+\n+Note that these rules are not applicable when `enable_partial_load`, `enable_differential_load` and `enable_selected_load` are all set false. In this case, however, you also need to disable dynamic map loading mode for other nodes as well ([ndt_scan_matcher](https://github.com/autowarefoundation/autoware.universe/tree/main/localization/ndt_scan_matcher) and [compare_map_segmentation](https://github.com/autowarefoundation/autoware.universe/tree/main/perception/compare_map_segmentation) as of June 2023).\n+\n+#### Metadata structure\n+\n+The metadata should look like this:\n+\n+```yaml\n+x_resolution: 20.0\n+y_resolution: 20.0\n+A.pcd: [1200, 2500] # -> 1200 < x < 1220, 2500 < y < 2520\n+B.pcd: [1220, 2500] # -> 1220 < x < 1240, 2500 < y < 2520\n+C.pcd: [1200, 2520] # -> 1200 < x < 1220, 2520 < y < 2540\n+D.pcd: [1240, 2520] # -> 1240 < x < 1260, 2520 < y < 2540\n+```\n+\n+where,\n+\n+- `x_resolution` and `y_resolution`\n+- `A.pcd`, `B.pcd`, etc, are the names of PCD files.\n+- List such as `[1200, 2500]` are the values indicate that for this PCD file, x coordinates are between 1200 and 1220 (`x_resolution` + `x_coordinate`) and y coordinates are between 2500 and 2520 (`y_resolution` + `y_coordinate`).\n+\n+You may use [pointcloud_divider](https://github.com/MapIV/pointcloud_divider) from MAP IV for dividing pointcloud map as well as generating the compatible metadata.yaml.\n+\n+#### Directory structure of these files\n+\n+If you only have one pointcloud map, Autoware will assume the following directory structure by default.\n+\n+```bash\n+sample-map-rosbag\n+\u251c\u2500\u2500 lanelet2_map.osm\n+\u251c\u2500\u2500 pointcloud_map.pcd\n+```\n+\n+If you have multiple rosbags, an example directory structure would be as follows. Note that you need to have a metadata when you have multiple pointcloud map files.\n+\n+```bash\n+sample-map-rosbag\n+\u251c\u2500\u2500 lanelet2_map.osm\n+\u251c\u2500\u2500 pointcloud_map.pcd\n+\u2502 \u251c\u2500\u2500 A.pcd\n+\u2502 \u251c\u2500\u2500 B.pcd\n+\u2502 \u251c\u2500\u2500 C.pcd\n+\u2502 \u2514\u2500\u2500 ...\n+\u2514\u2500\u2500 pointcloud_map_metadata.yaml\n+```\n+\n+### Specific features\n+\n #### Publish raw pointcloud map (ROS 2 topic)\n \n The node publishes the raw pointcloud map loaded from the `.pcd` file(s).\n@@ -71,46 +131,6 @@ Please see [the description of `GetSelectedPointCloudMap.srv`](https://github.co\n - pointcloud map file(s) (.pcd)\n - metadata of pointcloud map(s) (.yaml)\n \n-### Metadata\n-\n-You must provide metadata in YAML format as well as pointcloud map files. Pointcloud map should be divided into one or more files with x-y grid.\n-\n-Metadata should look like this:\n-\n-```yaml\n-x_resolution: 100.0\n-y_resolution: 150.0\n-A.pcd: [1200, 2500] # -> 1200 < x < 1300, 2500 < y < 2650\n-B.pcd: [1300, 2500] # -> 1300 < x < 1400, 2500 < y < 2650\n-C.pcd: [1200, 2650] # -> 1200 < x < 1300, 2650 < y < 2800\n-D.pcd: [1400, 2650] # -> 1400 < x < 1500, 2650 < y < 2800\n-```\n-\n-You may use [pointcloud_divider](https://github.com/MapIV/pointcloud_divider) from MAP IV for dividing pointcloud map as well as generating the compatible metadata.yaml.\n-\n-### How to store map-related files\n-\n-If you only have one pointcloud map, Autoware will assume the following directory structure by default.\n-\n-```bash\n-sample-map-rosbag\n-\u251c\u2500\u2500 lanelet2_map.osm\n-\u251c\u2500\u2500 pointcloud_map.pcd\n-```\n-\n-If you have multiple rosbags, an example directory structure would be as follows. Note that you need to have a metadata when you have multiple pointcloud map files.\n-\n-```bash\n-sample-map-rosbag\n-\u251c\u2500\u2500 lanelet2_map.osm\n-\u251c\u2500\u2500 pointcloud_map.pcd\n-\u2502 \u251c\u2500\u2500 A.pcd\n-\u2502 \u251c\u2500\u2500 B.pcd\n-\u2502 \u251c\u2500\u2500 C.pcd\n-\u2502 \u2514\u2500\u2500 ...\n-\u2514\u2500\u2500 pointcloud_map_metadata.yaml\n-```\n-\n ---\n \n ## lanelet2_map_loader"
        }
    ],
    "autowarefoundation/autoware.universe/3920": [
        {
            "sha": "a2d93070845451759ce36d9d6e0980f5f64c4d45",
            "filename": "map/map_loader/src/pointcloud_map_loader/pointcloud_map_loader_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e3567c49d1348651f02732815195a051a3101723/map%2Fmap_loader%2Fsrc%2Fpointcloud_map_loader%2Fpointcloud_map_loader_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e3567c49d1348651f02732815195a051a3101723/map%2Fmap_loader%2Fsrc%2Fpointcloud_map_loader%2Fpointcloud_map_loader_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2Fsrc%2Fpointcloud_map_loader%2Fpointcloud_map_loader_node.cpp?ref=e3567c49d1348651f02732815195a051a3101723",
            "patch": "@@ -68,7 +68,7 @@ PointCloudMapLoaderNode::PointCloudMapLoaderNode(const rclcpp::NodeOptions & opt\n       std::make_unique<PointcloudMapLoaderModule>(this, pcd_paths, publisher_name, true);\n   }\n \n-  if (enable_partial_load || enable_differential_load) {\n+  if (enable_partial_load || enable_differential_load || enable_selected_load) {\n     std::map<std::string, PCDFileMetadata> pcd_metadata_dict;\n     try {\n       pcd_metadata_dict = getPCDMetadata(pcd_metadata_path, pcd_paths);"
        }
    ],
    "autowarefoundation/autoware.universe/3922": [
        {
            "sha": "873288996a126fd120be50199bd520f58114c9a0",
            "filename": "planning/behavior_path_planner/src/utils/path_utils.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 10,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/77c2091d7d3134676e244ed275fc241aaec4c353/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/77c2091d7d3134676e244ed275fc241aaec4c353/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp?ref=77c2091d7d3134676e244ed275fc241aaec4c353",
            "patch": "@@ -77,22 +77,19 @@ PathWithLaneId resamplePathWithSpline(\n \n   // Get lane ids that are not duplicated\n   std::vector<double> s_in;\n-  std::vector<int64_t> unique_lane_ids;\n+  std::unordered_set<int64_t> unique_lane_ids;\n   const auto s_vec =\n     motion_utils::calcSignedArcLengthPartialSum(transformed_path, 0, transformed_path.size());\n   for (size_t i = 0; i < path.points.size(); ++i) {\n     const double s = s_vec.at(i);\n     for (const auto & lane_id : path.points.at(i).lane_ids) {\n-      if (keep_input_points && !has_almost_same_value(s_in, s)) {\n-        s_in.push_back(s);\n+      if (!keep_input_points && (unique_lane_ids.find(lane_id) != unique_lane_ids.end())) {\n+        continue;\n       }\n-      if (\n-        std::find(unique_lane_ids.begin(), unique_lane_ids.end(), lane_id) !=\n-        unique_lane_ids.end()) {\n-        unique_lane_ids.push_back(lane_id);\n-        if (!has_almost_same_value(s_in, s)) {\n-          s_in.push_back(s);\n-        }\n+      unique_lane_ids.insert(lane_id);\n+\n+      if (!has_almost_same_value(s_in, s)) {\n+        s_in.push_back(s);\n       }\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3923": [
        {
            "sha": "41edd34cbcf3ade73f4a43081b651747f9a6d139",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2e1b47e1bcef7b744741f22fbcf829982c6b480d/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2e1b47e1bcef7b744741f22fbcf829982c6b480d/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=2e1b47e1bcef7b744741f22fbcf829982c6b480d",
            "patch": "@@ -127,7 +127,7 @@ BehaviorModuleOutput PlannerManager::run(const std::shared_ptr<PlannerData> & da\n void PlannerManager::generateCombinedDrivableArea(\n   BehaviorModuleOutput & output, const std::shared_ptr<PlannerData> & data) const\n {\n-  if (output.path->points.empty()) {\n+  if (!output.path || output.path->points.empty()) {\n     RCLCPP_ERROR_STREAM(logger_, \"[generateCombinedDrivableArea] Output path is empty!\");\n     return;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3926": [
        {
            "sha": "7ece399bf450cfcc2ea95a37544adc292f15a871",
            "filename": "planning/behavior_path_planner/src/scene_module/dynamic_avoidance/dynamic_avoidance_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7e43a0ea1784171ec6d98f7c11e648edbcfec994/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fdynamic_avoidance%2Fdynamic_avoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7e43a0ea1784171ec6d98f7c11e648edbcfec994/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fdynamic_avoidance%2Fdynamic_avoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fdynamic_avoidance%2Fdynamic_avoidance_module.cpp?ref=7e43a0ea1784171ec6d98f7c11e648edbcfec994",
            "patch": "@@ -101,7 +101,7 @@ void appendObjectMarker(MarkerArray & marker_array, const geometry_msgs::msg::Po\n     \"map\", rclcpp::Clock{RCL_ROS_TIME}.now(), \"dynamic_objects_to_avoid\",\n     marker_array.markers.size(), visualization_msgs::msg::Marker::CUBE,\n     tier4_autoware_utils::createMarkerScale(3.0, 1.0, 1.0),\n-    tier4_autoware_utils::createMarkerColor(1.0, 0.5, 0.6, 0.8));\n+    tier4_autoware_utils::createMarkerColor(0.7, 0.15, 0.9, 0.8));\n   marker.pose = obj_pose;\n \n   marker_array.markers.push_back(marker);\n@@ -113,8 +113,8 @@ void appendExtractedPolygonMarker(\n   auto marker = tier4_autoware_utils::createDefaultMarker(\n     \"map\", rclcpp::Clock{RCL_ROS_TIME}.now(), \"extracted_polygons\", marker_array.markers.size(),\n     visualization_msgs::msg::Marker::LINE_STRIP,\n-    tier4_autoware_utils::createMarkerScale(0.05, 0.0, 0.0),\n-    tier4_autoware_utils::createMarkerColor(1.0, 0.5, 0.6, 0.8));\n+    tier4_autoware_utils::createMarkerScale(0.1, 0.0, 0.0),\n+    tier4_autoware_utils::createMarkerColor(0.7, 0.15, 0.9, 0.8));\n \n   // NOTE: obj_poly.outer() has already duplicated points to close the polygon.\n   for (size_t i = 0; i < obj_poly.outer().size(); ++i) {"
        }
    ],
    "autowarefoundation/autoware.universe/3932": [
        {
            "sha": "62e8cd31ec062c9bc39df93581de2194a9ed7216",
            "filename": "planning/behavior_velocity_speed_bump_module/src/debug.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/234fa3796691398494cd74b5569943181956dd80/planning%2Fbehavior_velocity_speed_bump_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/234fa3796691398494cd74b5569943181956dd80/planning%2Fbehavior_velocity_speed_bump_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_speed_bump_module%2Fsrc%2Fdebug.cpp?ref=234fa3796691398494cd74b5569943181956dd80",
            "patch": "@@ -101,7 +101,7 @@ motion_utils::VirtualWalls SpeedBumpModule::createVirtualWalls()\n   wall.ns = std::to_string(module_id_) + \"_\";\n   wall.style = motion_utils::VirtualWallType::slowdown;\n   for (const auto & p : debug_data_.slow_start_poses) {\n-    wall.pose = p;\n+    wall.pose = tier4_autoware_utils::calcOffsetPose(p, debug_data_.base_link2front, 0.0, 0.0);\n     virtual_walls.push_back(wall);\n   }\n   return virtual_walls;"
        }
    ],
    "autowarefoundation/autoware.universe/3935": [
        {
            "sha": "37637f99f69c9024e96be80caf008e54765b2b39",
            "filename": "perception/image_projection_based_fusion/src/roi_detected_object_fusion/node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b7e0e4a6563dd0a0a6b25e063da3cc8f51420ca0/perception%2Fimage_projection_based_fusion%2Fsrc%2Froi_detected_object_fusion%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b7e0e4a6563dd0a0a6b25e063da3cc8f51420ca0/perception%2Fimage_projection_based_fusion%2Fsrc%2Froi_detected_object_fusion%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2Fsrc%2Froi_detected_object_fusion%2Fnode.cpp?ref=b7e0e4a6563dd0a0a6b25e063da3cc8f51420ca0",
            "patch": "@@ -28,7 +28,7 @@ RoiDetectedObjectFusionNode::RoiDetectedObjectFusionNode(const rclcpp::NodeOptio\n   fusion_params_.passthrough_lower_bound_probability_threshold =\n     declare_parameter<double>(\"passthrough_lower_bound_probability_threshold\");\n   fusion_params_.use_roi_probability = declare_parameter<bool>(\"use_roi_probability\");\n-  fusion_params_.roi_probability_threshold = declare_parameter<bool>(\"roi_probability_threshold\");\n+  fusion_params_.roi_probability_threshold = declare_parameter<double>(\"roi_probability_threshold\");\n   fusion_params_.min_iou_threshold = declare_parameter<double>(\"min_iou_threshold\");\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/3942": [
        {
            "sha": "54c47bcdbd22f0ad7d23973619c4d89877edeb3e",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a679ef81d5f6064ab8619614b6b7ed363b14c5c3/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a679ef81d5f6064ab8619614b6b7ed363b14c5c3/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=a679ef81d5f6064ab8619614b6b7ed363b14c5c3",
            "patch": "@@ -1510,8 +1510,11 @@ void generateDrivableArea(\n   }\n \n   // make bound longitudinally monotonic\n-  makeBoundLongitudinallyMonotonic(path, true);   // for left bound\n-  makeBoundLongitudinallyMonotonic(path, false);  // for right bound\n+  // TODO(Murooka) Fix makeBoundLongitudinallyMonotonic\n+  if (enable_expanding_polygon) {\n+    makeBoundLongitudinallyMonotonic(path, true);   // for left bound\n+    makeBoundLongitudinallyMonotonic(path, false);  // for right bound\n+  }\n }\n \n // calculate bounds from drivable lanes and hatched road markings"
        }
    ],
    "autowarefoundation/autoware.universe/3943": [
        {
            "sha": "c3576db3607f6d983ee324adae21304d9adbd0de",
            "filename": "planning/behavior_velocity_stop_line_module/src/debug.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bf8854b966798a4ed2b18d19e5fd5f03aa873114/planning%2Fbehavior_velocity_stop_line_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bf8854b966798a4ed2b18d19e5fd5f03aa873114/planning%2Fbehavior_velocity_stop_line_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_stop_line_module%2Fsrc%2Fdebug.cpp?ref=bf8854b966798a4ed2b18d19e5fd5f03aa873114",
            "patch": "@@ -99,7 +99,7 @@ motion_utils::VirtualWalls StopLineModule::createVirtualWalls()\n {\n   motion_utils::VirtualWalls virtual_walls;\n \n-  if (!debug_data_.stop_pose && (state_ == State::APPROACH || state_ == State::STOPPED)) {\n+  if (debug_data_.stop_pose && (state_ == State::APPROACH || state_ == State::STOPPED)) {\n     motion_utils::VirtualWall wall;\n     wall.text = \"stopline\";\n     wall.style = motion_utils::VirtualWallType::stop;"
        }
    ],
    "autowarefoundation/autoware.universe/3945": [
        {
            "sha": "d478fca57f4b44dd2e2ca00ebb1dd8ff9d784a54",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 1,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2e1ab651bbb4b543d2d2e21533fb9b5b098e2bf6/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2e1ab651bbb4b543d2d2e21533fb9b5b098e2bf6/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=2e1ab651bbb4b543d2d2e21533fb9b5b098e2bf6",
            "patch": "@@ -796,7 +796,14 @@ TurnSignalInfo StartPlannerModule::calcTurnSignalInfo() const\n   // pull out path does not overlap\n   const double distance_from_end =\n     motion_utils::calcSignedArcLength(path.points, end_pose.position, current_pose.position);\n-  const double lateral_offset = inverseTransformPoint(end_pose.position, start_pose).y;\n+\n+  if (path.points.empty()) {\n+    return {};\n+  }\n+  const auto closest_idx = motion_utils::findNearestIndex(path.points, start_pose.position);\n+  const auto lane_id = path.points.at(closest_idx).lane_ids.front();\n+  const auto lane = planner_data_->route_handler->getLaneletMapPtr()->laneletLayer.get(lane_id);\n+  const double lateral_offset = lanelet::utils::getLateralDistanceToCenterline(lane, start_pose);\n \n   if (distance_from_end < 0.0 && lateral_offset > parameters_->th_blinker_on_lateral_offset) {\n     turn_signal.turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;"
        }
    ],
    "autowarefoundation/autoware.universe/3956": [
        {
            "sha": "c7073a38de075ca24d639229083f1617276dfb57",
            "filename": "planning/mission_planner/src/mission_planner/mission_planner.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9d4ca890477945408331db1f36e999b71f844c9c/planning%2Fmission_planner%2Fsrc%2Fmission_planner%2Fmission_planner.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9d4ca890477945408331db1f36e999b71f844c9c/planning%2Fmission_planner%2Fsrc%2Fmission_planner%2Fmission_planner.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmission_planner%2Fsrc%2Fmission_planner%2Fmission_planner.cpp?ref=9d4ca890477945408331db1f36e999b71f844c9c",
            "patch": "@@ -373,8 +373,10 @@ void MissionPlanner::on_modified_goal(const ModifiedGoal::Message::ConstSharedPt\n     change_state(RouteState::Message::CHANGING);\n \n     const std::vector<geometry_msgs::msg::Pose> empty_waypoints;\n-    const auto new_route =\n+    auto new_route =\n       create_route(msg->header, empty_waypoints, msg->pose, normal_route_->allow_modification);\n+    // create_route generate new uuid, so set the original uuid again to keep that.\n+    new_route.uuid = msg->uuid;\n     if (new_route.segments.empty()) {\n       change_route(*normal_route_);\n       change_state(RouteState::Message::SET);"
        }
    ],
    "autowarefoundation/autoware.universe/3958": [
        {
            "sha": "3564c7a63f4b78f2a9f0ba250f8b80bd7b5c5cff",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/42336824d77059120c1d17831f938b594d981d56/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/42336824d77059120c1d17831f938b594d981d56/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=42336824d77059120c1d17831f938b594d981d56",
            "patch": "@@ -806,10 +806,10 @@ TurnSignalInfo StartPlannerModule::calcTurnSignalInfo() const\n   const double lateral_offset = lanelet::utils::getLateralDistanceToCenterline(lane, start_pose);\n \n   if (distance_from_end < 0.0 && lateral_offset > parameters_->th_blinker_on_lateral_offset) {\n-    turn_signal.turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;\n+    turn_signal.turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n   } else if (\n     distance_from_end < 0.0 && lateral_offset < -parameters_->th_blinker_on_lateral_offset) {\n-    turn_signal.turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n+    turn_signal.turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;\n   } else {\n     turn_signal.turn_signal.command = TurnIndicatorsCommand::DISABLE;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/3961": [
        {
            "sha": "105656882b32d68ab6cfb28afdb57783832f6cda",
            "filename": "planning/behavior_path_planner/src/behavior_path_planner_node.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c99997b1a6bf646b3a225f09270cd434acfdf031/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c99997b1a6bf646b3a225f09270cd434acfdf031/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp?ref=c99997b1a6bf646b3a225f09270cd434acfdf031",
            "patch": "@@ -1213,10 +1213,14 @@ void BehaviorPathPlannerNode::run()\n   // update route\n   const bool is_first_time = !(planner_data_->route_handler->isHandlerReady());\n   if (route_ptr) {\n+    // uuid is not changed when rerouting with modified goal,\n+    // in this case do not need to rest modules.\n+    const bool has_same_route_id =\n+      planner_data_->prev_route_id && route_ptr->uuid == planner_data_->prev_route_id;\n     planner_data_->route_handler->setRoute(*route_ptr);\n     // Reset behavior tree when new route is received,\n     // so that the each modules do not have to care about the \"route jump\".\n-    if (!is_first_time) {\n+    if (!is_first_time && !has_same_route_id) {\n       RCLCPP_DEBUG(get_logger(), \"new route is received. reset behavior tree.\");\n #ifdef USE_OLD_ARCHITECTURE\n       bt_manager_->resetBehaviorTree();"
        }
    ],
    "autowarefoundation/autoware.universe/3962": [
        {
            "sha": "3ab642abe1e8f8130f46f1cd42e3c484cd0f4095",
            "filename": "planning/behavior_velocity_intersection_module/README.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1652b8d45e8a33187befb701e77fe10cb42b8fa5/planning%2Fbehavior_velocity_intersection_module%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1652b8d45e8a33187befb701e77fe10cb42b8fa5/planning%2Fbehavior_velocity_intersection_module%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2FREADME.md?ref=1652b8d45e8a33187befb701e77fe10cb42b8fa5",
            "patch": "@@ -18,7 +18,7 @@ This module is activated when the path contains the lanes with `turn_direction`\n \n ### Requirements/Limitations\n \n-- The HDMap needs to have the information of `turn_direction` tag (which should be one of `straight`, `left`, `right`) for all the lanes in intersections and `right_of_way` tag for specific lanes (refer to [RightOfWay](intersection-design.md#right-of-way) section for more details). See [lanelet2_extension document](https://github.com/autowarefoundation/autoware_common/blob/main/tmp/lanelet2_extension/docs/lanelet2_format_extension.md) for more detail.\n+- The HDMap needs to have the information of `turn_direction` tag (which should be one of `straight`, `left`, `right`) for all the lanes in intersections and `right_of_way` tag for specific lanes (refer to [RightOfWay](#right-of-way) section for more details). See [lanelet2_extension document](https://github.com/autowarefoundation/autoware_common/blob/main/tmp/lanelet2_extension/docs/lanelet2_format_extension.md) for more detail.\n - WIP(perception requirements/limitations)\n - WIP(sensor visibility requirements/limitations)\n \n@@ -50,7 +50,7 @@ This setting gives the following `attention_area` configurations.\n \n ### Target objects\n \n-For [stuck vehicle detection](intersection-design.md#stuck-vehicle-detection) and [collision detection](intersection-design.md#collision-detection), this module checks **car**, **bus**, **truck**, **trailer**, **motor cycle**, and **bicycle** type objects.\n+For [stuck vehicle detection](#stuck-vehicle-detection) and [collision detection](#collision-detection), this module checks **car**, **bus**, **truck**, **trailer**, **motor cycle**, and **bicycle** type objects.\n \n Objects that satisfy all of the following conditions are considered as target objects (possible collision objects):\n "
        }
    ],
    "autowarefoundation/autoware.universe/3972": [
        {
            "sha": "98996bceafc08d26e22e8c9313ea423e341defe6",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 0,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5449f8e64589a78e7185e39c566de8f71a16ca2c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5449f8e64589a78e7185e39c566de8f71a16ca2c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=5449f8e64589a78e7185e39c566de8f71a16ca2c",
            "patch": "@@ -105,6 +105,18 @@ void StartPlannerModule::processOnExit()\n \n bool StartPlannerModule::isExecutionRequested() const\n {\n+  // Check if ego arrives at goal\n+  const Pose & goal_pose = planner_data_->route_handler->getGoalPose();\n+  const Pose & current_pose = planner_data_->self_odometry->pose.pose;\n+  if (\n+    tier4_autoware_utils::calcDistance2d(goal_pose.position, current_pose.position) <\n+    parameters_->th_arrived_distance) {\n+#ifdef USE_OLD_ARCHITECTURE\n+    is_executed_ = false;\n+#endif\n+    return false;\n+  }\n+\n   has_received_new_route_ =\n     !planner_data_->prev_route_id ||\n     *planner_data_->prev_route_id != planner_data_->route_handler->getRouteUuid();"
        }
    ],
    "autowarefoundation/autoware.universe/3973": [
        {
            "sha": "1eea0aa35e5e13e77d69da798c9522bd6bc450ca",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d50e2574c9b609f83b72e7bdf0e7fae719f56eb1/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d50e2574c9b609f83b72e7bdf0e7fae719f56eb1/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=d50e2574c9b609f83b72e7bdf0e7fae719f56eb1",
            "patch": "@@ -127,7 +127,7 @@ bool StartPlannerModule::isExecutionRequested() const\n   }\n \n   const bool is_stopped = utils::l2Norm(planner_data_->self_odometry->twist.twist.linear) <\n-                          parameters_->th_arrived_distance;\n+                          parameters_->th_stopped_velocity;\n   if (!is_stopped) {\n #ifdef USE_OLD_ARCHITECTURE\n     is_executed_ = false;"
        }
    ],
    "autowarefoundation/autoware.universe/3974": [
        {
            "sha": "7784f96543ea6b447de6dee79cb3de17bb2814cf",
            "filename": "planning/behavior_path_planner/docs/behavior_path_planner_path_generation_design.md",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/88fc513a263378bf38b64d9d1c7f71eae5151ec6/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_path_generation_design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/88fc513a263378bf38b64d9d1c7f71eae5151ec6/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_path_generation_design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_path_generation_design.md?ref=88fc513a263378bf38b64d9d1c7f71eae5151ec6",
            "patch": "@@ -8,9 +8,7 @@ The base idea of the path generation in lane change and avoidance is to smoothly\n \n The figure below explains how the application of a constant lateral jerk $l^{'''}(s)$ can be used to induce lateral shifting. In order to comply with the limits on lateral acceleration and velocity, zero-jerk time is employed in the figure ( $T_a$ and $T_v$ ). In each interval where constant jerk is applied, the shift position $l(s)$ can be characterized by a third-degree polynomial. Therefore the shift length from the reference path can then be calculated by combining spline curves.\n \n-<p align=\"center\">\n-  <img src=\"../image/path_shifter.png\" width=\"800\">\n-</p>\n+![path-shifter](../image/path_shifter.png)\n \n Note that, due to the rarity of the $T_v$ in almost all cases of lane change and avoidance, $T_v$ is not considered in the current implementation.\n "
        }
    ],
    "autowarefoundation/autoware.universe/3976": [
        {
            "sha": "0d144726a086685c695cc1ac3c0ae1b608b19cde",
            "filename": "control/mpc_lateral_controller/include/mpc_lateral_controller/mpc.hpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/13da41f76e4f0721d179691a243db3a0366234e5/control%2Fmpc_lateral_controller%2Finclude%2Fmpc_lateral_controller%2Fmpc.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/13da41f76e4f0721d179691a243db3a0366234e5/control%2Fmpc_lateral_controller%2Finclude%2Fmpc_lateral_controller%2Fmpc.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fmpc_lateral_controller%2Finclude%2Fmpc_lateral_controller%2Fmpc.hpp?ref=13da41f76e4f0721d179691a243db3a0366234e5",
            "patch": "@@ -412,9 +412,9 @@ class MPC\n   //!< @brief steering rate limit list depending on velocity [m/s], [rad/s]\n   std::vector<std::pair<double, double>> m_steer_rate_lim_map_by_velocity{};\n \n-  bool m_use_steer_prediction;        // Flag to use predicted steer instead of measured steer.\n-  double ego_nearest_dist_threshold;  // Threshold for nearest index search based on distance.\n-  double ego_nearest_yaw_threshold;   // Threshold for nearest index search based on yaw.\n+  bool m_use_steer_prediction;  // Flag to use predicted steer instead of measured steer.\n+  double ego_nearest_dist_threshold = 3.0;  // Threshold for nearest index search based on distance.\n+  double ego_nearest_yaw_threshold = M_PI_2;  // Threshold for nearest index search based on yaw.\n \n   //!< Constructor.\n   MPC() = default;"
        }
    ],
    "autowarefoundation/autoware.universe/3979": [
        {
            "sha": "c62b395b53ec730c737558fa3e0f10364e4169b0",
            "filename": "planning/behavior_velocity_intersection_module/src/scene_intersection.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 7,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/69029f07f0cc69587df63dd74b91030489145532/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/69029f07f0cc69587df63dd74b91030489145532/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp?ref=69029f07f0cc69587df63dd74b91030489145532",
            "patch": "@@ -330,7 +330,9 @@ void reactRTCApprovalByDecisionResult(\n         path->points.at(stop_line_idx).point.pose, VelocityFactor::INTERSECTION);\n     }\n   }\n-  if (!rtc_occlusion_approved && !decision_result.is_detection_area_empty) {\n+  if (\n+    !rtc_occlusion_approved && !decision_result.is_detection_area_empty &&\n+    planner_param.occlusion.enable) {\n     const auto occlusion_stop_line_idx = decision_result.stop_lines.occlusion_peeking_stop_line;\n     planning_utils::setVelocityFromIndex(occlusion_stop_line_idx, 0.0, path);\n     debug_data->occlusion_stop_wall_pose =\n@@ -373,7 +375,7 @@ void reactRTCApprovalByDecisionResult(\n         path->points.at(stop_line_idx).point.pose, VelocityFactor::INTERSECTION);\n     }\n   }\n-  if (!rtc_occlusion_approved) {\n+  if (!rtc_occlusion_approved && planner_param.occlusion.enable) {\n     const auto stop_line_idx = decision_result.stop_lines.occlusion_peeking_stop_line;\n     planning_utils::setVelocityFromIndex(stop_line_idx, 0.0, path);\n     debug_data->occlusion_stop_wall_pose =\n@@ -416,7 +418,7 @@ void reactRTCApprovalByDecisionResult(\n         path->points.at(stop_line_idx).point.pose, VelocityFactor::INTERSECTION);\n     }\n   }\n-  if (!rtc_occlusion_approved) {\n+  if (!rtc_occlusion_approved && planner_param.occlusion.enable) {\n     if (planner_param.occlusion.enable_creeping) {\n       const size_t occlusion_peeking_stop_line = decision_result.occlusion_stop_line_idx;\n       const size_t closest_idx = decision_result.stop_lines.closest_idx;\n@@ -455,7 +457,7 @@ void reactRTCApprovalByDecisionResult(\n     rtc_occlusion_approved);\n   // NOTE: creep_velocity should be inserted first at closest_idx if !rtc_default_approved\n \n-  if (!rtc_occlusion_approved) {\n+  if (!rtc_occlusion_approved && planner_param.occlusion.enable) {\n     const size_t occlusion_peeking_stop_line =\n       decision_result.stop_lines.occlusion_peeking_stop_line;\n     if (planner_param.occlusion.enable_creeping) {\n@@ -477,7 +479,7 @@ void reactRTCApprovalByDecisionResult(\n         path->points.at(occlusion_peeking_stop_line).point.pose, VelocityFactor::INTERSECTION);\n     }\n   }\n-  if (!rtc_default_approved) {\n+  if (!rtc_default_approved && planner_param.occlusion.enable) {\n     const auto stop_line_idx = decision_result.stop_lines.default_stop_line;\n     planning_utils::setVelocityFromIndex(stop_line_idx, 0.0, path);\n     debug_data->collision_stop_wall_pose =\n@@ -520,7 +522,7 @@ void reactRTCApprovalByDecisionResult(\n         path->points.at(stop_line_idx).point.pose, VelocityFactor::INTERSECTION);\n     }\n   }\n-  if (!rtc_occlusion_approved) {\n+  if (!rtc_occlusion_approved && planner_param.occlusion.enable) {\n     const auto stop_line_idx = decision_result.occlusion_stop_line_idx;\n     planning_utils::setVelocityFromIndex(stop_line_idx, 0.0, path);\n     debug_data->occlusion_stop_wall_pose =\n@@ -562,7 +564,7 @@ void reactRTCApprovalByDecisionResult(\n         path->points.at(stop_line_idx).point.pose, VelocityFactor::INTERSECTION);\n     }\n   }\n-  if (!rtc_occlusion_approved) {\n+  if (!rtc_occlusion_approved && planner_param.occlusion.enable) {\n     const auto stop_line_idx = decision_result.stop_lines.occlusion_peeking_stop_line;\n     planning_utils::setVelocityFromIndex(stop_line_idx, 0.0, path);\n     debug_data->occlusion_stop_wall_pose ="
        }
    ],
    "autowarefoundation/autoware.universe/3987": [
        {
            "sha": "48c0762461d161992f6f672b38bbbd0643e39c84",
            "filename": "planning/behavior_path_planner/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e1abd2b2b56c2ca79323a6552e3fdb707e4cbed9/planning%2Fbehavior_path_planner%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e1abd2b2b56c2ca79323a6552e3fdb707e4cbed9/planning%2Fbehavior_path_planner%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fpackage.xml?ref=e1abd2b2b56c2ca79323a6552e3fdb707e4cbed9",
            "patch": "@@ -53,6 +53,7 @@\n   <depend>lane_departure_checker</depend>\n   <depend>lanelet2_extension</depend>\n   <depend>libboost-dev</depend>\n+  <depend>libopencv-dev</depend>\n   <depend>magic_enum</depend>\n   <depend>motion_utils</depend>\n   <depend>perception_utils</depend>"
        }
    ],
    "autowarefoundation/autoware.universe/3989": [
        {
            "sha": "4e8f546753bf51df90b62033118860d05eadc9a2",
            "filename": "planning/behavior_path_planner/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f62a185775e91b51ce74bfc055a62a2712dc9064/planning%2Fbehavior_path_planner%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f62a185775e91b51ce74bfc055a62a2712dc9064/planning%2Fbehavior_path_planner%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fpackage.xml?ref=f62a185775e91b51ce74bfc055a62a2712dc9064",
            "patch": "@@ -54,6 +54,7 @@\n   <depend>lane_departure_checker</depend>\n   <depend>lanelet2_extension</depend>\n   <depend>libboost-dev</depend>\n+  <depend>libopencv-dev</depend>\n   <depend>magic_enum</depend>\n   <depend>motion_utils</depend>\n   <depend>perception_utils</depend>"
        }
    ],
    "autowarefoundation/autoware.universe/3990": [
        {
            "sha": "4e8f546753bf51df90b62033118860d05eadc9a2",
            "filename": "planning/behavior_path_planner/package.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f62a185775e91b51ce74bfc055a62a2712dc9064/planning%2Fbehavior_path_planner%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f62a185775e91b51ce74bfc055a62a2712dc9064/planning%2Fbehavior_path_planner%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fpackage.xml?ref=f62a185775e91b51ce74bfc055a62a2712dc9064",
            "patch": "@@ -54,6 +54,7 @@\n   <depend>lane_departure_checker</depend>\n   <depend>lanelet2_extension</depend>\n   <depend>libboost-dev</depend>\n+  <depend>libopencv-dev</depend>\n   <depend>magic_enum</depend>\n   <depend>motion_utils</depend>\n   <depend>perception_utils</depend>"
        }
    ],
    "autowarefoundation/autoware.universe/3995": [
        {
            "sha": "ded057a296ad80456b8938665612092a8675947b",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9456efc1d3f9ca10fa918d30fb33ed076bbc8481/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9456efc1d3f9ca10fa918d30fb33ed076bbc8481/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=9456efc1d3f9ca10fa918d30fb33ed076bbc8481",
            "patch": "@@ -614,7 +614,7 @@ void PlannerManager::resetRootLanelet(const std::shared_ptr<PlannerData> & data)\n \n   // check ego is in next lane\n   for (const auto & next : next_lanelets) {\n-    if (next.id() == root_lanelet_.get().id()) {\n+    if (next.id() == root_lanelet.id()) {\n       return;\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/4007": [
        {
            "sha": "008087ee32b4bf149c797079de1bb9a3c61bc32e",
            "filename": "planning/behavior_path_planner/docs/behavior_path_planner_goal_planner_design.md",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4b3be6b9e71d973a5209afbc8d30be1fbdbe5d13/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_goal_planner_design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4b3be6b9e71d973a5209afbc8d30be1fbdbe5d13/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_goal_planner_design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_goal_planner_design.md?ref=4b3be6b9e71d973a5209afbc8d30be1fbdbe5d13",
            "patch": "@@ -222,7 +222,7 @@ Generate two forward arc paths.\n \n ![arc_forward_parking](../image/arc_forward_parking.drawio.svg)\n \n-[how arc_forward_parking video](https://user-images.githubusercontent.com/39142679/178034128-4754c401-8aff-4745-b69a-4a69ca29ce4b.mp4)\n+[arc_forward_parking video](https://user-images.githubusercontent.com/39142679/178034128-4754c401-8aff-4745-b69a-4a69ca29ce4b.mp4)\n \n #### Parameters arc forward parking\n \n@@ -239,7 +239,7 @@ Generate two backward arc paths.\n \n ![arc_backward_parking](../image/arc_backward_parking.drawio.svg).\n \n-[arc_forward_parking video](https://user-images.githubusercontent.com/39142679/178034280-4b6754fe-3981-4aee-b5e0-970f34563c6d.mp4)\n+[arc_backward_parking video](https://user-images.githubusercontent.com/39142679/178034280-4b6754fe-3981-4aee-b5e0-970f34563c6d.mp4)\n \n #### Parameters arc backward parking\n "
        }
    ],
    "autowarefoundation/autoware.universe/4008": [
        {
            "sha": "f1f2cfa44a95216cbd1657368861e3eeee190e54",
            "filename": "planning/behavior_path_planner/src/scene_module/side_shift/side_shift_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/44e99963b3a8056d9184447e0ca91783f0a755b8/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/44e99963b3a8056d9184447e0ca91783f0a755b8/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp?ref=44e99963b3a8056d9184447e0ca91783f0a755b8",
            "patch": "@@ -205,6 +205,9 @@ void SideShiftModule::updateData()\n   if (prev_reference_.points.empty()) {\n     prev_reference_ = *getPreviousModuleOutput().path;\n   }\n+  if (!getPreviousModuleOutput().reference_path) {\n+    return;\n+  }\n   const auto centerline_path = utils::calcCenterLinePath(\n     planner_data_, reference_pose, longest_dist_to_shift_line,\n     *getPreviousModuleOutput().reference_path);"
        }
    ],
    "autowarefoundation/autoware.universe/4009": [
        {
            "sha": "a6bbaea1fcac0f1f703d9dc86ec27f295484cc2c",
            "filename": "planning/motion_velocity_smoother/src/motion_velocity_smoother_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cda720e3bb7dd827a506939b13821a1ba51a42e1/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cda720e3bb7dd827a506939b13821a1ba51a42e1/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp?ref=cda720e3bb7dd827a506939b13821a1ba51a42e1",
            "patch": "@@ -779,7 +779,7 @@ MotionVelocitySmootherNode::calcInitialMotion(\n   // use ego velocity/acceleration in the planning for smooth transition from MANUAL to AUTONOMOUS.\n   if (node_param_.plan_from_ego_speed_on_manual_mode) {  // could be false for debug purpose\n     const bool is_in_autonomous_control = operation_mode_.is_autoware_control_enabled &&\n-                                          operation_mode_.mode != OperationModeState::AUTONOMOUS;\n+                                          operation_mode_.mode == OperationModeState::AUTONOMOUS;\n     if (!is_in_autonomous_control) {\n       RCLCPP_INFO_THROTTLE(\n         get_logger(), *clock_, 10000, \"Not in autonomous control. Plan from ego velocity.\");"
        }
    ],
    "autowarefoundation/autoware.universe/4012": [
        {
            "sha": "b00593ab0a35b5b9709609d6536937c53be0df99",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/00de9a3e23c8753f441985fe84fa83d7b1905d18/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/00de9a3e23c8753f441985fe84fa83d7b1905d18/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=00de9a3e23c8753f441985fe84fa83d7b1905d18",
            "patch": "@@ -2685,7 +2685,7 @@ BehaviorModuleOutput AvoidanceModule::planWaitingApproval()\n     [](const auto & o) { return !o.is_avoidable; });\n \n   const auto candidate = planCandidate();\n-  if (!avoidance_data_.safe_new_sl.empty()) {\n+  if (!avoidance_data_.unapproved_raw_sl.empty()) {\n     updateCandidateRTCStatus(candidate);\n     waitApproval();\n   } else if (all_unavoidable) {"
        }
    ],
    "autowarefoundation/autoware.universe/4021": [
        {
            "sha": "dce35f2c9f6d432faced76e714f36a00b88eb874",
            "filename": "control/trajectory_follower_node/param/lateral/mpc.param.yaml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2a445bad5b96c313757c21b45f2ae64613150614/control%2Ftrajectory_follower_node%2Fparam%2Flateral%2Fmpc.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2a445bad5b96c313757c21b45f2ae64613150614/control%2Ftrajectory_follower_node%2Fparam%2Flateral%2Fmpc.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Ftrajectory_follower_node%2Fparam%2Flateral%2Fmpc.param.yaml?ref=2a445bad5b96c313757c21b45f2ae64613150614",
            "patch": "@@ -47,9 +47,9 @@\n     vehicle_model_type: \"kinematics\" # vehicle model type for mpc prediction. option is kinematics, kinematics_no_delay, and dynamics\n     input_delay: 0.24                # steering input delay time for delay compensation\n     vehicle_model_steer_tau: 0.3     # steering dynamics time constant (1d approximation) [s]\n-    steer_rate_lim_dps_list_by_curvature: [10.0, 20.0, 30.0]            # steering angle rate limit list depending on curvature [deg/s]\n+    steer_rate_lim_dps_list_by_curvature: [40.0, 50.0, 60.0]            # steering angle rate limit list depending on curvature [deg/s]\n     curvature_list_for_steer_rate_lim: [0.001, 0.002, 0.01]              # curvature list for steering angle rate limit interpolation in ascending order [/m]\n-    steer_rate_lim_dps_list_by_velocity: [40.0, 30.0, 20.0]             # steering angle rate limit list depending on velocity [deg/s]\n+    steer_rate_lim_dps_list_by_velocity: [60.0, 50.0, 40.0]             # steering angle rate limit list depending on velocity [deg/s]\n     velocity_list_for_steer_rate_lim: [10.0, 15.0, 20.0]                  # velocity list for steering angle rate limit interpolation in ascending order [m/s]\n     acceleration_limit: 2.0          # acceleration limit for trajectory velocity modification [m/ss]\n     velocity_time_constant: 0.3      # velocity dynamics time constant  for trajectory velocity modification [s]"
        }
    ],
    "autowarefoundation/autoware.universe/4029": [
        {
            "sha": "a28791e5d40574ec9cc26d35cfc8492391b2ad6a",
            "filename": "perception/euclidean_cluster/src/voxel_grid_based_euclidean_cluster_node.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 2,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bf908f9028b8350cb91bc06cf5bda3f9bf8ae883/perception%2Feuclidean_cluster%2Fsrc%2Fvoxel_grid_based_euclidean_cluster_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bf908f9028b8350cb91bc06cf5bda3f9bf8ae883/perception%2Feuclidean_cluster%2Fsrc%2Fvoxel_grid_based_euclidean_cluster_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Feuclidean_cluster%2Fsrc%2Fvoxel_grid_based_euclidean_cluster_node.cpp?ref=bf908f9028b8350cb91bc06cf5bda3f9bf8ae883",
            "patch": "@@ -56,11 +56,19 @@ void VoxelGridBasedEuclideanClusterNode::onPointCloud(\n \n   // convert ros to pcl\n   pcl::PointCloud<pcl::PointXYZ>::Ptr raw_pointcloud_ptr(new pcl::PointCloud<pcl::PointXYZ>);\n-  pcl::fromROSMsg(*input_msg, *raw_pointcloud_ptr);\n+  if (input_msg->data.empty()) {\n+    // NOTE: prevent pcl log spam\n+    RCLCPP_WARN_STREAM_THROTTLE(\n+      this->get_logger(), *this->get_clock(), 1000, \"Empty sensor points!\");\n+  } else {\n+    pcl::fromROSMsg(*input_msg, *raw_pointcloud_ptr);\n+  }\n \n   // clustering\n   std::vector<pcl::PointCloud<pcl::PointXYZ>> clusters;\n-  cluster_->cluster(raw_pointcloud_ptr, clusters);\n+  if (!raw_pointcloud_ptr->empty()) {\n+    cluster_->cluster(raw_pointcloud_ptr, clusters);\n+  }\n \n   // build output msg\n   tier4_perception_msgs::msg::DetectedObjectsWithFeature output;"
        }
    ],
    "autowarefoundation/autoware.universe/4030": [
        {
            "sha": "cec62c850372a85c4b1339f9ab4bbb29b88a0c83",
            "filename": "localization/ndt_scan_matcher/src/debug.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a30fa8900aa0730b32d912200a54fa4fdef1207c/localization%2Fndt_scan_matcher%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a30fa8900aa0730b32d912200a54fa4fdef1207c/localization%2Fndt_scan_matcher%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fdebug.cpp?ref=a30fa8900aa0730b32d912200a54fa4fdef1207c",
            "patch": "@@ -31,6 +31,7 @@ visualization_msgs::msg::MarkerArray make_debug_markers(\n   marker.action = visualization_msgs::msg::Marker::ADD;\n   marker.scale = scale;\n   marker.id = i;\n+  marker.lifetime = rclcpp::Duration::from_seconds(10.0);  // 10.0 is the lifetime in seconds.\n \n   marker.ns = \"initial_pose_transform_probability_color_marker\";\n   marker.pose = particle.initial_pose;"
        }
    ],
    "autowarefoundation/autoware.universe/4031": [
        {
            "sha": "fe2a03460b013d2b1b9c052f6791c590ace27379",
            "filename": "planning/behavior_path_planner/src/scene_module/side_shift/side_shift_module.cpp",
            "status": "modified",
            "additions": 16,
            "deletions": 12,
            "changes": 28,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3fabdb96a7b5b313a94550276c0de5392a5091f0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3fabdb96a7b5b313a94550276c0de5392a5091f0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp?ref=3fabdb96a7b5b313a94550276c0de5392a5091f0",
            "patch": "@@ -186,6 +186,22 @@ ModuleStatus SideShiftModule::updateState()\n \n void SideShiftModule::updateData()\n {\n+#ifndef USE_OLD_ARCHITECTURE\n+  if (\n+    planner_data_->lateral_offset != nullptr &&\n+    planner_data_->lateral_offset->stamp != latest_lateral_offset_stamp_) {\n+    if (isReadyForNextRequest(parameters_->shift_request_time_limit)) {\n+      lateral_offset_change_request_ = true;\n+      requested_lateral_offset_ = planner_data_->lateral_offset->lateral_offset;\n+      latest_lateral_offset_stamp_ = planner_data_->lateral_offset->stamp;\n+    }\n+  }\n+#endif\n+\n+  if (current_state_ != ModuleStatus::RUNNING) {\n+    return;\n+  }\n+\n   // special for avoidance: take behind distance upt ot shift-start-point if it exist.\n   const auto longest_dist_to_shift_line = [&]() {\n     double max_dist = 0.0;\n@@ -238,18 +254,6 @@ void SideShiftModule::updateData()\n \n   const size_t nearest_idx = planner_data_->findEgoIndex(path_shifter_.getReferencePath().points);\n   path_shifter_.removeBehindShiftLineAndSetBaseOffset(nearest_idx);\n-\n-#ifndef USE_OLD_ARCHITECTURE\n-  if (\n-    planner_data_->lateral_offset != nullptr &&\n-    planner_data_->lateral_offset->stamp != latest_lateral_offset_stamp_) {\n-    if (isReadyForNextRequest(parameters_->shift_request_time_limit)) {\n-      lateral_offset_change_request_ = true;\n-      requested_lateral_offset_ = planner_data_->lateral_offset->lateral_offset;\n-      latest_lateral_offset_stamp_ = planner_data_->lateral_offset->stamp;\n-    }\n-  }\n-#endif\n }\n \n void SideShiftModule::replaceShiftLine()"
        }
    ],
    "autowarefoundation/autoware.universe/4032": [
        {
            "sha": "e1b85f98200d2def5b70f86b14da5f912858a093",
            "filename": "planning/mission_planner/src/lanelet2_plugins/default_planner.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6cf46f0f213702fe0af66802ab80bf2c9413c701/planning%2Fmission_planner%2Fsrc%2Flanelet2_plugins%2Fdefault_planner.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6cf46f0f213702fe0af66802ab80bf2c9413c701/planning%2Fmission_planner%2Fsrc%2Flanelet2_plugins%2Fdefault_planner.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmission_planner%2Fsrc%2Flanelet2_plugins%2Fdefault_planner.cpp?ref=6cf46f0f213702fe0af66802ab80bf2c9413c701",
            "patch": "@@ -204,7 +204,7 @@ PlannerPlugin::MarkerArray DefaultPlanner::visualize(const LaneletRoute & route)\n   std_msgs::msg::ColorRGBA cl_end;\n   std_msgs::msg::ColorRGBA cl_normal;\n   std_msgs::msg::ColorRGBA cl_goal;\n-  set_color(&cl_route, 0.2, 0.4, 0.2, 0.05);\n+  set_color(&cl_route, 0.8, 0.99, 0.8, 0.15);\n   set_color(&cl_goal, 0.2, 0.4, 0.4, 0.05);\n   set_color(&cl_end, 0.2, 0.2, 0.4, 0.05);\n   set_color(&cl_normal, 0.2, 0.4, 0.2, 0.05);"
        }
    ],
    "autowarefoundation/autoware.universe/4044": [
        {
            "sha": "246931629cfeecac27ab135e4e9bd42ed792a91f",
            "filename": "sensing/pointcloud_preprocessor/launch/preprocessor.launch.py",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8276e9222ebc346d885a5aca9d89276a622c55f7/sensing%2Fpointcloud_preprocessor%2Flaunch%2Fpreprocessor.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8276e9222ebc346d885a5aca9d89276a622c55f7/sensing%2Fpointcloud_preprocessor%2Flaunch%2Fpreprocessor.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Flaunch%2Fpreprocessor.launch.py?ref=8276e9222ebc346d885a5aca9d89276a622c55f7",
            "patch": "@@ -66,7 +66,9 @@ def generate_launch_description():\n                     [\n                         \"'points_raw/concatenated' if len(\",\n                         LaunchConfiguration(\"input_points_raw_list\"),\n-                        \") > 1 else 'input_points_raw0'\",\n+                        \") > 1 else \",\n+                        LaunchConfiguration(\"input_points_raw_list\"),\n+                        \"[0]\",\n                     ]\n                 ),\n             ),"
        }
    ],
    "autowarefoundation/autoware.universe/4053": [
        {
            "sha": "d951d9b9a589766c5a3420dbc4409357efec6025",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f515389dcb49b8e408acc16923e055c780cdd5e0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f515389dcb49b8e408acc16923e055c780cdd5e0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=f515389dcb49b8e408acc16923e055c780cdd5e0",
            "patch": "@@ -834,7 +834,8 @@ TurnSignalInfo StartPlannerModule::calcTurnSignalInfo() const\n   const bool is_near_intersection = std::invoke([&]() {\n     const double check_length = parameters_->intersection_search_length;\n     double accumulated_length = 0.0;\n-    for (size_t i = 0; i < path.points.size() - 1; ++i) {\n+    const size_t current_idx = motion_utils::findNearestIndex(path.points, current_pose.position);\n+    for (size_t i = current_idx; i < path.points.size() - 1; ++i) {\n       const auto & p = path.points.at(i);\n       for (const auto & lane : planner_data_->route_handler->getLaneletsFromIds(p.lane_ids)) {\n         const std::string turn_direction = lane.attributeOr(\"turn_direction\", \"else\");"
        }
    ],
    "autowarefoundation/autoware.universe/4059": [
        {
            "sha": "1d5142c81c0f928da88295e27c9fcad5fcbe1d3f",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/678bc64cfa6397ce975f28ae1b364e29386e1eea/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/678bc64cfa6397ce975f28ae1b364e29386e1eea/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=678bc64cfa6397ce975f28ae1b364e29386e1eea",
            "patch": "@@ -2695,9 +2695,11 @@ BehaviorModuleOutput AvoidanceModule::planWaitingApproval()\n     [](const auto & o) { return !o.is_avoidable; });\n \n   const auto candidate = planCandidate();\n-  if (!avoidance_data_.unapproved_raw_sl.empty()) {\n+  if (!data.safe_new_sl.empty()) {\n     updateCandidateRTCStatus(candidate);\n     waitApproval();\n+  } else if (path_shifter_.getShiftLines().empty()) {\n+    waitApproval();\n   } else if (all_unavoidable) {\n     waitApproval();\n   } else {"
        }
    ],
    "autowarefoundation/autoware.universe/4061": [
        {
            "sha": "81df39cb8f789d2574beb4ec76da118c74725ce0",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/interface.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 3,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0f603d3c876a62d4b2ca200f83ea7fdde66b53a2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0f603d3c876a62d4b2ca200f83ea7fdde66b53a2/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp?ref=0f603d3c876a62d4b2ca200f83ea7fdde66b53a2",
            "patch": "@@ -116,6 +116,7 @@ ModuleStatus LaneChangeInterface::updateState()\n \n   const auto [is_safe, is_object_coming_from_rear] = module_type_->isApprovedPathSafe();\n \n+  setObjectDebugVisualization();\n   if (is_safe) {\n     module_type_->toNormalState();\n     return ModuleStatus::RUNNING;\n@@ -270,6 +271,8 @@ BehaviorModuleOutput LaneChangeInterface::planWaitingApproval()\n     candidate.start_distance_to_path_change, candidate.finish_distance_to_path_change);\n   is_abort_path_approved_ = false;\n \n+  setObjectDebugVisualization();\n+\n   return out;\n }\n \n@@ -300,6 +303,10 @@ void LaneChangeInterface::setData(const std::shared_ptr<const PlannerData> & dat\n \n void LaneChangeInterface::setObjectDebugVisualization() const\n {\n+  debug_marker_.markers.clear();\n+  if (!parameters_->publish_debug_marker) {\n+    return;\n+  }\n   using marker_utils::lane_change_markers::showAllValidLaneChangePath;\n   using marker_utils::lane_change_markers::showLerpedPose;\n   using marker_utils::lane_change_markers::showObjectInfo;\n@@ -315,9 +322,8 @@ void LaneChangeInterface::setObjectDebugVisualization() const\n   };\n \n   add(showObjectInfo(debug_data, \"object_debug_info\"));\n-  add(showLerpedPose(debug_data, \"lerp_pose_before_true\"));\n-  add(showPolygonPose(debug_data, \"expected_pose\"));\n-  add(showPolygon(debug_data, \"lerped_polygon\"));\n+  add(showLerpedPose(debug_data, \"ego_predicted_path\"));\n+  add(showPolygon(debug_data, \"ego_and_target_polygon_relation\"));\n   add(showAllValidLaneChangePath(debug_valid_path, \"lane_change_valid_paths\"));\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4071": [
        {
            "sha": "2ac4521c4c79eb36fbbd75f7f924f6ae980bb8ec",
            "filename": "planning/behavior_velocity_crosswalk_module/src/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8e31dcb1d33383cc8ecaffe14f4cacd2f7ffa720/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8e31dcb1d33383cc8ecaffe14f4cacd2f7ffa720/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp?ref=8e31dcb1d33383cc8ecaffe14f4cacd2f7ffa720",
            "patch": "@@ -234,6 +234,10 @@ bool CrosswalkModule::modifyPathVelocity(PathWithLaneId * path, StopReason * sto\n     return {};\n   }();\n \n+  if (!stop_point_with_factor) {\n+    return false;\n+  }\n+\n   const auto & stop_factor = stop_point_with_factor->second;\n   insertDecelPointWithDebugInfo(stop_point_with_factor->first, 0.0, *path);\n   planning_utils::appendStopReason(stop_factor, stop_reason);"
        }
    ],
    "autowarefoundation/autoware.universe/4074": [
        {
            "sha": "1ae1f8a03e0c08be55a09fbc0a41a736b6767bc9",
            "filename": "planning/behavior_path_planner/src/marker_util/lane_change/debug.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/de7982fe1c56b7e48a808fefaee8ca2573ae2020/planning%2Fbehavior_path_planner%2Fsrc%2Fmarker_util%2Flane_change%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/de7982fe1c56b7e48a808fefaee8ca2573ae2020/planning%2Fbehavior_path_planner%2Fsrc%2Fmarker_util%2Flane_change%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fmarker_util%2Flane_change%2Fdebug.cpp?ref=de7982fe1c56b7e48a808fefaee8ca2573ae2020",
            "patch": "@@ -185,11 +185,12 @@ MarkerArray showPolygon(\n     }\n     const auto & color = colors.at(idx);\n     const auto & ego_polygon = info.ego_polygon.outer();\n+    const auto poly_z = info.current_pose.position.z;  // temporally\n     ego_marker.id = ++id;\n     ego_marker.color = createMarkerColor(color[0], color[1], color[2], 0.8);\n     ego_marker.points.reserve(ego_polygon.size());\n     for (const auto & p : ego_polygon) {\n-      ego_marker.points.push_back(tier4_autoware_utils::createPoint(p.x(), p.y(), 0.0));\n+      ego_marker.points.push_back(tier4_autoware_utils::createPoint(p.x(), p.y(), poly_z));\n     }\n     marker_array.markers.push_back(ego_marker);\n \n@@ -198,7 +199,7 @@ MarkerArray showPolygon(\n     obj_marker.color = createMarkerColor(color[0], color[1], color[2], 0.8);\n     obj_marker.points.reserve(obj_polygon.size());\n     for (const auto & p : obj_polygon) {\n-      obj_marker.points.push_back(tier4_autoware_utils::createPoint(p.x(), p.y(), 0.0));\n+      obj_marker.points.push_back(tier4_autoware_utils::createPoint(p.x(), p.y(), poly_z));\n     }\n     marker_array.markers.push_back(obj_marker);\n     ++idx;"
        }
    ],
    "autowarefoundation/autoware.universe/4080": [
        {
            "sha": "420415ac645786687e5eebbe09b9e76d299f8782",
            "filename": "planning/behavior_path_planner/config/lane_change/lane_change.param.yaml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0d746e1888a2154bf17221f140dcb5c3a3b11587/planning%2Fbehavior_path_planner%2Fconfig%2Flane_change%2Flane_change.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0d746e1888a2154bf17221f140dcb5c3a3b11587/planning%2Fbehavior_path_planner%2Fconfig%2Flane_change%2Flane_change.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fconfig%2Flane_change%2Flane_change.param.yaml?ref=0d746e1888a2154bf17221f140dcb5c3a3b11587",
            "patch": "@@ -48,11 +48,11 @@\n       enable_prepare_segment_collision_check: true\n       prepare_segment_ignore_object_velocity_thresh: 0.1 # [m/s]\n       use_predicted_path_outside_lanelet: true\n-      use_all_predicted_path: false\n+      use_all_predicted_path: true\n \n       # abort\n       enable_cancel_lane_change: true\n-      enable_abort_lane_change: false\n+      enable_abort_lane_change: true\n \n       abort_delta_time: 1.0                      # [s]\n       aborting_time: 5.0                         # [s]"
        }
    ],
    "autowarefoundation/autoware.universe/4081": [
        {
            "sha": "be8029a7af71ff9169237ec6d9f3b882023993d1",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 2,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9de3c40925c4c41ffb2f3e3f8801129f9a65a0d3/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9de3c40925c4c41ffb2f3e3f8801129f9a65a0d3/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=9de3c40925c4c41ffb2f3e3f8801129f9a65a0d3",
            "patch": "@@ -3049,7 +3049,7 @@ TurnSignalInfo AvoidanceModule::calcTurnSignalInfo(const ShiftedPath & path) con\n   }\n \n   // compute blinker start idx and end idx\n-  const size_t blinker_start_idx = [&]() {\n+  size_t blinker_start_idx = [&]() {\n     for (size_t idx = start_idx; idx <= end_idx; ++idx) {\n       const double current_shift_length = path.shift_length.at(idx);\n       if (current_shift_length > 0.1) {\n@@ -3058,7 +3058,13 @@ TurnSignalInfo AvoidanceModule::calcTurnSignalInfo(const ShiftedPath & path) con\n     }\n     return start_idx;\n   }();\n-  const size_t blinker_end_idx = end_idx;\n+  size_t blinker_end_idx = end_idx;\n+\n+  // prevent invalid access for out-of-range\n+  blinker_start_idx =\n+    std::min(std::max(std::size_t(0), blinker_start_idx), path.path.points.size() - 1);\n+  blinker_end_idx =\n+    std::min(std::max(blinker_start_idx, blinker_end_idx), path.path.points.size() - 1);\n \n   const auto blinker_start_pose = path.path.points.at(blinker_start_idx).point.pose;\n   const auto blinker_end_pose = path.path.points.at(blinker_end_idx).point.pose;"
        }
    ],
    "autowarefoundation/autoware.universe/4085": [
        {
            "sha": "78ea16dbc3c05169bc782001847c1bc0f58d28f1",
            "filename": "planning/behavior_path_planner/src/turn_signal_decider.cpp",
            "status": "modified",
            "additions": 74,
            "deletions": 10,
            "changes": 84,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e44df67192fd82d0298402498835e93106d0152b/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e44df67192fd82d0298402498835e93106d0152b/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp?ref=e44df67192fd82d0298402498835e93106d0152b",
            "patch": "@@ -140,29 +140,94 @@ boost::optional<TurnSignalInfo> TurnSignalDecider::getIntersectionTurnSignalInfo\n     }\n   }\n \n-  std::queue<TurnSignalInfo> signal_queue;\n+  // combine consecutive lanes of the same turn direction\n+  // stores lanes that have already been combine\n+  std::set<int> processed_lanes;\n+  // since combined_lane does not inherit id and attribute,\n+  // and ConstantLanelet does not rewrite the value,\n+  // we keep front_lane together as a representative.\n+  std::vector<std::pair<lanelet::ConstLanelet, lanelet::ConstLanelet>> combined_and_front_vec{};\n   for (const auto & lane_id : unique_lane_ids) {\n-    const auto lane = route_handler.getLaneletsFromId(lane_id);\n-    const double search_distance = lane.attributeOr(\"turn_signal_distance\", base_search_distance);\n-    if (lane.centerline3d().size() < 2) {\n+    // Skip if already processed\n+    if (processed_lanes.find(lane_id) != processed_lanes.end()) continue;\n+    auto current_lane = route_handler.getLaneletsFromId(lane_id);\n+    lanelet::ConstLanelets combined_lane_elems{};\n+    while (rclcpp::ok()) {\n+      processed_lanes.insert(current_lane.id());\n+      combined_lane_elems.push_back(current_lane);\n+\n+      // Get the lane and its attribute\n+      const std::string lane_attribute =\n+        current_lane.attributeOr(\"turn_direction\", std::string(\"none\"));\n+\n+      // check next lanes\n+      auto next_lanes = route_handler.getNextLanelets(current_lane);\n+      if (next_lanes.empty()) {\n+        break;\n+      }\n+\n+      // filter next lanes with same attribute in the path\n+      std::vector<lanelet::ConstLanelet> next_lanes_in_path{};\n+      std::copy_if(\n+        next_lanes.begin(), next_lanes.end(), std::back_inserter(next_lanes_in_path),\n+        [&](const auto & next_lane) {\n+          const bool is_in_unique_ids =\n+            std::find(unique_lane_ids.begin(), unique_lane_ids.end(), next_lane.id()) !=\n+            unique_lane_ids.end();\n+          const bool has_same_attribute =\n+            next_lane.attributeOr(\"turn_direction\", std::string(\"none\")) == lane_attribute;\n+          return is_in_unique_ids && has_same_attribute;\n+        });\n+      if (next_lanes_in_path.empty()) {\n+        break;\n+      }\n+\n+      // assume that the next lane in the path is only one\n+      current_lane = next_lanes_in_path.front();\n+    }\n+\n+    if (!combined_lane_elems.empty()) {\n+      // store combined lane and its front lane\n+      const auto & combined_and_first = std::pair<lanelet::ConstLanelet, lanelet::ConstLanelet>(\n+        lanelet::utils::combineLaneletsShape(combined_lane_elems), combined_lane_elems.front());\n+      combined_and_front_vec.push_back(combined_and_first);\n+    }\n+  }\n+\n+  std::queue<TurnSignalInfo> signal_queue;\n+  for (const auto & combined_and_front : combined_and_front_vec) {\n+    // use combined_lane's centerline\n+    const auto & combined_lane = combined_and_front.first;\n+    if (combined_lane.centerline3d().size() < 2) {\n       continue;\n     }\n \n+    // use front lane's id, attribute, and search distance as a representative\n+    const auto & front_lane = combined_and_front.second;\n+    const auto lane_id = front_lane.id();\n+    const double search_distance =\n+      front_lane.attributeOr(\"turn_signal_distance\", base_search_distance);\n+    const std::string lane_attribute =\n+      front_lane.attributeOr(\"turn_direction\", std::string(\"none\"));\n+\n     // lane front and back pose\n     Pose lane_front_pose;\n     Pose lane_back_pose;\n-    lane_front_pose.position = lanelet::utils::conversion::toGeomMsgPt(lane.centerline3d().front());\n-    lane_back_pose.position = lanelet::utils::conversion::toGeomMsgPt(lane.centerline3d().back());\n+    lane_front_pose.position =\n+      lanelet::utils::conversion::toGeomMsgPt(combined_lane.centerline3d().front());\n+    lane_back_pose.position =\n+      lanelet::utils::conversion::toGeomMsgPt(combined_lane.centerline3d().back());\n \n     {\n       const auto & current_point = lane_front_pose.position;\n-      const auto & next_point = lanelet::utils::conversion::toGeomMsgPt(lane.centerline3d()[1]);\n+      const auto & next_point =\n+        lanelet::utils::conversion::toGeomMsgPt(combined_lane.centerline3d()[1]);\n       lane_front_pose.orientation = calc_orientation(current_point, next_point);\n     }\n \n     {\n       const auto & current_point = lanelet::utils::conversion::toGeomMsgPt(\n-        lane.centerline3d()[lane.centerline3d().size() - 2]);\n+        combined_lane.centerline3d()[combined_lane.centerline3d().size() - 2]);\n       const auto & next_point = lane_back_pose.position;\n       lane_back_pose.orientation = calc_orientation(current_point, next_point);\n     }\n@@ -195,7 +260,6 @@ boost::optional<TurnSignalInfo> TurnSignalDecider::getIntersectionTurnSignalInfo\n       continue;\n     }\n \n-    const std::string lane_attribute = lane.attributeOr(\"turn_direction\", std::string(\"none\"));\n     if (\n       (lane_attribute == \"right\" || lane_attribute == \"left\" || lane_attribute == \"straight\") &&\n       dist_to_front_point < search_distance) {\n@@ -207,7 +271,7 @@ boost::optional<TurnSignalInfo> TurnSignalDecider::getIntersectionTurnSignalInfo\n       TurnSignalInfo turn_signal_info{};\n       turn_signal_info.desired_start_point = desired_start_point_map_.at(lane_id);\n       turn_signal_info.required_start_point = lane_front_pose;\n-      turn_signal_info.required_end_point = get_required_end_point(lane.centerline3d());\n+      turn_signal_info.required_end_point = get_required_end_point(combined_lane.centerline3d());\n       turn_signal_info.desired_end_point = lane_back_pose;\n       turn_signal_info.turn_signal.command = signal_map.at(lane_attribute);\n       signal_queue.push(turn_signal_info);"
        }
    ],
    "autowarefoundation/autoware.universe/4086": [
        {
            "sha": "88b2599dae03a0c11800a3176cf2cb8cffad1970",
            "filename": "planning/behavior_velocity_intersection_module/src/util.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9b4ddacd0cdecb2cf0773e8ea29380eaae6cecab/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9b4ddacd0cdecb2cf0773e8ea29380eaae6cecab/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp?ref=9b4ddacd0cdecb2cf0773e8ea29380eaae6cecab",
            "patch": "@@ -278,14 +278,14 @@ std::optional<IntersectionStopLines> generateIntersectionStopLines(\n   // (5) stuck vehicle stop line\n   int stuck_stop_line_ip_int = 0;\n   if (use_stuck_stopline) {\n-    stuck_stop_line_ip_int = std::get<0>(lane_interval_ip);\n-  } else {\n     const auto stuck_stop_line_idx_ip_opt =\n       getFirstPointInsidePolygon(path_ip, lane_interval_ip, first_conflicting_area);\n     if (!stuck_stop_line_idx_ip_opt) {\n       return std::nullopt;\n     }\n     stuck_stop_line_ip_int = stuck_stop_line_idx_ip_opt.value();\n+  } else {\n+    stuck_stop_line_ip_int = std::get<0>(lane_interval_ip);\n   }\n   const auto stuck_stop_line_ip = static_cast<size_t>(\n     std::max(0, stuck_stop_line_ip_int - stop_line_margin_idx_dist - base2front_idx_dist));"
        }
    ],
    "autowarefoundation/autoware.universe/4089": [
        {
            "sha": "0950f46f30b43979d3e44d74e11673db11e0fbf3",
            "filename": "perception/tensorrt_yolox/src/tensorrt_yolox.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9159617fb68b7be3861b4cfa68352a5619d91242/perception%2Ftensorrt_yolox%2Fsrc%2Ftensorrt_yolox.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9159617fb68b7be3861b4cfa68352a5619d91242/perception%2Ftensorrt_yolox%2Fsrc%2Ftensorrt_yolox.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftensorrt_yolox%2Fsrc%2Ftensorrt_yolox.cpp?ref=9159617fb68b7be3861b4cfa68352a5619d91242",
            "patch": "@@ -428,7 +428,8 @@ bool TrtYoloX::feedforward(const std::vector<cv::Mat> & images, ObjectArrays & o\n   objects.clear();\n   for (size_t i = 0; i < batch_size; ++i) {\n     const size_t num_detection = static_cast<size_t>(out_num_detections[i]);\n-    ObjectArray object_array(num_detection);\n+    ObjectArray object_array;\n+    object_array.reserve(num_detection);\n     for (size_t j = 0; j < num_detection; ++j) {\n       Object object{};\n       const auto x1 = out_boxes[i * max_detections_ * 4 + j * 4] / scales_[i];"
        }
    ],
    "autowarefoundation/autoware.universe/4091": [
        {
            "sha": "c11aa34189c4ca895d54b903d3618998f68b093b",
            "filename": "planning/behavior_path_planner/src/behavior_path_planner_node.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9dc6a1b627f9871e5254da98029344fcc489fb71/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9dc6a1b627f9871e5254da98029344fcc489fb71/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fbehavior_path_planner_node.cpp?ref=9dc6a1b627f9871e5254da98029344fcc489fb71",
            "patch": "@@ -1252,7 +1252,10 @@ void BehaviorPathPlannerNode::run()\n   }\n \n #ifndef USE_OLD_ARCHITECTURE\n-  if (planner_data_->operation_mode->mode != OperationModeState::AUTONOMOUS) {\n+  const auto controlled_by_autoware_autonomously =\n+    planner_data_->operation_mode->mode == OperationModeState::AUTONOMOUS &&\n+    planner_data_->operation_mode->is_autoware_control_enabled;\n+  if (!controlled_by_autoware_autonomously) {\n     planner_manager_->resetRootLanelet(planner_data_);\n   }\n #endif"
        }
    ],
    "autowarefoundation/autoware.universe/4094": [
        {
            "sha": "b1c7f4ac41d1d4aa03429dd141b301ec594dc419",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/76679d90380dc2f86c81872efb22755583f3de0b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/76679d90380dc2f86c81872efb22755583f3de0b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=76679d90380dc2f86c81872efb22755583f3de0b",
            "patch": "@@ -284,7 +284,7 @@ TurnSignalInfo NormalLaneChange::updateOutputTurnSignal()\n \n lanelet::ConstLanelets NormalLaneChange::getCurrentLanes() const\n {\n-  return utils::getCurrentLanesFromPath(prev_module_reference_path_, planner_data_);\n+  return utils::getCurrentLanesFromPath(prev_module_path_, planner_data_);\n }\n \n lanelet::ConstLanelets NormalLaneChange::getLaneChangeLanes("
        }
    ],
    "autowarefoundation/autoware.universe/4097": [
        {
            "sha": "0512e90197237e889b9554a8990886b4363ce8d9",
            "filename": "planning/behavior_velocity_intersection_module/src/scene_intersection.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/12b3ae71d35bf41f98380b884272dfb267e4f9cc/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/12b3ae71d35bf41f98380b884272dfb267e4f9cc/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp?ref=12b3ae71d35bf41f98380b884272dfb267e4f9cc",
            "patch": "@@ -715,6 +715,11 @@ IntersectionModule::DecisionResult IntersectionModule::modifyPathVelocityDetail(\n     return IntersectionModule::Indecisive{};\n   }\n \n+  if (default_stop_line_idx == 0) {\n+    RCLCPP_DEBUG(logger_, \"stop line index is 0\");\n+    return IntersectionModule::Indecisive{};\n+  }\n+\n   const double baselink2front = planner_data_->vehicle_info_.max_longitudinal_offset_m;\n   debug_data_.pass_judge_wall_pose =\n     planning_utils::getAheadPose(pass_judge_line_idx, baselink2front, *path);\n@@ -795,7 +800,11 @@ IntersectionModule::DecisionResult IntersectionModule::modifyPathVelocityDetail(\n       path->points.at(default_stop_line_idx).point.pose.position);\n     const bool approached_stop_line =\n       (std::fabs(dist_stopline) < planner_param_.common.stop_overshoot_margin);\n+    const bool over_stop_line = (dist_stopline < 0.0);\n     const bool is_stopped = planner_data_->isVehicleStopped();\n+    if (over_stop_line) {\n+      before_creep_state_machine_.setState(StateMachine::State::GO);\n+    }\n     if (before_creep_state_machine_.getState() == StateMachine::State::GO) {\n       if (has_collision) {\n         return IntersectionModule::OccludedCollisionStop{"
        }
    ],
    "autowarefoundation/autoware.universe/4098": [
        {
            "sha": "94461c174843997d03d3c3f645789917bbab1fe9",
            "filename": "launch/tier4_planning_launch/launch/scenario_planning/lane_driving/motion_planning/motion_planning.launch.py",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/50feb6d6527fb966e839927e820f42bfa5924ef3/launch%2Ftier4_planning_launch%2Flaunch%2Fscenario_planning%2Flane_driving%2Fmotion_planning%2Fmotion_planning.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/50feb6d6527fb966e839927e820f42bfa5924ef3/launch%2Ftier4_planning_launch%2Flaunch%2Fscenario_planning%2Flane_driving%2Fmotion_planning%2Fmotion_planning.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_planning_launch%2Flaunch%2Fscenario_planning%2Flane_driving%2Fmotion_planning%2Fmotion_planning.launch.py?ref=50feb6d6527fb966e839927e820f42bfa5924ef3",
            "patch": "@@ -108,7 +108,6 @@ def launch_setup(context, *args, **kwargs):\n         parameters=[\n             obstacle_velocity_limiter_param,\n             vehicle_info_param,\n-            {\"obstacles.dynamic_source\": \"static_only\"},\n         ],\n         extra_arguments=[{\"use_intra_process_comms\": LaunchConfiguration(\"use_intra_process\")}],\n     )"
        }
    ],
    "autowarefoundation/autoware.universe/4102": [
        {
            "sha": "e450ba6b5817ef6f06280e7ae722bb11d9e904da",
            "filename": "perception/tensorrt_yolox/src/tensorrt_yolox_node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e4cc3632397bec1f7faec88959f231deb9eb30e6/perception%2Ftensorrt_yolox%2Fsrc%2Ftensorrt_yolox_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e4cc3632397bec1f7faec88959f231deb9eb30e6/perception%2Ftensorrt_yolox%2Fsrc%2Ftensorrt_yolox_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftensorrt_yolox%2Fsrc%2Ftensorrt_yolox_node.cpp?ref=e4cc3632397bec1f7faec88959f231deb9eb30e6",
            "patch": "@@ -199,6 +199,8 @@ void TrtYoloXNode::replaceLabelMap()\n     auto & label = label_map_[i];\n     if (label == \"PERSON\") {\n       label = \"PEDESTRIAN\";\n+    } else if (label == \"MOTORBIKE\") {\n+      label = \"MOTORCYCLE\";\n     } else if (\n       label != \"CAR\" && label != \"PEDESTRIAN\" && label != \"BUS\" && label != \"TRUCK\" &&\n       label != \"BICYCLE\" && label != \"MOTORCYCLE\") {"
        }
    ],
    "autowarefoundation/autoware.universe/4110": [
        {
            "sha": "6ce997b3978d5d420da0b4dc967e8d84ff75390b",
            "filename": "localization/yabloc/yabloc_pose_initializer/download.cmake",
            "status": "modified",
            "additions": 15,
            "deletions": 10,
            "changes": 25,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2fa6d6da35bd05b489b28a4c2fbccce17534e0bd/localization%2Fyabloc%2Fyabloc_pose_initializer%2Fdownload.cmake",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2fa6d6da35bd05b489b28a4c2fbccce17534e0bd/localization%2Fyabloc%2Fyabloc_pose_initializer%2Fdownload.cmake",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fyabloc%2Fyabloc_pose_initializer%2Fdownload.cmake?ref=2fa6d6da35bd05b489b28a4c2fbccce17534e0bd",
            "patch": "@@ -12,12 +12,14 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+set(DOWNLOAD_ARTIFACTS OFF CACHE BOOL \"enable artifacts download\")\n+\n set(DATA_URL \"https://s3.ap-northeast-2.wasabisys.com/pinto-model-zoo/136_road-segmentation-adas-0001/resources.tar.gz\")\n set(DATA_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/data\")\n set(FILE_HASH 146ed8af689a30b898dc5369870c40fb)\n set(FILE_NAME \"resources.tar.gz\")\n \n-function(download)\n+function(download_and_extract)\n   message(STATUS \"Checking and downloading ${FILE_NAME}\")\n   set(FILE_PATH ${DATA_PATH}/${FILE_NAME})\n   set(STATUS_CODE 0)\n@@ -38,25 +40,28 @@ function(download)\n       list(GET DOWNLOAD_STATUS 1 ERROR_MESSAGE)\n     endif()\n   else()\n-    message(STATUS \"not found ${FILE_NAME}\")\n-    message(STATUS \"File doesn't exists. Downloading now ...\")\n-    file(DOWNLOAD ${DATA_URL} ${FILE_PATH} STATUS DOWNLOAD_STATUS TIMEOUT 3600)\n-    list(GET DOWNLOAD_STATUS 0 STATUS_CODE)\n-    list(GET DOWNLOAD_STATUS 1 ERROR_MESSAGE)\n+    if(DOWNLOAD_ARTIFACTS)\n+      message(STATUS \"not found ${FILE_NAME}\")\n+      message(STATUS \"File doesn't exists. Downloading now ...\")\n+      file(DOWNLOAD ${DATA_URL} ${FILE_PATH} STATUS DOWNLOAD_STATUS TIMEOUT 3600)\n+      list(GET DOWNLOAD_STATUS 0 STATUS_CODE)\n+      list(GET DOWNLOAD_STATUS 1 ERROR_MESSAGE)\n+    else()\n+      message(WARNING \"Skipped download for ${FILE_NAME} (enable by setting DOWNLOAD_ARTIFACTS)\")\n+      file(MAKE_DIRECTORY \"${DATA_PATH}\")\n+      return()\n+    endif()\n   endif()\n \n   if(${STATUS_CODE} EQUAL 0)\n     message(STATUS \"Download completed successfully!\")\n   else()\n     message(FATAL_ERROR \"Error occurred during download: ${ERROR_MESSAGE}\")\n   endif()\n-endfunction()\n \n-function(extract)\n   execute_process(COMMAND\n     ${CMAKE_COMMAND} -E\n     tar xzf \"${DATA_PATH}/${FILE_NAME}\" WORKING_DIRECTORY \"${DATA_PATH}\")\n endfunction()\n \n-download()\n-extract()\n+download_and_extract()"
        }
    ],
    "autowarefoundation/autoware.universe/4113": [
        {
            "sha": "b77af629ad7c33148df17292feedf4963077ef18",
            "filename": "planning/motion_velocity_smoother/src/motion_velocity_smoother_node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/16b27726eaf2d34aebdf5ef0f305c5cc5e25f33d/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/16b27726eaf2d34aebdf5ef0f305c5cc5e25f33d/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Fsrc%2Fmotion_velocity_smoother_node.cpp?ref=16b27726eaf2d34aebdf5ef0f305c5cc5e25f33d",
            "patch": "@@ -786,8 +786,10 @@ MotionVelocitySmootherNode::calcInitialMotion(\n       // We should plan from the current vehicle speed, but if the initial value is greater than the\n       // velocity limit, the current planning algorithm decelerates with a very high deceleration.\n       // To avoid this, we set the initial value of the vehicle speed to be below the speed limit.\n+      const auto p = smoother_->getBaseParam();\n       const auto v0 = std::min(target_vel, vehicle_speed);\n-      const Motion initial_motion = {v0, vehicle_acceleration};\n+      const auto a0 = std::clamp(vehicle_acceleration, p.min_decel, p.max_accel);\n+      const Motion initial_motion = {v0, a0};\n       return {initial_motion, InitializeType::EGO_VELOCITY};\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/4115": [
        {
            "sha": "713188afb7f0bd64b8e6535a7814b001f18e6d75",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/interface.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/055e04bbf7a5ead2b14a4be6dabc79cfcc2355c6/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/055e04bbf7a5ead2b14a4be6dabc79cfcc2355c6/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp?ref=055e04bbf7a5ead2b14a4be6dabc79cfcc2355c6",
            "patch": "@@ -402,13 +402,13 @@ void LaneChangeInterface::acceptVisitor(const std::shared_ptr<SceneModuleVisitor\n TurnSignalInfo LaneChangeInterface::getCurrentTurnSignalInfo(\n   const PathWithLaneId & path, const TurnSignalInfo & original_turn_signal_info)\n {\n-  const auto & target_lanes = module_type_->getLaneChangeStatus().lane_change_lanes;\n+  const auto & current_lanes = module_type_->getLaneChangeStatus().current_lanes;\n   const auto & is_valid = module_type_->getLaneChangeStatus().is_valid_path;\n   const auto & lane_change_path = module_type_->getLaneChangeStatus().lane_change_path;\n   const auto & lane_change_param = module_type_->getLaneChangeParam();\n \n   if (\n-    module_type_->getModuleType() != LaneChangeModuleType::NORMAL || target_lanes.empty() ||\n+    module_type_->getModuleType() != LaneChangeModuleType::NORMAL || current_lanes.empty() ||\n     !is_valid) {\n     return original_turn_signal_info;\n   }\n@@ -436,13 +436,15 @@ TurnSignalInfo LaneChangeInterface::getCurrentTurnSignalInfo(\n   const auto & route_handler = module_type_->getRouteHandler();\n   const auto & common_parameter = module_type_->getCommonParam();\n   const auto shift_intervals =\n-    route_handler->getLateralIntervalsToPreferredLane(target_lanes.back());\n+    route_handler->getLateralIntervalsToPreferredLane(current_lanes.back());\n   const double next_lane_change_buffer =\n     utils::calcMinimumLaneChangeLength(common_parameter, shift_intervals);\n   const double & nearest_dist_threshold = common_parameter.ego_nearest_dist_threshold;\n   const double & nearest_yaw_threshold = common_parameter.ego_nearest_yaw_threshold;\n+  const double & base_to_front = common_parameter.base_link2front;\n \n-  const double buffer = next_lane_change_buffer + min_length_for_turn_signal_activation;\n+  const double buffer =\n+    next_lane_change_buffer + min_length_for_turn_signal_activation + base_to_front;\n   const double path_length = motion_utils::calcArcLength(path.points);\n   const auto & front_point = path.points.front().point.pose.position;\n   const size_t & current_nearest_seg_idx ="
        }
    ],
    "autowarefoundation/autoware.universe/4117": [
        {
            "sha": "121befb68c88afe5b0b5211723a2b521cee02e97",
            "filename": "system/default_ad_api_helpers/ad_api_adaptors/README.md",
            "status": "modified",
            "additions": 4,
            "deletions": 5,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bb8abbe185000b5f0d6a386521ec74379201c2ff/system%2Fdefault_ad_api_helpers%2Fad_api_adaptors%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bb8abbe185000b5f0d6a386521ec74379201c2ff/system%2Fdefault_ad_api_helpers%2Fad_api_adaptors%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdefault_ad_api_helpers%2Fad_api_adaptors%2FREADME.md?ref=bb8abbe185000b5f0d6a386521ec74379201c2ff",
            "patch": "@@ -7,11 +7,10 @@ When a initial pose topic is received, call the localization initialize API.\n This node depends on the map height fitter library.\n [See here for more details.](../../../map/map_height_fitter/README.md)\n \n-| Interface    | Local Name     | Global Name                       | Description                               |\n-| ------------ | -------------- | --------------------------------- | ----------------------------------------- |\n-| Subscription | initialpose    | /initialpose                      | The pose for localization initialization. |\n-| Client       | fit_map_height | /localization/util/fit_map_height | To fix initial pose to map height         |\n-| Client       | -              | /api/localization/initialize      | The localization initialize API.          |\n+| Interface    | Local Name  | Global Name                  | Description                               |\n+| ------------ | ----------- | ---------------------------- | ----------------------------------------- |\n+| Subscription | initialpose | /initialpose                 | The pose for localization initialization. |\n+| Client       | -           | /api/localization/initialize | The localization initialize API.          |\n \n ## routing_adaptor\n "
        }
    ],
    "autowarefoundation/autoware.universe/4118": [
        {
            "sha": "4222082d40debfa4e5cc199b352f9d8404a0484a",
            "filename": "control/trajectory_follower_node/param/lateral/mpc.param.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9d27027643f540baf0ba4d387f55a14775dd8068/control%2Ftrajectory_follower_node%2Fparam%2Flateral%2Fmpc.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9d27027643f540baf0ba4d387f55a14775dd8068/control%2Ftrajectory_follower_node%2Fparam%2Flateral%2Fmpc.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Ftrajectory_follower_node%2Fparam%2Flateral%2Fmpc.param.yaml?ref=9d27027643f540baf0ba4d387f55a14775dd8068",
            "patch": "@@ -65,6 +65,7 @@\n     keep_steer_control_until_converged: true\n     new_traj_duration_time: 1.0\n     new_traj_end_dist: 0.3\n+    mpc_converged_threshold_rps:  0.01 # threshold of mpc convergence check [rad/s]\n \n     # steer offset\n     steering_offset:"
        }
    ],
    "autowarefoundation/autoware.universe/4120": [
        {
            "sha": "819265b70abbedccc194335114111aa5f559bc16",
            "filename": "planning/behavior_path_planner/src/utils/drivable_area_expansion/drivable_area_expansion.cpp",
            "status": "modified",
            "additions": 32,
            "deletions": 3,
            "changes": 35,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/31d72bdc06c99cd0799fefdefd7c0fbfa0300db3/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/31d72bdc06c99cd0799fefdefd7c0fbfa0300db3/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp?ref=31d72bdc06c99cd0799fefdefd7c0fbfa0300db3",
            "patch": "@@ -19,6 +19,7 @@\n #include \"behavior_path_planner/utils/drivable_area_expansion/map_utils.hpp\"\n #include \"behavior_path_planner/utils/drivable_area_expansion/parameters.hpp\"\n #include \"behavior_path_planner/utils/drivable_area_expansion/types.hpp\"\n+#include \"interpolation/linear_interpolation.hpp\"\n \n #include <boost/geometry.hpp>\n \n@@ -68,9 +69,7 @@ polygon_t createExpandedDrivableAreaPolygon(\n   for (const auto & p : expansion_polygons) {\n     unions.clear();\n     boost::geometry::union_(expanded_da_poly, p, unions);\n-    if (unions.size() != 1)  // union of overlapping polygons should produce a single polygon\n-      continue;\n-    else\n+    if (unions.size() == 1)  // union of overlapping polygons should produce a single polygon\n       expanded_da_poly = unions[0];\n   }\n   return expanded_da_poly;\n@@ -129,8 +128,36 @@ std::array<ring_t::const_iterator, 4> findLeftRightRanges(\n   return {left_start, left_end, right_start, right_end};\n }\n \n+void copy_z_over_arc_length(\n+  const std::vector<geometry_msgs::msg::Point> & from, std::vector<geometry_msgs::msg::Point> & to)\n+{\n+  if (from.empty() || to.empty()) return;\n+  to.front().z = from.front().z;\n+  if (from.size() < 2 || to.size() < 2) return;\n+  to.back().z = from.back().z;\n+  auto i_from = 1lu;\n+  auto s_from = tier4_autoware_utils::calcDistance2d(from[0], from[1]);\n+  auto s_to = 0.0;\n+  auto s_from_prev = 0.0;\n+  for (auto i_to = 1lu; i_to + 1 < to.size(); ++i_to) {\n+    s_to += tier4_autoware_utils::calcDistance2d(to[i_to - 1], to[i_to]);\n+    for (; s_from < s_to && i_from + 1 < from.size(); ++i_from) {\n+      s_from_prev = s_from;\n+      s_from += tier4_autoware_utils::calcDistance2d(from[i_from], from[i_from + 1]);\n+    }\n+    if (s_from - s_from_prev != 0.0) {\n+      const auto ratio = (s_to - s_from_prev) / (s_from - s_from_prev);\n+      to[i_to].z = interpolation::lerp(from[i_from - 1].z, from[i_from].z, ratio);\n+    } else {\n+      to[i_to].z = to[i_to - 1].z;\n+    }\n+  }\n+}\n+\n void updateDrivableAreaBounds(PathWithLaneId & path, const polygon_t & expanded_drivable_area)\n {\n+  const auto original_left_bound = path.left_bound;\n+  const auto original_right_bound = path.right_bound;\n   path.left_bound.clear();\n   path.right_bound.clear();\n   const auto begin = expanded_drivable_area.outer().begin();\n@@ -155,6 +182,8 @@ void updateDrivableAreaBounds(PathWithLaneId & path, const polygon_t & expanded_\n     for (auto it = right_start; it >= begin; --it) path.right_bound.push_back(convert_point(*it));\n     for (auto it = end - 1; it >= right_end; --it) path.right_bound.push_back(convert_point(*it));\n   }\n+  copy_z_over_arc_length(original_left_bound, path.left_bound);\n+  copy_z_over_arc_length(original_right_bound, path.right_bound);\n }\n \n }  // namespace drivable_area_expansion"
        }
    ],
    "autowarefoundation/autoware.universe/4132": [
        {
            "sha": "2c1ba45c3ef84fc58d402441707b1591fc802524",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/interface.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/41aa9007139b13256d5d3053151106eb0922965d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/41aa9007139b13256d5d3053151106eb0922965d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Finterface.cpp?ref=41aa9007139b13256d5d3053151106eb0922965d",
            "patch": "@@ -232,6 +232,7 @@ BehaviorModuleOutput LaneChangeInterface::planWaitingApproval()\n   module_type_->setPreviousModulePaths(\n     getPreviousModuleOutput().reference_path, getPreviousModuleOutput().path);\n   module_type_->updateLaneChangeStatus();\n+  setObjectDebugVisualization();\n \n   // change turn signal when the vehicle reaches at the end of the path for waiting lane change\n   out.turn_signal_info = getCurrentTurnSignalInfo(*out.path, out.turn_signal_info);\n@@ -249,8 +250,6 @@ BehaviorModuleOutput LaneChangeInterface::planWaitingApproval()\n     candidate.start_distance_to_path_change, candidate.finish_distance_to_path_change);\n   is_abort_path_approved_ = false;\n \n-  setObjectDebugVisualization();\n-\n   return out;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4135": [
        {
            "sha": "bec94335c473963d54cf58cd7ebfbedee3c91166",
            "filename": "planning/obstacle_stop_planner/src/node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/71dad7774543e0dd87a3b01685fe25ad3198a905/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/71dad7774543e0dd87a3b01685fe25ad3198a905/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2Fsrc%2Fnode.cpp?ref=71dad7774543e0dd87a3b01685fe25ad3198a905",
            "patch": "@@ -289,7 +289,7 @@ void ObstacleStopPlannerNode::onTrigger(const Trajectory::ConstSharedPtr input_m\n         str);\n     };\n \n-    if (!object_ptr) {\n+    if (!object_ptr && node_param_.use_predicted_objects) {\n       waiting(\"perception object\");\n       return;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/4136": [
        {
            "sha": "96d94b98769db32431fd99996c734f66fd59fb88",
            "filename": "planning/obstacle_stop_planner/config/obstacle_stop_planner.param.yaml",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7b318ff555d16474f8f6d1d30b4d99411407f90e/planning%2Fobstacle_stop_planner%2Fconfig%2Fobstacle_stop_planner.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7b318ff555d16474f8f6d1d30b4d99411407f90e/planning%2Fobstacle_stop_planner%2Fconfig%2Fobstacle_stop_planner.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2Fconfig%2Fobstacle_stop_planner.param.yaml?ref=7b318ff555d16474f8f6d1d30b4d99411407f90e",
            "patch": "@@ -2,6 +2,8 @@\n   ros__parameters:\n     chattering_threshold: 0.5                 # even if the obstacle disappears, the stop judgment continues for chattering_threshold [s]\n     max_velocity: 20.0                        # max velocity [m/s]\n+    ego_nearest_dist_threshold: 3.0           # [m]\n+    ego_nearest_yaw_threshold: 1.046          # [rad] = 60 [deg]\n     enable_slow_down: False                   # whether to use slow down planner [-]\n     enable_z_axis_obstacle_filtering: True    # filter obstacles in z axis (height) [-]\n     z_axis_filtering_buffer: 0.0              # additional buffer for z axis filtering [m]"
        }
    ],
    "autowarefoundation/autoware.universe/4154": [
        {
            "sha": "43e5d1955fc2ba4e0736072e92d908825df9c697",
            "filename": "system/default_ad_api/src/vehicle.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6d1c72b113481366bbf22bb5de9adf898c6e5c3c/system%2Fdefault_ad_api%2Fsrc%2Fvehicle.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6d1c72b113481366bbf22bb5de9adf898c6e5c3c/system%2Fdefault_ad_api%2Fsrc%2Fvehicle.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdefault_ad_api%2Fsrc%2Fvehicle.cpp?ref=6d1c72b113481366bbf22bb5de9adf898c6e5c3c",
            "patch": "@@ -181,7 +181,7 @@ void VehicleNode::publish_status()\n {\n   if (\n     !steering_status_msgs_ || !gear_status_msgs_ || !turn_indicator_status_msgs_ ||\n-    hazard_light_status_msgs_ || energy_status_msgs_)\n+    !hazard_light_status_msgs_ || !energy_status_msgs_)\n     return;\n \n   autoware_ad_api::vehicle::VehicleStatus::Message vehicle_status;"
        }
    ],
    "autowarefoundation/autoware.universe/4156": [
        {
            "sha": "952119020c2155f567b4fc63f4c5411fbbad0ba1",
            "filename": "perception/traffic_light_arbiter/README.md",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/421dc163a14f9f70da46a0b5d1522df316e07848/perception%2Ftraffic_light_arbiter%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/421dc163a14f9f70da46a0b5d1522df316e07848/perception%2Ftraffic_light_arbiter%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_arbiter%2FREADME.md?ref=421dc163a14f9f70da46a0b5d1522df316e07848",
            "patch": "@@ -12,11 +12,11 @@ A node that merges traffic light/signal state from image recognition and externa\n \n #### Input\n \n-| Name                             | Type                                         | Description                                              |\n-| -------------------------------- | -------------------------------------------- | -------------------------------------------------------- |\n-| ~/sub/vector_map                 | autoware_auto_mapping_msgs::msg::HADMapBin   | The vector map to get valid traffic signal ids.          |\n-| ~/sub/perception_traffic_signals | autoware_perception_msgs::msg::TrafficSignal | The traffic signals from the image recognition pipeline. |\n-| ~/sub/external_traffic_signals   | autoware_perception_msgs::msg::TrafficSignal | The traffic signals from an external system.             |\n+| Name                             | Type                                              | Description                                              |\n+| -------------------------------- | ------------------------------------------------- | -------------------------------------------------------- |\n+| ~/sub/vector_map                 | autoware_auto_mapping_msgs::msg::HADMapBin        | The vector map to get valid traffic signal ids.          |\n+| ~/sub/perception_traffic_signals | autoware_perception_msgs::msg::TrafficSignalArray | The traffic signals from the image recognition pipeline. |\n+| ~/sub/external_traffic_signals   | autoware_perception_msgs::msg::TrafficSignalArray | The traffic signals from an external system.             |\n \n #### Output\n "
        }
    ],
    "autowarefoundation/autoware.universe/4158": [
        {
            "sha": "238c9b6507ad045d1f636f501e0ec2099f1c123d",
            "filename": "perception/traffic_light_multi_camera_fusion/README.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/737c9d768915c7d44e634528d22bed43ae74d10e/perception%2Ftraffic_light_multi_camera_fusion%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/737c9d768915c7d44e634528d22bed43ae74d10e/perception%2Ftraffic_light_multi_camera_fusion%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_multi_camera_fusion%2FREADME.md?ref=737c9d768915c7d44e634528d22bed43ae74d10e",
            "patch": "@@ -20,9 +20,9 @@ You don't need to configure these topics manually. Just provide the `camera_name\n \n ## Output topics\n \n-| Name                       | Type                                           | Description                        |\n-| -------------------------- | ---------------------------------------------- | ---------------------------------- |\n-| `~/output/traffic_signals` | tier4_perception_msgs::TrafficLightSignalArray | traffic light signal fusion result |\n+| Name                       | Type                                              | Description                        |\n+| -------------------------- | ------------------------------------------------- | ---------------------------------- |\n+| `~/output/traffic_signals` | autoware_perception_msgs::TrafficLightSignalArray | traffic light signal fusion result |\n \n ## Node parameters\n "
        }
    ],
    "autowarefoundation/autoware.universe/4159": [
        {
            "sha": "4123766a947b0b837cd34097c413da533eac6067",
            "filename": "planning/planning_debug_tools/scripts/closest_velocity_checker.py",
            "status": "modified",
            "additions": 15,
            "deletions": 13,
            "changes": 28,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d29a87ee895073c7003e99ac9baf1c2f412827e0/planning%2Fplanning_debug_tools%2Fscripts%2Fclosest_velocity_checker.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d29a87ee895073c7003e99ac9baf1c2f412827e0/planning%2Fplanning_debug_tools%2Fscripts%2Fclosest_velocity_checker.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2Fscripts%2Fclosest_velocity_checker.py?ref=d29a87ee895073c7003e99ac9baf1c2f412827e0",
            "patch": "@@ -43,11 +43,12 @@\n OBSTACLE_STOP = 3\n LAT_ACC = 4\n VELOCITY_OPTIMIZE = 5\n-CONTROL_CMD = 6\n-VEHICLE_CMD = 7\n-CONTROL_CMD_ACC = 8\n-VEHICLE_CMD_ACC = 9\n-DATA_NUM = 10\n+ACCELERATION_OPTIMIZE = 6\n+CONTROL_CMD = 7\n+VEHICLE_CMD = 8\n+CONTROL_CMD_ACC = 9\n+VEHICLE_CMD_ACC = 10\n+DATA_NUM = 11\n \n \n class VelocityChecker(Node):\n@@ -94,8 +95,6 @@ def __init__(self):\n         self.sub4 = self.create_subscription(\n             Trajectory,\n             scenario + \"/motion_velocity_smoother/debug/trajectory_lateral_acc_filtered\",\n-            # TODO: change to following string after fixing bug of autoware\n-            # '/motion_velocity_optimizer/debug/trajectory_lateral_acc_filtered',\n             self.CallBackLataccTrajectory,\n             1,\n         )\n@@ -157,9 +156,9 @@ def printInfo(self):\n         if self.count == 0:\n             self.get_logger().info(\"\")\n             self.get_logger().info(\n-                \"| Map Limit | Behavior | Obs Avoid | Obs Stop | External Lim | LatAcc Filtered \"\n-                \"| Optimized | Control VelCmd | Control AccCmd | Vehicle VelCmd | Vehicle AccCmd \"\n-                \"| AW Engage | VC Engage | Localization Vel | Vehicle Vel | [km/h] | Distance [m] \"\n+                \"| Behavior Path | Behavior Vel | Obs Avoid | Obs Stop | External Lim | LatAcc Filtered \"\n+                \"| Optimized Vel | Optimized Acc | Control VelCmd | Control AccCmd | Vehicle VelCmd | Vehicle AccCmd \"\n+                \"| AW Engage | VC Engage | Localization Vel | Vehicle Vel | Distance [m] |\"\n             )  # noqa: E501\n         mps2kmph = 3.6\n         distance_to_stopline = self.distance_to_stopline\n@@ -170,6 +169,7 @@ def printInfo(self):\n         vel_external_lim = self.external_v_lim * mps2kmph\n         vel_latacc_filtered = self.data_arr[LAT_ACC] * mps2kmph\n         vel_optimized = self.data_arr[VELOCITY_OPTIMIZE] * mps2kmph\n+        acc_optimized = self.data_arr[ACCELERATION_OPTIMIZE]\n         vel_ctrl_cmd = self.data_arr[CONTROL_CMD] * mps2kmph\n         acc_ctrl_cmd = self.data_arr[CONTROL_CMD_ACC]\n         vel_vehicle_cmd = self.data_arr[VEHICLE_CMD] * mps2kmph\n@@ -187,16 +187,17 @@ def printInfo(self):\n             else (\"True\" if self.vehicle_engage is True else \"False\")\n         )\n         self.get_logger().info(\n-            \"| {0: 9.2f} | {1: 8.2f} | {2: 9.2f} | {3: 8.2f} | {4: 12.2f} \"\n-            \"| {5: 15.2f} | {6: 9.2f} | {7: 14.2f} | {8: 14.2f} | {9: 14.2f} | {10: 14.2f} \"\n-            \"| {11:>9s} | {12:>9s} | {13: 16.2f} | {14: 11.2f} |        | {15: 10.2f}\".format(  # noqa: E501\n+            \"| {0: 13.2f} | {1: 12.2f} | {2: 9.2f} | {3: 8.2f} | {4: 12.2f} \"\n+            \"| {5: 15.2f} | {6: 13.2f} | {7: 13.2f} | {8: 14.2f} | {9: 14.2f} | {10: 14.2f} | {11: 14.2f} \"\n+            \"| {12:>9s} | {13:>9s} | {14: 16.2f} | {15: 11.2f} | {16: 12.2f} |\".format(  # noqa: E501\n                 vel_map_lim,\n                 vel_behavior,\n                 vel_obs_avoid,\n                 vel_obs_stop,\n                 vel_external_lim,\n                 vel_latacc_filtered,\n                 vel_optimized,\n+                acc_optimized,\n                 vel_ctrl_cmd,\n                 acc_ctrl_cmd,\n                 vel_vehicle_cmd,\n@@ -268,6 +269,7 @@ def CallBackScenarioTrajectory(self, msg):\n         # self.get_logger().info('VELOCITY_OPTIMIZE called')\n         closest = self.calcClosestTrajectory(msg)\n         self.data_arr[VELOCITY_OPTIMIZE] = msg.points[closest].longitudinal_velocity_mps\n+        self.data_arr[ACCELERATION_OPTIMIZE] = msg.points[closest].acceleration_mps2\n         return\n \n     def CallBackControlCmd(self, msg):"
        }
    ],
    "autowarefoundation/autoware.universe/4169": [
        {
            "sha": "d22e065d37c5f0dc6c21aedf1eb9b350b47dc133",
            "filename": "system/default_ad_api/src/vehicle.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/31f599e0b35a0575b29ec771975c71466535f05b/system%2Fdefault_ad_api%2Fsrc%2Fvehicle.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/31f599e0b35a0575b29ec771975c71466535f05b/system%2Fdefault_ad_api%2Fsrc%2Fvehicle.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdefault_ad_api%2Fsrc%2Fvehicle.cpp?ref=31f599e0b35a0575b29ec771975c71466535f05b",
            "patch": "@@ -138,7 +138,7 @@ void VehicleNode::map_projector_info(const MapProjectorInfo::ConstSharedPtr msg_\n \n void VehicleNode::publish_kinematics()\n {\n-  if (!kinematic_state_msgs_ || !acceleration_msgs_) return;\n+  if (!kinematic_state_msgs_ || !acceleration_msgs_ || !map_projector_info_) return;\n \n   autoware_ad_api::vehicle::VehicleKinematics::Message vehicle_kinematics;\n   vehicle_kinematics.pose.header = kinematic_state_msgs_->header;"
        }
    ],
    "autowarefoundation/autoware.universe/4173": [
        {
            "sha": "9e29dfa3c8c961437242b5d074bc7a99ac53ff3a",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a200eb147338a75e422a2a657d043c9dd170c626/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a200eb147338a75e422a2a657d043c9dd170c626/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=a200eb147338a75e422a2a657d043c9dd170c626",
            "patch": "@@ -942,7 +942,7 @@ bool NormalLaneChange::getAbortPath()\n   const auto [abort_start_idx, abort_start_dist] =\n     get_abort_idx_and_distance(lane_change_parameters_->cancel.delta_time);\n   const auto [abort_return_idx, abort_return_dist] = get_abort_idx_and_distance(\n-    lane_change_parameters_->cancel.delta_time + lane_change_parameters_->cancel.delta_time);\n+    lane_change_parameters_->cancel.delta_time + lane_change_parameters_->cancel.duration);\n \n   if (abort_start_idx >= abort_return_idx) {\n     RCLCPP_ERROR(logger_, \"abort start idx and return idx is equal. can't compute abort path.\");"
        }
    ],
    "autowarefoundation/autoware.universe/4174": [
        {
            "sha": "42e54d20416d8e34db8b8515efe20992b3616458",
            "filename": "control/vehicle_cmd_gate/src/vehicle_cmd_gate.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 8,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a900df1c05f1f2119446e5709995e56676706c2b/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a900df1c05f1f2119446e5709995e56676706c2b/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp?ref=a900df1c05f1f2119446e5709995e56676706c2b",
            "patch": "@@ -503,6 +503,11 @@ AckermannControlCommand VehicleCmdGate::filterControlCommand(const AckermannCont\n   if (mode.is_in_transition) {\n     filter_on_transition_.filterAll(dt, current_steer_, out);\n   } else {\n+    // When ego is stopped and the input command is not stopping,\n+    // use the actual vehicle longitudinal state for the filtering\n+    // this is to prevent the jerk limits being applied and causing\n+    // a delay when restarting the vehicle.\n+    if (ego_is_stopped && !input_cmd_is_stopping) filter_.setPrevCmd(current_status_cmd);\n     filter_.filterAll(dt, current_steer_, out);\n   }\n \n@@ -521,14 +526,6 @@ AckermannControlCommand VehicleCmdGate::filterControlCommand(const AckermannCont\n   // filter in manual mode.\n   prev_values.longitudinal = out.longitudinal;  // TODO(Horibe): to be removed\n \n-  // When ego is stopped and the input command is stopping,\n-  // use the actual vehicle longitudinal state for the next filtering\n-  // this is to prevent the jerk limits being applied on the \"stop acceleration\"\n-  // which may be negative and cause delays when restarting the vehicle.\n-  if (ego_is_stopped && input_cmd_is_stopping) {\n-    prev_values.longitudinal = current_status_cmd.longitudinal;\n-  }\n-\n   filter_.setPrevCmd(prev_values);\n   filter_on_transition_.setPrevCmd(prev_values);\n "
        }
    ],
    "autowarefoundation/autoware.universe/4177": [
        {
            "sha": "086e844cd5e811045b414fc886c28e9992ecbb9d",
            "filename": "planning/behavior_velocity_intersection_module/src/scene_intersection.cpp",
            "status": "modified",
            "additions": 15,
            "deletions": 2,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9435e6fcb21c30390dce20d4507c4be8d1306e74/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9435e6fcb21c30390dce20d4507c4be8d1306e74/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp?ref=9435e6fcb21c30390dce20d4507c4be8d1306e74",
            "patch": "@@ -934,7 +934,6 @@ bool IntersectionModule::checkCollision(\n   using lanelet::utils::getPolygonFromArcLength;\n \n   const auto & objects_ptr = planner_data_->predicted_objects;\n-\n   // extract target objects\n   autoware_auto_perception_msgs::msg::PredictedObjects target_objects;\n   target_objects.header = objects_ptr->header;\n@@ -1057,8 +1056,22 @@ bool IntersectionModule::checkCollision(\n         const double end_arc_length = std::max(\n           0.0, closest_arc_coords.length + (*end_time_distance_itr).second + base_link2front -\n                  distance_until_intersection);\n+\n+        long double lanes_length = 0.0;\n+        std::vector<lanelet::ConstLanelet> ego_lane_with_next_lanes;\n+\n+        const auto lanelets_on_path = planning_utils::getLaneletsOnPath(\n+          path, planner_data_->route_handler_->getLaneletMapPtr(),\n+          planner_data_->current_odometry->pose);\n+        for (const auto & lane : lanelets_on_path) {\n+          lanes_length += bg::length(lane.centerline());\n+          ego_lane_with_next_lanes.push_back(lane);\n+          if (lanes_length > start_arc_length && lanes_length < end_arc_length) {\n+            break;\n+          }\n+        }\n         const auto trimmed_ego_polygon =\n-          getPolygonFromArcLength(ego_lane_with_next_lane, start_arc_length, end_arc_length);\n+          getPolygonFromArcLength(ego_lane_with_next_lanes, start_arc_length, end_arc_length);\n \n         Polygon2d polygon{};\n         for (const auto & p : trimmed_ego_polygon) {"
        }
    ],
    "autowarefoundation/autoware.universe/4195": [
        {
            "sha": "6036e760fed47c2d8705502baaddeafaf3ab5a3a",
            "filename": "simulator/dummy_perception_publisher/src/node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ae34d60b06b8874bad86b520e9c716a38051399f/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ae34d60b06b8874bad86b520e9c716a38051399f/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fdummy_perception_publisher%2Fsrc%2Fnode.cpp?ref=ae34d60b06b8874bad86b520e9c716a38051399f",
            "patch": "@@ -359,7 +359,7 @@ void DummyPerceptionPublisherNode::objectCallback(\n           ros_map2base_link = tf_buffer_.lookupTransform(\n             \"map\", \"base_link\", rclcpp::Time(0), rclcpp::Duration::from_seconds(0.5));\n           object.initial_state.pose_covariance.pose.position.z =\n-            ros_map2base_link.transform.translation.z;\n+            ros_map2base_link.transform.translation.z + 0.5 * object.shape.dimensions.z;\n         } catch (tf2::TransformException & ex) {\n           RCLCPP_WARN_SKIPFIRST_THROTTLE(get_logger(), *get_clock(), 5000, \"%s\", ex.what());\n           return;\n@@ -406,7 +406,7 @@ void DummyPerceptionPublisherNode::objectCallback(\n               ros_map2base_link = tf_buffer_.lookupTransform(\n                 \"map\", \"base_link\", rclcpp::Time(0), rclcpp::Duration::from_seconds(0.5));\n               objects_.at(i).initial_state.pose_covariance.pose.position.z =\n-                ros_map2base_link.transform.translation.z;\n+                ros_map2base_link.transform.translation.z + 0.5 * objects_.at(i).shape.dimensions.z;\n             } catch (tf2::TransformException & ex) {\n               RCLCPP_WARN_SKIPFIRST_THROTTLE(get_logger(), *get_clock(), 5000, \"%s\", ex.what());\n               return;"
        }
    ],
    "autowarefoundation/autoware.universe/4198": [
        {
            "sha": "7bff7bef578ce8444c6a9367da9831c6cf73db1a",
            "filename": "planning/behavior_path_planner/src/utils/drivable_area_expansion/expansion.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9c4300c6e894bc5918353df37df5a5b733a175ad/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fexpansion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9c4300c6e894bc5918353df37df5a5b733a175ad/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fexpansion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fexpansion.cpp?ref=9c4300c6e894bc5918353df37df5a5b733a175ad",
            "patch": "@@ -137,8 +137,9 @@ multipolygon_t createExpansionPolygons(\n                                       : footprint_dist;\n         auto expansion_polygon = createExpansionPolygon(base_ls, expansion_dist, is_left);\n         auto limited_dist = expansion_dist;\n-        const auto uncrossable_dist_limit =\n-          calculateDistanceLimit(base_ls, expansion_polygon, uncrossable_lines);\n+        const auto uncrossable_dist_limit = std::max(\n+          0.0, calculateDistanceLimit(base_ls, expansion_polygon, uncrossable_lines) -\n+                 params.avoid_linestring_dist);\n         if (uncrossable_dist_limit < limited_dist) {\n           limited_dist = uncrossable_dist_limit;\n           if (params.compensate_uncrossable_lines) {"
        }
    ],
    "autowarefoundation/autoware.universe/4203": [
        {
            "sha": "098be3a93ddd0aa207cf02cfcb233c24d4299474",
            "filename": "common/tier4_planning_rviz_plugin/src/tools/max_velocity.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/32a38df189f3799bbcff8624c2754932d9ff1494/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Ftools%2Fmax_velocity.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/32a38df189f3799bbcff8624c2754932d9ff1494/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Ftools%2Fmax_velocity.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_planning_rviz_plugin%2Fsrc%2Ftools%2Fmax_velocity.cpp?ref=32a38df189f3799bbcff8624c2754932d9ff1494",
            "patch": "@@ -77,7 +77,7 @@ void MaxVelocityDisplay::onInitialize()\n   overlay_->updateTextureSize(property_length_->getInt(), property_length_->getInt());\n   overlay_->setPosition(property_left_->getInt(), property_top_->getInt());\n   overlay_->setDimensions(overlay_->getTextureWidth(), overlay_->getTextureHeight());\n-  processMessage(last_msg_ptr_);\n+  updateVisualization();\n \n   // QColor background_color;\n   // background_color.setAlpha(0);"
        }
    ],
    "autowarefoundation/autoware.universe/4204": [
        {
            "sha": "15210b267befb86ce161e8ba12c5cf1df664a1de",
            "filename": "planning/obstacle_avoidance_planner/src/mpt_optimizer.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/308820b68a8e05708375c11853db4395b40bd6cf/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/308820b68a8e05708375c11853db4395b40bd6cf/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fmpt_optimizer.cpp?ref=308820b68a8e05708375c11853db4395b40bd6cf",
            "patch": "@@ -451,8 +451,8 @@ void MPTOptimizer::updateVehicleCircles()\n     std::tie(vehicle_circle_radiuses_, vehicle_circle_longitudinal_offsets_) =\n       calcVehicleCirclesByBicycleModel(\n         vehicle_info_, p.vehicle_circles_bicycle_model_num,\n-        p.vehicle_circles_bicycle_model_front_radius_ratio,\n-        p.vehicle_circles_bicycle_model_rear_radius_ratio);\n+        p.vehicle_circles_bicycle_model_rear_radius_ratio,\n+        p.vehicle_circles_bicycle_model_front_radius_ratio);\n   } else if (p.vehicle_circles_method == \"fitting_uniform_circle\") {\n     std::tie(vehicle_circle_radiuses_, vehicle_circle_longitudinal_offsets_) =\n       calcVehicleCirclesByFittingUniformCircle("
        }
    ],
    "autowarefoundation/autoware.universe/4216": [
        {
            "sha": "d2d70b0a46dfc58c5a7851fa5586244f288d7bf3",
            "filename": "planning/behavior_path_planner/src/utils/path_utils.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c438750308db678832dabc95ba8af529abcebbfe/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c438750308db678832dabc95ba8af529abcebbfe/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp?ref=c438750308db678832dabc95ba8af529abcebbfe",
            "patch": "@@ -108,13 +108,17 @@ PathWithLaneId resamplePathWithSpline(\n \n   std::vector<double> s_out = s_in;\n \n+  // sampling from interval distance\n   const auto start_s = std::max(target_section.first, 0.0);\n   const auto end_s = std::min(target_section.second, s_vec.back());\n   for (double s = start_s; s < end_s; s += interval) {\n     if (!find_almost_same_values(s_out, s)) {\n       s_out.push_back(s);\n     }\n   }\n+  if (!find_almost_same_values(s_out, end_s)) {\n+    s_out.push_back(end_s);\n+  }\n \n   // Insert Stop Point\n   const auto closest_stop_dist = motion_utils::calcDistanceToForwardStopPoint(transformed_path);\n@@ -133,7 +137,8 @@ PathWithLaneId resamplePathWithSpline(\n     }\n   }\n \n-  if (s_out.empty()) {\n+  // spline resample required more than 2 points for yaw angle calculation\n+  if (s_out.size() < 2) {\n     return path;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4222": [
        {
            "sha": "fe9615614de8101da61c4083c3b58a2a582e9e0e",
            "filename": "planning/planning_debug_tools/README.md",
            "status": "renamed",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2ad1daeff6ff4e1a95110b05b091c51a83e4ad7c/planning%2Fplanning_debug_tools%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2ad1daeff6ff4e1a95110b05b091c51a83e4ad7c/planning%2Fplanning_debug_tools%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2FREADME.md?ref=2ad1daeff6ff4e1a95110b05b091c51a83e4ad7c",
            "previous_filename": "planning/planning_debug_tools/Readme.md"
        }
    ],
    "autowarefoundation/autoware.universe/4226": [
        {
            "sha": "0866202f4352a4cbdf4a777966060d59a718f0f3",
            "filename": "system/mrm_emergency_stop_operator/README.md",
            "status": "renamed",
            "additions": 0,
            "deletions": 0,
            "changes": 0,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c36cf0b9e13188d216d7b81db98e026abc82a925/system%2Fmrm_emergency_stop_operator%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c36cf0b9e13188d216d7b81db98e026abc82a925/system%2Fmrm_emergency_stop_operator%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fmrm_emergency_stop_operator%2FREADME.md?ref=c36cf0b9e13188d216d7b81db98e026abc82a925",
            "previous_filename": "system/mrm_emergency_stop_operator/READEME.md"
        }
    ],
    "autowarefoundation/autoware.universe/4227": [
        {
            "sha": "1612280c148721c41c7af6d14ec8d96ebe3c7962",
            "filename": "planning/behavior_path_planner/src/utils/start_planner/shift_pull_out.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/64ad32c1e7828066f6b589a3e5564d1db99697d9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fstart_planner%2Fshift_pull_out.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/64ad32c1e7828066f6b589a3e5564d1db99697d9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fstart_planner%2Fshift_pull_out.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fstart_planner%2Fshift_pull_out.cpp?ref=64ad32c1e7828066f6b589a3e5564d1db99697d9",
            "patch": "@@ -249,6 +249,13 @@ std::vector<PullOutPath> ShiftPullOut::calcPullOutPaths(\n     path_shifter.setLongitudinalAcceleration(longitudinal_acc);\n     path_shifter.setLateralAccelerationLimit(lateral_acc);\n \n+    const auto shift_line_idx = path_shifter.getShiftLines().front();\n+    if (!has_non_shifted_path && (shift_line_idx.end_idx - shift_line_idx.start_idx <= 1)) {\n+      candidate_paths.push_back(non_shifted_path);\n+      has_non_shifted_path = true;\n+      continue;\n+    }\n+\n     // offset front side\n     ShiftedPath shifted_path;\n     const bool offset_back = false;"
        }
    ],
    "autowarefoundation/autoware.universe/4240": [
        {
            "sha": "7fa17b0cea52a5e40bffa93173ad13dbf31c46e0",
            "filename": "planning/behavior_velocity_run_out_module/src/debug.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2630c71b49d8fee92bc6e99e135f5c6946894951/planning%2Fbehavior_velocity_run_out_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2630c71b49d8fee92bc6e99e135f5c6946894951/planning%2Fbehavior_velocity_run_out_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_run_out_module%2Fsrc%2Fdebug.cpp?ref=2630c71b49d8fee92bc6e99e135f5c6946894951",
            "patch": "@@ -184,6 +184,8 @@ motion_utils::VirtualWalls RunOutDebug::createVirtualWalls()\n     wall.pose = p;\n     virtual_walls.push_back(wall);\n   }\n+  stop_pose_.clear();\n+\n   return virtual_walls;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4245": [
        {
            "sha": "750f65e55f89b59b882b9fda1173cef1243a5317",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/avoidance_by_lane_change.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 3,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c28cfa2cf4eb6c93b0930bb270a00af78d7f7cbf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Favoidance_by_lane_change.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c28cfa2cf4eb6c93b0930bb270a00af78d7f7cbf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Favoidance_by_lane_change.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Favoidance_by_lane_change.cpp?ref=c28cfa2cf4eb6c93b0930bb270a00af78d7f7cbf",
            "patch": "@@ -55,8 +55,7 @@ std::pair<bool, bool> AvoidanceByLaneChange::getSafePath(LaneChangePath & safe_p\n     return {false, false};\n   }\n \n-  const auto direction = utils::avoidance::isOnRight(o_front) ? Direction::LEFT : Direction::RIGHT;\n-  const auto target_lanes = getLaneChangeLanes(current_lanes, direction);\n+  const auto target_lanes = getLaneChangeLanes(current_lanes, direction_);\n \n   if (target_lanes.empty()) {\n     return {false, false};\n@@ -65,7 +64,7 @@ std::pair<bool, bool> AvoidanceByLaneChange::getSafePath(LaneChangePath & safe_p\n   // find candidate paths\n   LaneChangePaths valid_paths{};\n   const auto found_safe_path =\n-    getLaneChangePaths(current_lanes, target_lanes, direction, &valid_paths);\n+    getLaneChangePaths(current_lanes, target_lanes, direction_, &valid_paths);\n \n   if (valid_paths.empty()) {\n     return {false, false};\n@@ -96,6 +95,14 @@ void AvoidanceByLaneChange::updateSpecialData()\n   avoidance_debug_data_ = DebugData();\n   avoidance_data_ = calcAvoidancePlanningData(avoidance_debug_data_);\n \n+  if (avoidance_data_.target_objects.empty()) {\n+    direction_ = Direction::NONE;\n+  } else {\n+    direction_ = utils::avoidance::isOnRight(avoidance_data_.target_objects.front())\n+                   ? Direction::LEFT\n+                   : Direction::RIGHT;\n+  }\n+\n   utils::avoidance::updateRegisteredObject(registered_objects_, avoidance_data_.target_objects, p);\n   utils::avoidance::compensateDetectionLost(\n     registered_objects_, avoidance_data_.target_objects, avoidance_data_.other_objects);"
        }
    ],
    "autowarefoundation/autoware.universe/4246": [
        {
            "sha": "885c0dc2859aba85a461022a4ec0d15ba84f82fb",
            "filename": "planning/behavior_velocity_out_of_lane_module/README.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5471e300684c13e8603860bbf382b087606625e6/planning%2Fbehavior_velocity_out_of_lane_module%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5471e300684c13e8603860bbf382b087606625e6/planning%2Fbehavior_velocity_out_of_lane_module%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_out_of_lane_module%2FREADME.md?ref=5471e300684c13e8603860bbf382b087606625e6",
            "patch": "@@ -140,9 +140,9 @@ Moreover, parameter `action.distance_buffer` adds an extra distance between the\n \n | Parameter /objects              | Type   | Description                                                                                                                                                               |\n | ------------------------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n-| `minimum_velocity`              | double | [m/s] consider objects with an estimated time to collision bellow this value while on the overlap                                                                         |\n-| `use_predicted_paths`           | bool   | [-] if true, use the predicted paths to estimate future positions; if false, assume the object moves at constant velocity along _all_ lanelets it currently is located in |\n+| `minimum_velocity`              | double | [m/s] ignore objects with a velocity lower than this value                                                                                                                |\n | `predicted_path_min_confidence` | double | [-] minimum confidence required for a predicted path to be considered                                                                                                     |\n+| `use_predicted_paths`           | bool   | [-] if true, use the predicted paths to estimate future positions; if false, assume the object moves at constant velocity along _all_ lanelets it currently is located in |\n \n | Parameter /overlap | Type   | Description                                                                                          |\n | ------------------ | ------ | ---------------------------------------------------------------------------------------------------- |\n@@ -155,7 +155,7 @@ Moreover, parameter `action.distance_buffer` adds an extra distance between the\n | `strict`                      | bool   | [-] if true, when a decision is taken to avoid entering a lane, the stop point will make sure no lane at all is entered by ego; if false, ego stops just before entering a lane but may then be overlapping another lane |\n | `distance_buffer`             | double | [m] buffer distance to try to keep between the ego footprint and lane                                                                                                                                                    |\n | `slowdown.distance_threshold` | double | [m] insert a slow down when closer than this distance from an overlap                                                                                                                                                    |\n-| `slowdown.velocity`           | double | [m] slow down velocity                                                                                                                                                                                                   |\n+| `slowdown.velocity`           | double | [m/s] slow down velocity                                                                                                                                                                                                 |\n | `stop.distance_threshold`     | double | [m] insert a stop when closer than this distance from an overlap                                                                                                                                                         |\n \n | Parameter /ego       | Type   | Description                                          |"
        }
    ],
    "autowarefoundation/autoware.universe/4253": [
        {
            "sha": "43eae7a099005ae75a549a3184150178f0972c79",
            "filename": "planning/behavior_path_planner/src/utils/avoidance/utils.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ae2352c7d0483b3de870bd82ad0e885b85b19eb4/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ae2352c7d0483b3de870bd82ad0e885b85b19eb4/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp?ref=ae2352c7d0483b3de870bd82ad0e885b85b19eb4",
            "patch": "@@ -1210,6 +1210,10 @@ double extendToRoadShoulderDistanceWithPolygon(\n       }\n     }\n \n+    if (intersect_dist_vec.empty()) {\n+      continue;\n+    }\n+\n     std::sort(intersect_dist_vec.begin(), intersect_dist_vec.end());\n     updated_to_road_shoulder_distance =\n       std::max(updated_to_road_shoulder_distance, intersect_dist_vec.back());"
        }
    ],
    "autowarefoundation/autoware.universe/4255": [
        {
            "sha": "e1fbf7f1dccc693fdb05bcf651e66235432dd9e9",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 16,
            "deletions": 6,
            "changes": 22,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c9102560d5696ed8b717909f6108ebb7e6c6ae7e/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c9102560d5696ed8b717909f6108ebb7e6c6ae7e/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=c9102560d5696ed8b717909f6108ebb7e6c6ae7e",
            "patch": "@@ -1971,17 +1971,27 @@ bool RouteHandler::planPathLaneletsBetweenCheckpoints(\n   const Pose & start_checkpoint, const Pose & goal_checkpoint,\n   lanelet::ConstLanelets * path_lanelets) const\n {\n+  // Find lanelets for start point. First, find all lanelets containing the start point to calculate\n+  // all possible route later. It fails when the point is not located on any road_lanelet (e.g. the\n+  // start point is located out of any lanelets or road_shoulder lanelet which is not contained in\n+  // road_lanelet). In that case, find the closest lanelet instead.\n   lanelet::ConstLanelet start_lanelet;\n   lanelet::ConstLanelets start_lanelets;\n   if (!lanelet::utils::query::getCurrentLanelets(\n         road_lanelets_, start_checkpoint, &start_lanelets)) {\n-    RCLCPP_WARN_STREAM(\n-      logger_, \"Failed to find current lanelet.\"\n-                 << std::endl\n-                 << \" - start checkpoint: \" << toString(start_checkpoint) << std::endl\n-                 << \" - goal checkpoint: \" << toString(goal_checkpoint) << std::endl);\n-    return false;\n+    if (!lanelet::utils::query::getClosestLanelet(\n+          road_lanelets_, start_checkpoint, &start_lanelet)) {\n+      RCLCPP_WARN_STREAM(\n+        logger_, \"Failed to find current lanelet.\"\n+                   << std::endl\n+                   << \" - start checkpoint: \" << toString(start_checkpoint) << std::endl\n+                   << \" - goal checkpoint: \" << toString(goal_checkpoint) << std::endl);\n+      return false;\n+    }\n+    start_lanelets = {start_lanelet};\n   }\n+\n+  // Find lanelets for goal point.\n   lanelet::ConstLanelet goal_lanelet;\n   if (!lanelet::utils::query::getClosestLanelet(road_lanelets_, goal_checkpoint, &goal_lanelet)) {\n     RCLCPP_WARN_STREAM("
        }
    ],
    "autowarefoundation/autoware.universe/4266": [
        {
            "sha": "b2fa6a1f99216430926fa6941228763acafe6e88",
            "filename": "planning/behavior_path_planner/src/utils/avoidance/utils.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5f6b6019ee1e3cb02de9d2c6ed70e37e62c6a2af/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5f6b6019ee1e3cb02de9d2c6ed70e37e62c6a2af/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp?ref=5f6b6019ee1e3cb02de9d2c6ed70e37e62c6a2af",
            "patch": "@@ -792,10 +792,10 @@ void filterTargetObjects(\n   const rclcpp::Time now = rclcpp::Clock(RCL_ROS_TIME).now();\n \n   // for goal\n-  const auto dist_to_goal =\n-    rh->isInGoalRouteSection(data.current_lanelets.back())\n-      ? calcSignedArcLength(path_points, ego_pos, rh->getGoalPose().position)\n-      : std::numeric_limits<double>::max();\n+  const auto ego_idx = planner_data->findEgoIndex(path_points);\n+  const auto dist_to_goal = rh->isInGoalRouteSection(data.current_lanelets.back())\n+                              ? calcSignedArcLength(path_points, ego_idx, path_points.size() - 1)\n+                              : std::numeric_limits<double>::max();\n \n   // extend lanelets if the reference path is cut for lane change.\n   const auto & ego_pose = planner_data->self_odometry->pose.pose;"
        }
    ],
    "autowarefoundation/autoware.universe/4271": [
        {
            "sha": "4c85d0538b2ba7e2f59529d6f2e748253970face",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 16,
            "deletions": 13,
            "changes": 29,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/df7b975875c8b4bb5ed9f9a443f169351c7b111d/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/df7b975875c8b4bb5ed9f9a443f169351c7b111d/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=df7b975875c8b4bb5ed9f9a443f169351c7b111d",
            "patch": "@@ -1268,18 +1268,17 @@ boost::optional<size_t> getOverlappedLaneletId(const std::vector<DrivableLanes>\n std::vector<DrivableLanes> cutOverlappedLanes(\n   PathWithLaneId & path, const std::vector<DrivableLanes> & lanes)\n {\n-  const auto overlapped_lanelet_id = getOverlappedLaneletId(lanes);\n-  if (!overlapped_lanelet_id) {\n+  const auto overlapped_lanelet_idx = getOverlappedLaneletId(lanes);\n+  if (!overlapped_lanelet_idx) {\n     return lanes;\n   }\n \n-  const std::vector<DrivableLanes> shorten_lanes{\n-    lanes.begin(), lanes.begin() + *overlapped_lanelet_id};\n+  std::vector<DrivableLanes> shorten_lanes{lanes.begin(), lanes.begin() + *overlapped_lanelet_idx};\n   const auto shorten_lanelets = utils::transformToLanelets(shorten_lanes);\n \n   // create removed lanelets\n   std::vector<int64_t> removed_lane_ids;\n-  for (size_t i = *overlapped_lanelet_id; i < lanes.size(); ++i) {\n+  for (size_t i = *overlapped_lanelet_idx; i < lanes.size(); ++i) {\n     const auto target_lanelets = utils::transformToLanelets(lanes.at(i));\n     for (const auto & target_lanelet : target_lanelets) {\n       // if target lane is inside of the shorten lanelets, we do not remove it\n@@ -1290,18 +1289,22 @@ std::vector<DrivableLanes> cutOverlappedLanes(\n     }\n   }\n \n-  for (size_t i = 0; i < path.points.size(); ++i) {\n-    const auto & lane_ids = path.points.at(i).lane_ids;\n+  const auto is_same_lane_id = [&removed_lane_ids](const auto & point) {\n+    const auto & lane_ids = point.lane_ids;\n     for (const auto & lane_id : lane_ids) {\n-      if (\n-        std::find(removed_lane_ids.begin(), removed_lane_ids.end(), lane_id) !=\n-        removed_lane_ids.end()) {\n-        path.points.erase(path.points.begin() + i, path.points.end());\n-        return shorten_lanes;\n+      const auto is_same_id = [&lane_id](const auto id) { return lane_id == id; };\n+\n+      if (std::any_of(removed_lane_ids.begin(), removed_lane_ids.end(), is_same_id)) {\n+        return true;\n       }\n     }\n-  }\n+    return false;\n+  };\n+\n+  const auto points_with_overlapped_id =\n+    std::remove_if(path.points.begin(), path.points.end(), is_same_lane_id);\n \n+  path.points.erase(points_with_overlapped_id, path.points.end());\n   return shorten_lanes;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4280": [
        {
            "sha": "2b686dc0fe8c3d53252ff0169dca91e3c8e7afa1",
            "filename": "map/map_loader/test/test_pointcloud_map_loader_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d02cd46838f4e5dd97db230e1b5d5968ef051e72/map%2Fmap_loader%2Ftest%2Ftest_pointcloud_map_loader_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d02cd46838f4e5dd97db230e1b5d5968ef051e72/map%2Fmap_loader%2Ftest%2Ftest_pointcloud_map_loader_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2Ftest%2Ftest_pointcloud_map_loader_module.cpp?ref=d02cd46838f4e5dd97db230e1b5d5968ef051e72",
            "patch": "@@ -92,7 +92,7 @@ TEST_F(TestPointcloudMapLoaderModule, LoadPCDFilesNoDownsampleTest)\n   // Check if the point cloud is received and the content is as expected\n   ASSERT_TRUE(*pointcloud_received);\n \n-  // Convert the received point cloud to pcl::PointCloudpcl::PointXYZ\n+  // Convert the received point cloud to pcl::PointCloud<pcl::PointXYZ>\n   pcl::PointCloud<pcl::PointXYZ> received_cloud;\n   pcl::fromROSMsg(*pointcloud_msg, received_cloud);\n "
        }
    ],
    "autowarefoundation/autoware.universe/4287": [
        {
            "sha": "199246715551c82fa056e81a8904522bdf8ceb72",
            "filename": "perception/image_projection_based_fusion/include/image_projection_based_fusion/utils/geometry.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2ef46ad6d4e2852c085f9cd7a6e3939ab1062c15/perception%2Fimage_projection_based_fusion%2Finclude%2Fimage_projection_based_fusion%2Futils%2Fgeometry.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2ef46ad6d4e2852c085f9cd7a6e3939ab1062c15/perception%2Fimage_projection_based_fusion%2Finclude%2Fimage_projection_based_fusion%2Futils%2Fgeometry.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2Finclude%2Fimage_projection_based_fusion%2Futils%2Fgeometry.hpp?ref=2ef46ad6d4e2852c085f9cd7a6e3939ab1062c15",
            "patch": "@@ -62,7 +62,7 @@ void transformPoints(\n \n bool is_inside(\n   const sensor_msgs::msg::RegionOfInterest & outer,\n-  const sensor_msgs::msg::RegionOfInterest & inner, const float outer_offset_scale = 1.1);\n+  const sensor_msgs::msg::RegionOfInterest & inner, const double outer_offset_scale = 1.1);\n \n }  // namespace image_projection_based_fusion\n "
        }
    ],
    "autowarefoundation/autoware.universe/4290": [
        {
            "sha": "1a9b61a0b51a9c7b4c5daf04d0b8109059e58dee",
            "filename": "planning/behavior_velocity_occlusion_spot_module/config/occlusion_spot.param.yaml",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4e74e126d3454135571546dc28ebd0b1cc01f82a/planning%2Fbehavior_velocity_occlusion_spot_module%2Fconfig%2Focclusion_spot.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4e74e126d3454135571546dc28ebd0b1cc01f82a/planning%2Fbehavior_velocity_occlusion_spot_module%2Fconfig%2Focclusion_spot.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_occlusion_spot_module%2Fconfig%2Focclusion_spot.param.yaml?ref=4e74e126d3454135571546dc28ebd0b1cc01f82a",
            "patch": "@@ -13,9 +13,12 @@\n         is_show_cv_window: false            # [-] whether to show open_cv debug window\n         is_show_processing_time: false      # [-] whether to show processing time\n       threshold:\n+        detection_area_offset: 30.0\n         detection_area_length: 100.0        # [m] the length of path to consider perception range\n         stuck_vehicle_vel: 1.0              # [m/s] velocity below this value is assumed to stop\n         lateral_distance: 1.5               # [m] maximum lateral distance to consider hidden collision\n+        search_dist: 10.0\n+        search_angle: 0.63                  # [rad] PI/5.0\n       motion:\n         safety_ratio: 0.8                   # [-] jerk/acceleration ratio for safety\n         max_slow_down_jerk: -0.5            # [m/s^3] minimum jerk deceleration for safe brake."
        }
    ],
    "autowarefoundation/autoware.universe/4297": [
        {
            "sha": "56f048c769d220d41d7de8d902ff5b5eb389c380",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 7,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cb0fd4fdb38b66de0e52fdd890f93ff3cab6dc76/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cb0fd4fdb38b66de0e52fdd890f93ff3cab6dc76/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=cb0fd4fdb38b66de0e52fdd890f93ff3cab6dc76",
            "patch": "@@ -298,27 +298,26 @@ PathWithLaneId StartPlannerModule::getFullPath() const\n BehaviorModuleOutput StartPlannerModule::planWaitingApproval()\n {\n   updatePullOutStatus();\n-  waitApproval();\n \n   if (IsGoalBehindOfEgoInSameRouteSegment()) {\n     RCLCPP_WARN_THROTTLE(\n       getLogger(), *clock_, 5000, \"Start plan for a backward goal is not supported now\");\n+    path_reference_ = getPreviousModuleOutput().reference_path;\n+    clearWaitingApproval();\n     return generateStopOutput();\n   }\n \n   BehaviorModuleOutput output;\n   if (!status_.is_safe) {\n     RCLCPP_WARN_THROTTLE(\n       getLogger(), *clock_, 5000, \"Not found safe pull out path, publish stop path\");\n-    // the path of getCurrent() is generated by generateStopPath()\n-    const PathWithLaneId stop_path = getCurrentPath();\n-    output.path = std::make_shared<PathWithLaneId>(stop_path);\n-    output.reference_path = getPreviousModuleOutput().reference_path;\n-    path_candidate_ = std::make_shared<PathWithLaneId>(stop_path);\n     path_reference_ = getPreviousModuleOutput().reference_path;\n-    return output;\n+    clearWaitingApproval();\n+    return generateStopOutput();\n   }\n \n+  waitApproval();\n+\n   const double backward_path_length =\n     planner_data_->parameters.backward_path_length + parameters_->max_back_distance;\n   const auto current_lanes ="
        }
    ],
    "autowarefoundation/autoware.universe/4304": [
        {
            "sha": "45582092d18b11cd0f8a5c4ebbcabd0ccd1ffd72",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 19,
            "deletions": 0,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4fcc825609ecf73d912a241f56019c6f29c72fef/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4fcc825609ecf73d912a241f56019c6f29c72fef/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=4fcc825609ecf73d912a241f56019c6f29c72fef",
            "patch": "@@ -2707,12 +2707,26 @@ lanelet::ConstLanelets getExtendedCurrentLanes(\n   const double forward_length)\n {\n   auto lanes = getCurrentLanes(planner_data);\n+  if (lanes.empty()) return lanes;\n \n   double forward_length_sum = 0.0;\n   double backward_length_sum = 0.0;\n \n+  const auto is_loop = [&](const auto & target_lane) {\n+    auto it = std::find_if(lanes.begin(), lanes.end(), [&](const lanelet::ConstLanelet & lane) {\n+      return lane.id() == target_lane.id();\n+    });\n+\n+    return it != lanes.end();\n+  };\n+\n   while (backward_length_sum < backward_length) {\n     auto extended_lanes = extendPrevLane(planner_data->route_handler, lanes);\n+\n+    if (extended_lanes.empty() || is_loop(extended_lanes.front())) {\n+      return lanes;\n+    }\n+\n     if (extended_lanes.size() > lanes.size()) {\n       backward_length_sum += lanelet::utils::getLaneletLength2d(extended_lanes.front());\n     } else {\n@@ -2723,6 +2737,11 @@ lanelet::ConstLanelets getExtendedCurrentLanes(\n \n   while (forward_length_sum < forward_length) {\n     auto extended_lanes = extendNextLane(planner_data->route_handler, lanes);\n+\n+    if (extended_lanes.empty() || is_loop(extended_lanes.back())) {\n+      return lanes;\n+    }\n+\n     if (extended_lanes.size() > lanes.size()) {\n       forward_length_sum += lanelet::utils::getLaneletLength2d(extended_lanes.back());\n     } else {"
        }
    ],
    "autowarefoundation/autoware.universe/4319": [
        {
            "sha": "26c2fd30d91980bb383ff705379fe907c9fff7dd",
            "filename": "localization/ndt_scan_matcher/src/map_update_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2e32584c15b7d5762f4f95d0285397ec157e9b33/localization%2Fndt_scan_matcher%2Fsrc%2Fmap_update_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2e32584c15b7d5762f4f95d0285397ec157e9b33/localization%2Fndt_scan_matcher%2Fsrc%2Fmap_update_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fmap_update_module.cpp?ref=2e32584c15b7d5762f4f95d0285397ec157e9b33",
            "patch": "@@ -131,6 +131,7 @@ void MapUpdateModule::update_map(const geometry_msgs::msg::Point & position)\n     status = result.wait_for(std::chrono::seconds(1));\n   }\n   update_ndt(result.get()->new_pointcloud_with_ids, result.get()->ids_to_remove);\n+  last_update_position_ = position;\n }\n \n void MapUpdateModule::update_ndt("
        }
    ],
    "autowarefoundation/autoware.universe/4332": [
        {
            "sha": "f8db1a561f333ab377324a2678e52d77d9abf841",
            "filename": "localization/yabloc/yabloc_particle_filter/src/correction/abstract_corrector.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7493134daeb6cfda9e7639b6a21019d41a2664a8/localization%2Fyabloc%2Fyabloc_particle_filter%2Fsrc%2Fcorrection%2Fabstract_corrector.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7493134daeb6cfda9e7639b6a21019d41a2664a8/localization%2Fyabloc%2Fyabloc_particle_filter%2Fsrc%2Fcorrection%2Fabstract_corrector.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fyabloc%2Fyabloc_particle_filter%2Fsrc%2Fcorrection%2Fabstract_corrector.cpp?ref=7493134daeb6cfda9e7639b6a21019d41a2664a8",
            "patch": "@@ -49,7 +49,7 @@ std::optional<AbstractCorrector::ParticleArray> AbstractCorrector::get_synchroni\n \n   if (particle_array_buffer_.empty()) {\n     RCLCPP_WARN_STREAM_THROTTLE(\n-      logger_, *get_clock(), 2000, \"sychronized particles are requested but buffer is empty\");\n+      logger_, *get_clock(), 2000, \"synchronized particles are requested but buffer is empty\");\n   }\n \n   if (particle_array_buffer_.empty()) return std::nullopt;"
        }
    ],
    "autowarefoundation/autoware.universe/4333": [
        {
            "sha": "b76cfd545febab6dceebcd764e39c7182ce77507",
            "filename": "control/vehicle_cmd_gate/src/vehicle_cmd_gate.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e4f8153aa92a264b39e12f52bba412692988cfd0/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e4f8153aa92a264b39e12f52bba412692988cfd0/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp?ref=e4f8153aa92a264b39e12f52bba412692988cfd0",
            "patch": "@@ -527,7 +527,9 @@ AckermannControlCommand VehicleCmdGate::filterControlCommand(const AckermannCont\n   // set prev value for both to keep consistency over switching:\n   // Actual steer, vel, acc should be considered in manual mode to prevent sudden motion when\n   // switching from manual to autonomous\n-  auto prev_values = (mode.mode == OperationModeState::AUTONOMOUS) ? out : current_status_cmd;\n+  const auto in_autonomous =\n+    (mode.mode == OperationModeState::AUTONOMOUS && mode.is_autoware_control_enabled);\n+  auto prev_values = in_autonomous ? out : current_status_cmd;\n \n   // TODO(Horibe): To prevent sudden acceleration/deceleration when switching from manual to\n   // autonomous, the filter should be applied for actual speed and acceleration during manual"
        }
    ],
    "autowarefoundation/autoware.universe/4342": [
        {
            "sha": "92a9a5ca092c19b26c8710f5783c9be29588acee",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 1,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/55a9f826b125603f51901c65a7a8f732dfdaafac/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/55a9f826b125603f51901c65a7a8f732dfdaafac/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=55a9f826b125603f51901c65a7a8f732dfdaafac",
            "patch": "@@ -304,7 +304,7 @@ void AvoidanceModule::fillAvoidanceTargetObjects(\n   // TODO(Satoshi OTA) use helper_ after the manager transition\n   helper::avoidance::AvoidanceHelper helper(planner_data_, parameters_);\n \n-  const auto feasible_stop_distance = helper.getFeasibleDecelDistance(0.0);\n+  const auto feasible_stop_distance = helper.getFeasibleDecelDistance(0.0, false);\n   std::for_each(data.target_objects.begin(), data.target_objects.end(), [&, this](auto & o) {\n     o.to_stop_line = calcDistanceToStopLine(o);\n     fillObjectStoppableJudge(o, registered_objects_, feasible_stop_distance, parameters_);\n@@ -3244,6 +3244,14 @@ void AvoidanceModule::insertWaitPoint(\n     return;\n   }\n \n+  // If the stop distance is not enough for comfortable stop, don't insert wait point.\n+  const auto is_comfortable_stop = helper_.getFeasibleDecelDistance(0.0) < data.to_stop_line;\n+  const auto is_slow_speed = getEgoSpeed() < parameters_->min_slow_down_speed;\n+  if (!is_comfortable_stop && !is_slow_speed) {\n+    RCLCPP_WARN_THROTTLE(getLogger(), *clock_, 500, \"not execute uncomfortable deceleration.\");\n+    return;\n+  }\n+\n   // If target object can be stopped for, insert a deceleration point and return\n   if (data.stop_target_object.get().is_stoppable) {\n     utils::avoidance::insertDecelPoint("
        }
    ],
    "autowarefoundation/autoware.universe/4343": [
        {
            "sha": "cbe0df15b9e932a262fc624d4cdd9204dcb919df",
            "filename": "common/tensorrt_common/src/tensorrt_common.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 11,
            "changes": 22,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4914b60cb033b61e27c7f70663babbbd6f67f5d8/common%2Ftensorrt_common%2Fsrc%2Ftensorrt_common.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4914b60cb033b61e27c7f70663babbbd6f67f5d8/common%2Ftensorrt_common%2Fsrc%2Ftensorrt_common.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftensorrt_common%2Fsrc%2Ftensorrt_common.cpp?ref=4914b60cb033b61e27c7f70663babbbd6f67f5d8",
            "patch": "@@ -273,20 +273,20 @@ void TrtCommon::printNetworkInfo(const std::string & onnx_file_path)\n   int total_params = 0;\n   for (int i = 0; i < num; i++) {\n     nvinfer1::ILayer * layer = network->getLayer(i);\n-    auto ltype = layer->getType();\n+    auto layer_type = layer->getType();\n     std::string name = layer->getName();\n     if (build_config_->profile_per_layer) {\n       model_profiler_.setProfDict(layer);\n     }\n-    if (ltype == nvinfer1::LayerType::kCONSTANT) {\n+    if (layer_type == nvinfer1::LayerType::kCONSTANT) {\n       continue;\n     }\n     nvinfer1::ITensor * in = layer->getInput(0);\n     nvinfer1::Dims dim_in = in->getDimensions();\n     nvinfer1::ITensor * out = layer->getOutput(0);\n     nvinfer1::Dims dim_out = out->getDimensions();\n \n-    if (ltype == nvinfer1::LayerType::kCONVOLUTION) {\n+    if (layer_type == nvinfer1::LayerType::kCONVOLUTION) {\n       nvinfer1::IConvolutionLayer * conv = (nvinfer1::IConvolutionLayer *)layer;\n       nvinfer1::Dims k_dims = conv->getKernelSizeNd();\n       nvinfer1::Dims s_dims = conv->getStrideNd();\n@@ -305,7 +305,7 @@ void TrtCommon::printNetworkInfo(const std::string & onnx_file_path)\n       std::cout << \" weights:\" << num_weights;\n       std::cout << \" GFLOPs:\" << gflops;\n       std::cout << std::endl;\n-    } else if (ltype == nvinfer1::LayerType::kPOOLING) {\n+    } else if (layer_type == nvinfer1::LayerType::kPOOLING) {\n       nvinfer1::IPoolingLayer * pool = (nvinfer1::IPoolingLayer *)layer;\n       auto p_type = pool->getPoolingType();\n       nvinfer1::Dims dim_stride = pool->getStrideNd();\n@@ -325,7 +325,7 @@ void TrtCommon::printNetworkInfo(const std::string & onnx_file_path)\n       std::cout << \"pool \" << dim_window.d[0] << \"x\" << dim_window.d[1] << \"]\";\n       std::cout << \" GFLOPs:\" << gflops;\n       std::cout << std::endl;\n-    } else if (ltype == nvinfer1::LayerType::kRESIZE) {\n+    } else if (layer_type == nvinfer1::LayerType::kRESIZE) {\n       std::cout << \"L\" << i << \" [resize]\" << std::endl;\n     }\n   }\n@@ -364,7 +364,7 @@ bool TrtCommon::buildEngineFromOnnx(\n     if (num_available_dla > 0) {\n       std::cout << \"###\" << num_available_dla << \" DLAs are supported! ###\" << std::endl;\n     } else {\n-      std::cout << \"###Warninig : \"\n+      std::cout << \"###Warning : \"\n                 << \"No DLA is supported! ###\" << std::endl;\n     }\n     config->setDefaultDeviceType(nvinfer1::DeviceType::kDLA);\n@@ -400,7 +400,7 @@ bool TrtCommon::buildEngineFromOnnx(\n     network->getInput(0)->setDynamicRange(0, 255.0);\n     for (int i = 0; i < num; i++) {\n       nvinfer1::ILayer * layer = network->getLayer(i);\n-      auto ltype = layer->getType();\n+      auto layer_type = layer->getType();\n       std::string name = layer->getName();\n       nvinfer1::ITensor * out = layer->getOutput(0);\n       if (build_config_->clip_value > 0.0) {\n@@ -409,7 +409,7 @@ bool TrtCommon::buildEngineFromOnnx(\n         out->setDynamicRange(0.0, build_config_->clip_value);\n       }\n \n-      if (ltype == nvinfer1::LayerType::kCONVOLUTION) {\n+      if (layer_type == nvinfer1::LayerType::kCONVOLUTION) {\n         if (first) {\n           layer->setPrecision(nvinfer1::DataType::kHALF);\n           std::cout << \"Set kHALF in \" << name << std::endl;\n@@ -424,14 +424,14 @@ bool TrtCommon::buildEngineFromOnnx(\n           }\n           for (int i = num - 1; i >= 0; i--) {\n             nvinfer1::ILayer * layer = network->getLayer(i);\n-            auto ltype = layer->getType();\n+            auto layer_type = layer->getType();\n             std::string name = layer->getName();\n-            if (ltype == nvinfer1::LayerType::kCONVOLUTION) {\n+            if (layer_type == nvinfer1::LayerType::kCONVOLUTION) {\n               layer->setPrecision(nvinfer1::DataType::kHALF);\n               std::cout << \"Set kHALF in \" << name << std::endl;\n               break;\n             }\n-            if (ltype == nvinfer1::LayerType::kMATRIX_MULTIPLY) {\n+            if (layer_type == nvinfer1::LayerType::kMATRIX_MULTIPLY) {\n               layer->setPrecision(nvinfer1::DataType::kHALF);\n               std::cout << \"Set kHALF in \" << name << std::endl;\n               break;"
        }
    ],
    "autowarefoundation/autoware.universe/4348": [
        {
            "sha": "9117efcc447da0917f2ed335e197e3cc75161103",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 25,
            "deletions": 2,
            "changes": 27,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/91279f5521ff121cbc1a73226d71d64269b7ab9c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/91279f5521ff121cbc1a73226d71d64269b7ab9c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=91279f5521ff121cbc1a73226d71d64269b7ab9c",
            "patch": "@@ -17,6 +17,7 @@\n #include \"behavior_path_planner/marker_utils/avoidance/debug.hpp\"\n #include \"behavior_path_planner/scene_module/scene_module_visitor.hpp\"\n #include \"behavior_path_planner/utils/avoidance/utils.hpp\"\n+#include \"behavior_path_planner/utils/create_vehicle_footprint.hpp\"\n #include \"behavior_path_planner/utils/path_safety_checker/objects_filtering.hpp\"\n #include \"behavior_path_planner/utils/path_utils.hpp\"\n #include \"behavior_path_planner/utils/utils.hpp\"\n@@ -2543,9 +2544,31 @@ TurnSignalInfo AvoidanceModule::calcTurnSignalInfo(const ShiftedPath & path) con\n       turn_signal_info.turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n     }\n   } else {\n-    turn_signal_info.turn_signal.command = TurnIndicatorsCommand::DISABLE;\n+    const lanelet::ConstLanelets current_lanes = utils::getCurrentLanes(planner_data_);\n+    const auto local_vehicle_footprint =\n+      createVehicleFootprint(planner_data_->parameters.vehicle_info);\n+    boost::geometry::model::ring<tier4_autoware_utils::Point2d> shifted_vehicle_footprint;\n+    for (const auto & cl : current_lanes) {\n+      // get left and right bounds of current lane\n+      const auto lane_left_bound = cl.leftBound2d().basicLineString();\n+      const auto lane_right_bound = cl.rightBound2d().basicLineString();\n+      for (size_t i = start_idx; i < end_idx; ++i) {\n+        // transform vehicle footprint onto path points\n+        shifted_vehicle_footprint = transformVector(\n+          local_vehicle_footprint,\n+          tier4_autoware_utils::pose2transform(path.path.points.at(i).point.pose));\n+        if (\n+          boost::geometry::intersects(lane_left_bound, shifted_vehicle_footprint) ||\n+          boost::geometry::intersects(lane_right_bound, shifted_vehicle_footprint)) {\n+          if (segment_shift_length > 0.0) {\n+            turn_signal_info.turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;\n+          } else {\n+            turn_signal_info.turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n+          }\n+        }\n+      }\n+    }\n   }\n-\n   if (ego_front_to_shift_start > 0.0) {\n     turn_signal_info.desired_start_point = planner_data_->self_odometry->pose.pose;\n   } else {"
        }
    ],
    "autowarefoundation/autoware.universe/4351": [
        {
            "sha": "475e341d7652861384e60f9d20f08ab4f20bc186",
            "filename": "planning/behavior_velocity_out_of_lane_module/src/debug.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bc3a65d088b902c78632cd944a314053d9cbd7c7/planning%2Fbehavior_velocity_out_of_lane_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bc3a65d088b902c78632cd944a314053d9cbd7c7/planning%2Fbehavior_velocity_out_of_lane_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_out_of_lane_module%2Fsrc%2Fdebug.cpp?ref=bc3a65d088b902c78632cd944a314053d9cbd7c7",
            "patch": "@@ -64,7 +64,7 @@ void add_current_overlap_marker(\n   debug_marker.points.clear();\n   for (const auto & p : current_footprint)\n     debug_marker.points.push_back(tier4_autoware_utils::createMarkerPosition(p.x(), p.y(), z));\n-  debug_marker.points.push_back(debug_marker.points.front());\n+  if (!debug_marker.points.empty()) debug_marker.points.push_back(debug_marker.points.front());\n   if (current_overlapped_lanelets.empty())\n     debug_marker.color = tier4_autoware_utils::createMarkerColor(0.1, 1.0, 0.1, 0.5);\n   else"
        }
    ],
    "autowarefoundation/autoware.universe/4354": [
        {
            "sha": "916fe11f13cb11518fb5fec9976af6e09956987d",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 1,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3c723daa1634ddd0fd3d9db00f87407cecd9b600/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3c723daa1634ddd0fd3d9db00f87407cecd9b600/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=3c723daa1634ddd0fd3d9db00f87407cecd9b600",
            "patch": "@@ -2433,7 +2433,7 @@ PathWithLaneId AvoidanceModule::extendBackwardLength(const PathWithLaneId & orig\n     planner_data_->parameters.backward_path_length, longest_dist_to_shift_point + extra_margin);\n   const auto previous_path = helper_.getPreviousReferencePath();\n \n-  const size_t orig_ego_idx = findNearestIndex(original_path.points, getEgoPosition());\n+  const size_t orig_ego_idx = planner_data_->findEgoIndex(original_path.points);\n   const size_t prev_ego_idx =\n     findNearestSegmentIndex(previous_path.points, getPoint(original_path.points.at(orig_ego_idx)));\n \n@@ -2452,6 +2452,12 @@ PathWithLaneId AvoidanceModule::extendBackwardLength(const PathWithLaneId & orig\n       previous_path.points.begin() + prev_ego_idx);\n   }\n \n+  // overwrite backward path velocity by latest one.\n+  std::for_each(extended_path.points.begin(), extended_path.points.end(), [&](auto & p) {\n+    p.point.longitudinal_velocity_mps =\n+      original_path.points.at(orig_ego_idx).point.longitudinal_velocity_mps;\n+  });\n+\n   {\n     extended_path.points.insert(\n       extended_path.points.end(), original_path.points.begin() + orig_ego_idx,"
        }
    ],
    "autowarefoundation/autoware.universe/4362": [
        {
            "sha": "9ab3101cdc4a5dc806952d01fd33c11dc0544ec1",
            "filename": "planning/behavior_path_planner/src/utils/start_planner/geometric_pull_out.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c2d3a04b39de595f80087d20c4acabfe7184bca2/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fstart_planner%2Fgeometric_pull_out.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c2d3a04b39de595f80087d20c4acabfe7184bca2/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fstart_planner%2Fgeometric_pull_out.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fstart_planner%2Fgeometric_pull_out.cpp?ref=c2d3a04b39de595f80087d20c4acabfe7184bca2",
            "patch": "@@ -83,7 +83,7 @@ boost::optional<PullOutPath> GeometricPullOut::plan(Pose start_pose, Pose goal_p\n     const auto combined_path = combineReferencePath(partial_paths.at(0), partial_paths.at(1));\n     output.partial_paths.push_back(combined_path);\n   }\n-  output.start_pose = planner_.getArcPaths().at(0).points.back().point.pose;\n+  output.start_pose = planner_.getArcPaths().at(0).points.front().point.pose;\n   output.end_pose = planner_.getArcPaths().at(1).points.back().point.pose;\n \n   return output;"
        }
    ],
    "autowarefoundation/autoware.universe/4363": [
        {
            "sha": "4e27f57b39e7b21d3382635ecea791c389643b57",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 4,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6ab9fac8c21af57ae43ca782f285c0abdeaf3eb4/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6ab9fac8c21af57ae43ca782f285c0abdeaf3eb4/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=6ab9fac8c21af57ae43ca782f285c0abdeaf3eb4",
            "patch": "@@ -814,10 +814,17 @@ TurnSignalInfo StartPlannerModule::calcTurnSignalInfo() const\n   if (path.points.empty()) {\n     return {};\n   }\n-  const auto closest_idx = motion_utils::findNearestIndex(path.points, start_pose.position);\n-  const auto lane_id = path.points.at(closest_idx).lane_ids.front();\n-  const auto lane = planner_data_->route_handler->getLaneletMapPtr()->laneletLayer.get(lane_id);\n-  const double lateral_offset = lanelet::utils::getLateralDistanceToCenterline(lane, start_pose);\n+\n+  // calculate lateral offset from pull out target lane center line\n+  lanelet::ConstLanelet closest_road_lane;\n+  const double backward_path_length =\n+    planner_data_->parameters.backward_path_length + parameters_->max_back_distance;\n+  const auto road_lanes = utils::getExtendedCurrentLanes(\n+    planner_data_, backward_path_length, std::numeric_limits<double>::max(),\n+    /*forward_only_in_route*/ true);\n+  lanelet::utils::query::getClosestLanelet(road_lanes, start_pose, &closest_road_lane);\n+  const double lateral_offset =\n+    lanelet::utils::getLateralDistanceToCenterline(closest_road_lane, start_pose);\n \n   if (distance_from_end < 0.0 && lateral_offset > parameters_->th_turn_signal_on_lateral_offset) {\n     turn_signal.turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;"
        }
    ],
    "autowarefoundation/autoware.universe/4369": [
        {
            "sha": "319c48f6ccc5e63e08827b05a0db1fd375345375",
            "filename": "common/perception_utils/include/perception_utils/prime_synchronizer.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/15eb9811b07545bb174f5b30ba8e6b46b2a55292/common%2Fperception_utils%2Finclude%2Fperception_utils%2Fprime_synchronizer.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/15eb9811b07545bb174f5b30ba8e6b46b2a55292/common%2Fperception_utils%2Finclude%2Fperception_utils%2Fprime_synchronizer.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fperception_utils%2Finclude%2Fperception_utils%2Fprime_synchronizer.hpp?ref=15eb9811b07545bb174f5b30ba8e6b46b2a55292",
            "patch": "@@ -76,7 +76,7 @@ class PrimeSynchronizer\n       const typename PrimeMsgT::ConstSharedPtr, const typename SecondaryMsgT::ConstSharedPtr...)>\n       callback,\n     StampT max_delay_t = 0.2, StampT max_wait_t = 0.1)\n-  : node_ptr_(node_ptr), callback_(callback), max_delay_t_(max_delay_t), max_wait_t_(max_wait_t)\n+  : node_ptr_(node_ptr), callback_(callback), max_wait_t_(max_wait_t), max_delay_t_(max_delay_t)\n   {\n     assert((topics.size() == sizeof...(SecondaryMsgT) + 1) && \"Incorrect topic number\");\n     assert(topics.size() == qos.size() && \"topic size not equal to qos size!\");"
        }
    ],
    "autowarefoundation/autoware.universe/4376": [
        {
            "sha": "16123ce377229999ff24855e77202b4fb759035f",
            "filename": "localization/yabloc/docs/yabloc_architecture.drawio.svg",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5ae36bbf242b20943668b31b1eb37eed4bbcb899/localization%2Fyabloc%2Fdocs%2Fyabloc_architecture.drawio.svg",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5ae36bbf242b20943668b31b1eb37eed4bbcb899/localization%2Fyabloc%2Fdocs%2Fyabloc_architecture.drawio.svg",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fyabloc%2Fdocs%2Fyabloc_architecture.drawio.svg?ref=5ae36bbf242b20943668b31b1eb37eed4bbcb899",
            "patch": "@@ -103,12 +103,12 @@\n               <div\n                 style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\"\n               >\n-                <span style=\"background-color: rgb(251, 251, 251);\">/localization/yablocmap/ll2_road_marking</span>\n+                <span style=\"background-color: rgb(251, 251, 251);\">/localization/yabloc/map/ll2_road_marking</span>\n               </div>\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"510\" y=\"704\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"11px\" text-anchor=\"middle\">/localization/yablocmap/ll2_road_marking</text>\n+        <text x=\"510\" y=\"704\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"11px\" text-anchor=\"middle\">/localization/yabloc/map/ll2_road_marking</text>\n       </switch>\n     </g>\n     <path d=\"M 311 470 L 341 470 L 341 500 L 761 500 L 761 446.37\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/4379": [
        {
            "sha": "3216c34f6c6a6ef5e8896db31bd93e4df0f1a6cb",
            "filename": "localization/yabloc/docs/yabloc_architecture.drawio.svg",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bc64a490b8160de7a43bda5ea36abd15760eb656/localization%2Fyabloc%2Fdocs%2Fyabloc_architecture.drawio.svg",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bc64a490b8160de7a43bda5ea36abd15760eb656/localization%2Fyabloc%2Fdocs%2Fyabloc_architecture.drawio.svg",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fyabloc%2Fdocs%2Fyabloc_architecture.drawio.svg?ref=bc64a490b8160de7a43bda5ea36abd15760eb656",
            "patch": "@@ -85,7 +85,7 @@\n               >\n                 /map\n                 <br/>\n-                /vectormap\n+                /vector_map\n               </div>\n             </div>\n           </div>\n@@ -103,12 +103,12 @@\n               <div\n                 style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\"\n               >\n-                <span style=\"background-color: rgb(251, 251, 251);\">/localization/yablocmap/ll2_road_marking</span>\n+                <span style=\"background-color: rgb(251, 251, 251);\">/localization/yabloc/map/ll2_road_marking</span>\n               </div>\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"510\" y=\"704\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"11px\" text-anchor=\"middle\">/localization/yablocmap/ll2_road_marking</text>\n+        <text x=\"510\" y=\"704\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"11px\" text-anchor=\"middle\">/localization/yabloc/map/ll2_road_marking</text>\n       </switch>\n     </g>\n     <path d=\"M 311 470 L 341 470 L 341 500 L 761 500 L 761 446.37\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/4380": [
        {
            "sha": "d3c31d688557df0621acdac5b87c90620059a4c2",
            "filename": "planning/behavior_path_planner/src/utils/avoidance/utils.cpp",
            "status": "modified",
            "additions": 74,
            "deletions": 1,
            "changes": 75,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fc5e95f95932913cd4a1bb224fab5dccdc560a48/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fc5e95f95932913cd4a1bb224fab5dccdc560a48/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp?ref=fc5e95f95932913cd4a1bb224fab5dccdc560a48",
            "patch": "@@ -69,6 +69,79 @@ geometry_msgs::msg::Polygon toMsg(const tier4_autoware_utils::Polygon2d & polygo\n   }\n   return ret;\n }\n+\n+template <class T>\n+size_t findFirstNearestIndex(const T & points, const geometry_msgs::msg::Point & point)\n+{\n+  motion_utils::validateNonEmpty(points);\n+\n+  double min_dist = std::numeric_limits<double>::max();\n+  size_t min_idx = 0;\n+  bool decreasing = false;\n+\n+  for (size_t i = 0; i < points.size(); ++i) {\n+    const auto dist = tier4_autoware_utils::calcSquaredDistance2d(points.at(i), point);\n+    if (dist < min_dist) {\n+      decreasing = true;\n+      min_dist = dist;\n+      min_idx = i;\n+      continue;\n+    }\n+\n+    if (decreasing) {\n+      return min_idx;\n+    }\n+  }\n+\n+  return min_idx;\n+}\n+\n+template <class T>\n+size_t findFirstNearestSegmentIndex(const T & points, const geometry_msgs::msg::Point & point)\n+{\n+  const size_t nearest_idx = findFirstNearestIndex(points, point);\n+\n+  if (nearest_idx == 0) {\n+    return 0;\n+  }\n+  if (nearest_idx == points.size() - 1) {\n+    return points.size() - 2;\n+  }\n+\n+  const double signed_length =\n+    motion_utils::calcLongitudinalOffsetToSegment(points, nearest_idx, point);\n+\n+  if (signed_length <= 0) {\n+    return nearest_idx - 1;\n+  }\n+\n+  return nearest_idx;\n+}\n+\n+template <class T>\n+double calcSignedArcLengthToFirstNearestPoint(\n+  const T & points, const geometry_msgs::msg::Point & src_point,\n+  const geometry_msgs::msg::Point & dst_point)\n+{\n+  try {\n+    motion_utils::validateNonEmpty(points);\n+  } catch (const std::exception & e) {\n+    std::cerr << e.what() << std::endl;\n+    return 0.0;\n+  }\n+\n+  const size_t src_seg_idx = findFirstNearestSegmentIndex(points, src_point);\n+  const size_t dst_seg_idx = findFirstNearestSegmentIndex(points, dst_point);\n+\n+  const double signed_length_on_traj =\n+    motion_utils::calcSignedArcLength(points, src_seg_idx, dst_seg_idx);\n+  const double signed_length_src_offset =\n+    motion_utils::calcLongitudinalOffsetToSegment(points, src_seg_idx, src_point);\n+  const double signed_length_dst_offset =\n+    motion_utils::calcLongitudinalOffsetToSegment(points, dst_seg_idx, dst_point);\n+\n+  return signed_length_on_traj - signed_length_src_offset + signed_length_dst_offset;\n+}\n }  // namespace\n \n bool isOnRight(const ObjectData & obj)\n@@ -270,7 +343,7 @@ void fillLongitudinalAndLengthByClosestEnvelopeFootprint(\n   double max_distance = std::numeric_limits<double>::lowest();\n   for (const auto & p : obj.envelope_poly.outer()) {\n     const auto point = tier4_autoware_utils::createPoint(p.x(), p.y(), 0.0);\n-    const double arc_length = motion_utils::calcSignedArcLength(path.points, ego_pos, point);\n+    const double arc_length = calcSignedArcLengthToFirstNearestPoint(path.points, ego_pos, point);\n     min_distance = std::min(min_distance, arc_length);\n     max_distance = std::max(max_distance, arc_length);\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/4382": [
        {
            "sha": "42a4c7ab78e655fba2c070b0d9dfe7934e536dc1",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b219286f332c76a81b25f1a3ec41f01d726c9775/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b219286f332c76a81b25f1a3ec41f01d726c9775/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=b219286f332c76a81b25f1a3ec41f01d726c9775",
            "patch": "@@ -445,7 +445,7 @@ void ObstacleAvoidancePlanner::insertZeroVelocityOutsideDrivableArea(\n         optimized_traj_points.at(0), optimized_traj_points.at(*first_outside_idx));\n       const auto dist_with_margin = dist - vehicle_stop_margin_outside_drivable_area_;\n       const auto first_outside_idx_with_margin =\n-        motion_utils::insertStopPoint(dist_with_margin, optimized_traj_points);\n+        motion_utils::insertTargetPoint(0, dist_with_margin, optimized_traj_points);\n       if (first_outside_idx_with_margin) {\n         return *first_outside_idx_with_margin;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/4384": [
        {
            "sha": "9d8487be46e34b7cd28e1ab5b3a416d227024fb9",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/scene_module/dynamic_avoidance/dynamic_avoidance_module.hpp",
            "status": "modified",
            "additions": 5,
            "deletions": 1,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0725e857fad95d03712f1cb0d2d19da1a3cc2fc1/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fdynamic_avoidance%2Fdynamic_avoidance_module.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0725e857fad95d03712f1cb0d2d19da1a3cc2fc1/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fdynamic_avoidance%2Fdynamic_avoidance_module.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Fscene_module%2Fdynamic_avoidance%2Fdynamic_avoidance_module.hpp?ref=0725e857fad95d03712f1cb0d2d19da1a3cc2fc1",
            "patch": "@@ -176,7 +176,11 @@ class DynamicAvoidanceModule : public SceneModuleInterface\n     }\n     void update(const std::string & uuid, const double new_variable)\n     {\n-      variable_.emplace(uuid, new_variable);\n+      if (variable_.count(uuid) != 0) {\n+        variable_.at(uuid) = new_variable;\n+      } else {\n+        variable_.emplace(uuid, new_variable);\n+      }\n     }\n \n     std::unordered_map<std::string, double> variable_;"
        }
    ],
    "autowarefoundation/autoware.universe/4399": [
        {
            "sha": "2b57830f6b869e03ce5713a56616182006e070f5",
            "filename": "system/default_ad_api/document/images/autoware-state-table.drawio.svg",
            "status": "modified",
            "additions": 44,
            "deletions": 42,
            "changes": 86,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/68844b0decebeead0ff1b2bd8f0be193696f1f19/system%2Fdefault_ad_api%2Fdocument%2Fimages%2Fautoware-state-table.drawio.svg",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/68844b0decebeead0ff1b2bd8f0be193696f1f19/system%2Fdefault_ad_api%2Fdocument%2Fimages%2Fautoware-state-table.drawio.svg",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdefault_ad_api%2Fdocument%2Fimages%2Fautoware-state-table.drawio.svg?ref=68844b0decebeead0ff1b2bd8f0be193696f1f19",
            "patch": "@@ -3,14 +3,14 @@\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   version=\"1.1\"\n-  width=\"721px\"\n+  width=\"921px\"\n   height=\"201px\"\n-  viewBox=\"-0.5 -0.5 721 201\"\n-  content=\"&lt;mxfile&gt;&lt;diagram id=&quot;DGwK_OstZrDMA8GPxkck&quot; name=&quot;Page-1&quot;&gt;3Zpdk5owFIZ/DffyIbqXravbXnSm073Y61QiZBoTJwY/9tc3QEDMWafMmkYmOuPACVF4OEne92AQL7anF4F2xQ+eYRpEk+wUxM9BFM1mU/VZBc5NIJmlTSAXJGtC4SXwSt6xDk50tCQZ3l8dKDmnkuyug2vOGF7LqxgSgh+vD9twev2rO5RjEHhdIwqjbySThY6G6dOl4RsmeaF/eh7NmoYtag/WV7IvUMaPvVC8DOKF4Fw2W9vTAtOKXcul6be60dqdmMBMDukQ6TM+IFrqi9MnJs/t1QpesgxXHSZB/PVYEIlfd2hdtR7V7VWxQm6p2gvV5oZQuuCUi7pvvJlW7yrOmezFm5eK76Xgf3CvJa1fqkWfGBYSn25eXdgxU7mG+RZLcVaH6A5pojHrPEv17rF309o7UfTu15OOIZ0neffNF5RqQ9O8QRaAfUNEEpavuPjFS4k94mxg7pj+i3NkgXMMOFOuRip5R5JwVhNGXsGO5te0E4ewEwBbcayS2kPOyeRxnKeAM99h0Wb0Vq2nHoGeRo8DnQLQqJS8YzxBB0Qo+k194m2uii55zwBvwtSqWM3X9SxyD2QLaML0c4LBBpo5nFtLxsZIZT6QSphYwAIFasm6nFEQHg3HXI6HwrGRMq0fGutwMtmEE5dwwttwRpg3g0VzB/EuONCelGyPZRAtGo9MDiNgZEowp8YihM6iBjQ2JkOX79QGEyhMx5orkdO5BuqaDWFjmYbN9TtyOoygrtlLvns4FNN1DB5HNkRNCFUN47IGMkY0LjVN+x39oYTo/k4DZoGKaZsGJ4wVKlDMSFGOEIpLxxRBEfPdmvwdlWX/ZB3bxpL/UYEVlWxdBP6V/MyF0ukIh7XVnxRZKACMivBD51AoXi+PZJYsrx76+Uva6cQMy6rPyiX4ncpORRL0G18aH/bCEfUXslNT90FFdmXJ1I2asdOnt1Dte0QWqOOhc4QN4RZDy+ARWrPc41ISx9B3eETWdP9Dyc5tkIVmw2Oyg1czGyWnGPoLj9CC6q/TRQwaC4/Qmg+q3KKFTsJjtP/Ro6ndy79K67beX3Pj5V8=&lt;/diagram&gt;&lt;/mxfile&gt;\"\n+  viewBox=\"-0.5 -0.5 921 201\"\n+  content=\"&lt;mxfile&gt;&lt;diagram id=&quot;DGwK_OstZrDMA8GPxkck&quot; name=&quot;Page-1&quot;&gt;3ZpNc5swEIZ/Sw/cAdnEObbOR3voTKc55JhRjWw0FZJHFraTX18JhI1ZMmESVWFkz9iw4ksPi3bfRRFalsd7ibfFT5ETFqVxfozQTZSmyXw+13/G8txYsuukMWwkze1GZ8MDfSHWGFtrRXOyu9hQCcEU3V4aV4JzslIXNiylOFxuthbs8qxbvCHA8LDCDFofaa4Ka02y63PDd0I3hT31Ir1qGkrcbmx7sitwLg4dE7qN0FIKoZql8rgkzMBruTT73b3SerowSbgas0Nqr3iPWWU7Zy9MPbe9laLiOTE7xBH6diioIg9bvDKtB31/ta1QJdNriV5cU8aWgglZ74vWc/M1dsFVx958tH2npPhLOi1Z/dEtsCu2d3siFTl2TLZr90SURMlnvYltXcws5tbP7Oqhc9PaO1F07te1tWHrJ5vTkc8o9YKl+QpZAPYRU0X55k7I36JSJCDOPcwnpm9xTh1wRoAzE/pJpS9YUcFrwjgo2OnikvbMI+wZgK05GqcOkPMs/jzOc8BZbIlsPbrUATUg0PP0TdDof4HOAGhcKXFiHOM9pgz/YSHx7kdFn459BXhTrqOiGa/rUeQjkB2gSbL3JQwu0Czg2FpxPkUqi5FUkpkDLDBBrfjJZzSEz4bTD8dj4bhwmVYPTfVx6rNJYp9wktfhTNBvRifNJ4gfggPlScV3REXpstHIdD8BRv0UzKuwSKCyqAFNjcnY8J25YAIT06n6Sup1rIF5zZryqQzD/fiden2MYF5D2O6D+bQDKH3VMfQcITQAxUVSk8LAvcZToNLXBqNHFxeuksKIrWQ1QSg+ZUEKI/UPZznepHTpO4u1LuLaUBURV3xVROHVtfrRwOsTDguIvxh2oHInRfhTx1CYoZ3fO9zyjXmzFS5prwMzrB3e6FQ4bFf2Wd0YKBZ+bcTGvcAsXMhelctA2fHOkXKZNGOvryhhth8QWZAdjx0jXCRuCEqGgND2axo+U2IEdUdAZPvqf4Ds4DvHhQuyUGwETHYomg2idVFXQVBfBIQWlDi9BjEoLAJC238b4xctVBIBo/Wp0RCUEHZix5d6TRMW28icKcOlgdj8gtXYzAo5aApPK41QCvZEuJkVkpt99YHqY7mqVQK0AzdgfFl7IBtzNZtGr55nqtZtnfm+6PYf&lt;/diagram&gt;&lt;/mxfile&gt;\"\n >\n   <defs/>\n   <g>\n-    <rect x=\"600\" y=\"20\" width=\"120\" height=\"90\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n+    <rect x=\"800\" y=\"20\" width=\"120\" height=\"90\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n     <rect x=\"0\" y=\"80\" width=\"120\" height=\"20\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n     <g transform=\"translate(-0.5 -0.5)\">\n       <switch>\n@@ -62,13 +62,13 @@\n         <text x=\"420\" y=\"14\" fill=\"#333333\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">routing state</text>\n       </switch>\n     </g>\n-    <rect x=\"480\" y=\"0\" width=\"120\" height=\"20\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n+    <rect x=\"480\" y=\"0\" width=\"320\" height=\"20\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n     <g transform=\"translate(-0.5 -0.5)\">\n       <switch>\n         <foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\">\n           <div\n             xmlns=\"http://www.w3.org/1999/xhtml\"\n-            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 10px; margin-left: 481px;\"\n+            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 318px; height: 1px; padding-top: 10px; margin-left: 481px;\"\n           >\n             <div data-drawio-colors=\"color: #333333; \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\">\n               <div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">\n@@ -77,16 +77,16 @@\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"540\" y=\"14\" fill=\"#333333\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">operation mode</text>\n+        <text x=\"640\" y=\"14\" fill=\"#333333\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">operation mode</text>\n       </switch>\n     </g>\n-    <rect x=\"600\" y=\"0\" width=\"120\" height=\"20\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n+    <rect x=\"800\" y=\"0\" width=\"120\" height=\"20\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n     <g transform=\"translate(-0.5 -0.5)\">\n       <switch>\n         <foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\">\n           <div\n             xmlns=\"http://www.w3.org/1999/xhtml\"\n-            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 10px; margin-left: 601px;\"\n+            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 10px; margin-left: 801px;\"\n           >\n             <div data-drawio-colors=\"color: #333333; \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\">\n               <div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">\n@@ -95,7 +95,7 @@\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"660\" y=\"14\" fill=\"#333333\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">auto mode available</text>\n+        <text x=\"860\" y=\"14\" fill=\"#333333\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">auto mode available</text>\n       </switch>\n     </g>\n     <rect x=\"120\" y=\"20\" width=\"120\" height=\"20\" fill=\"rgb(255, 255, 255)\" stroke=\"rgb(0, 0, 0)\" pointer-events=\"all\"/>\n@@ -260,49 +260,31 @@\n         <text x=\"180\" y=\"194\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">finalizing</text>\n       </switch>\n     </g>\n-    <rect x=\"480\" y=\"100\" width=\"120\" height=\"40\" fill=\"rgb(255, 255, 255)\" stroke=\"rgb(0, 0, 0)\" pointer-events=\"all\"/>\n+    <rect x=\"480\" y=\"100\" width=\"330\" height=\"40\" fill=\"rgb(255, 255, 255)\" stroke=\"rgb(0, 0, 0)\" pointer-events=\"all\"/>\n     <g transform=\"translate(-0.5 -0.5)\">\n       <switch>\n         <foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\">\n           <div\n             xmlns=\"http://www.w3.org/1999/xhtml\"\n-            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 120px; margin-left: 481px;\"\n+            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 328px; height: 1px; padding-top: 120px; margin-left: 481px;\"\n           >\n             <div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\">\n               <div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">\n-                stop\n+                else\n               </div>\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"540\" y=\"124\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">stop</text>\n+        <text x=\"645\" y=\"124\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">else</text>\n       </switch>\n     </g>\n-    <rect x=\"480\" y=\"140\" width=\"120\" height=\"20\" fill=\"rgb(255, 255, 255)\" stroke=\"rgb(0, 0, 0)\" pointer-events=\"all\"/>\n+    <rect x=\"800\" y=\"100\" width=\"120\" height=\"20\" fill=\"rgb(255, 255, 255)\" stroke=\"rgb(0, 0, 0)\" pointer-events=\"all\"/>\n     <g transform=\"translate(-0.5 -0.5)\">\n       <switch>\n         <foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\">\n           <div\n             xmlns=\"http://www.w3.org/1999/xhtml\"\n-            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 150px; margin-left: 481px;\"\n-          >\n-            <div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\">\n-              <div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">\n-                not stop\n-              </div>\n-            </div>\n-          </div>\n-        </foreignObject>\n-        <text x=\"540\" y=\"154\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">not stop</text>\n-      </switch>\n-    </g>\n-    <rect x=\"600\" y=\"100\" width=\"120\" height=\"20\" fill=\"rgb(255, 255, 255)\" stroke=\"rgb(0, 0, 0)\" pointer-events=\"all\"/>\n-    <g transform=\"translate(-0.5 -0.5)\">\n-      <switch>\n-        <foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\">\n-          <div\n-            xmlns=\"http://www.w3.org/1999/xhtml\"\n-            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 110px; margin-left: 601px;\"\n+            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 110px; margin-left: 801px;\"\n           >\n             <div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\">\n               <div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">\n@@ -311,16 +293,16 @@\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"660\" y=\"114\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">false</text>\n+        <text x=\"860\" y=\"114\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">false</text>\n       </switch>\n     </g>\n-    <rect x=\"600\" y=\"120\" width=\"120\" height=\"20\" fill=\"rgb(255, 255, 255)\" stroke=\"rgb(0, 0, 0)\" pointer-events=\"all\"/>\n+    <rect x=\"800\" y=\"120\" width=\"120\" height=\"20\" fill=\"rgb(255, 255, 255)\" stroke=\"rgb(0, 0, 0)\" pointer-events=\"all\"/>\n     <g transform=\"translate(-0.5 -0.5)\">\n       <switch>\n         <foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\">\n           <div\n             xmlns=\"http://www.w3.org/1999/xhtml\"\n-            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 130px; margin-left: 601px;\"\n+            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 130px; margin-left: 801px;\"\n           >\n             <div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\">\n               <div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">\n@@ -329,7 +311,7 @@\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"660\" y=\"134\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">true</text>\n+        <text x=\"860\" y=\"134\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">true</text>\n       </switch>\n     </g>\n     <rect x=\"0\" y=\"20\" width=\"120\" height=\"60\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n@@ -440,18 +422,38 @@\n         <text x=\"60\" y=\"194\" fill=\"#333333\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">Finalizing</text>\n       </switch>\n     </g>\n-    <rect x=\"600\" y=\"140\" width=\"120\" height=\"60\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n+    <rect x=\"800\" y=\"140\" width=\"120\" height=\"60\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n     <rect x=\"360\" y=\"20\" width=\"120\" height=\"60\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n-    <rect x=\"480\" y=\"20\" width=\"120\" height=\"80\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n-    <rect x=\"480\" y=\"160\" width=\"120\" height=\"40\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n+    <rect x=\"480\" y=\"20\" width=\"320\" height=\"80\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n+    <rect x=\"480\" y=\"160\" width=\"320\" height=\"40\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n     <rect x=\"360\" y=\"180\" width=\"120\" height=\"20\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n     <rect x=\"240\" y=\"180\" width=\"120\" height=\"20\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n     <rect x=\"240\" y=\"20\" width=\"120\" height=\"20\" fill=\"#f5f5f5\" stroke=\"#666666\" pointer-events=\"all\"/>\n+    <rect x=\"480\" y=\"140\" width=\"320\" height=\"20\" fill=\"rgb(255, 255, 255)\" stroke=\"rgb(0, 0, 0)\" pointer-events=\"all\"/>\n+    <g transform=\"translate(-0.5 -0.5)\">\n+      <switch>\n+        <foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\">\n+          <div\n+            xmlns=\"http://www.w3.org/1999/xhtml\"\n+            style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 318px; height: 1px; padding-top: 150px; margin-left: 481px;\"\n+          >\n+            <div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\">\n+              <div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">\n+                                mode != stop &amp;&amp; autoware_control_enabled == true\n+                            </div>\n+            </div>\n+          </div>\n+        </foreignObject>\n+        <text x=\"640\" y=\"154\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"12px\" text-anchor=\"middle\">\n+                    mode != stop &amp;&amp; autoware_control_enabled == true\n+                </text>\n+      </switch>\n+    </g>\n   </g>\n   <switch>\n     <g requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\"/>\n     <a transform=\"translate(0,-5)\" xlink:href=\"https://www.diagrams.net/doc/faq/svg-export-text-problems\" target=\"_blank\">\n-      <text text-anchor=\"middle\" font-size=\"10px\" x=\"50%\" y=\"100%\">Viewer does not support full SVG 1.1</text>\n+      <text text-anchor=\"middle\" font-size=\"10px\" x=\"50%\" y=\"100%\">Text is not SVG - cannot display</text>\n     </a>\n   </switch>\n </svg>"
        }
    ],
    "autowarefoundation/autoware.universe/4400": [
        {
            "sha": "9ce34d8482fbdd8528c40af0fc80af3250a8b5a6",
            "filename": "perception/image_projection_based_fusion/src/fusion_node.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/50e66dc3cf1654042faaa4fa782f66117625e15d/perception%2Fimage_projection_based_fusion%2Fsrc%2Ffusion_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/50e66dc3cf1654042faaa4fa782f66117625e15d/perception%2Fimage_projection_based_fusion%2Fsrc%2Ffusion_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2Fsrc%2Ffusion_node.cpp?ref=50e66dc3cf1654042faaa4fa782f66117625e15d",
            "patch": "@@ -166,8 +166,8 @@ void FusionNode<Msg, Obj>::subCallback(const typename Msg::ConstSharedPtr input_\n   if (sub_std_pair_.second != nullptr) {\n     stop_watch_ptr_->toc(\"processing_time\", true);\n     timer_->cancel();\n-    publish(*(sub_std_pair_.second));\n     postprocess(*(sub_std_pair_.second));\n+    publish(*(sub_std_pair_.second));\n     sub_std_pair_.second = nullptr;\n     std::fill(is_fused_.begin(), is_fused_.end(), false);\n \n@@ -260,8 +260,8 @@ void FusionNode<Msg, Obj>::subCallback(const typename Msg::ConstSharedPtr input_\n   // Msg\n   if (std::count(is_fused_.begin(), is_fused_.end(), true) == static_cast<int>(rois_number_)) {\n     timer_->cancel();\n-    publish(*output_msg);\n     postprocess(*output_msg);\n+    publish(*output_msg);\n     std::fill(is_fused_.begin(), is_fused_.end(), false);\n     sub_std_pair_.second = nullptr;\n \n@@ -322,8 +322,8 @@ void FusionNode<Msg, Obj>::roiCallback(\n \n       if (std::count(is_fused_.begin(), is_fused_.end(), true) == static_cast<int>(rois_number_)) {\n         timer_->cancel();\n-        publish(*(sub_std_pair_.second));\n         postprocess(*(sub_std_pair_.second));\n+        publish(*(sub_std_pair_.second));\n         std::fill(is_fused_.begin(), is_fused_.end(), false);\n         sub_std_pair_.second = nullptr;\n \n@@ -362,8 +362,8 @@ void FusionNode<Msg, Obj>::timer_callback()\n     if (sub_std_pair_.second != nullptr) {\n       stop_watch_ptr_->toc(\"processing_time\", true);\n \n-      publish(*(sub_std_pair_.second));\n       postprocess(*(sub_std_pair_.second));\n+      publish(*(sub_std_pair_.second));\n \n       // add processing time for debug\n       if (debug_publisher_) {"
        }
    ],
    "autowarefoundation/autoware.universe/4401": [
        {
            "sha": "d43d73318c5700eb1662b1db0a74574eadf15b43",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b0add2e0677cb3976593e9fbd9094ed4b4f5ab0c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b0add2e0677cb3976593e9fbd9094ed4b4f5ab0c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=b0add2e0677cb3976593e9fbd9094ed4b4f5ab0c",
            "patch": "@@ -681,7 +681,7 @@ bool StartPlannerModule::isOverlappedWithLane(\n \n bool StartPlannerModule::hasFinishedPullOut() const\n {\n-  if (!status_.back_finished) {\n+  if (!status_.back_finished || !status_.is_safe) {\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4405": [
        {
            "sha": "4d97757c3c33e2654f5130e8404f1b496547e55e",
            "filename": "evaluator/planning_evaluator/src/metrics/obstacle_metrics.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3631f69411327e8688d90d2fa1304114d3f33f9b/evaluator%2Fplanning_evaluator%2Fsrc%2Fmetrics%2Fobstacle_metrics.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3631f69411327e8688d90d2fa1304114d3f33f9b/evaluator%2Fplanning_evaluator%2Fsrc%2Fmetrics%2Fobstacle_metrics.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/evaluator%2Fplanning_evaluator%2Fsrc%2Fmetrics%2Fobstacle_metrics.cpp?ref=3631f69411327e8688d90d2fa1304114d3f33f9b",
            "patch": "@@ -64,10 +64,10 @@ Stat<double> calcTimeToCollision(\n       const double dt = traj_dist / std::abs(p0.longitudinal_velocity_mps);\n       t += dt;\n       for (auto obstacle : obstacles.objects) {\n-        const double obst_dist =\n+        const double obstacle_dist =\n           calcDistance2d(p, obstacle.kinematics.initial_pose_with_covariance.pose);\n         // TODO(Maxime CLEMENT): take shape into consideration\n-        if (obst_dist <= distance_threshold) {\n+        if (obstacle_dist <= distance_threshold) {\n           stat.add(t);\n           break;\n         }"
        }
    ],
    "autowarefoundation/autoware.universe/4406": [
        {
            "sha": "6988ed66bb2ea25cc29c5ff1e19cf1e24ff11932",
            "filename": "launch/tier4_perception_launch/launch/traffic_light_recognition/traffic_light.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7c1326753f1dc69c880600d759b871cf9051d705/launch%2Ftier4_perception_launch%2Flaunch%2Ftraffic_light_recognition%2Ftraffic_light.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7c1326753f1dc69c880600d759b871cf9051d705/launch%2Ftier4_perception_launch%2Flaunch%2Ftraffic_light_recognition%2Ftraffic_light.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Ftraffic_light_recognition%2Ftraffic_light.launch.xml?ref=7c1326753f1dc69c880600d759b871cf9051d705",
            "patch": "@@ -27,7 +27,7 @@\n     <let name=\"map_based_detector_output_topic\" value=\"$(var output/rois1)\" unless=\"$(var enable_fine_detection)\"/>\n \n     <group unless=\"$(var fusion_only)\">\n-      <node pkg=\"topic_tools\" exec=\"relay\" name=\"traffic_light_camra_info_relay\" args=\"$(var input/camera_info) camera_info\"/>\n+      <node pkg=\"topic_tools\" exec=\"relay\" name=\"traffic_light_camera_info_relay\" args=\"$(var input/camera_info) camera_info\"/>\n       <group>\n         <push-ros-namespace namespace=\"detection\"/>\n         <include file=\"$(find-pkg-share traffic_light_map_based_detector)/launch/traffic_light_map_based_detector.launch.xml\">\n@@ -77,7 +77,7 @@\n     <let name=\"map_based_detector_output_topic\" value=\"rois\" unless=\"$(var enable_fine_detection)\"/>\n \n     <group unless=\"$(var fusion_only)\">\n-      <node pkg=\"topic_tools\" exec=\"relay\" name=\"traffic_light_camra_info_relay\" args=\"$(var input/camera_info) camera_info\"/>\n+      <node pkg=\"topic_tools\" exec=\"relay\" name=\"traffic_light_camera_info_relay\" args=\"$(var input/camera_info) camera_info\"/>\n       <group>\n         <push-ros-namespace namespace=\"detection\"/>\n         <include file=\"$(find-pkg-share traffic_light_map_based_detector)/launch/traffic_light_map_based_detector.launch.xml\">"
        }
    ],
    "autowarefoundation/autoware.universe/4407": [
        {
            "sha": "e4f121bb9d62d7ece03caa26b04b76a07b4fec65",
            "filename": "planning/behavior_path_planner/src/scene_module/dynamic_avoidance/dynamic_avoidance_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7d5f76c74ad52839bee443dc0359150c5ebedfff/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fdynamic_avoidance%2Fdynamic_avoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7d5f76c74ad52839bee443dc0359150c5ebedfff/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fdynamic_avoidance%2Fdynamic_avoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fdynamic_avoidance%2Fdynamic_avoidance_module.cpp?ref=7d5f76c74ad52839bee443dc0359150c5ebedfff",
            "patch": "@@ -372,7 +372,10 @@ DynamicAvoidanceModule::calcTargetObjectsCandidate()\n     const bool is_object_on_ego_path =\n       obj_dist_to_path <\n       planner_data_->parameters.vehicle_width / 2.0 + parameters_->min_obj_lat_offset_to_ego_path;\n-    if (is_object_on_ego_path && std::abs(obj_angle) < parameters_->max_front_object_angle) {\n+    const bool is_object_aligned_to_path =\n+      std::abs(obj_angle) < parameters_->max_front_object_angle ||\n+      M_PI - parameters_->max_front_object_angle < std::abs(obj_angle);\n+    if (is_object_on_ego_path && is_object_aligned_to_path) {\n       continue;\n     }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4410": [
        {
            "sha": "863d985da5ecefd2da360b9db04c60190b163f39",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 9,
            "deletions": 2,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b340fefb26014aa0e7c1a9340440d0a582cbd71d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b340fefb26014aa0e7c1a9340440d0a582cbd71d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=b340fefb26014aa0e7c1a9340440d0a582cbd71d",
            "patch": "@@ -1108,8 +1108,15 @@ TurnSignalInfo GoalPlannerModule::calcTurnSignalInfo() const\n     const double distance_to_end =\n       calcSignedArcLength(full_path.points, current_pose.position, end_pose.position);\n     const bool is_before_end_pose = distance_to_end >= 0.0;\n-    turn_signal.turn_signal.command =\n-      is_before_end_pose ? TurnIndicatorsCommand::ENABLE_LEFT : TurnIndicatorsCommand::NO_COMMAND;\n+    if (is_before_end_pose) {\n+      if (left_side_parking_) {\n+        turn_signal.turn_signal.command = TurnIndicatorsCommand::ENABLE_LEFT;\n+      } else {\n+        turn_signal.turn_signal.command = TurnIndicatorsCommand::ENABLE_RIGHT;\n+      }\n+    } else {\n+      turn_signal.turn_signal.command = TurnIndicatorsCommand::NO_COMMAND;\n+    }\n   }\n \n   // calc desired/required start/end point"
        }
    ],
    "autowarefoundation/autoware.universe/4426": [
        {
            "sha": "366820a725018356e13fe228aa5d8e7396726dc5",
            "filename": "perception/traffic_light_occlusion_predictor/src/nodelet.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/498809c432c013933a4f50bb5d903369f7872a6e/perception%2Ftraffic_light_occlusion_predictor%2Fsrc%2Fnodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/498809c432c013933a4f50bb5d903369f7872a6e/perception%2Ftraffic_light_occlusion_predictor%2Fsrc%2Fnodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_occlusion_predictor%2Fsrc%2Fnodelet.cpp?ref=498809c432c013933a4f50bb5d903369f7872a6e",
            "patch": "@@ -117,7 +117,7 @@ void TrafficLightOcclusionPredictorNodelet::syncCallback(\n   if (\n     in_cloud_msg == nullptr || in_cam_info_msg == nullptr || in_roi_msg == nullptr ||\n     in_roi_msg->rois.size() != in_signal_msg->signals.size()) {\n-    occlusion_ratios.resize(in_roi_msg->rois.size(), 0);\n+    occlusion_ratios.resize(out_msg.signals.size(), 0);\n   } else {\n     cloud_occlusion_predictor_->predict(\n       in_cam_info_msg, in_roi_msg, in_cloud_msg, tf_buffer_, traffic_light_position_map_,"
        }
    ],
    "autowarefoundation/autoware.universe/4427": [
        {
            "sha": "01ec679a82efc106c6eabb93c892cc7d17196b29",
            "filename": "perception/image_projection_based_fusion/src/pointpainting_fusion/node.cpp",
            "status": "modified",
            "additions": 18,
            "deletions": 0,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/33815b3760751f607761d9d1d1698706df350f13/perception%2Fimage_projection_based_fusion%2Fsrc%2Fpointpainting_fusion%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/33815b3760751f607761d9d1d1698706df350f13/perception%2Fimage_projection_based_fusion%2Fsrc%2Fpointpainting_fusion%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2Fsrc%2Fpointpainting_fusion%2Fnode.cpp?ref=33815b3760751f607761d9d1d1698706df350f13",
            "patch": "@@ -180,6 +180,12 @@ PointPaintingFusionNode::PointPaintingFusionNode(const rclcpp::NodeOptions & opt\n \n void PointPaintingFusionNode::preprocess(sensor_msgs::msg::PointCloud2 & painted_pointcloud_msg)\n {\n+  if (painted_pointcloud_msg.data.empty() || painted_pointcloud_msg.fields.empty()) {\n+    RCLCPP_WARN_STREAM_THROTTLE(\n+      this->get_logger(), *this->get_clock(), 1000, \"Empty sensor points!\");\n+    return;\n+  }\n+\n   sensor_msgs::msg::PointCloud2 tmp;\n   tmp = painted_pointcloud_msg;\n \n@@ -232,6 +238,12 @@ void PointPaintingFusionNode::fuseOnSingleImage(\n   const sensor_msgs::msg::CameraInfo & camera_info,\n   sensor_msgs::msg::PointCloud2 & painted_pointcloud_msg)\n {\n+  if (painted_pointcloud_msg.data.empty() || painted_pointcloud_msg.fields.empty()) {\n+    RCLCPP_WARN_STREAM_THROTTLE(\n+      this->get_logger(), *this->get_clock(), 1000, \"Empty sensor points!\");\n+    return;\n+  }\n+\n   auto num_bbox = (input_roi_msg.feature_objects).size();\n   if (num_bbox == 0) {\n     return;\n@@ -342,6 +354,12 @@ void PointPaintingFusionNode::postprocess(sensor_msgs::msg::PointCloud2 & painte\n     return;\n   }\n \n+  if (painted_pointcloud_msg.data.empty() || painted_pointcloud_msg.fields.empty()) {\n+    RCLCPP_WARN_STREAM_THROTTLE(\n+      this->get_logger(), *this->get_clock(), 1000, \"Empty sensor points!\");\n+    return;\n+  }\n+\n   std::vector<centerpoint::Box3D> det_boxes3d;\n   bool is_success = detector_ptr_->detect(painted_pointcloud_msg, tf_buffer_, det_boxes3d);\n   if (!is_success) {"
        }
    ],
    "autowarefoundation/autoware.universe/4431": [
        {
            "sha": "b2e245c5cbf4f176b901ea59b3583cba013e75cb",
            "filename": "sensing/pointcloud_preprocessor/launch/preprocessor.launch.py",
            "status": "modified",
            "additions": 33,
            "deletions": 32,
            "changes": 65,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bf8a968da98fd20416328edb74fde17ee6a28211/sensing%2Fpointcloud_preprocessor%2Flaunch%2Fpreprocessor.launch.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bf8a968da98fd20416328edb74fde17ee6a28211/sensing%2Fpointcloud_preprocessor%2Flaunch%2Fpreprocessor.launch.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Flaunch%2Fpreprocessor.launch.py?ref=bf8a968da98fd20416328edb74fde17ee6a28211",
            "patch": "@@ -15,41 +15,25 @@\n import launch\n from launch.actions import DeclareLaunchArgument\n from launch.actions import LogInfo\n+from launch.actions import OpaqueFunction\n from launch.substitutions import LaunchConfiguration\n from launch.substitutions import PythonExpression\n from launch_ros.actions import ComposableNodeContainer\n from launch_ros.descriptions import ComposableNode\n \n \n-def generate_launch_description():\n+def launch_setup(context, *args, **kwargs):\n     ns = \"pointcloud_preprocessor\"\n     pkg = \"pointcloud_preprocessor\"\n \n-    # declare launch arguments\n-    input_points_raw_list_param = DeclareLaunchArgument(\n-        \"input_points_raw_list\",\n-        default_value=\"['/points_raw']\",\n-        description=\"Input pointcloud topic_name list as a string_array. \"\n-        \"To subscribe multiple topics, write as: \\\"['/points_raw0', '/points_raw1', ...]\\\"\",\n-    )\n-\n-    output_points_raw_param = DeclareLaunchArgument(\n-        \"output_points_raw\", default_value=\"/points_raw/cropbox/filtered\"\n-    )\n-\n-    tf_output_frame_param = DeclareLaunchArgument(\"tf_output_frame\", default_value=\"base_link\")\n-\n-    # set concat filter as a component\n-    separate_concatenate_node_and_timesync_node_str = DeclareLaunchArgument(\n-        \"separate_concatenate_node_and_timesync_node\",\n-        default_value=\"false\",\n-        description=\"Set True to separate concatenate node and timesync node. which will cause to larger memory usage.\",\n-    )\n-    separate_concatenate_node_and_timesync_node = (\n-        separate_concatenate_node_and_timesync_node_str.lower() == \"true\"\n+    separate_concatenate_node_and_timesync_node = LaunchConfiguration(\n+        \"separate_concatenate_node_and_timesync_node\"\n+    ).perform(context)\n+    is_separate_concatenate_node_and_timesync_node = (\n+        separate_concatenate_node_and_timesync_node.lower() == \"true\"\n     )\n \n-    if not separate_concatenate_node_and_timesync_node:\n+    if not is_separate_concatenate_node_and_timesync_node:\n         sync_and_concat_component = ComposableNode(\n             package=pkg,\n             plugin=\"pointcloud_preprocessor::PointCloudConcatenateDataSynchronizerComponent\",\n@@ -150,13 +134,30 @@ def generate_launch_description():\n             ]\n         )\n     )\n+    return [container, log_info]\n \n-    return launch.LaunchDescription(\n-        [\n-            input_points_raw_list_param,\n-            output_points_raw_param,\n-            tf_output_frame_param,\n-            container,\n-            log_info,\n-        ]\n+\n+def generate_launch_description():\n+    launch_arguments = []\n+\n+    def add_launch_arg(name: str, default_value=None, description=None):\n+        # a default_value of None is equivalent to not passing that kwarg at all\n+        launch_arguments.append(\n+            DeclareLaunchArgument(name, default_value=default_value, description=description)\n+        )\n+\n+    add_launch_arg(\n+        \"input_points_raw_list\",\n+        [\"/points_raw\"],\n+        \"Input pointcloud topic_name list as a string_array. \"\n+        \"To subscribe multiple topics, write as: \\\"['/points_raw0', '/points_raw1', ...]\\\"\",\n     )\n+    add_launch_arg(\"output_points_raw\", \"/points_raw/cropbox/filtered\")\n+    add_launch_arg(\"tf_output_frame\", \"base_link\")\n+    add_launch_arg(\n+        \"separate_concatenate_node_and_timesync_node\",\n+        \"true\",\n+        \"Set True to separate concatenate node and timesync node. which will cause to larger memory usage.\",\n+    )\n+\n+    return launch.LaunchDescription(launch_arguments + [OpaqueFunction(function=launch_setup)])"
        }
    ],
    "autowarefoundation/autoware.universe/4444": [
        {
            "sha": "9180b18adeed8fc37be7aa8510bb2f3ea2332191",
            "filename": "perception/image_projection_based_fusion/src/roi_cluster_fusion/node.cpp",
            "status": "modified",
            "additions": 29,
            "deletions": 28,
            "changes": 57,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/07fc9d2514e3a2d2cc8df55139f7ee92c089179c/perception%2Fimage_projection_based_fusion%2Fsrc%2Froi_cluster_fusion%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/07fc9d2514e3a2d2cc8df55139f7ee92c089179c/perception%2Fimage_projection_based_fusion%2Fsrc%2Froi_cluster_fusion%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2Fsrc%2Froi_cluster_fusion%2Fnode.cpp?ref=07fc9d2514e3a2d2cc8df55139f7ee92c089179c",
            "patch": "@@ -191,38 +191,39 @@ void RoiClusterFusionNode::fuseOnSingleImage(\n         max_iou = iou + iou_x + iou_y;\n       }\n     }\n-    bool is_roi_label_known = feature_obj.object.classification.front().label !=\n-                              autoware_auto_perception_msgs::msg::ObjectClassification::UNKNOWN;\n-    bool is_roi_existence_prob_higher =\n-      output_cluster_msg.feature_objects.at(index).object.existence_probability <=\n-      feature_obj.object.existence_probability;\n-    if (iou_threshold_ < max_iou && is_roi_existence_prob_higher && is_roi_label_known) {\n-      output_cluster_msg.feature_objects.at(index).object.classification =\n-        feature_obj.object.classification;\n-\n-      // Update existence_probability for fused objects\n-      if (\n-        output_cluster_msg.feature_objects.at(index).object.existence_probability <\n-        min_roi_existence_prob_) {\n-        output_cluster_msg.feature_objects.at(index).object.existence_probability =\n-          min_roi_existence_prob_;\n+    if (!output_cluster_msg.feature_objects.empty()) {\n+      bool is_roi_label_known = feature_obj.object.classification.front().label !=\n+                                autoware_auto_perception_msgs::msg::ObjectClassification::UNKNOWN;\n+      bool is_roi_existence_prob_higher =\n+        output_cluster_msg.feature_objects.at(index).object.existence_probability <=\n+        feature_obj.object.existence_probability;\n+      if (iou_threshold_ < max_iou && is_roi_existence_prob_higher && is_roi_label_known) {\n+        output_cluster_msg.feature_objects.at(index).object.classification =\n+          feature_obj.object.classification;\n+\n+        // Update existence_probability for fused objects\n+        if (\n+          output_cluster_msg.feature_objects.at(index).object.existence_probability <\n+          min_roi_existence_prob_) {\n+          output_cluster_msg.feature_objects.at(index).object.existence_probability =\n+            min_roi_existence_prob_;\n+        }\n       }\n-    }\n \n-    // fuse with unknown roi\n-\n-    if (unknown_iou_threshold_ < max_iou && is_roi_existence_prob_higher && !is_roi_label_known) {\n-      output_cluster_msg.feature_objects.at(index).object.classification =\n-        feature_obj.object.classification;\n-      // Update existence_probability for fused objects\n-      if (\n-        output_cluster_msg.feature_objects.at(index).object.existence_probability <\n-        min_roi_existence_prob_) {\n-        output_cluster_msg.feature_objects.at(index).object.existence_probability =\n-          min_roi_existence_prob_;\n+      // fuse with unknown roi\n+\n+      if (unknown_iou_threshold_ < max_iou && is_roi_existence_prob_higher && !is_roi_label_known) {\n+        output_cluster_msg.feature_objects.at(index).object.classification =\n+          feature_obj.object.classification;\n+        // Update existence_probability for fused objects\n+        if (\n+          output_cluster_msg.feature_objects.at(index).object.existence_probability <\n+          min_roi_existence_prob_) {\n+          output_cluster_msg.feature_objects.at(index).object.existence_probability =\n+            min_roi_existence_prob_;\n+        }\n       }\n     }\n-\n     debug_image_rois.push_back(feature_obj.feature.roi);\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4445": [
        {
            "sha": "efb38edbd4e12146c23697df0af2bfacef4285ac",
            "filename": "perception/image_projection_based_fusion/src/roi_cluster_fusion/node.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 1,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c81a2f9ff7a9747b170dc38705969b64b92df1e1/perception%2Fimage_projection_based_fusion%2Fsrc%2Froi_cluster_fusion%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c81a2f9ff7a9747b170dc38705969b64b92df1e1/perception%2Fimage_projection_based_fusion%2Fsrc%2Froi_cluster_fusion%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2Fsrc%2Froi_cluster_fusion%2Fnode.cpp?ref=c81a2f9ff7a9747b170dc38705969b64b92df1e1",
            "patch": "@@ -169,7 +169,8 @@ void RoiClusterFusionNode::fuseOnSingleImage(\n   }\n \n   for (const auto & feature_obj : input_roi_msg.feature_objects) {\n-    int index = 0;\n+    int index = -1;\n+    bool associated = false;\n     double max_iou = 0.0;\n     for (const auto & cluster_map : m_cluster_roi) {\n       double iou(0.0), iou_x(0.0), iou_y(0.0);\n@@ -189,8 +190,14 @@ void RoiClusterFusionNode::fuseOnSingleImage(\n       if (max_iou < iou + iou_x + iou_y && passed_inside_cluster_gate) {\n         index = cluster_map.first;\n         max_iou = iou + iou_x + iou_y;\n+        associated = true;\n       }\n     }\n+\n+    if (!associated) {\n+      continue;\n+    }\n+\n     if (!output_cluster_msg.feature_objects.empty()) {\n       bool is_roi_label_known = feature_obj.object.classification.front().label !=\n                                 autoware_auto_perception_msgs::msg::ObjectClassification::UNKNOWN;"
        }
    ],
    "autowarefoundation/autoware.universe/4457": [
        {
            "sha": "f9f9d46fa0a2b7169fa828ce77701114700adc2a",
            "filename": "planning/behavior_velocity_intersection_module/src/scene_intersection.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ae12626671e5c93b4667d642ae0111c2d4f18f8c/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ae12626671e5c93b4667d642ae0111c2d4f18f8c/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp?ref=ae12626671e5c93b4667d642ae0111c2d4f18f8c",
            "patch": "@@ -890,7 +890,8 @@ IntersectionModule::DecisionResult IntersectionModule::modifyPathVelocityDetail(\n     const bool approached_stop_line =\n       (std::fabs(dist_stopline) < planner_param_.common.stop_overshoot_margin);\n     const bool over_stop_line = (dist_stopline < 0.0);\n-    const bool is_stopped = planner_data_->isVehicleStopped();\n+    const bool is_stopped =\n+      planner_data_->isVehicleStopped(planner_param_.occlusion.before_creep_stop_time);\n     if (over_stop_line) {\n       before_creep_state_machine_.setState(StateMachine::State::GO);\n     }\n@@ -908,8 +909,7 @@ IntersectionModule::DecisionResult IntersectionModule::modifyPathVelocityDetail(\n     } else {\n       if (is_stopped && approached_stop_line) {\n         // start waiting at the first stop line\n-        before_creep_state_machine_.setStateWithMarginTime(\n-          StateMachine::State::GO, logger_.get_child(\"occlusion state_machine\"), *clock_);\n+        before_creep_state_machine_.setState(StateMachine::State::GO);\n       }\n       is_peeking_ = true;\n       return IntersectionModule::FirstWaitBeforeOcclusion{"
        }
    ],
    "autowarefoundation/autoware.universe/4464": [
        {
            "sha": "217430ee72d81078b123811c87ad8240d1435ce2",
            "filename": "perception/traffic_light_arbiter/src/traffic_light_arbiter.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d43163136e30b57dc79937776a9b8baabf6bb971/perception%2Ftraffic_light_arbiter%2Fsrc%2Ftraffic_light_arbiter.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d43163136e30b57dc79937776a9b8baabf6bb971/perception%2Ftraffic_light_arbiter%2Fsrc%2Ftraffic_light_arbiter.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_arbiter%2Fsrc%2Ftraffic_light_arbiter.cpp?ref=d43163136e30b57dc79937776a9b8baabf6bb971",
            "patch": "@@ -99,7 +99,7 @@ void TrafficLightArbiter::onExternalMsg(const TrafficSignalArray::ConstSharedPtr\n   if (\n     (rclcpp::Time(msg->stamp) - rclcpp::Time(latest_perception_msg_.stamp)).seconds() >\n     perception_time_tolerance_) {\n-    latest_external_msg_.signals.clear();\n+    latest_perception_msg_.signals.clear();\n   }\n \n   arbitrateAndPublish(msg->stamp);"
        }
    ],
    "autowarefoundation/autoware.universe/4479": [
        {
            "sha": "da82fb14ea6d8962d0201092c46e174bd8949a0c",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/049708220b0855e6418be0e3283eac62180dde5f/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/049708220b0855e6418be0e3283eac62180dde5f/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=049708220b0855e6418be0e3283eac62180dde5f",
            "patch": "@@ -441,8 +441,8 @@ void ObstacleAvoidancePlanner::insertZeroVelocityOutsideDrivableArea(\n   if (first_outside_idx) {\n     debug_data_ptr_->stop_pose_by_drivable_area = optimized_traj_points.at(*first_outside_idx).pose;\n     const auto stop_idx = [&]() {\n-      const auto dist = tier4_autoware_utils::calcDistance2d(\n-        optimized_traj_points.at(0), optimized_traj_points.at(*first_outside_idx));\n+      const auto dist =\n+        motion_utils::calcSignedArcLength(optimized_traj_points, 0, *first_outside_idx);\n       const auto dist_with_margin = dist - vehicle_stop_margin_outside_drivable_area_;\n       const auto first_outside_idx_with_margin =\n         motion_utils::insertTargetPoint(0, dist_with_margin, optimized_traj_points);"
        }
    ],
    "autowarefoundation/autoware.universe/4480": [
        {
            "sha": "04a208eee41661a857cd9b0b74f2df1873c32ad1",
            "filename": "planning/behavior_velocity_crosswalk_module/docs/ttc-ttv.svg",
            "status": "modified",
            "additions": 8,
            "deletions": 8,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5ee7b9cc661c6aeeb1aed37c468cb05abb5db2ed/planning%2Fbehavior_velocity_crosswalk_module%2Fdocs%2Fttc-ttv.svg",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5ee7b9cc661c6aeeb1aed37c468cb05abb5db2ed/planning%2Fbehavior_velocity_crosswalk_module%2Fdocs%2Fttc-ttv.svg",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_crosswalk_module%2Fdocs%2Fttc-ttv.svg?ref=5ee7b9cc661c6aeeb1aed37c468cb05abb5db2ed",
            "patch": "@@ -55,12 +55,12 @@\n               <div\n                 style=\"display: inline-block; font-size: 20px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; font-style: italic; white-space: normal; overflow-wrap: normal;\"\n               >\n-                TTV = TTC + ego_pass_later_margin\n+                TTV = TTC + ego_pass_first_margin\n               </div>\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"1045\" y=\"241\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"20px\" text-anchor=\"middle\" font-style=\"italic\">TTV = TTC + ego_pass_later_margin</text>\n+        <text x=\"1045\" y=\"241\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"20px\" text-anchor=\"middle\" font-style=\"italic\">TTV = TTC + ego_pass_first_margin</text>\n       </switch>\n     </g>\n     <rect x=\"760\" y=\"0\" width=\"340\" height=\"30\" fill=\"none\" stroke=\"none\" pointer-events=\"all\"/>\n@@ -75,12 +75,12 @@\n               <div\n                 style=\"display: inline-block; font-size: 20px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; font-style: italic; white-space: normal; overflow-wrap: normal;\"\n               >\n-                TTC = TTV + ego_pass_first_margin\n+                TTC = TTV + ego_pass_later_margin\n               </div>\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"930\" y=\"21\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"20px\" text-anchor=\"middle\" font-style=\"italic\">TTC = TTV + ego_pass_first_margin</text>\n+        <text x=\"930\" y=\"21\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"20px\" text-anchor=\"middle\" font-style=\"italic\">TTC = TTV + ego_pass_later_margin</text>\n       </switch>\n     </g>\n     <path d=\"M 640 90 Q 690 90 695 65 Q 700 40 760 15\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/>\n@@ -160,13 +160,13 @@\n               <div\n                 style=\"display: inline-block; font-size: 15px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; font-style: italic; white-space: normal; overflow-wrap: normal;\"\n               >\n-                ego_pass_later_margin\n+                ego_pass_first_margin\n                 <span style=\"font-style: normal; font-size: 15px;\">[s]</span>\n               </div>\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"855\" y=\"390\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"15px\" text-anchor=\"middle\" font-style=\"italic\">ego_pass_later_margin [s]</text>\n+        <text x=\"855\" y=\"390\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"15px\" text-anchor=\"middle\" font-style=\"italic\">ego_pass_first_margin [s]</text>\n       </switch>\n     </g>\n     <rect x=\"760\" y=\"330\" width=\"200\" height=\"30\" fill=\"none\" stroke=\"none\" pointer-events=\"all\"/>\n@@ -181,13 +181,13 @@\n               <div\n                 style=\"display: inline-block; font-size: 15px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; font-style: italic; white-space: normal; overflow-wrap: normal;\"\n               >\n-                ego_pass_pass_margin\n+                ego_pass_later_margin\n                 <span style=\"font-style: normal; font-size: 15px;\">[s]</span>\n               </div>\n             </div>\n           </div>\n         </foreignObject>\n-        <text x=\"860\" y=\"350\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"15px\" text-anchor=\"middle\" font-style=\"italic\">ego_pass_pass_margin [s]</text>\n+        <text x=\"860\" y=\"350\" fill=\"rgb(0, 0, 0)\" font-family=\"Helvetica\" font-size=\"15px\" text-anchor=\"middle\" font-style=\"italic\">ego_pass_later_margin [s]</text>\n       </switch>\n     </g>\n     <path d=\"M 560 309.75 Q 610 309.75 630 329.88 Q 650 350 760 345\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/4481": [
        {
            "sha": "fa214abc9a56439324cf853bf8f76cac3ca92436",
            "filename": "control/mpc_lateral_controller/model_predictive_control_algorithm.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6174643dd06df69d116f5249cd8bacd5842652ee/control%2Fmpc_lateral_controller%2Fmodel_predictive_control_algorithm.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6174643dd06df69d116f5249cd8bacd5842652ee/control%2Fmpc_lateral_controller%2Fmodel_predictive_control_algorithm.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fmpc_lateral_controller%2Fmodel_predictive_control_algorithm.md?ref=6174643dd06df69d116f5249cd8bacd5842652ee",
            "patch": "@@ -125,7 +125,7 @@ Substituting equation (8) into equation (9) and tidying up the equation for $U$.\n $$\n \\begin{align}\n J(U) &= (H(Fx_{0}+GU+SW)-Y_{ref})^{T}Q(H(Fx_{0}+GU+SW)-Y_{ref})+(U-U_{ref})^{T}R(U-U_{ref}) \\\\\n-& =U^{T}(G^{T}H^{T}QHG+R)U+2\\left\\{(H(Fx_{0}+SW)-Yref)^{T}QHG-U_{ref}^{T}R\\right\\}U +(\\rm{constant}) \\tag{10}\n+& =U^{T}(G^{T}H^{T}QHG+R)U+2\\left\\{(H(Fx_{0}+SW)-Y_{ref})^{T}QHG-U_{ref}^{T}R\\right\\}U +(\\rm{constant}) \\tag{10}\n \\end{align}\n $$\n \n@@ -182,7 +182,7 @@ Where $\\kappa_{r}\\left(s\\right)$ is the curvature along the trajectory parametri\n \n There are three expressions in the update equations that are subject to linear approximation: the lateral deviation (or lateral coordinate) $y$, the heading angle (or the heading angle error) $\\theta$, and the steering $\\delta$. We can make a small angle assumption on the heading angle $\\theta$.\n \n-In the path tracking problem, the curvature of the trajectory $\\kappa_{r}$ is known in advance. At the lower speeds, the Ackermann formula approximates the reference steering angle $\\theta_{r}$(this value corresponds to the $U_{ref}$ mentioned above). The Ackerman steering expression can be written as;\n+In the path tracking problem, the curvature of the trajectory $\\kappa_{r}$ is known in advance. At the lower speeds, the Ackermann formula approximates the reference steering angle $\\theta_{r}$(this value corresponds to the $U_{ref}$ mentioned above). The Ackermann steering expression can be written as;\n \n $$\n \\begin{align}\n@@ -344,7 +344,7 @@ $$\n \\end{align}\n $$\n \n-Discretizing $\\dot{u}$ as $\\left(u_{k} - u_{k-1}\\right)/\\text{d}t$ and multiply both sides by dt the resulting constraint become linear and convex\n+We discretize $\\dot{u}$ as $\\left(u_{k} - u_{k-1}\\right)/\\text{d}t$ and multiply both sides by dt, and the resulting constraint become linear and convex\n \n $$\n \\begin{align}"
        }
    ],
    "autowarefoundation/autoware.universe/4485": [
        {
            "sha": "2412fd5d57602c21d788a04db205e1b9abcef36a",
            "filename": "localization/gyro_odometer/src/gyro_odometer_core.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/646d25792c2082092f1ad3de45bd7c5a58acf710/localization%2Fgyro_odometer%2Fsrc%2Fgyro_odometer_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/646d25792c2082092f1ad3de45bd7c5a58acf710/localization%2Fgyro_odometer%2Fsrc%2Fgyro_odometer_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fgyro_odometer%2Fsrc%2Fgyro_odometer_core.cpp?ref=646d25792c2082092f1ad3de45bd7c5a58acf710",
            "patch": "@@ -102,7 +102,7 @@ geometry_msgs::msg::TwistWithCovarianceStamped concatGyroAndOdometer(\n \n GyroOdometer::GyroOdometer(const rclcpp::NodeOptions & options)\n : Node(\"gyro_odometer\", options),\n-  output_frame_(declare_parameter(\"base_link\", \"base_link\")),\n+  output_frame_(declare_parameter(\"output_frame\", \"base_link\")),\n   message_timeout_sec_(declare_parameter(\"message_timeout_sec\", 0.2)),\n   vehicle_twist_arrived_(false),\n   imu_arrived_(false)"
        }
    ],
    "autowarefoundation/autoware.universe/4486": [
        {
            "sha": "d40d2711128142435fb29d5e1a634439d4a08857",
            "filename": "planning/obstacle_avoidance_planner/src/node.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 3,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/73b562ec9e7538ab140eab1b025226e7ff363601/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/73b562ec9e7538ab140eab1b025226e7ff363601/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_avoidance_planner%2Fsrc%2Fnode.cpp?ref=73b562ec9e7538ab140eab1b025226e7ff363601",
            "patch": "@@ -389,11 +389,18 @@ void ObstacleAvoidancePlanner::applyInputVelocity(\n   const auto stop_idx = motion_utils::searchZeroVelocityIndex(forward_cropped_input_traj_points);\n   if (stop_idx) {\n     const auto input_stop_pose = forward_cropped_input_traj_points.at(stop_idx.get()).pose;\n-    const size_t stop_seg_idx = trajectory_utils::findEgoSegmentIndex(\n-      output_traj_points, input_stop_pose, ego_nearest_param_);\n+    // NOTE: motion_utils::findNearestSegmentIndex is used instead of\n+    // trajectory_utils::findEgoSegmentIndex\n+    //       for the case where input_traj_points is much longer than output_traj_points, and the\n+    //       former has a stop point but the latter will not have.\n+    const auto stop_seg_idx = motion_utils::findNearestSegmentIndex(\n+      output_traj_points, input_stop_pose, ego_nearest_param_.dist_threshold,\n+      ego_nearest_param_.yaw_threshold);\n \n     // calculate and insert stop pose on output trajectory\n-    trajectory_utils::insertStopPoint(output_traj_points, input_stop_pose, stop_seg_idx);\n+    if (stop_seg_idx) {\n+      trajectory_utils::insertStopPoint(output_traj_points, input_stop_pose, *stop_seg_idx);\n+    }\n   }\n \n   time_keeper_ptr_->toc(__func__, \"    \");"
        }
    ],
    "autowarefoundation/autoware.universe/4489": [
        {
            "sha": "4b6deaac42d1b8cbda6c350d4f64041e40065d71",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 16,
            "deletions": 11,
            "changes": 27,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/edecb3301676c8ef4899a29253d6d3800a95b50f/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/edecb3301676c8ef4899a29253d6d3800a95b50f/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=edecb3301676c8ef4899a29253d6d3800a95b50f",
            "patch": "@@ -81,28 +81,33 @@ template <class T>\n size_t findNearestSegmentIndexFromLateralDistance(\n   const std::vector<T> & points, const geometry_msgs::msg::Point & target_point)\n {\n-  size_t closest_idx = motion_utils::findNearestSegmentIndex(points, target_point);\n-  double min_lateral_dist =\n-    std::fabs(motion_utils::calcLateralOffset(points, target_point, closest_idx));\n-\n+  std::optional<size_t> closest_idx{std::nullopt};\n+  double min_lateral_dist = std::numeric_limits<double>::max();\n   for (size_t seg_idx = 0; seg_idx < points.size() - 1; ++seg_idx) {\n     const double lon_dist =\n       motion_utils::calcLongitudinalOffsetToSegment(points, seg_idx, target_point);\n     const double segment_length =\n       tier4_autoware_utils::calcDistance2d(points.at(seg_idx), points.at(seg_idx + 1));\n-    if (lon_dist < 0.0 || segment_length < lon_dist) {\n-      continue;\n-    }\n-\n-    const double lat_dist =\n-      std::fabs(motion_utils::calcLateralOffset(points, target_point, seg_idx));\n+    const double lat_dist = [&]() {\n+      if (lon_dist < 0.0) {\n+        return tier4_autoware_utils::calcDistance2d(points.at(seg_idx), target_point);\n+      }\n+      if (segment_length < lon_dist) {\n+        return tier4_autoware_utils::calcDistance2d(points.at(seg_idx + 1), target_point);\n+      }\n+      return std::abs(motion_utils::calcLateralOffset(points, target_point, seg_idx));\n+    }();\n     if (lat_dist < min_lateral_dist) {\n       closest_idx = seg_idx;\n       min_lateral_dist = lat_dist;\n     }\n   }\n \n-  return closest_idx;\n+  if (closest_idx) {\n+    return *closest_idx;\n+  }\n+\n+  return motion_utils::findNearestSegmentIndex(points, target_point);\n }\n \n bool checkHasSameLane("
        }
    ],
    "autowarefoundation/autoware.universe/4491": [
        {
            "sha": "5a2f450f0eb0d9bffa21a3ed075e87ec3aa545fa",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 4,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b97d7f978c8d12223a57047f12867052e3b4041e/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b97d7f978c8d12223a57047f12867052e3b4041e/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=b97d7f978c8d12223a57047f12867052e3b4041e",
            "patch": "@@ -2938,13 +2938,11 @@ lanelet::ConstLanelets getExtendedCurrentLanes(\n   }\n \n   while (forward_length_sum < forward_length) {\n-    // stop extending if the goal lane is included\n+    // stop extending when the goal route section is reached\n     // if forward_length is a very large value, set it to true,\n     // as it may continue to extend lanes outside the route ahead of goal forever.\n     if (until_goal_lane) {\n-      lanelet::ConstLanelet goal_lane;\n-      planner_data->route_handler->getGoalLanelet(&goal_lane);\n-      if (lanes.back().id() == goal_lane.id()) {\n+      if (planner_data->route_handler->isInGoalRouteSection(lanes.back())) {\n         return lanes;\n       }\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/4511": [
        {
            "sha": "23232f9b26681d1ec9282d834624739be8fbe7a4",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 6,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9418172c9c3803dbb7f1680992129d02b013fc94/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9418172c9c3803dbb7f1680992129d02b013fc94/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=9418172c9c3803dbb7f1680992129d02b013fc94",
            "patch": "@@ -551,7 +551,9 @@ lanelet::ConstLanelets StartPlannerModule::getPathLanes(const PathWithLaneId & p\n   lanelet::ConstLanelets path_lanes;\n   path_lanes.reserve(lane_ids.size());\n   for (const auto & id : lane_ids) {\n-    path_lanes.push_back(lanelet_layer.get(id));\n+    if (id != lanelet::InvalId) {\n+      path_lanes.push_back(lanelet_layer.get(id));\n+    }\n   }\n \n   return path_lanes;\n@@ -573,6 +575,11 @@ void StartPlannerModule::updatePullOutStatus()\n     status_ = PullOutStatus();\n   }\n \n+  // save pull out lanes which is generated using current pose before starting pull out\n+  // (before approval)\n+  status_.pull_out_lanes = start_planner_utils::getPullOutLanes(\n+    planner_data_, planner_data_->parameters.backward_path_length + parameters_->max_back_distance);\n+\n   // skip updating if enough time has not passed for preventing chattering between back and\n   // start_planner\n   if (!has_received_new_route && !last_pull_out_start_update_time_ && !status_.back_finished) {\n@@ -590,11 +597,6 @@ void StartPlannerModule::updatePullOutStatus()\n   const auto & current_pose = planner_data_->self_odometry->pose.pose;\n   const auto & goal_pose = planner_data_->route_handler->getGoalPose();\n \n-  // save pull out lanes which is generated using current pose before starting pull out\n-  // (before approval)\n-  status_.pull_out_lanes = start_planner_utils::getPullOutLanes(\n-    planner_data_, planner_data_->parameters.backward_path_length + parameters_->max_back_distance);\n-\n   // search pull out start candidates backward\n   std::vector<Pose> start_pose_candidates = searchPullOutStartPoses();\n   planWithPriority(start_pose_candidates, goal_pose, parameters_->search_priority);"
        }
    ],
    "autowarefoundation/autoware.universe/4520": [
        {
            "sha": "3d2bb44ad8bc0fd2af4067f1e0a6c3e549cce6eb",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/dac95db5e9a2da93ef8cb0eee49f678cd5c7c0f0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/dac95db5e9a2da93ef8cb0eee49f678cd5c7c0f0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=dac95db5e9a2da93ef8cb0eee49f678cd5c7c0f0",
            "patch": "@@ -125,6 +125,7 @@ BehaviorModuleOutput NormalLaneChange::generateOutput()\n \n   if (isAbortState()) {\n     output.reference_path = std::make_shared<PathWithLaneId>(prev_module_reference_path_);\n+    output.turn_signal_info = prev_turn_signal_info_;\n     return output;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4529": [
        {
            "sha": "4f0a3e9246a63725323a9c808cb7a3e266ba96f9",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 6,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ecbb2db9d3af4903e2b557b9947ac94f141442f0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ecbb2db9d3af4903e2b557b9947ac94f141442f0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=ecbb2db9d3af4903e2b557b9947ac94f141442f0",
            "patch": "@@ -911,6 +911,7 @@ PathWithLaneId GoalPlannerModule::generateStopPath()\n   const auto & route_handler = planner_data_->route_handler;\n   const auto & current_pose = planner_data_->self_odometry->pose.pose;\n   const auto & common_parameters = planner_data_->parameters;\n+  const double current_vel = planner_data_->self_odometry->twist.twist.linear.x;\n   const double pull_over_velocity = parameters_->pull_over_velocity;\n \n   if (status_.current_lanes.empty()) {\n@@ -948,7 +949,10 @@ PathWithLaneId GoalPlannerModule::generateStopPath()\n   // if stop pose is closer than min_stop_distance, stop as soon as possible\n   const double ego_to_stop_distance = calcSignedArcLengthFromEgo(reference_path, stop_pose);\n   const auto min_stop_distance = calcFeasibleDecelDistance(0.0);\n-  if (min_stop_distance && ego_to_stop_distance + stop_distance_buffer_ < *min_stop_distance) {\n+  const double eps_vel = 0.01;\n+  const bool is_stopped = std::abs(current_vel) < eps_vel;\n+  const double buffer = is_stopped ? stop_distance_buffer_ : 0.0;\n+  if (min_stop_distance && ego_to_stop_distance + buffer < *min_stop_distance) {\n     return generateFeasibleStopPath();\n   }\n \n@@ -1171,13 +1175,12 @@ bool GoalPlannerModule::hasEnoughDistance(const PullOverPath & pull_over_path) c\n   // distance to restart should be less than decide_path_distance.\n   // otherwise, the goal would change immediately after departure.\n   const bool is_separated_path = status_.pull_over_path->partial_paths.size() > 1;\n-  constexpr double eps_vel = 0.01;\n   const double distance_to_start = calcSignedArcLength(\n     pull_over_path.getFullPath().points, current_pose.position, pull_over_path.start_pose.position);\n   const double distance_to_restart = parameters_->decide_path_distance / 2;\n-  if (\n-    is_separated_path && std::abs(current_vel) < eps_vel &&\n-    distance_to_start < distance_to_restart) {\n+  const double eps_vel = 0.01;\n+  const bool is_stopped = std::abs(current_vel) < eps_vel;\n+  if (is_separated_path && is_stopped && distance_to_start < distance_to_restart) {\n     return false;\n   }\n \n@@ -1186,7 +1189,11 @@ bool GoalPlannerModule::hasEnoughDistance(const PullOverPath & pull_over_path) c\n     return false;\n   }\n \n-  if (distance_to_start + stop_distance_buffer_ < *current_to_stop_distance) {\n+  // If the stop line is subtly exceeded, it is assumed that there is not enough distance to the\n+  // starting point of parking, so to prevent this, once the vehicle has stopped, it also has a\n+  // stop_distance_buffer to allow for the amount exceeded.\n+  const double buffer = is_stopped ? stop_distance_buffer_ : 0.0;\n+  if (distance_to_start + buffer < *current_to_stop_distance) {\n     return false;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4535": [
        {
            "sha": "088dd736e9d49de359a6bdca89fc72f40b622dd9",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 66,
            "deletions": 15,
            "changes": 81,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5f3b8f1d7b90a62d65b691d608e8e8db1b3ff2b1/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5f3b8f1d7b90a62d65b691d608e8e8db1b3ff2b1/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=5f3b8f1d7b90a62d65b691d608e8e8db1b3ff2b1",
            "patch": "@@ -118,6 +118,12 @@ bool checkHasSameLane(\n   const auto has_same = [&](const auto & ll) { return ll.id() == target_lane.id(); };\n   return std::find_if(lanelets.begin(), lanelets.end(), has_same) != lanelets.end();\n }\n+\n+bool isSamePoint(const geometry_msgs::msg::Point & point1, const geometry_msgs::msg::Point & point2)\n+{\n+  constexpr double epsilon = 1e-3;\n+  return std::abs(point1.x - point2.x) < epsilon && std::abs(point1.y - point2.y) < epsilon;\n+}\n }  // namespace\n \n namespace behavior_path_planner::utils\n@@ -288,43 +294,88 @@ std::vector<geometry_msgs::msg::Point> convertToGeometryPoints(\n   return points;\n }\n \n+// NOTE: See the PR's figure. https://github.com/autowarefoundation/autoware.universe/pull/2880\n std::vector<PolygonPoint> concatenateTwoPolygons(\n   const std::vector<PolygonPoint> & front_polygon, const std::vector<PolygonPoint> & back_polygon)\n {\n+  const auto make_unique_polygon = [&](const auto & polygon) {\n+    std::vector<PolygonPoint> unique_polygon;\n+    for (const auto & point : polygon) {\n+      if (!unique_polygon.empty() && isSamePoint(unique_polygon.back().point, point.point)) {\n+        continue;\n+      }\n+      unique_polygon.push_back(point);\n+    }\n+    return unique_polygon;\n+  };\n+  const auto unique_front_polygon = make_unique_polygon(front_polygon);\n+  const auto unique_back_polygon = make_unique_polygon(back_polygon);\n+\n   // At first, the front polygon is the outside polygon\n   bool is_front_polygon_outside = true;\n-  size_t outside_idx = 0;\n+  size_t before_outside_idx = 0;\n \n   const auto get_out_poly = [&]() {\n-    return is_front_polygon_outside ? front_polygon : back_polygon;\n+    return is_front_polygon_outside ? unique_front_polygon : unique_back_polygon;\n   };\n   const auto get_in_poly = [&]() {\n-    return is_front_polygon_outside ? back_polygon : front_polygon;\n+    return is_front_polygon_outside ? unique_back_polygon : unique_front_polygon;\n   };\n \n+  // NOTE: Polygon points is assumed to be clock-wise.\n   std::vector<PolygonPoint> concatenated_polygon;\n-  while (rclcpp::ok()) {\n-    concatenated_polygon.push_back(get_out_poly().at(outside_idx));\n-    if (outside_idx == get_out_poly().size() - 1) {\n+  // NOTE: Maximum number of loop is set to avoid infinity loop calculation just in case.\n+  const size_t max_loop_num = (unique_front_polygon.size() + unique_back_polygon.size()) * 2;\n+  for (size_t loop_idx = 0; loop_idx < max_loop_num; ++loop_idx) {\n+    concatenated_polygon.push_back(get_out_poly().at(before_outside_idx));\n+    if (before_outside_idx == get_out_poly().size() - 1) {\n       break;\n     }\n-    const size_t curr_idx = outside_idx;\n-    const size_t next_idx = outside_idx + 1;\n+    const size_t curr_idx = before_outside_idx;\n+    const size_t next_idx = before_outside_idx + 1;\n \n+    // NOTE: Two polygons may have two intersection points. Therefore the closest intersection\n+    //       point is used.\n+    std::optional<size_t> closest_idx = std::nullopt;\n+    double min_dist_to_intersection = std::numeric_limits<double>::max();\n+    PolygonPoint closest_intersect_point;\n     for (size_t i = 0; i < get_in_poly().size() - 1; ++i) {\n       const auto intersection = tier4_autoware_utils::intersect(\n         get_out_poly().at(curr_idx).point, get_out_poly().at(next_idx).point,\n         get_in_poly().at(i).point, get_in_poly().at(i + 1).point);\n-      if (intersection) {\n-        const auto intersect_point = PolygonPoint{*intersection, 0, 0.0, 0.0};\n-        concatenated_polygon.push_back(intersect_point);\n+      if (!intersection) {\n+        continue;\n+      }\n+      if (\n+        isSamePoint(get_out_poly().at(curr_idx).point, get_in_poly().at(i).point) ||\n+        isSamePoint(get_out_poly().at(curr_idx).point, get_in_poly().at(i + 1).point) ||\n+        isSamePoint(get_out_poly().at(next_idx).point, get_in_poly().at(i).point) ||\n+        isSamePoint(get_out_poly().at(next_idx).point, get_in_poly().at(i + 1).point)) {\n+        // NOTE: If the segments shares one point, the while loop will not end.\n+        continue;\n+      }\n \n-        is_front_polygon_outside = !is_front_polygon_outside;\n-        outside_idx = i;\n-        break;\n+      const auto intersect_point = PolygonPoint{*intersection, 0, 0.0, 0.0};\n+      const double dist_to_intersection =\n+        tier4_autoware_utils::calcDistance2d(get_out_poly().at(curr_idx).point, *intersection);\n+      if (dist_to_intersection < min_dist_to_intersection) {\n+        closest_idx = i;\n+        min_dist_to_intersection = dist_to_intersection;\n+        closest_intersect_point = intersect_point;\n       }\n     }\n-    outside_idx += 1;\n+\n+    if (closest_idx) {\n+      before_outside_idx = *closest_idx;\n+      concatenated_polygon.push_back(closest_intersect_point);\n+      is_front_polygon_outside = !is_front_polygon_outside;\n+    }\n+\n+    before_outside_idx += 1;\n+\n+    if (loop_idx == max_loop_num - 1) {\n+      return front_polygon;\n+    }\n   }\n \n   return concatenated_polygon;"
        }
    ],
    "autowarefoundation/autoware.universe/4539": [
        {
            "sha": "5c1c98488b0f64f3e0c26e1b93c84eb02e7e7c7b",
            "filename": "common/tier4_calibration_rviz_plugin/src/accel_brake_map_calibrator_button_panel.cpp",
            "status": "modified",
            "additions": 23,
            "deletions": 20,
            "changes": 43,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/47646a9c54e246749f033564434413321a2d34de/common%2Ftier4_calibration_rviz_plugin%2Fsrc%2Faccel_brake_map_calibrator_button_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/47646a9c54e246749f033564434413321a2d34de/common%2Ftier4_calibration_rviz_plugin%2Fsrc%2Faccel_brake_map_calibrator_button_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_calibration_rviz_plugin%2Fsrc%2Faccel_brake_map_calibrator_button_panel.cpp?ref=47646a9c54e246749f033564434413321a2d34de",
            "patch": "@@ -75,7 +75,7 @@ void AccelBrakeMapCalibratorButtonPanel::onInitialize()\n       &AccelBrakeMapCalibratorButtonPanel::callbackUpdateSuggest, this, std::placeholders::_1));\n \n   client_ = raw_node->create_client<tier4_vehicle_msgs::srv::UpdateAccelBrakeMap>(\n-    \"/accel_brake_map_calibrator/update_map_dir\");\n+    \"/vehicle/calibration/accel_brake_map_calibrator/update_map_dir\");\n }\n \n void AccelBrakeMapCalibratorButtonPanel::callbackUpdateSuggest(\n@@ -118,25 +118,28 @@ void AccelBrakeMapCalibratorButtonPanel::pushCalibrationButton()\n   status_label_->setText(\"executing calibration...\");\n \n   std::thread thread([this] {\n-    auto req = std::make_shared<tier4_vehicle_msgs::srv::UpdateAccelBrakeMap::Request>();\n-    req->path = \"\";\n-\n-    client_->async_send_request(\n-      req,\n-      [this](\n-        [[maybe_unused]] rclcpp::Client<tier4_vehicle_msgs::srv::UpdateAccelBrakeMap>::SharedFuture\n-          result) {\n-        status_label_->setStyleSheet(\"QLabel { background-color : lightgreen;}\");\n-        status_label_->setText(\"OK!!!\");\n-\n-        // wait 3 second\n-        after_calib_ = true;\n-        rclcpp::Rate(3.0).sleep();\n-        after_calib_ = false;\n-\n-        // unlock button\n-        calibration_button_->setEnabled(true);\n-      });\n+    if (!client_->wait_for_service(std::chrono::seconds(1))) {\n+      status_label_->setStyleSheet(\"QLabel { background-color : red;}\");\n+      status_label_->setText(\"service server not found\");\n+\n+    } else {\n+      auto req = std::make_shared<tier4_vehicle_msgs::srv::UpdateAccelBrakeMap::Request>();\n+      req->path = \"\";\n+      client_->async_send_request(\n+        req, [this]([[maybe_unused]] rclcpp::Client<\n+                    tier4_vehicle_msgs::srv::UpdateAccelBrakeMap>::SharedFuture result) {});\n+\n+      status_label_->setStyleSheet(\"QLabel { background-color : lightgreen;}\");\n+      status_label_->setText(\"OK!!!\");\n+    }\n+\n+    // wait 3 second\n+    after_calib_ = true;\n+    rclcpp::Rate(1.0 / 3.0).sleep();\n+    after_calib_ = false;\n+\n+    // unlock button\n+    calibration_button_->setEnabled(true);\n   });\n \n   thread.detach();"
        }
    ],
    "autowarefoundation/autoware.universe/4542": [
        {
            "sha": "6558bd7110f1047fdea32a684eed03104e7cf05a",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 3,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b5773352fd73408706766d473a46f54ac5f3362c/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b5773352fd73408706766d473a46f54ac5f3362c/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=b5773352fd73408706766d473a46f54ac5f3362c",
            "patch": "@@ -49,15 +49,18 @@ BehaviorModuleOutput PlannerManager::run(const std::shared_ptr<PlannerData> & da\n     manager_ptrs_.begin(), manager_ptrs_.end(), [&data](const auto & m) { m->setData(data); });\n \n   auto result_output = [&]() {\n-    const bool is_any_approved_module_running = std::any_of(\n-      approved_module_ptrs_.begin(), approved_module_ptrs_.end(),\n-      [](const auto & m) { return m->getCurrentStatus() == ModuleStatus::RUNNING; });\n+    const bool is_any_approved_module_running =\n+      std::any_of(approved_module_ptrs_.begin(), approved_module_ptrs_.end(), [](const auto & m) {\n+        return m->getCurrentStatus() == ModuleStatus::RUNNING ||\n+               m->getCurrentStatus() == ModuleStatus::WAITING_APPROVAL;\n+      });\n \n     // IDLE is a state in which an execution has been requested but not yet approved.\n     // once approved, it basically turns to running.\n     const bool is_any_candidate_module_running_or_idle =\n       std::any_of(candidate_module_ptrs_.begin(), candidate_module_ptrs_.end(), [](const auto & m) {\n         return m->getCurrentStatus() == ModuleStatus::RUNNING ||\n+               m->getCurrentStatus() == ModuleStatus::WAITING_APPROVAL ||\n                m->getCurrentStatus() == ModuleStatus::IDLE;\n       });\n "
        }
    ],
    "autowarefoundation/autoware.universe/4556": [
        {
            "sha": "2f7c39f94604e9e5bcda0aaf21ae946a5a5e3761",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3776b28714f471778d37175045c033fd5bd4039f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3776b28714f471778d37175045c033fd5bd4039f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=3776b28714f471778d37175045c033fd5bd4039f",
            "patch": "@@ -540,6 +540,11 @@ std::vector<double> NormalLaneChange::sampleLongitudinalAccValues(\n     current_velocity, common_parameters,\n     route_handler.getLateralIntervalsToPreferredLane(current_lanes.back()), max_acc);\n \n+  if (max_lane_change_length > utils::getDistanceToEndOfLane(current_pose, current_lanes)) {\n+    return utils::lane_change::getAccelerationValues(\n+      min_acc, max_acc, longitudinal_acc_sampling_num);\n+  }\n+\n   // if maximum lane change length is less than length to goal or the end of target lanes, only\n   // sample max acc\n   if (route_handler.isInGoalRouteSection(target_lanes.back())) {"
        }
    ],
    "autowarefoundation/autoware.universe/4558": [
        {
            "sha": "32398c7944435f63abcee94229f3c2a44d5cba36",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/632d18d9d8a904d2c4971eaaef0d06b65d0adb2c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/632d18d9d8a904d2c4971eaaef0d06b65d0adb2c/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=632d18d9d8a904d2c4971eaaef0d06b65d0adb2c",
            "patch": "@@ -79,7 +79,7 @@ void StartPlannerModule::processOnExit()\n bool StartPlannerModule::isExecutionRequested() const\n {\n   // Execute when current pose is near route start pose\n-  const Pose & start_pose = planner_data_->route_handler->getStartPose();\n+  const Pose & start_pose = planner_data_->route_handler->getOriginalStartPose();\n   const Pose & current_pose = planner_data_->self_odometry->pose.pose;\n   if (\n     tier4_autoware_utils::calcDistance2d(start_pose.position, current_pose.position) >"
        }
    ],
    "autowarefoundation/autoware.universe/4561": [
        {
            "sha": "a4d3c5950510f44e68b9feaf8c93c5652033d036",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 2,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ec7e5c81105fd7fcf5ad2196760f3ff2175aae30/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ec7e5c81105fd7fcf5ad2196760f3ff2175aae30/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=ec7e5c81105fd7fcf5ad2196760f3ff2175aae30",
            "patch": "@@ -1076,11 +1076,22 @@ bool GoalPlannerModule::isStopped()\n \n bool GoalPlannerModule::isStuck()\n {\n+  constexpr double stuck_time = 5.0;\n+  if (!isStopped(odometry_buffer_stuck_, stuck_time)) {\n+    return false;\n+  }\n+\n+  // not found safe path\n+  if (!status_.is_safe) {\n+    return true;\n+  }\n+\n+  // any path has never been found\n   if (!status_.pull_over_path) {\n     return false;\n   }\n-  constexpr double stuck_time = 5.0;\n-  return isStopped(odometry_buffer_stuck_, stuck_time) && checkCollision(getCurrentPath());\n+\n+  return checkCollision(getCurrentPath());\n }\n \n bool GoalPlannerModule::hasFinishedCurrentPath()"
        }
    ],
    "autowarefoundation/autoware.universe/4568": [
        {
            "sha": "4e009836b53d44dc2307647599d3cc62d5449135",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/261bcbd75970c2e9e4267a3eb2968abe2080e959/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/261bcbd75970c2e9e4267a3eb2968abe2080e959/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=261bcbd75970c2e9e4267a3eb2968abe2080e959",
            "patch": "@@ -367,7 +367,7 @@ UUID RouteHandler::getRouteUuid() const\n {\n   if (!route_ptr_) {\n     RCLCPP_WARN(logger_, \"[Route Handler] getRouteUuid: Route has not been set yet\");\n-    UUID();\n+    return UUID();\n   }\n   return route_ptr_->uuid;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/4569": [
        {
            "sha": "cffb490464de0de35aa8bcea595997ff79956cc6",
            "filename": "planning/scenario_selector/src/scenario_selector_node/scenario_selector_node.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9c872234473012faddefac3221e9c70aec7b7dc9/planning%2Fscenario_selector%2Fsrc%2Fscenario_selector_node%2Fscenario_selector_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9c872234473012faddefac3221e9c70aec7b7dc9/planning%2Fscenario_selector%2Fsrc%2Fscenario_selector_node%2Fscenario_selector_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fscenario_selector%2Fsrc%2Fscenario_selector_node%2Fscenario_selector_node.cpp?ref=9c872234473012faddefac3221e9c70aec7b7dc9",
            "patch": "@@ -197,8 +197,13 @@ void ScenarioSelectorNode::onMap(\n void ScenarioSelectorNode::onRoute(\n   const autoware_planning_msgs::msg::LaneletRoute::ConstSharedPtr msg)\n {\n+  // When the route id is the same (e.g. reporting with modified goal) keep the current scenario.\n+  // Otherwise, reset the scenario.\n+  if (!route_handler_ || route_handler_->getRouteUuid() != msg->uuid) {\n+    current_scenario_ = tier4_planning_msgs::msg::Scenario::EMPTY;\n+  }\n+\n   route_ = msg;\n-  current_scenario_ = tier4_planning_msgs::msg::Scenario::EMPTY;\n }\n \n void ScenarioSelectorNode::onOdom(const nav_msgs::msg::Odometry::ConstSharedPtr msg)"
        }
    ],
    "autowarefoundation/autoware.universe/4573": [
        {
            "sha": "4e9680cee4d5931c97721e09231f6fe1e444e818",
            "filename": "planning/behavior_path_planner/src/scene_module/side_shift/side_shift_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0b41f5c074ddee3f35fbe69c81fb540904db3ddf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0b41f5c074ddee3f35fbe69c81fb540904db3ddf/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fside_shift%2Fside_shift_module.cpp?ref=0b41f5c074ddee3f35fbe69c81fb540904db3ddf",
            "patch": "@@ -185,7 +185,7 @@ void SideShiftModule::updateData()\n     }\n   }\n \n-  if (current_state_ != ModuleStatus::RUNNING) {\n+  if (current_state_ != ModuleStatus::RUNNING && current_state_ != ModuleStatus::IDLE) {\n     return;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4580": [
        {
            "sha": "3e62ab75d23cd9111f6604e3fba1769e79e0f03a",
            "filename": "planning/behavior_velocity_intersection_module/README.md",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/51a9c70365451037dbd5730c4526563a3be5e189/planning%2Fbehavior_velocity_intersection_module%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/51a9c70365451037dbd5730c4526563a3be5e189/planning%2Fbehavior_velocity_intersection_module%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2FREADME.md?ref=51a9c70365451037dbd5730c4526563a3be5e189",
            "patch": "@@ -8,7 +8,7 @@ The _intersection_ module is responsible for safely going through urban intersec\n 2. recognizing the occluded area in the intersection\n 3. reacting to arrow signals of associated traffic lights\n \n-The module is desinged to be agnositc to left-hand/right-hand traffic rules and works on crossroads, T-shape junctions, etc.\n+The module is designed to be agnostic to left-hand/right-hand traffic rules and works on crossroads, T-shape junctions, etc.\n \n ![topology](./docs/intersection-topology.drawio.svg)\n \n@@ -26,7 +26,7 @@ This module is activated when the path contains the lanes with `turn_direction`\n \n The `Attention Area` in the intersection are defined as the set of lanes that are conflicting with ego vehicle's path and their preceding lanes up to `attention_area_length` meters. `RightOfWay` tag is used to rule out the lanes that each lane has priority given the traffic light relation and `turn_direction` priority.\n \n-`Intersection Area`, which is supposed to be defined on the HDMap, is an area convering the entire intersection.\n+`Intersection Area`, which is supposed to be defined on the HDMap, is an area converting the entire intersection.\n \n ![attention_area](./docs/intersection-attention.drawio.svg)\n \n@@ -38,7 +38,7 @@ Following table shows an example of how to assign `right_of_way` tag and set `yi\n | ------------------------------ | --------------------------------------------------------------- | ------------------------------------------------ |\n | straight                       | Highest priority of all                                         | Priority over left/right lanes of the same group |\n | left(Left hand traffic)        | Priority over the other group and right lanes of the same group | Priority over right lanes of the same group      |\n-| right(Left hand traffic)       | Priority only over the other group                              | priority only over the other gruop               |\n+| right(Left hand traffic)       | Priority only over the other group                              | priority only over the other group               |\n | left(Right hand traffic)       | Priority only over the other group                              | Priority only over the other group               |\n | right(Right hand traffic)      | Priority over the other group and left lanes of the same group  | priority over left lanes of the same group       |\n \n@@ -108,7 +108,7 @@ To avoid a rapid braking, if deceleration and jerk more than a threshold (`behav\n | `common.path_interpolation_ds`                      | double | [m] path interpolation interval                                                                |\n | `stuck_vehicle.stuck_vehicle_detect_dist`           | double | [m] length toward from the exit of intersection for stuck vehicle detection                    |\n | `stuck_vehicle.stuck_vehicle_ignore_dist`           | double | [m] length behind the exit of intersection for stuck vehicle detection                         |\n-| `stuck_vehicle.stuck_vehicle_vel_thr`               | double | [m/s] velocity threhsold for stuck vehicle detection                                           |\n+| `stuck_vehicle.stuck_vehicle_vel_thr`               | double | [m/s] velocity threshold for stuck vehicle detection                                           |\n | `collision_detection.state_transit_margin_time`     | double | [m] time margin to change state                                                                |\n | `collision_detection.min_predicted_path_confidence` | double | [-] minimum confidence value of predicted path to use for collision detection                  |\n | `collision_detection.collision_start_margin_time`   | double | [s] time margin for the beginning of collision with upcoming vehicle                           |"
        }
    ],
    "autowarefoundation/autoware.universe/4587": [
        {
            "sha": "a763bab7897fbf900ae94b5387754c95ed1e0d2f",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c9bf106167614ca9fc76ffe6f1242cf861df1a6f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c9bf106167614ca9fc76ffe6f1242cf861df1a6f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=c9bf106167614ca9fc76ffe6f1242cf861df1a6f",
            "patch": "@@ -622,7 +622,7 @@ void AvoidanceModule::updateEgoBehavior(const AvoidancePlanningData & data, Shif\n     return;\n   }\n \n-  // insertPrepareVelocity(path);\n+  insertPrepareVelocity(path);\n \n   switch (data.state) {\n     case AvoidanceState::NOT_AVOID: {"
        }
    ],
    "autowarefoundation/autoware.universe/4589": [
        {
            "sha": "64410c08a6f8077bad748db6232b9f03eb7c0233",
            "filename": "planning/behavior_velocity_crosswalk_module/src/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/17aa0960d71bc2703cec1f8157b25d693797c306/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/17aa0960d71bc2703cec1f8157b25d693797c306/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp?ref=17aa0960d71bc2703cec1f8157b25d693797c306",
            "patch": "@@ -1051,6 +1051,11 @@ void CrosswalkModule::planStop(\n     return std::nullopt;\n   }();\n \n+  if (!stop_factor) {\n+    RCLCPP_ERROR_STREAM_THROTTLE(logger_, *clock_, 5000, \"stop_factor is null\");\n+    return;\n+  }\n+\n   // Plan stop\n   insertDecelPointWithDebugInfo(stop_factor->stop_pose.position, 0.0, ego_path);\n   planning_utils::appendStopReason(*stop_factor, stop_reason);"
        }
    ],
    "autowarefoundation/autoware.universe/4596": [
        {
            "sha": "52ebf1d8060aea2e9064fd6af8b574332e68882e",
            "filename": "launch/tier4_perception_launch/launch/object_recognition/detection/lidar_based_detection.launch.xml",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d3fae9230d333a2ac802690b7d9495f6f20a202a/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Flidar_based_detection.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d3fae9230d333a2ac802690b7d9495f6f20a202a/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Flidar_based_detection.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Flidar_based_detection.launch.xml?ref=d3fae9230d333a2ac802690b7d9495f6f20a202a",
            "patch": "@@ -11,6 +11,13 @@\n   <arg name=\"container_name\" default=\"pointcloud_container\"/>\n   <arg name=\"use_validator\" default=\"true\" description=\"use obstacle_pointcloud based validator\"/>\n   <arg name=\"score_threshold\" default=\"0.35\"/>\n+  <arg name=\"centerpoint_model_name\" default=\"centerpoint_tiny\"/>\n+  <arg name=\"centerpoint_model_path\" default=\"$(find-pkg-share lidar_centerpoint)/data\"/>\n+  <arg name=\"lidar_model_param_path\" default=\"$(find-pkg-share lidar_centerpoint)/config\"/>\n+  <arg name=\"objects_validation_method\" default=\"obstacle_pointcloud\"/>\n+  <arg name=\"objects_filter_method\" default=\"lanelet_filter\"/>\n+  <arg name=\"object_recognition_detection_object_merger_data_association_matrix_param_path\" default=\"$(find-pkg-share object_merger)/config/data_association_matrix.param.yaml\"/>\n+  <arg name=\"object_recognition_detection_object_merger_distance_threshold_list_path\" default=\"$(find-pkg-share object_merger)/config/overlapped_judge.param.yaml\"/>\n \n   <!-- Pointcloud map filter -->\n   <group>"
        }
    ],
    "autowarefoundation/autoware.universe/4606": [
        {
            "sha": "c88fc377dc47313cb8cc2ff1bba03cdccabb2d3a",
            "filename": "planning/behavior_path_planner/src/utils/avoidance/utils.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9e8436d334034d8758b372db347d42b4c81a8a75/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9e8436d334034d8758b372db347d42b4c81a8a75/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp?ref=9e8436d334034d8758b372db347d42b4c81a8a75",
            "patch": "@@ -855,6 +855,10 @@ void filterTargetObjects(\n   using lanelet::geometry::toArcCoordinates;\n   using lanelet::utils::to2D;\n \n+  if (data.current_lanelets.empty()) {\n+    return;\n+  }\n+\n   const auto & rh = planner_data->route_handler;\n   const auto & path_points = data.reference_path_rough.points;\n   const auto & ego_pos = planner_data->self_odometry->pose.pose.position;"
        }
    ],
    "autowarefoundation/autoware.universe/4613": [
        {
            "sha": "1d5c7b44dcc4529ca886aa3776dc356562fd0123",
            "filename": "planning/scenario_selector/src/scenario_selector_node/scenario_selector_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f75e4db43956ae0863e19034212a28a4a0da80c6/planning%2Fscenario_selector%2Fsrc%2Fscenario_selector_node%2Fscenario_selector_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f75e4db43956ae0863e19034212a28a4a0da80c6/planning%2Fscenario_selector%2Fsrc%2Fscenario_selector_node%2Fscenario_selector_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fscenario_selector%2Fsrc%2Fscenario_selector_node%2Fscenario_selector_node.cpp?ref=f75e4db43956ae0863e19034212a28a4a0da80c6",
            "patch": "@@ -197,7 +197,7 @@ void ScenarioSelectorNode::onMap(\n void ScenarioSelectorNode::onRoute(\n   const autoware_planning_msgs::msg::LaneletRoute::ConstSharedPtr msg)\n {\n-  // When the route id is the same (e.g. reporting with modified goal) keep the current scenario.\n+  // When the route id is the same (e.g. rerouting with modified goal) keep the current scenario.\n   // Otherwise, reset the scenario.\n   if (!route_handler_ || route_handler_->getRouteUuid() != msg->uuid) {\n     current_scenario_ = tier4_planning_msgs::msg::Scenario::EMPTY;"
        }
    ],
    "autowarefoundation/autoware.universe/4621": [
        {
            "sha": "f7ee294cda14740a337d85dd56c14d063110530d",
            "filename": "perception/traffic_light_multi_camera_fusion/README.md",
            "status": "modified",
            "additions": 7,
            "deletions": 6,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a664c0113f1770fd003d0519b585a98c4bab997b/perception%2Ftraffic_light_multi_camera_fusion%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a664c0113f1770fd003d0519b585a98c4bab997b/perception%2Ftraffic_light_multi_camera_fusion%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_multi_camera_fusion%2FREADME.md?ref=a664c0113f1770fd003d0519b585a98c4bab997b",
            "patch": "@@ -9,12 +9,13 @@\n \n ## Input topics\n \n-For every camera, the following three topics are subscribed:  \n-| Name | Type | |\n-| ---------------------------------------| -------------------------------------------------------|----------------------------------------------------|\n-| `~/<camera_namespace>/camera_info` | sensor_msgs::CameraInfo |camera info from traffic_light_map_based_detector |\n-| `~/<camera_namespace>/rois` | tier4_perception_msgs::TrafficLightRoiArray |detection roi from traffic_light_fine_detector |\n-| `~/<camera_namespace>/traffic_signals` | tier4_perception_msgs::TrafficLightSignalArray |classification result from traffic_light_classifier |\n+For every camera, the following three topics are subscribed:\n+\n+| Name                                   | Type                                           | Description                                         |\n+| -------------------------------------- | ---------------------------------------------- | --------------------------------------------------- |\n+| `~/<camera_namespace>/camera_info`     | sensor_msgs::CameraInfo                        | camera info from traffic_light_map_based_detector   |\n+| `~/<camera_namespace>/rois`            | tier4_perception_msgs::TrafficLightRoiArray    | detection roi from traffic_light_fine_detector      |\n+| `~/<camera_namespace>/traffic_signals` | tier4_perception_msgs::TrafficLightSignalArray | classification result from traffic_light_classifier |\n \n You don't need to configure these topics manually. Just provide the `camera_namespaces` parameter and the node will automatically extract the `<camera_namespace>` and create the subscribers.\n "
        }
    ],
    "autowarefoundation/autoware.universe/4623": [
        {
            "sha": "871fd5b1ac9a36dff6705afaf1926524a77f420e",
            "filename": "planning/behavior_path_planner/docs/behavior_path_planner_avoidance_design.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4be7a6e3fe8f3bc22c5a01f75424266ee4365b08/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_avoidance_design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4be7a6e3fe8f3bc22c5a01f75424266ee4365b08/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_avoidance_design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_avoidance_design.md?ref=4be7a6e3fe8f3bc22c5a01f75424266ee4365b08",
            "patch": "@@ -822,7 +822,7 @@ Developers can see what is going on in each process by visualizing all the avoid\n \n ![fig1](../image/avoidance/avoidance-debug-marker.png)\n \n-To enable the debug marker, execute `ros2 param set /planning/scenario_planning/lane_driving/behavior_planning/behavior_path_planner avoidance.output_debug_marker true` (no restart is needed) or simply set the `output_debug_marker` to `true` in the `avoidance.param.yaml` for permanent effect (restart is needed). Then add the marker `/planning/scenario_planning/lane_driving/behavior_planning/behavior_path_planner/debug/avoidance` in `rviz2`.\n+To enable the debug marker, execute `ros2 param set /planning/scenario_planning/lane_driving/behavior_planning/behavior_path_planner avoidance.publish_debug_marker true` (no restart is needed) or simply set the `publish_debug_marker` to `true` in the `avoidance.param.yaml` for permanent effect (restart is needed). Then add the marker `/planning/scenario_planning/lane_driving/behavior_planning/behavior_path_planner/debug/avoidance` in `rviz2`.\n \n ### Echoing debug message to find out why the objects were ignored\n "
        }
    ],
    "autowarefoundation/autoware.universe/4625": [
        {
            "sha": "f85c472c6d856176eaa113e53923e1b793e89983",
            "filename": "planning/behavior_velocity_crosswalk_module/README.md",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5f0dcb83c740f48afed3065a95d685b4cab126b4/planning%2Fbehavior_velocity_crosswalk_module%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5f0dcb83c740f48afed3065a95d685b4cab126b4/planning%2Fbehavior_velocity_crosswalk_module%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_crosswalk_module%2FREADME.md?ref=5f0dcb83c740f48afed3065a95d685b4cab126b4",
            "patch": "@@ -32,7 +32,7 @@ The manager launch crosswalk scene modules when the reference path conflicts cro\n The crosswalk module determines a stop position at least `stop_distance_from_object` away from the object.\n \n <figure markdown>\n-  ![stop_distance_from_object](docs/stop_distance_from_object.svg){width=1000}\n+  ![stop_distance_from_object](docs/stop_margin.svg){width=1000}\n   <figcaption>stop margin</figcaption>\n </figure>\n \n@@ -44,14 +44,14 @@ The stop line is the reference point for the stopping position of the vehicle, b\n </figure>\n \n <figure markdown>\n-  ![stop_distance_from_crosswalk](docs/stop_distance_from_crosswalk.svg){width=700}\n+  ![stop_distance_from_crosswalk](docs/stop_line_distance.svg){width=700}\n   <figcaption>virtual stop point</figcaption>\n </figure>\n \n On the other hand, if pedestrian (bicycle) is crossing **wide** crosswalks seen in scramble intersections, and the pedestrian position is more than `far_object_threshold` meters away from the stop line, the actual stop position is determined to be `stop_distance_from_object` and pedestrian position, not at the stop line.\n \n <figure markdown>\n-  ![far_object_threshold](docs/far_object_threshold.svg){width=1000}\n+  ![far_object_threshold](docs/stop_line_margin.svg){width=1000}\n   <figcaption>stop at wide crosswalk</figcaption>\n </figure>\n "
        }
    ],
    "autowarefoundation/autoware.universe/4626": [
        {
            "sha": "8cc94bd6b46fa9164d9e0d8b4ec9beffa50799cd",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 3,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/43e0cdcd09b6838840f7795f889dc11a6f7672d6/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/43e0cdcd09b6838840f7795f889dc11a6f7672d6/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=43e0cdcd09b6838840f7795f889dc11a6f7672d6",
            "patch": "@@ -3247,9 +3247,11 @@ std::vector<DrivableLanes> combineDrivableLanes(\n   }\n   // NOTE: If original_drivable_lanes_vec is shorter than new_drivable_lanes_vec, push back remained\n   // new_drivable_lanes_vec.\n-  updated_drivable_lanes_vec.insert(\n-    updated_drivable_lanes_vec.end(), new_drivable_lanes_vec.begin() + new_drivable_lanes_idx + 1,\n-    new_drivable_lanes_vec.end());\n+  if (new_drivable_lanes_idx + 1 < new_drivable_lanes_vec.size()) {\n+    updated_drivable_lanes_vec.insert(\n+      updated_drivable_lanes_vec.end(), new_drivable_lanes_vec.begin() + new_drivable_lanes_idx + 1,\n+      new_drivable_lanes_vec.end());\n+  }\n \n   return updated_drivable_lanes_vec;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/4628": [
        {
            "sha": "990a5ea35818afeaf0c1e55ff7d760324fac3ecd",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2a855c9faf8e397e841bddad9d347a776112d44b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2a855c9faf8e397e841bddad9d347a776112d44b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=2a855c9faf8e397e841bddad9d347a776112d44b",
            "patch": "@@ -1094,7 +1094,10 @@ void AvoidanceModule::generateTotalShiftLine(\n \n   // overwrite shift with current_ego_shift until ego pose.\n   const auto current_shift = helper_.getEgoLinearShift();\n-  for (size_t i = 0; i <= avoidance_data_.ego_closest_path_index; ++i) {\n+  for (size_t i = 0; i < sl.shift_line.size(); ++i) {\n+    if (avoidance_data_.ego_closest_path_index < i) {\n+      break;\n+    }\n     sl.shift_line.at(i) = current_shift;\n     sl.shift_line_grad.at(i) = 0.0;\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/4633": [
        {
            "sha": "8523bed5d4c2da7162e91b66841573a79d523f96",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1e4a181898aa40d4762a2c533ba5f9d3ff7e7e7d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1e4a181898aa40d4762a2c533ba5f9d3ff7e7e7d/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=1e4a181898aa40d4762a2c533ba5f9d3ff7e7e7d",
            "patch": "@@ -2460,6 +2460,10 @@ void AvoidanceModule::updateData()\n \n   debug_data_ = DebugData();\n   avoidance_data_ = calcAvoidancePlanningData(debug_data_);\n+  if (avoidance_data_.reference_path.points.empty()) {\n+    // an empty path will kill further processing\n+    return;\n+  }\n \n   utils::avoidance::updateRegisteredObject(\n     registered_objects_, avoidance_data_.target_objects, parameters_);"
        }
    ],
    "autowarefoundation/autoware.universe/4635": [
        {
            "sha": "3baefaa43163a47ec045d57eef9c8d5bdbc61c25",
            "filename": "perception/traffic_light_arbiter/src/traffic_light_arbiter.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/18de9907f93ed27d4d408744def1e53fd6240843/perception%2Ftraffic_light_arbiter%2Fsrc%2Ftraffic_light_arbiter.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/18de9907f93ed27d4d408744def1e53fd6240843/perception%2Ftraffic_light_arbiter%2Fsrc%2Ftraffic_light_arbiter.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Ftraffic_light_arbiter%2Fsrc%2Ftraffic_light_arbiter.cpp?ref=18de9907f93ed27d4d408744def1e53fd6240843",
            "patch": "@@ -147,14 +147,14 @@ void TrafficLightArbiter::arbitrateAndPublish(const builtin_interfaces::msg::Tim\n \n   const auto get_highest_confidence_elements =\n     [](const std::vector<ElementAndPriority> & elements_and_priority_vector) {\n-      using Key = std::tuple<Element::_color_type, Element::_shape_type>;\n+      using Key = Element::_shape_type;\n       std::map<Key, ElementAndPriority> highest_score_element_and_priority_map;\n       std::vector<Element> highest_score_elements_vector;\n \n       for (const auto & elements_and_priority : elements_and_priority_vector) {\n         const auto & element = elements_and_priority.first;\n         const auto & element_priority = elements_and_priority.second;\n-        const auto key = std::make_tuple(element.color, element.shape);\n+        const auto key = element.shape;\n         auto [iter, success] =\n           highest_score_element_and_priority_map.try_emplace(key, elements_and_priority);\n         const auto & iter_element = iter->second.first;"
        }
    ],
    "autowarefoundation/autoware.universe/4639": [
        {
            "sha": "c1272c58936898c89988b3cea974db8f6ab9863f",
            "filename": "map/map_loader/src/lanelet2_map_loader/lanelet2_map_loader_node.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/eeaaf9bbc31baf087ef05cd79fd182dde60bcf8b/map%2Fmap_loader%2Fsrc%2Flanelet2_map_loader%2Flanelet2_map_loader_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/eeaaf9bbc31baf087ef05cd79fd182dde60bcf8b/map%2Fmap_loader%2Fsrc%2Flanelet2_map_loader%2Flanelet2_map_loader_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_loader%2Fsrc%2Flanelet2_map_loader%2Flanelet2_map_loader_node.cpp?ref=eeaaf9bbc31baf087ef05cd79fd182dde60bcf8b",
            "patch": "@@ -57,13 +57,16 @@ Lanelet2MapLoaderNode::Lanelet2MapLoaderNode(const rclcpp::NodeOptions & options\n   adaptor.init_sub(\n     sub_map_projector_type_,\n     [this](const MapProjectorInfo::Message::ConstSharedPtr msg) { on_map_projector_info(msg); });\n+\n+  declare_parameter(\"lanelet2_map_path\", \"\");\n+  declare_parameter(\"center_line_resolution\", 5.0);\n }\n \n void Lanelet2MapLoaderNode::on_map_projector_info(\n   const MapProjectorInfo::Message::ConstSharedPtr msg)\n {\n-  const auto lanelet2_filename = declare_parameter(\"lanelet2_map_path\", \"\");\n-  const auto center_line_resolution = declare_parameter(\"center_line_resolution\", 5.0);\n+  const auto lanelet2_filename = get_parameter(\"lanelet2_map_path\").as_string();\n+  const auto center_line_resolution = get_parameter(\"center_line_resolution\").as_double();\n \n   // load map from file\n   const auto map ="
        }
    ],
    "autowarefoundation/autoware.universe/4653": [
        {
            "sha": "b45357c7bd8b2b31286d66205237187058f39ff8",
            "filename": "planning/planning_debug_tools/scripts/perception_replayer/perception_replayer.py",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/65465336c69c201ace427d566b979e52850daef5/planning%2Fplanning_debug_tools%2Fscripts%2Fperception_replayer%2Fperception_replayer.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/65465336c69c201ace427d566b979e52850daef5/planning%2Fplanning_debug_tools%2Fscripts%2Fperception_replayer%2Fperception_replayer.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2Fscripts%2Fperception_replayer%2Fperception_replayer.py?ref=65465336c69c201ace427d566b979e52850daef5",
            "patch": "@@ -84,7 +84,9 @@ def on_timer(self):\n                     return\n \n                 ego_odom = self.find_ego_odom_by_timestamp(self.bag_timestamp)\n-                log_ego_pose = ego_odom[1].pose.pose\n+                if not ego_odom:\n+                    return\n+                log_ego_pose = ego_odom.pose.pose\n \n                 translate_objects_coordinate(self.ego_pose, log_ego_pose, objects_msg)\n             self.objects_pub.publish(objects_msg)"
        }
    ],
    "autowarefoundation/autoware.universe/4654": [
        {
            "sha": "f8ee314e5a0ef062612a3abbe0b62a96ce17948e",
            "filename": "system/system_monitor/src/process_monitor/process_monitor.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b288f45b47f33470ccaeaa239d166eeb1f72c1ff/system%2Fsystem_monitor%2Fsrc%2Fprocess_monitor%2Fprocess_monitor.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b288f45b47f33470ccaeaa239d166eeb1f72c1ff/system%2Fsystem_monitor%2Fsrc%2Fprocess_monitor%2Fprocess_monitor.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fsystem_monitor%2Fsrc%2Fprocess_monitor%2Fprocess_monitor.cpp?ref=b288f45b47f33470ccaeaa239d166eeb1f72c1ff",
            "patch": "@@ -401,7 +401,7 @@ void ProcessMonitor::getHighMemoryProcesses(const std::string & output)\n     bp::pipe err_pipe{err_fd[0], err_fd[1]};\n     bp::ipstream is_err{std::move(err_pipe)};\n \n-    bp::child c(\"sort -r -k 10\", bp::std_out > p2, bp::std_err > is_err, bp::std_in < p1);\n+    bp::child c(\"sort -r -k 10 -n\", bp::std_out > p2, bp::std_err > is_err, bp::std_in < p1);\n     c.wait();\n     if (c.exit_code() != 0) {\n       is_err >> os.rdbuf();"
        }
    ],
    "autowarefoundation/autoware.universe/4655": [
        {
            "sha": "6a812ddf043d92286aa95bc6f390969bf2e91768",
            "filename": "planning/behavior_velocity_intersection_module/src/scene_intersection.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1a8a2a8afeb8de2c35d56628511c32d0cd625134/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1a8a2a8afeb8de2c35d56628511c32d0cd625134/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp?ref=1a8a2a8afeb8de2c35d56628511c32d0cd625134",
            "patch": "@@ -1130,6 +1130,10 @@ bool IntersectionModule::checkCollision(\n         const auto trimmed_ego_polygon =\n           getPolygonFromArcLength(ego_lane_with_next_lanes, start_arc_length, end_arc_length);\n \n+        if (trimmed_ego_polygon.empty()) {\n+          continue;\n+        }\n+\n         Polygon2d polygon{};\n         for (const auto & p : trimmed_ego_polygon) {\n           polygon.outer().emplace_back(p.x(), p.y());"
        }
    ],
    "autowarefoundation/autoware.universe/4659": [
        {
            "sha": "4d3f5b964346258b568808ea47700c01e3a480dd",
            "filename": "localization/ekf_localizer/config/ekf_localizer.param.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d74c8218615ff97e1a1ff66d96a6e545d8aaaa15/localization%2Fekf_localizer%2Fconfig%2Fekf_localizer.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d74c8218615ff97e1a1ff66d96a6e545d8aaaa15/localization%2Fekf_localizer%2Fconfig%2Fekf_localizer.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fekf_localizer%2Fconfig%2Fekf_localizer.param.yaml?ref=d74c8218615ff97e1a1ff66d96a6e545d8aaaa15",
            "patch": "@@ -1,7 +1,7 @@\n /**:\n   ros__parameters:\n     show_debug_info: false\n-    enable_yaw_bias_estimation: True\n+    enable_yaw_bias_estimation: true\n     predict_frequency: 50.0\n     tf_rate: 50.0\n     extend_state_step: 50"
        }
    ],
    "autowarefoundation/autoware.universe/4667": [
        {
            "sha": "3550b2035248a85314c5af9502da13bab18de28c",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9cde8e1abbe217967fc05baa66389da9c369c9ce/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9cde8e1abbe217967fc05baa66389da9c369c9ce/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=9cde8e1abbe217967fc05baa66389da9c369c9ce",
            "patch": "@@ -1223,7 +1223,7 @@ AvoidLineArray AvoidanceModule::getFillGapShiftLines(const AvoidLineArray & shif\n     ret.push_back(calc_gap_shift_line(shift_lines.at(i), shift_lines.at(i + 1)));\n   }\n \n-  utils::avoidance::fillAdditionalInfoFromLongitudinal(avoidance_data_, ret);\n+  utils::avoidance::fillAdditionalInfoFromLongitudinal(avoid_data_, ret);\n \n   return ret;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/4671": [
        {
            "sha": "e6b946a13068295a2b5e5e96e4e8e503e261095c",
            "filename": "planning/behavior_path_planner/src/utils/avoidance/utils.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7772f3f40ac381cbd8a7d0bf4ea1b0f32f1b006c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7772f3f40ac381cbd8a7d0bf4ea1b0f32f1b006c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp?ref=7772f3f40ac381cbd8a7d0bf4ea1b0f32f1b006c",
            "patch": "@@ -1622,7 +1622,8 @@ std::pair<PredictedObjects, PredictedObjects> separateObjectsByPath(\n   double max_offset = 0.0;\n   for (const auto & object_parameter : parameters->object_parameters) {\n     const auto p = object_parameter.second;\n-    const auto offset = p.envelope_buffer_margin + p.safety_buffer_lateral + p.avoid_margin_lateral;\n+    const auto offset =\n+      2.0 * p.envelope_buffer_margin + p.safety_buffer_lateral + p.avoid_margin_lateral;\n     max_offset = std::max(max_offset, offset);\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4672": [
        {
            "sha": "ec14a064bf51bb0e8eb9c99430288aaef287e05d",
            "filename": "planning/behavior_path_planner/src/utils/path_utils.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9b825b572599483639ab41f15083f7843e3ed894/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9b825b572599483639ab41f15083f7843e3ed894/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_utils.cpp?ref=9b825b572599483639ab41f15083f7843e3ed894",
            "patch": "@@ -341,14 +341,23 @@ PathWithLaneId convertWayPointsToPathWithLaneId(\n {\n   PathWithLaneId path;\n   path.header = waypoints.header;\n-  for (const auto & waypoint : waypoints.waypoints) {\n+  for (size_t i = 0; i < waypoints.waypoints.size(); ++i) {\n+    const auto & waypoint = waypoints.waypoints.at(i);\n     PathPointWithLaneId point{};\n     point.point.pose = waypoint.pose.pose;\n+    // put the lane that contain waypoints in lane_ids.\n+    bool is_in_lanes = false;\n     for (const auto & lane : lanelets) {\n       if (lanelet::utils::isInLanelet(point.point.pose, lane)) {\n         point.lane_ids.push_back(lane.id());\n+        is_in_lanes = true;\n       }\n     }\n+    // If none of them corresponds, assign the previous lane_ids.\n+    if (!is_in_lanes && i > 0) {\n+      point.lane_ids = path.points.at(i - 1).lane_ids;\n+    }\n+\n     point.point.longitudinal_velocity_mps = (waypoint.is_back ? -1 : 1) * velocity;\n     path.points.push_back(point);\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/4676": [
        {
            "sha": "21cb19edcd0ec06273971a7af6d6ea3ae184139a",
            "filename": "perception/compare_map_segmentation/include/compare_map_segmentation/voxel_grid_map_loader.hpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e8ea750926eee6f1fde07247b5d8a6e02d6a2b8d/perception%2Fcompare_map_segmentation%2Finclude%2Fcompare_map_segmentation%2Fvoxel_grid_map_loader.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e8ea750926eee6f1fde07247b5d8a6e02d6a2b8d/perception%2Fcompare_map_segmentation%2Finclude%2Fcompare_map_segmentation%2Fvoxel_grid_map_loader.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fcompare_map_segmentation%2Finclude%2Fcompare_map_segmentation%2Fvoxel_grid_map_loader.hpp?ref=e8ea750926eee6f1fde07247b5d8a6e02d6a2b8d",
            "patch": "@@ -260,7 +260,8 @@ class VoxelGridDynamicMapLoader : public VoxelGridMapLoader\n       int index = static_cast<int>(\n         std::floor((kv.second.min_b_x - origin_x_) / map_grid_size_x_) +\n         map_grids_x_ * std::floor((kv.second.min_b_y - origin_y_) / map_grid_size_y_));\n-      if (index >= map_grids_x_ * map_grids_y_) {\n+      // TODO(1222-takeshi): check if index is valid\n+      if (index >= map_grids_x_ * map_grids_y_ || index < 0) {\n         continue;\n       }\n       current_voxel_grid_array_.at(index) = std::make_shared<MapGridVoxelInfo>(kv.second);"
        }
    ],
    "autowarefoundation/autoware.universe/4678": [
        {
            "sha": "075190095d23b698f8a7ae62f108d2e013fb973e",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/aba9d7131d4b107a176a85053dc2c309073e6dc1/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/aba9d7131d4b107a176a85053dc2c309073e6dc1/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=aba9d7131d4b107a176a85053dc2c309073e6dc1",
            "patch": "@@ -1606,6 +1606,10 @@ std::vector<geometry_msgs::msg::Point> calcBound(\n       const auto polygon =\n         route_handler->getLaneletMapPtr()->polygonLayer.get(std::atoi(id.c_str()));\n \n+      const auto is_clockwise_polygon =\n+        boost::geometry::is_valid(lanelet::utils::to2D(polygon.basicPolygon()));\n+      const auto is_clockwise_iteration = is_clockwise_polygon ? is_left : !is_left;\n+\n       const auto start_itr = std::find_if(polygon.begin(), polygon.end(), [&bound](const auto & p) {\n         return p.id() == bound.front().id();\n       });\n@@ -1621,7 +1625,8 @@ std::vector<geometry_msgs::msg::Point> calcBound(\n       // extract line strings between start_idx and end_idx.\n       const size_t start_idx = std::distance(polygon.begin(), start_itr);\n       const size_t end_idx = std::distance(polygon.begin(), end_itr);\n-      for (const auto & point : extract_bound_from_polygon(polygon, start_idx, end_idx, is_left)) {\n+      for (const auto & point :\n+           extract_bound_from_polygon(polygon, start_idx, end_idx, is_clockwise_iteration)) {\n         output_points.push_back(point);\n       }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4684": [
        {
            "sha": "a34fd745af0473ba94487cb76323739e4a4b37a0",
            "filename": "planning/freespace_planning_algorithms/test/debug_plot.py",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a6dcab2a3fe0fd81b01d7a98dd1ae883b0f0db72/planning%2Ffreespace_planning_algorithms%2Ftest%2Fdebug_plot.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a6dcab2a3fe0fd81b01d7a98dd1ae883b0f0db72/planning%2Ffreespace_planning_algorithms%2Ftest%2Fdebug_plot.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Ffreespace_planning_algorithms%2Ftest%2Fdebug_plot.py?ref=a6dcab2a3fe0fd81b01d7a98dd1ae883b0f0db72",
            "patch": "@@ -223,6 +223,6 @@ def create_concat_png(src_list, dest, is_horizontal):\n             plt.savefig(file_name)\n             print(\"saved to {}\".format(file_name))\n \n-        algowise_summary_file = os.path.join(\"/tmp\", \"summary-{}.png\".format(algo_name))\n+        algo_summary_file = os.path.join(\"/tmp\", \"summary-{}.png\".format(algo_name))\n         if concat:\n-            create_concat_png(algo_png_images, algowise_summary_file, True)\n+            create_concat_png(algo_png_images, algo_summary_file, True)"
        }
    ],
    "autowarefoundation/autoware.universe/4696": [
        {
            "sha": "afe345490201baa49426c7f5034aeaa1dcb5f246",
            "filename": "planning/costmap_generator/nodes/costmap_generator/costmap_generator_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/64f789a8435be274f021f95bca5b0cdfef73c726/planning%2Fcostmap_generator%2Fnodes%2Fcostmap_generator%2Fcostmap_generator_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/64f789a8435be274f021f95bca5b0cdfef73c726/planning%2Fcostmap_generator%2Fnodes%2Fcostmap_generator%2Fcostmap_generator_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fcostmap_generator%2Fnodes%2Fcostmap_generator%2Fcostmap_generator_node.cpp?ref=64f789a8435be274f021f95bca5b0cdfef73c726",
            "patch": "@@ -350,6 +350,7 @@ bool CostmapGenerator::isActive()\n     return false;\n   } else {\n     const auto & current_pose_wrt_map = getCurrentPose(tf_buffer_, this->get_logger());\n+    if (!current_pose_wrt_map) return false;\n     return isInParkingLot(lanelet_map_, current_pose_wrt_map->pose);\n   }\n }"
        }
    ],
    "autowarefoundation/autoware.universe/4697": [
        {
            "sha": "13128ceffd2ca522c8f03f916db94720ec6c778d",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 56,
            "deletions": 21,
            "changes": 77,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6f230793e7de80842d7618b8ac110588c9d5b986/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6f230793e7de80842d7618b8ac110588c9d5b986/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=6f230793e7de80842d7618b8ac110588c9d5b986",
            "patch": "@@ -1223,6 +1223,7 @@ boost::optional<size_t> getOverlappedLaneletId(const std::vector<DrivableLanes>\n         boost::geometry::intersection(\n           lanelet.polygon2d().basicPolygon(), target_lanelet.polygon2d().basicPolygon(),\n           intersections);\n+\n         // if only one point intersects, it is assumed not to be overlapped\n         if (intersections.size() > 1) {\n           return true;\n@@ -1265,35 +1266,69 @@ std::vector<DrivableLanes> cutOverlappedLanes(\n   std::vector<DrivableLanes> shorten_lanes{lanes.begin(), lanes.begin() + *overlapped_lanelet_idx};\n   const auto shorten_lanelets = utils::transformToLanelets(shorten_lanes);\n \n-  // create removed lanelets\n-  std::vector<int64_t> removed_lane_ids;\n-  for (size_t i = *overlapped_lanelet_idx; i < lanes.size(); ++i) {\n-    const auto target_lanelets = utils::transformToLanelets(lanes.at(i));\n-    for (const auto & target_lanelet : target_lanelets) {\n-      // if target lane is inside of the shorten lanelets, we do not remove it\n-      if (checkHasSameLane(shorten_lanelets, target_lanelet)) {\n-        continue;\n+  const auto original_points = path.points;\n+\n+  path.points.clear();\n+\n+  const auto has_same_id_lane = [](const auto & lanelet, const auto & p) {\n+    return std::any_of(p.lane_ids.begin(), p.lane_ids.end(), [&lanelet](const auto id) {\n+      return lanelet.id() == id;\n+    });\n+  };\n+\n+  const auto has_same_id_lanes = [&has_same_id_lane](const auto & lanelets, const auto & p) {\n+    return std::any_of(\n+      lanelets.begin(), lanelets.end(),\n+      [&has_same_id_lane, &p](const auto & lanelet) { return has_same_id_lane(lanelet, p); });\n+  };\n+\n+  // Step1. find first path point within drivable lanes\n+  size_t start_point_idx = std::numeric_limits<size_t>::max();\n+  for (const auto & lanes : shorten_lanes) {\n+    for (size_t i = 0; i < original_points.size(); ++i) {\n+      // check right lane\n+      if (has_same_id_lane(lanes.right_lane, original_points.at(i))) {\n+        start_point_idx = std::min(start_point_idx, i);\n+      }\n+\n+      // check left lane\n+      if (has_same_id_lane(lanes.left_lane, original_points.at(i))) {\n+        start_point_idx = std::min(start_point_idx, i);\n+      }\n+\n+      // check middle lanes\n+      if (has_same_id_lanes(lanes.middle_lanes, original_points.at(i))) {\n+        start_point_idx = std::min(start_point_idx, i);\n       }\n-      removed_lane_ids.push_back(target_lanelet.id());\n     }\n   }\n \n-  const auto is_same_lane_id = [&removed_lane_ids](const auto & point) {\n-    const auto & lane_ids = point.lane_ids;\n-    for (const auto & lane_id : lane_ids) {\n-      const auto is_same_id = [&lane_id](const auto id) { return lane_id == id; };\n+  // Step2. pick up only path points within drivable lanes\n+  for (const auto & lanes : shorten_lanes) {\n+    for (size_t i = start_point_idx; i < original_points.size(); ++i) {\n+      // check right lane\n+      if (has_same_id_lane(lanes.right_lane, original_points.at(i))) {\n+        path.points.push_back(original_points.at(i));\n+        continue;\n+      }\n \n-      if (std::any_of(removed_lane_ids.begin(), removed_lane_ids.end(), is_same_id)) {\n-        return true;\n+      // check left lane\n+      if (has_same_id_lane(lanes.left_lane, original_points.at(i))) {\n+        path.points.push_back(original_points.at(i));\n+        continue;\n       }\n-    }\n-    return false;\n-  };\n \n-  const auto points_with_overlapped_id =\n-    std::remove_if(path.points.begin(), path.points.end(), is_same_lane_id);\n+      // check middle lanes\n+      if (has_same_id_lanes(lanes.middle_lanes, original_points.at(i))) {\n+        path.points.push_back(original_points.at(i));\n+        continue;\n+      }\n+\n+      start_point_idx = i;\n+      break;\n+    }\n+  }\n \n-  path.points.erase(points_with_overlapped_id, path.points.end());\n   return shorten_lanes;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4706": [
        {
            "sha": "15607b737742e1cc684336c5df9557991ce87ca1",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 16,
            "deletions": 2,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2a25c4038652e6ed72f60921270351e9707de05c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2a25c4038652e6ed72f60921270351e9707de05c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=2a25c4038652e6ed72f60921270351e9707de05c",
            "patch": "@@ -1755,8 +1755,22 @@ void makeBoundLongitudinallyMonotonic(\n         continue;\n       }\n \n-      for (size_t j = intersect_idx.get() + 1; j < bound_with_pose.size(); j++) {\n-        set_orientation(ret, j, getPose(path_points.at(i)).orientation);\n+      if (i + 1 == path_points.size()) {\n+        for (size_t j = intersect_idx.get(); j < bound_with_pose.size(); j++) {\n+          if (j + 1 == bound_with_pose.size()) {\n+            const auto yaw =\n+              calcAzimuthAngle(bound_with_pose.at(j - 1).position, bound_with_pose.at(j).position);\n+            set_orientation(ret, j, createQuaternionFromRPY(0.0, 0.0, yaw));\n+          } else {\n+            const auto yaw =\n+              calcAzimuthAngle(bound_with_pose.at(j).position, bound_with_pose.at(j + 1).position);\n+            set_orientation(ret, j, createQuaternionFromRPY(0.0, 0.0, yaw));\n+          }\n+        }\n+      } else {\n+        for (size_t j = intersect_idx.get() + 1; j < bound_with_pose.size(); j++) {\n+          set_orientation(ret, j, getPose(path_points.at(i)).orientation);\n+        }\n       }\n \n       constexpr size_t OVERLAP_CHECK_NUM = 3;"
        }
    ],
    "autowarefoundation/autoware.universe/4707": [
        {
            "sha": "ac1f509c6b1c6747306ed6d3d38866f9cce83ad6",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d94b1a8d0cd95d53733cae3aa682244d0edb9326/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d94b1a8d0cd95d53733cae3aa682244d0edb9326/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=d94b1a8d0cd95d53733cae3aa682244d0edb9326",
            "patch": "@@ -972,7 +972,16 @@ bool NormalLaneChange::getLaneChangePaths(\n       const lanelet::BasicPoint2d lc_start_point(\n         prepare_segment.points.back().point.pose.position.x,\n         prepare_segment.points.back().point.pose.position.y);\n-      if (!boost::geometry::covered_by(lc_start_point, target_neighbor_preferred_lane_poly_2d)) {\n+\n+      const auto target_lane_polygon = lanelet::utils::getPolygonFromArcLength(\n+        target_lanes, 0, std::numeric_limits<double>::max());\n+      const auto target_lane_poly_2d = lanelet::utils::to2D(target_lane_polygon).basicPolygon();\n+\n+      const auto is_valid_start_point =\n+        boost::geometry::covered_by(lc_start_point, target_neighbor_preferred_lane_poly_2d) ||\n+        boost::geometry::covered_by(lc_start_point, target_lane_poly_2d);\n+\n+      if (!is_valid_start_point) {\n         // lane changing points are not inside of the target preferred lanes or its neighbors\n         continue;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/4717": [
        {
            "sha": "57f2302fd5c5ac34aef563b3c6b25262e73659dd",
            "filename": "localization/yabloc/yabloc_image_processing/src/line_segment_detector/line_segment_detector_core.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2559cc62c51441f41d97c94ef936ee9758f0a310/localization%2Fyabloc%2Fyabloc_image_processing%2Fsrc%2Fline_segment_detector%2Fline_segment_detector_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2559cc62c51441f41d97c94ef936ee9758f0a310/localization%2Fyabloc%2Fyabloc_image_processing%2Fsrc%2Fline_segment_detector%2Fline_segment_detector_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fyabloc%2Fyabloc_image_processing%2Fsrc%2Fline_segment_detector%2Fline_segment_detector_core.cpp?ref=2559cc62c51441f41d97c94ef936ee9758f0a310",
            "patch": "@@ -54,7 +54,9 @@ void LineSegmentDetector::execute(const cv::Mat & image, const rclcpp::Time & st\n   {\n     tier4_autoware_utils::StopWatch stop_watch;\n     line_segment_detector_->detect(gray_image, lines);\n-    line_segment_detector_->drawSegments(gray_image, lines);\n+    if (lines.size().width != 0) {\n+      line_segment_detector_->drawSegments(gray_image, lines);\n+    }\n     RCLCPP_INFO_STREAM(this->get_logger(), \"lsd: \" << stop_watch.toc() << \"[ms]\");\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4732": [
        {
            "sha": "fddd535931d947797c48a8add938acd48cebadc6",
            "filename": "planning/behavior_path_planner/docs/behavior_path_planner_lane_change_design.md",
            "status": "modified",
            "additions": 7,
            "deletions": 13,
            "changes": 20,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b1d0940fcf73bc98ec489b2e13906cd957e399c5/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_lane_change_design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b1d0940fcf73bc98ec489b2e13906cd957e399c5/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_lane_change_design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_lane_change_design.md?ref=b1d0940fcf73bc98ec489b2e13906cd957e399c5",
            "patch": "@@ -163,6 +163,8 @@ First, we divide the target objects into obstacles in the target lane, obstacles\n \n ![object lanes](../image/lane_change/lane_objects.drawio.svg)\n \n+Furthermore, to change lanes behind a vehicle waiting at a traffic light, we skip the safety check for the stopping vehicles near the traffic light.\n+\n ##### Collision check in prepare phase\n \n The ego vehicle may need to secure ample inter-vehicle distance ahead of the target vehicle before attempting a lane change. The flag `enable_collision_check_at_prepare_phase` can be enabled to gain this behavior. The following image illustrates the differences between the `false` and `true` cases.\n@@ -177,21 +179,13 @@ When driving on the public road with other vehicles, there exist scenarios where\n \n ```C++\n lane_changing_time = f(shift_length, lat_acceleration, lat_jerk)\n-minimum_lane_change_distance = minimum_prepare_length + minimum_lane_changing_velocity * lane_changing_time + backward_length_buffer_for_end_of_lane\n+minimum_lane_change_distance = minimum_prepare_length + minimum_lane_changing_velocity * lane_changing_time + lane_change_finish_judge_buffer\n ```\n \n The following figure illustrates when the lane is blocked in multiple lane changes cases.\n \n ![multiple-lane-changes](../image/lane_change/lane_change-when_cannot_change_lanes.png)\n \n-#### Intersection\n-\n-Lane change in the intersection is prohibited following traffic regulation. Therefore, if the goal is place close passed the intersection, the lane change needs to be completed before ego vehicle enters the intersection region. Similar to the lane blocked case, in case of the path is unsafe, ego vehicle will stop and waits for the dynamic object to pass by.\n-\n-The following figure illustrate the intersection case.\n-\n-![intersection](../image/lane_change/lane_change-intersection_case.png)\n-\n ### Aborting lane change\n \n The abort process may result in three different outcome; Cancel, Abort and Stop/Cruise.\n@@ -215,11 +209,11 @@ while(Lane Following)\n           if (Is Abort Condition Satisfied) then (**NO**)\n           else (**YES**)\n             if (Is Enough margin to retry lane change) then (**YES**)\n-              if (Ego not depart from current lane yet) then (**YES**)\n+              if (Ego is on lane change prepare phase) then (**YES**)\n               :Cancel lane change;\n               break\n               else (**NO**)\n-              if (Can perform abort maneuver) then (**YES**)\n+              if (Will the overhang to target lane be less than threshold?) then (**YES**)\n               :Perform abort maneuver;\n               break\n               else (NO)\n@@ -284,8 +278,8 @@ The following parameters are configurable in `lane_change.param.yaml`.\n | `lateral_acceleration_sampling_num`         | [-]    | int     | Number of possible lane-changing trajectories that are being influenced by lateral acceleration                 | 3                  |\n | `object_check_min_road_shoulder_width`      | [m]    | double  | Vehicles around the center line within this distance will be excluded from parking objects                      | 0.5                |\n | `object_shiftable_ratio_threshold`          | [-]    | double  | Vehicles around the center line within this distance ratio will be excluded from parking objects                | 0.6                |\n-| `min_length_for_turn_signal_activation`     | [m]    | double  | Turn signal will be acitvated if the ego vehicle approaches to this length from minimum lane change length      | 10.0               |\n-| `length_ratio_for_turn_signal_deactivation` | [-]    | double  | Turn signal will be deacitvated if the ego vehicle approaches to this length ratio for lane change finish point | 0.8                |\n+| `min_length_for_turn_signal_activation`     | [m]    | double  | Turn signal will be activated if the ego vehicle approaches to this length from minimum lane change length      | 10.0               |\n+| `length_ratio_for_turn_signal_deactivation` | [-]    | double  | Turn signal will be deactivated if the ego vehicle approaches to this length ratio for lane change finish point | 0.8                |\n | `object_shiftable_ratio_threshold`          | [-]    | double  | Vehicles around the center line within this distance ratio will be excluded from parking objects                | 0.6                |\n | `max_longitudinal_acc`                      | [-]    | double  | maximum longitudinal acceleration for lane change                                                               | 1.0                |\n | `min_longitudinal_acc`                      | [-]    | double  | maximum longitudinal deceleration for lane change                                                               | -1.0               |"
        }
    ],
    "autowarefoundation/autoware.universe/4733": [
        {
            "sha": "3db3e049c3c817fbf4a37958f2d4c287dac8bcef",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 7,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1296eb91570083b1151cc4701a31156a62ba31ff/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1296eb91570083b1151cc4701a31156a62ba31ff/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=1296eb91570083b1151cc4701a31156a62ba31ff",
            "patch": "@@ -645,10 +645,6 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n   const auto & route_handler = *getRouteHandler();\n   const auto & common_parameters = planner_data_->parameters;\n   const auto & objects = *planner_data_->dynamic_object;\n-  const auto & object_check_min_road_shoulder_width =\n-    lane_change_parameters_->object_check_min_road_shoulder_width;\n-  const auto & object_shiftable_ratio_threshold =\n-    lane_change_parameters_->object_shiftable_ratio_threshold;\n \n   // Guard\n   if (objects.objects.empty()) {\n@@ -709,9 +705,8 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n     // check if the object intersects with target lanes\n     if (target_polygon && boost::geometry::intersects(target_polygon.value(), obj_polygon)) {\n       // ignore static parked object that are in front of the ego vehicle in target lanes\n-      bool is_parked_object = utils::lane_change::isParkedObject(\n-        target_path, route_handler, extended_object, object_check_min_road_shoulder_width,\n-        object_shiftable_ratio_threshold);\n+      bool is_parked_object =\n+        utils::lane_change::isParkedObject(target_path, route_handler, extended_object, 0.0, 0.0);\n       if (is_parked_object && min_dist_ego_to_obj > min_dist_to_lane_changing_start) {\n         continue;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/4740": [
        {
            "sha": "86f767560fd7c4ef4f5cadb3f792b3fb44274503",
            "filename": "planning/motion_velocity_smoother/launch/motion_velocity_smoother.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/433eb45bf1b6473aa56431d117cbc15b9cafb01d/planning%2Fmotion_velocity_smoother%2Flaunch%2Fmotion_velocity_smoother.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/433eb45bf1b6473aa56431d117cbc15b9cafb01d/planning%2Fmotion_velocity_smoother%2Flaunch%2Fmotion_velocity_smoother.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fmotion_velocity_smoother%2Flaunch%2Fmotion_velocity_smoother.launch.xml?ref=433eb45bf1b6473aa56431d117cbc15b9cafb01d",
            "patch": "@@ -13,13 +13,13 @@\n   <!-- Analytical, JerkFiltered, L2, or Linf -->\n \n   <arg name=\"param_path\" default=\"$(find-pkg-share motion_velocity_smoother)/config/default_motion_velocity_smoother.param.yaml\"/>\n-  <arg name=\"smoother_param_path\" default=\"$(find-pkg-share motion_velocity_smoother)/config/$(var velocity_smoother_type).param.yaml\"/>\n+  <arg name=\"velocity_smoother_param_path\" default=\"$(find-pkg-share motion_velocity_smoother)/config/$(var velocity_smoother_type).param.yaml\"/>\n \n   <node pkg=\"motion_velocity_smoother\" exec=\"motion_velocity_smoother\" name=\"motion_velocity_smoother\" output=\"screen\">\n     <param from=\"$(var common_param_path)\"/>\n     <param from=\"$(var nearest_search_param_path)\"/>\n     <param from=\"$(var param_path)\"/>\n-    <param from=\"$(var smoother_param_path)\"/>\n+    <param from=\"$(var velocity_smoother_param_path)\"/>\n     <param name=\"publish_debug_trajs\" value=\"$(var publish_debug_trajs)\"/>\n     <param name=\"algorithm_type\" value=\"$(var velocity_smoother_type)\"/>\n     <remap from=\"~/input/trajectory\" to=\"$(var input_trajectory)\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/4748": [
        {
            "sha": "f942d9a00c098858560e2dbf8b8152d87b12d257",
            "filename": "planning/planning_debug_tools/scripts/trajectory_visualizer.py",
            "status": "modified",
            "additions": 14,
            "deletions": 3,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/69c87386d3b0871b7a7ae6dafd6d8bb1015950be/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/69c87386d3b0871b7a7ae6dafd6d8bb1015950be/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py?ref=69c87386d3b0871b7a7ae6dafd6d8bb1015950be",
            "patch": "@@ -40,6 +40,13 @@\n     help=\"Options  VEL(default): show velocity only, VEL_ACC_JERK: show vel & acc & jerk\",\n )\n \n+parser.add_argument(\n+    \"-v\",\n+    \"--max-velocity\",\n+    type=int,\n+    help=\"maximum plotting velocity in Matplotlib\",\n+)\n+\n args = parser.parse_args()\n \n PLOT_MIN_ARCLENGTH = -5\n@@ -61,6 +68,11 @@\n     PLOT_TYPE = \"VEL\"\n print(\"plot type = \" + PLOT_TYPE)\n \n+if args.max_velocity is None:\n+    MAX_VELOCITY = 20\n+else:\n+    MAX_VELOCITY = args.max_velocity\n+\n \n class TrajectoryVisualizer(Node):\n     def __init__(self):\n@@ -274,6 +286,7 @@ def setPlotTrajectoryVelocity(self):\n         self.ax1.set_title(\"trajectory's velocity\")\n         self.ax1.legend()\n         self.ax1.set_xlim([PLOT_MIN_ARCLENGTH, PLOT_MAX_ARCLENGTH])\n+        self.ax1.set_ylim([0, MAX_VELOCITY])\n         self.ax1.set_ylabel(\"vel [m/s]\")\n \n         return (\n@@ -398,9 +411,6 @@ def plotTrajectoryVelocity(self, data):\n             if len(y) != 0:\n                 self.min_vel = np.min(y)\n \n-        # change y-range\n-        self.ax1.set_ylim([self.min_vel - 1.0, self.max_vel + 1.0])\n-\n         return (\n             self.im1,\n             self.im2,\n@@ -577,6 +587,7 @@ def setPlotTrajectory(self):\n         self.ax1.set_title(\"trajectory's velocity\")\n         self.ax1.legend()\n         self.ax1.set_xlim([PLOT_MIN_ARCLENGTH, PLOT_MAX_ARCLENGTH])\n+        self.ax1.set_ylim([0, MAX_VELOCITY])\n         self.ax1.set_ylabel(\"vel [m/s]\")\n \n         self.ax2 = plt.subplot(3, 1, 2)"
        }
    ],
    "autowarefoundation/autoware.universe/4750": [
        {
            "sha": "0edfa6167e999ea9569f6f6bcabd3c1a1cdb6f3a",
            "filename": "planning/behavior_velocity_crosswalk_module/src/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d43890e681cfc1574968c031055a3f93fdef68b4/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d43890e681cfc1574968c031055a3f93fdef68b4/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp?ref=d43890e681cfc1574968c031055a3f93fdef68b4",
            "patch": "@@ -1034,6 +1034,9 @@ void CrosswalkModule::setDistanceToStop(\n void CrosswalkModule::planGo(\n   PathWithLaneId & ego_path, const std::optional<StopFactor> & stop_factor) const\n {\n+  if (!stop_factor.has_value()) {\n+    return;\n+  }\n   // Plan slow down\n   const auto target_velocity = calcTargetVelocity(stop_factor->stop_pose.position, ego_path);\n   insertDecelPointWithDebugInfo("
        }
    ],
    "autowarefoundation/autoware.universe/4753": [
        {
            "sha": "e31db7890cf47d101df511bd0a259b6685aa90ec",
            "filename": "map/map_projection_loader/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/199776945dc1790a86770d023fb0d9848249bd23/map%2Fmap_projection_loader%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/199776945dc1790a86770d023fb0d9848249bd23/map%2Fmap_projection_loader%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_projection_loader%2FREADME.md?ref=199776945dc1790a86770d023fb0d9848249bd23",
            "patch": "@@ -25,7 +25,7 @@ sample-map-rosbag\n \n ```yaml\n # map_projector_info.yaml\n-type: \"Local\"\n+type: \"local\"\n ```\n \n ### Using MGRS"
        }
    ],
    "autowarefoundation/autoware.universe/4755": [
        {
            "sha": "eaba338555940cbdd8c642bd5ac167c5d0251e8b",
            "filename": "planning/obstacle_stop_planner/src/adaptive_cruise_control.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 11,
            "changes": 21,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c61e6817f0aba0efdb14d64d95451c83ae558f22/planning%2Fobstacle_stop_planner%2Fsrc%2Fadaptive_cruise_control.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c61e6817f0aba0efdb14d64d95451c83ae558f22/planning%2Fobstacle_stop_planner%2Fsrc%2Fadaptive_cruise_control.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_stop_planner%2Fsrc%2Fadaptive_cruise_control.cpp?ref=c61e6817f0aba0efdb14d64d95451c83ae558f22",
            "patch": "@@ -14,6 +14,8 @@\n \n #include \"obstacle_stop_planner/adaptive_cruise_control.hpp\"\n \n+#include \"motion_utils/trajectory/trajectory.hpp\"\n+\n #include <boost/algorithm/clamp.hpp>\n #include <boost/assert.hpp>\n #include <boost/assign/list_of.hpp>\n@@ -306,9 +308,7 @@ void AdaptiveCruiseController::calcDistanceToNearestPointOnPath(\n   /* get total distance to collision point */\n   double dist_to_point = 0;\n   // get distance from self to next nearest point\n-  dist_to_point += boost::geometry::distance(\n-    convertPointRosToBoost(self_pose.position),\n-    convertPointRosToBoost(trajectory.at(1).pose.position));\n+  dist_to_point += motion_utils::calcSignedArcLength(trajectory, self_pose.position, size_t(1));\n \n   // add distance from next self-nearest-point(=idx:0) to prev point of nearest_point_idx\n   for (int i = 1; i < nearest_point_idx - 1; i++) {\n@@ -593,15 +593,13 @@ void AdaptiveCruiseController::insertMaxVelocityToPath(\n   const geometry_msgs::msg::Pose self_pose, const double current_vel, const double target_vel,\n   const double dist_to_collision_point, TrajectoryPoints * output_trajectory)\n {\n-  // plus distance from self to next nearest point\n-  double dist = dist_to_collision_point;\n+  // signed distance from self pose to the point of index 1\n   double dist_to_first_point = 0.0;\n+\n   if (output_trajectory->size() > 1) {\n-    dist_to_first_point = boost::geometry::distance(\n-      convertPointRosToBoost(self_pose.position),\n-      convertPointRosToBoost(output_trajectory->at(1).pose.position));\n+    dist_to_first_point =\n+      motion_utils::calcSignedArcLength(*output_trajectory, self_pose.position, size_t(1));\n   }\n-  dist += dist_to_first_point;\n \n   double margin_to_insert = dist_to_collision_point * param_.margin_rate_to_change_vel;\n   // accel = (v_after^2 - v_before^2 ) / 2x\n@@ -610,7 +608,7 @@ void AdaptiveCruiseController::insertMaxVelocityToPath(\n   const double clipped_acc = boost::algorithm::clamp(\n     target_acc, param_.min_standard_acceleration, param_.max_standard_acceleration);\n   double pre_vel = current_vel;\n-  double total_dist = 0.0;\n+  double total_dist = dist_to_first_point;\n   for (size_t i = 1; i < output_trajectory->size(); i++) {\n     // calc velocity of each point by gradient deceleration\n     const auto current_p = output_trajectory->at(i);\n@@ -623,7 +621,8 @@ void AdaptiveCruiseController::insertMaxVelocityToPath(\n         next_pre_vel = pre_vel;\n       } else {\n         // v_after = sqrt (2x*accel + v_before^2)\n-        next_pre_vel = std::sqrt(2 * p_dist * clipped_acc + std::pow(pre_vel, 2));\n+        next_pre_vel =\n+          std::sqrt(2 * std::min(p_dist, total_dist) * clipped_acc + std::pow(pre_vel, 2));\n       }\n       if (target_acc >= 0) {\n         next_pre_vel = std::min(next_pre_vel, target_vel);"
        }
    ],
    "autowarefoundation/autoware.universe/4761": [
        {
            "sha": "9924319b141f70e3c7f1f2b2ba9b6b41e84f80b5",
            "filename": "planning/behavior_velocity_out_of_lane_module/src/lanelets_selection.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 7,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/e8cb69d846e43922745d8a96e16ea3c54e5df16b/planning%2Fbehavior_velocity_out_of_lane_module%2Fsrc%2Flanelets_selection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/e8cb69d846e43922745d8a96e16ea3c54e5df16b/planning%2Fbehavior_velocity_out_of_lane_module%2Fsrc%2Flanelets_selection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_out_of_lane_module%2Fsrc%2Flanelets_selection.cpp?ref=e8cb69d846e43922745d8a96e16ea3c54e5df16b",
            "patch": "@@ -54,16 +54,21 @@ lanelet::ConstLanelets calculate_other_lanelets(\n   const auto lanelets_within_range = lanelet::geometry::findWithin2d(\n     route_handler.getLaneletMapPtr()->laneletLayer, ego_point,\n     std::max(params.slow_dist_threshold, params.stop_dist_threshold));\n+  const auto is_overlapped_by_path_lanelets = [&](const auto & l) {\n+    for (const auto & path_ll : path_lanelets) {\n+      if (\n+        boost::geometry::overlaps(\n+          path_ll.polygon2d().basicPolygon(), l.polygon2d().basicPolygon()) ||\n+        boost::geometry::within(path_ll.polygon2d().basicPolygon(), l.polygon2d().basicPolygon()) ||\n+        boost::geometry::within(l.polygon2d().basicPolygon(), path_ll.polygon2d().basicPolygon())) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  };\n   for (const auto & ll : lanelets_within_range) {\n     const auto is_path_lanelet = contains_lanelet(path_lanelets, ll.second.id());\n     const auto is_ignored_lanelet = contains_lanelet(ignored_lanelets, ll.second.id());\n-    const auto is_overlapped_by_path_lanelets = [&](const auto & l) {\n-      for (const auto & path_ll : path_lanelets)\n-        if (boost::geometry::overlaps(\n-              path_ll.polygon2d().basicPolygon(), l.polygon2d().basicPolygon()))\n-          return true;\n-      return false;\n-    };\n     if (!is_path_lanelet && !is_ignored_lanelet && !is_overlapped_by_path_lanelets(ll.second))\n       other_lanelets.push_back(ll.second);\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/4780": [
        {
            "sha": "a65302aea866d03bcd78b53b7ef9e140e0015b39",
            "filename": "perception/radar_fusion_to_detected_object/src/radar_object_fusion_to_detected_object_node/radar_object_fusion_to_detected_object_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/72cd2bc1b63c3e6a84739fcd8e0fad74ca2a171c/perception%2Fradar_fusion_to_detected_object%2Fsrc%2Fradar_object_fusion_to_detected_object_node%2Fradar_object_fusion_to_detected_object_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/72cd2bc1b63c3e6a84739fcd8e0fad74ca2a171c/perception%2Fradar_fusion_to_detected_object%2Fsrc%2Fradar_object_fusion_to_detected_object_node%2Fradar_object_fusion_to_detected_object_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fradar_fusion_to_detected_object%2Fsrc%2Fradar_object_fusion_to_detected_object_node%2Fradar_object_fusion_to_detected_object_node.cpp?ref=72cd2bc1b63c3e6a84739fcd8e0fad74ca2a171c",
            "patch": "@@ -97,7 +97,7 @@ RadarObjectFusionToDetectedObjectNode::RadarObjectFusionToDetectedObjectNode(\n \n   using std::placeholders::_1;\n   using std::placeholders::_2;\n-  sync_ptr_ = std::make_shared<Sync>(SyncPolicy(10), sub_object_, sub_radar_);\n+  sync_ptr_ = std::make_shared<Sync>(SyncPolicy(20), sub_object_, sub_radar_);\n   sync_ptr_->registerCallback(\n     std::bind(&RadarObjectFusionToDetectedObjectNode::onData, this, _1, _2));\n "
        }
    ],
    "autowarefoundation/autoware.universe/4793": [
        {
            "sha": "2aade12d5f1cfbcc7bfa4f36021cc09c5c10dae6",
            "filename": "control/control_validator/src/utils.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/558f4cccf489855c4ec9be9929314f3b717e37dd/control%2Fcontrol_validator%2Fsrc%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/558f4cccf489855c4ec9be9929314f3b717e37dd/control%2Fcontrol_validator%2Fsrc%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fcontrol_validator%2Fsrc%2Futils.cpp?ref=558f4cccf489855c4ec9be9929314f3b717e37dd",
            "patch": "@@ -152,8 +152,8 @@ double calcMaxLateralDistance(\n     // find nearest segment\n     const size_t nearest_segment_idx =\n       motion_utils::findNearestSegmentIndex(reference_trajectory.points, p0);\n-    double temp_dist =\n-      motion_utils::calcLateralOffset(reference_trajectory.points, p0, nearest_segment_idx);\n+    const double temp_dist = std::abs(\n+      motion_utils::calcLateralOffset(reference_trajectory.points, p0, nearest_segment_idx));\n     if (temp_dist > max_dist) {\n       max_dist = temp_dist;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/4794": [
        {
            "sha": "9fe5121ee3dbd7327f1c03004a08f7a8c35bbd0f",
            "filename": "control/control_validator/src/control_validator.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ebf5295c7b9f6509c166efce056667272dd51a81/control%2Fcontrol_validator%2Fsrc%2Fcontrol_validator.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ebf5295c7b9f6509c166efce056667272dd51a81/control%2Fcontrol_validator%2Fsrc%2Fcontrol_validator.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fcontrol_validator%2Fsrc%2Fcontrol_validator.cpp?ref=ebf5295c7b9f6509c166efce056667272dd51a81",
            "patch": "@@ -204,7 +204,9 @@ void ControlValidator::displayStatus()\n \n   const auto & s = validation_status_;\n \n-  warn(s.is_valid_max_distance_deviation, \"planning trajectory is too far from ego!!\");\n+  warn(\n+    s.is_valid_max_distance_deviation,\n+    \"predicted trajectory is too far from planning trajectory!!\");\n }\n \n }  // namespace control_validator"
        }
    ],
    "autowarefoundation/autoware.universe/4817": [
        {
            "sha": "2a04580aef5b5a696ee1c02247c314ec56f10ee3",
            "filename": "planning/behavior_path_planner/docs/behavior_path_planner_lane_change_design.md",
            "status": "modified",
            "additions": 4,
            "deletions": 5,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/05eb4f1f63d1f58ed8042e50fbca57deda398192/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_lane_change_design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/05eb4f1f63d1f58ed8042e50fbca57deda398192/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_lane_change_design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_lane_change_design.md?ref=05eb4f1f63d1f58ed8042e50fbca57deda398192",
            "patch": "@@ -55,12 +55,12 @@ where `common_param` is vehicle common parameter, which defines vehicle common m\n The `longitudinal_acceleration_resolution` is determine by the following\n \n ```C++\n-longitudinal_acceleration_resolution = (maximum_longitudinal_acceleration - minimum_longitudinal_deceleration) / longitudinal_acceleration_sampling_num\n+longitudinal_acceleration_resolution = (maximum_longitudinal_acceleration - minimum_longitudinal_acceleration) / longitudinal_acceleration_sampling_num\n ```\n \n Note that when the `current_velocity` is lower than `minimum_lane_changing_velocity`, the vehicle needs to accelerate its velocity to `minimum_lane_changing_velocity`. Therefore, longitudinal acceleration becomes positive value (not decelerate).\n \n-The following figure illustrates when `lane_change_sampling_num = 4`. Assuming that `maximum_deceleration = 1.0` then `a0 == 0.0 == no deceleration`, `a1 == 0.25`, `a2 == 0.5`, `a3 == 0.75` and `a4 == 1.0 == maximum_deceleration`. `a0` is the expected lane change trajectories should ego vehicle do not decelerate, and `a1`'s path is the expected lane change trajectories should ego vehicle decelerate at `0.25 m/s^2`.\n+The following figure illustrates when `longitudinal_acceleration_sampling_num = 4`. Assuming that `maximum_deceleration = 1.0` then `a0 == 0.0 == no deceleration`, `a1 == 0.25`, `a2 == 0.5`, `a3 == 0.75` and `a4 == 1.0 == maximum_deceleration`. `a0` is the expected lane change trajectories should ego vehicle do not decelerate, and `a1`'s path is the expected lane change trajectories should ego vehicle decelerate at `0.25 m/s^2`.\n \n ![path_samples](../image/lane_change/lane_change-candidate_path_samples.png)\n \n@@ -79,12 +79,12 @@ The maximum and minimum lateral accelerations are defined in the lane change par\n | 4.0          | 0.3                          | 0.4                          |\n | 6.0          | 0.3                          | 0.5                          |\n \n-In this case, when the current velocity of the ego vehicle is 3.0, the minimum and maximum lateral accelerations are 0.2 and 0.35 respectively. These values are obtained by linearly interpolating the second and third rows of the map, which provide the minimum and maximum lateral acceleration values.\n+In this case, when the current velocity of the ego vehicle is 3.0, the minimum and maximum lateral accelerations are 0.25 and 0.4 respectively. These values are obtained by linearly interpolating the second and third rows of the map, which provide the minimum and maximum lateral acceleration values.\n \n Within this range, we sample the lateral acceleration for the ego vehicle. Similar to the method used for sampling longitudinal acceleration, the resolution of lateral acceleration (lateral_acceleration_resolution) is determined by the following:\n \n ```C++\n-lateral_acceleration_resolution = (maximum_lateral_acceleration - minimum_lateral_deceleration) / lateral_acceleration_sampling_num\n+lateral_acceleration_resolution = (maximum_lateral_acceleration - minimum_lateral_acceleration) / lateral_acceleration_sampling_num\n ```\n \n #### Candidate Path's validity check\n@@ -280,7 +280,6 @@ The following parameters are configurable in `lane_change.param.yaml`.\n | `object_shiftable_ratio_threshold`          | [-]    | double  | Vehicles around the center line within this distance ratio will be excluded from parking objects                | 0.6                |\n | `min_length_for_turn_signal_activation`     | [m]    | double  | Turn signal will be activated if the ego vehicle approaches to this length from minimum lane change length      | 10.0               |\n | `length_ratio_for_turn_signal_deactivation` | [-]    | double  | Turn signal will be deactivated if the ego vehicle approaches to this length ratio for lane change finish point | 0.8                |\n-| `object_shiftable_ratio_threshold`          | [-]    | double  | Vehicles around the center line within this distance ratio will be excluded from parking objects                | 0.6                |\n | `max_longitudinal_acc`                      | [-]    | double  | maximum longitudinal acceleration for lane change                                                               | 1.0                |\n | `min_longitudinal_acc`                      | [-]    | double  | maximum longitudinal deceleration for lane change                                                               | -1.0               |\n | `lateral_acceleration.velocity`             | [m/s]  | double  | Reference velocity for lateral acceleration calculation (look up table)                                         | [0.0, 4.0, 10.0]   |"
        }
    ],
    "autowarefoundation/autoware.universe/4822": [
        {
            "sha": "8a9de1a5632498c62a96df23d7ed0363f168bdc5",
            "filename": "planning/behavior_velocity_crosswalk_module/scripts/time_to_collision_plotter.py",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0a0578501719bc7e9b0f3aeab4820c54ca59d8d8/planning%2Fbehavior_velocity_crosswalk_module%2Fscripts%2Ftime_to_collision_plotter.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0a0578501719bc7e9b0f3aeab4820c54ca59d8d8/planning%2Fbehavior_velocity_crosswalk_module%2Fscripts%2Ftime_to_collision_plotter.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_crosswalk_module%2Fscripts%2Ftime_to_collision_plotter.py?ref=0a0578501719bc7e9b0f3aeab4820c54ca59d8d8",
            "patch": "@@ -109,7 +109,9 @@ def on_collision_info(self, msg):\n             return\n \n         for i in range(int(len(collision_info_str_vec) / 5)):\n-            collision_info_data_vec.append(CollisionInfo(*collision_info_str_vec[i : i + 5]))\n+            collision_info_data_vec.append(\n+                CollisionInfo(*collision_info_str_vec[i * 5 : i * 5 + 5])\n+            )\n \n         # memorize data in the history dictionary\n         for collision_info_data in collision_info_data_vec:"
        }
    ],
    "autowarefoundation/autoware.universe/4823": [
        {
            "sha": "f9c222f662e82d86c15356eb7cce0ea19d1c0bc3",
            "filename": "planning/behavior_velocity_walkway_module/src/manager.cpp",
            "status": "modified",
            "additions": 19,
            "deletions": 28,
            "changes": 47,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/516a4e827f845d8fd9b8f8ad3392ea8fa0352aad/planning%2Fbehavior_velocity_walkway_module%2Fsrc%2Fmanager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/516a4e827f845d8fd9b8f8ad3392ea8fa0352aad/planning%2Fbehavior_velocity_walkway_module%2Fsrc%2Fmanager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_walkway_module%2Fsrc%2Fmanager.cpp?ref=516a4e827f845d8fd9b8f8ad3392ea8fa0352aad",
            "patch": "@@ -44,11 +44,8 @@ WalkwayModuleManager::WalkwayModuleManager(rclcpp::Node & node)\n void WalkwayModuleManager::launchNewModules(const PathWithLaneId & path)\n {\n   const auto rh = planner_data_->route_handler_;\n-  if (!opt_use_regulatory_element_) {\n-    opt_use_regulatory_element_ = checkRegulatoryElementExistence(rh->getLaneletMapPtr());\n-  }\n \n-  const auto launch = [this, &path](const auto & lanelet) {\n+  const auto launch = [this, &path](const auto & lanelet, const auto use_regulatory_element) {\n     const auto attribute =\n       lanelet.attributeOr(lanelet::AttributeNamesString::Subtype, std::string(\"\"));\n     if (attribute != lanelet::AttributeValueString::Walkway) {\n@@ -64,24 +61,21 @@ void WalkwayModuleManager::launchNewModules(const PathWithLaneId & path)\n     const auto lanelet_map_ptr = planner_data_->route_handler_->getLaneletMapPtr();\n \n     registerModule(std::make_shared<WalkwayModule>(\n-      lanelet.id(), lanelet_map_ptr, p, *opt_use_regulatory_element_, logger, clock_));\n+      lanelet.id(), lanelet_map_ptr, p, use_regulatory_element, logger, clock_));\n   };\n \n-  if (*opt_use_regulatory_element_) {\n-    const auto crosswalk_leg_elem_map = planning_utils::getRegElemMapOnPath<Crosswalk>(\n-      path, rh->getLaneletMapPtr(), planner_data_->current_odometry->pose);\n+  const auto crosswalk_leg_elem_map = planning_utils::getRegElemMapOnPath<Crosswalk>(\n+    path, rh->getLaneletMapPtr(), planner_data_->current_odometry->pose);\n \n-    for (const auto & crosswalk : crosswalk_leg_elem_map) {\n-      launch(crosswalk.first->crosswalkLanelet());\n-    }\n-  } else {\n-    const auto crosswalk_lanelets = getCrosswalksOnPath(\n-      planner_data_->current_odometry->pose, path, rh->getLaneletMapPtr(),\n-      rh->getOverallGraphPtr());\n+  for (const auto & crosswalk : crosswalk_leg_elem_map) {\n+    launch(crosswalk.first->crosswalkLanelet(), true);\n+  }\n \n-    for (const auto & crosswalk : crosswalk_lanelets) {\n-      launch(crosswalk);\n-    }\n+  const auto crosswalk_lanelets = getCrosswalksOnPath(\n+    planner_data_->current_odometry->pose, path, rh->getLaneletMapPtr(), rh->getOverallGraphPtr());\n+\n+  for (const auto & crosswalk : crosswalk_lanelets) {\n+    launch(crosswalk, false);\n   }\n }\n \n@@ -92,17 +86,14 @@ WalkwayModuleManager::getModuleExpiredFunction(const PathWithLaneId & path)\n \n   std::set<int64_t> walkway_id_set;\n \n-  if (*opt_use_regulatory_element_) {\n-    const auto crosswalk_leg_elem_map = planning_utils::getRegElemMapOnPath<Crosswalk>(\n-      path, rh->getLaneletMapPtr(), planner_data_->current_odometry->pose);\n+  walkway_id_set = getCrosswalkIdSetOnPath(\n+    planner_data_->current_odometry->pose, path, rh->getLaneletMapPtr(), rh->getOverallGraphPtr());\n \n-    for (const auto & crosswalk : crosswalk_leg_elem_map) {\n-      walkway_id_set.insert(crosswalk.first->id());\n-    }\n-  } else {\n-    walkway_id_set = getCrosswalkIdSetOnPath(\n-      planner_data_->current_odometry->pose, path, rh->getLaneletMapPtr(),\n-      rh->getOverallGraphPtr());\n+  const auto crosswalk_leg_elem_map = planning_utils::getRegElemMapOnPath<Crosswalk>(\n+    path, rh->getLaneletMapPtr(), planner_data_->current_odometry->pose);\n+\n+  for (const auto & crosswalk : crosswalk_leg_elem_map) {\n+    walkway_id_set.insert(crosswalk.first->id());\n   }\n \n   return [walkway_id_set](const std::shared_ptr<SceneModuleInterface> & scene_module) {"
        }
    ],
    "autowarefoundation/autoware.universe/4838": [
        {
            "sha": "437bb27c6ccf453ebc060fc595aae9b7dcc7c222",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 10,
            "changes": 20,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/606ca70f44179af6c9299590f53891c4b51acdbd/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/606ca70f44179af6c9299590f53891c4b51acdbd/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=606ca70f44179af6c9299590f53891c4b51acdbd",
            "patch": "@@ -1902,18 +1902,18 @@ void makeBoundLongitudinallyMonotonic(\n \n     std::vector<Point> ret;\n \n-    ret.push_back(bound.front());\n-\n-    for (size_t i = 0; i < bound.size() - 2; i++) {\n-      try {\n-        motion_utils::validateNonSharpAngle(bound.at(i), bound.at(i + 1), bound.at(i + 2));\n-        ret.push_back(bound.at(i + 1));\n-      } catch (const std::exception & e) {\n-        continue;\n+    for (size_t i = 0; i < bound.size(); i++) {\n+      const auto & p_new = bound.at(i);\n+      const auto duplicated_points_itr = std::find_if(\n+        ret.begin(), ret.end(),\n+        [&p_new](const auto & p) { return calcDistance2d(p, p_new) < 0.1; });\n+\n+      if (duplicated_points_itr != ret.end() && std::next(duplicated_points_itr, 2) == ret.end()) {\n+        ret.erase(duplicated_points_itr, ret.end());\n       }\n-    }\n \n-    ret.push_back(bound.back());\n+      ret.push_back(p_new);\n+    }\n \n     return ret;\n   };"
        }
    ],
    "autowarefoundation/autoware.universe/4845": [
        {
            "sha": "4edd6e1a2c3e0cc675a073ac593bc6b8e24f4b5c",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 34,
            "deletions": 9,
            "changes": 43,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ec9b3c71c6d9f5898a623017f3c43d8b3a7ed39d/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ec9b3c71c6d9f5898a623017f3c43d8b3a7ed39d/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=ec9b3c71c6d9f5898a623017f3c43d8b3a7ed39d",
            "patch": "@@ -456,11 +456,32 @@ BehaviorModuleOutput PlannerManager::runApprovedModules(const std::shared_ptr<Pl\n     return output;\n   }\n \n+  const auto move_to_end = [](auto & modules, const auto & cond) {\n+    auto itr = modules.begin();\n+    while (itr != modules.end()) {\n+      const auto satisfied_exit_cond =\n+        std::all_of(itr, modules.end(), [&cond](const auto & m) { return cond(m); });\n+\n+      if (satisfied_exit_cond) {\n+        return;\n+      }\n+\n+      if (cond(*itr)) {\n+        auto tmp = std::move(*itr);\n+        itr = modules.erase(itr);\n+        modules.insert(modules.end(), std::move(tmp));\n+      } else {\n+        itr++;\n+      }\n+    }\n+  };\n+\n   // move modules whose keep last flag is true to end of the approved_module_ptrs_.\n   {\n-    std::sort(approved_module_ptrs_.begin(), approved_module_ptrs_.end(), [this](auto a, auto b) {\n-      return !getManager(a)->isKeepLast() && getManager(b)->isKeepLast();\n-    });\n+    const auto keep_last_module_cond = [this](const auto & m) {\n+      return getManager(m)->isKeepLast();\n+    };\n+    move_to_end(approved_module_ptrs_, keep_last_module_cond);\n   }\n \n   // lock approved modules besides last one\n@@ -571,24 +592,28 @@ BehaviorModuleOutput PlannerManager::runApprovedModules(const std::shared_ptr<Pl\n    * remove success module immediately. if lane change module has succeeded, update root lanelet.\n    */\n   {\n-    const auto success_module_itr = std::partition(\n-      approved_module_ptrs_.begin(), approved_module_ptrs_.end(),\n-      [](const auto & m) { return m->getCurrentStatus() != ModuleStatus::SUCCESS; });\n+    const auto success_module_cond = [](const auto & m) {\n+      return m->getCurrentStatus() == ModuleStatus::SUCCESS;\n+    };\n+    move_to_end(approved_module_ptrs_, success_module_cond);\n+\n+    const auto itr =\n+      std::find_if(approved_module_ptrs_.begin(), approved_module_ptrs_.end(), success_module_cond);\n \n     const auto success_lane_change = std::any_of(\n-      success_module_itr, approved_module_ptrs_.end(),\n+      itr, approved_module_ptrs_.end(),\n       [](const auto & m) { return m->name().find(\"lane_change\") != std::string::npos; });\n \n     if (success_lane_change) {\n       root_lanelet_ = updateRootLanelet(data);\n     }\n \n-    std::for_each(success_module_itr, approved_module_ptrs_.end(), [&](auto & m) {\n+    std::for_each(itr, approved_module_ptrs_.end(), [&](auto & m) {\n       debug_info_.emplace_back(m, Action::DELETE, \"From Approved\");\n       deleteExpiredModules(m);\n     });\n \n-    approved_module_ptrs_.erase(success_module_itr, approved_module_ptrs_.end());\n+    approved_module_ptrs_.erase(itr, approved_module_ptrs_.end());\n \n     std::for_each(\n       manager_ptrs_.begin(), manager_ptrs_.end(), [](const auto & m) { m->updateObserver(); });"
        }
    ],
    "autowarefoundation/autoware.universe/4846": [
        {
            "sha": "1b11d1e55c37643963b026509ed15b344dc3dce7",
            "filename": "control/control_validator/src/utils.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9712a271173d7704dc4e87508ed552d27b1ee396/control%2Fcontrol_validator%2Fsrc%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9712a271173d7704dc4e87508ed552d27b1ee396/control%2Fcontrol_validator%2Fsrc%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fcontrol_validator%2Fsrc%2Futils.cpp?ref=9712a271173d7704dc4e87508ed552d27b1ee396",
            "patch": "@@ -44,7 +44,8 @@ void insertPointInPredictedTrajectory(\n \n TrajectoryPoints reverseTrajectoryPoints(const TrajectoryPoints & trajectory_points)\n {\n-  TrajectoryPoints reversed_trajectory_points(trajectory_points.size());\n+  TrajectoryPoints reversed_trajectory_points;\n+  reversed_trajectory_points.reserve(trajectory_points.size());\n   std::reverse_copy(\n     trajectory_points.begin(), trajectory_points.end(),\n     std::back_inserter(reversed_trajectory_points));\n@@ -106,7 +107,7 @@ Trajectory alignTrajectoryWithReferenceTrajectory(\n   // predicted_trajectory:   \u3000\u3000\u3000\u3000p1-----p2-----p3----//------pN\n   // trajectory:                               t1--------//------tN\n   // \u2193\n-  // predicted_trajectory:   \u3000\u3000\u3000\u3000        tNew--p3----//------pN\n+  // predicted_trajectory:   \u3000\u3000\u3000\u3000        pNew--p3----//------pN\n   // trajectory:                               t1--------//------tN\n   auto predicted_trajectory_point_removed = removeFrontTrajectoryPoint(\n     trajectory_points, modified_trajectory_points, predicted_trajectory_points);"
        }
    ],
    "autowarefoundation/autoware.universe/4850": [
        {
            "sha": "74c340ca53557080fc786ca2889bff72a9c33858",
            "filename": "map/map_projection_loader/src/map_projection_loader.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a84dc8986a1101b41417443426a237abbc4b80be/map%2Fmap_projection_loader%2Fsrc%2Fmap_projection_loader.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a84dc8986a1101b41417443426a237abbc4b80be/map%2Fmap_projection_loader%2Fsrc%2Fmap_projection_loader.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_projection_loader%2Fsrc%2Fmap_projection_loader.cpp?ref=a84dc8986a1101b41417443426a237abbc4b80be",
            "patch": "@@ -35,6 +35,7 @@ tier4_map_msgs::msg::MapProjectorInfo load_info_from_yaml(const std::string & fi\n     msg.vertical_datum = data[\"vertical_datum\"].as<std::string>();\n     msg.map_origin.latitude = data[\"map_origin\"][\"latitude\"].as<double>();\n     msg.map_origin.longitude = data[\"map_origin\"][\"longitude\"].as<double>();\n+    msg.map_origin.altitude = data[\"map_origin\"][\"altitude\"].as<double>();\n   } else if (msg.projector_type == tier4_map_msgs::msg::MapProjectorInfo::LOCAL) {\n     ;  // do nothing\n   } else {"
        }
    ],
    "autowarefoundation/autoware.universe/4853": [
        {
            "sha": "154fc8526f512974d47bad46b74ac47aee259590",
            "filename": "localization/ndt_scan_matcher/src/ndt_scan_matcher_core.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cc42517a7f66543540dc1899ac9edb67d032d61b/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cc42517a7f66543540dc1899ac9edb67d032d61b/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp?ref=cc42517a7f66543540dc1899ac9edb67d032d61b",
            "patch": "@@ -270,7 +270,8 @@ void NDTScanMatcher::timer_diagnostic()\n     }\n     if (\n       state_ptr_->count(\"skipping_publish_num\") &&\n-      std::stoi((*state_ptr_)[\"skipping_publish_num\"]) > 1) {\n+      std::stoi((*state_ptr_)[\"skipping_publish_num\"]) > 1 &&\n+      std::stoi((*state_ptr_)[\"skipping_publish_num\"]) < 5) {\n       diag_status_msg.level = diagnostic_msgs::msg::DiagnosticStatus::WARN;\n       diag_status_msg.message += \"skipping_publish_num > 1. \";\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/4860": [
        {
            "sha": "fe15a5dd8593bb0b3b6d77d5a60d32704fd81984",
            "filename": "control/operation_mode_transition_manager/src/state.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 2,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5083ca5e6d088bf680e3d5eef378c122ce9a839a/control%2Foperation_mode_transition_manager%2Fsrc%2Fstate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5083ca5e6d088bf680e3d5eef378c122ce9a839a/control%2Foperation_mode_transition_manager%2Fsrc%2Fstate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Foperation_mode_transition_manager%2Fsrc%2Fstate.cpp?ref=5083ca5e6d088bf680e3d5eef378c122ce9a839a",
            "patch": "@@ -121,14 +121,24 @@ bool AutonomousMode::isModeChangeCompleted()\n   const auto closest_point = trajectory_.points.at(*closest_idx);\n \n   // check for lateral deviation\n-  const auto dist_deviation = calcDistance2d(closest_point.pose, kinematics_.pose.pose);\n+  const auto dist_deviation =\n+    motion_utils::calcLateralOffset(trajectory_.points, kinematics_.pose.pose.position);\n+  if (std::isnan(dist_deviation)) {\n+    RCLCPP_INFO(logger_, \"Not stable yet: lateral offset calculation failed.\");\n+    return unstable();\n+  }\n   if (dist_deviation > stable_check_param_.dist_threshold) {\n     RCLCPP_INFO(logger_, \"Not stable yet: distance deviation is too large: %f\", dist_deviation);\n     return unstable();\n   }\n \n   // check for yaw deviation\n-  const auto yaw_deviation = calcYawDeviation(closest_point.pose, kinematics_.pose.pose);\n+  const auto yaw_deviation =\n+    motion_utils::calcYawDeviation(trajectory_.points, kinematics_.pose.pose);\n+  if (std::isnan(yaw_deviation)) {\n+    RCLCPP_INFO(logger_, \"Not stable yet: lateral offset calculation failed.\");\n+    return unstable();\n+  }\n   if (yaw_deviation > stable_check_param_.yaw_threshold) {\n     RCLCPP_INFO(logger_, \"Not stable yet: yaw deviation is too large: %f\", yaw_deviation);\n     return unstable();"
        }
    ],
    "autowarefoundation/autoware.universe/4866": [
        {
            "sha": "c7fde9dada4ecec988c8b4cae4032bfcbb0213bd",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c97e5245d61f5c416046fa334e43d4bcb38585f9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c97e5245d61f5c416046fa334e43d4bcb38585f9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=c97e5245d61f5c416046fa334e43d4bcb38585f9",
            "patch": "@@ -1867,6 +1867,7 @@ void makeBoundLongitudinallyMonotonic(\n         if (intersect_point) {\n           Pose pose;\n           pose.position = *intersect_point;\n+          pose.position.z = bound_with_pose.at(i).position.z;\n           const auto yaw = calcAzimuthAngle(*intersect_point, bound_with_pose.at(i + 1).position);\n           pose.orientation = createQuaternionFromRPY(0.0, 0.0, yaw);\n           monotonic_bound.push_back(pose);"
        }
    ],
    "autowarefoundation/autoware.universe/4868": [
        {
            "sha": "8deee76656dcab6799d71adfeb8f08f5f4adf11e",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 13,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7d51b1ca7821e2e8cba88c5a842e5d91e56592a0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7d51b1ca7821e2e8cba88c5a842e5d91e56592a0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=7d51b1ca7821e2e8cba88c5a842e5d91e56592a0",
            "patch": "@@ -644,7 +644,6 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n   const lanelet::ConstLanelets & target_backward_lanes) const\n {\n   const auto current_pose = getEgoPose();\n-  const auto current_vel = getEgoVelocity();\n   const auto & route_handler = *getRouteHandler();\n   const auto & common_parameters = planner_data_->parameters;\n   const auto & objects = *planner_data_->dynamic_object;\n@@ -667,12 +666,6 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n   const auto target_backward_polygon = utils::lane_change::createPolygon(\n     target_backward_lanes, 0.0, std::numeric_limits<double>::max());\n \n-  // minimum distance to lane changing start point\n-  const double t_prepare = common_parameters.lane_change_prepare_duration;\n-  const double a_min = lane_change_parameters_->min_longitudinal_acc;\n-  const double min_dist_to_lane_changing_start = std::max(\n-    current_vel * t_prepare, current_vel * t_prepare + 0.5 * a_min * t_prepare * t_prepare);\n-\n   LaneChangeTargetObjectIndices filtered_obj_indices;\n   for (size_t i = 0; i < objects.objects.size(); ++i) {\n     const auto & object = objects.objects.at(i);\n@@ -707,12 +700,8 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n \n     // check if the object intersects with target lanes\n     if (target_polygon && boost::geometry::intersects(target_polygon.value(), obj_polygon)) {\n-      // ignore static parked object that are in front of the ego vehicle in target lanes\n-      bool is_parked_object =\n-        utils::lane_change::isParkedObject(target_path, route_handler, extended_object, 0.0, 0.0);\n-      if (is_parked_object && min_dist_ego_to_obj > min_dist_to_lane_changing_start) {\n-        continue;\n-      }\n+      // TODO(watanabe): ignore static parked object that are in front of the ego vehicle in target\n+      // lanes\n \n       filtered_obj_indices.target_lane.push_back(i);\n       continue;"
        }
    ],
    "autowarefoundation/autoware.universe/4869": [
        {
            "sha": "feb6e42587196f4fe25c8ee998b2d8a424140d1b",
            "filename": "planning/behavior_velocity_crosswalk_module/src/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 3,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/61451aba6e725eabf4249508f31e3d496625d2a5/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/61451aba6e725eabf4249508f31e3d496625d2a5/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp?ref=61451aba6e725eabf4249508f31e3d496625d2a5",
            "patch": "@@ -231,9 +231,12 @@ bool CrosswalkModule::modifyPathVelocity(PathWithLaneId * path, StopReason * sto\n \n   // Calculate stop point with margin\n   const auto p_stop_line = getStopPointWithMargin(*path, path_intersects);\n-  // TODO(murooka) add a guard of p_stop_line\n-  const auto default_stop_pose = toStdOptional(\n-    calcLongitudinalOffsetPose(path->points, p_stop_line->first, p_stop_line->second));\n+\n+  std::optional<geometry_msgs::msg::Pose> default_stop_pose = std::nullopt;\n+  if (p_stop_line.has_value()) {\n+    default_stop_pose = toStdOptional(\n+      calcLongitudinalOffsetPose(path->points, p_stop_line->first, p_stop_line->second));\n+  }\n \n   // Resample path sparsely for less computation cost\n   constexpr double resample_interval = 4.0;\n@@ -1068,6 +1071,8 @@ void CrosswalkModule::setDistanceToStop(\n     const auto & ego_pos = planner_data_->current_odometry->pose.position;\n     const double dist_ego2stop = calcSignedArcLength(ego_path.points, ego_pos, *stop_pos);\n     setDistance(dist_ego2stop);\n+  } else {\n+    setDistance(std::numeric_limits<double>::lowest());\n   }\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4874": [
        {
            "sha": "b60abbddf6632d939ff835ac24b89c35232e2e84",
            "filename": "planning/behavior_path_planner/src/utils/avoidance/utils.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/96f0ea8d9aca71f6a70305689eddec8f6ad4a70c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/96f0ea8d9aca71f6a70305689eddec8f6ad4a70c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp?ref=96f0ea8d9aca71f6a70305689eddec8f6ad4a70c",
            "patch": "@@ -396,7 +396,8 @@ void fillLongitudinalAndLengthByClosestEnvelopeFootprint(\n   double max_distance = std::numeric_limits<double>::lowest();\n   for (const auto & p : obj.envelope_poly.outer()) {\n     const auto point = tier4_autoware_utils::createPoint(p.x(), p.y(), 0.0);\n-    const double arc_length = calcSignedArcLengthToFirstNearestPoint(path.points, ego_pos, point);\n+    // TODO(someone): search around first position where the ego should avoid the object.\n+    const double arc_length = calcSignedArcLength(path.points, ego_pos, point);\n     min_distance = std::min(min_distance, arc_length);\n     max_distance = std::max(max_distance, arc_length);\n   }\n@@ -412,7 +413,8 @@ double calcEnvelopeOverhangDistance(\n \n   for (const auto & p : object_data.envelope_poly.outer()) {\n     const auto point = tier4_autoware_utils::createPoint(p.x(), p.y(), 0.0);\n-    const auto idx = findFirstNearestIndex(path.points, point);\n+    // TODO(someone): search around first position where the ego should avoid the object.\n+    const auto idx = findNearestIndex(path.points, point);\n     const auto lateral = calcLateralDeviation(getPose(path.points.at(idx)), point);\n \n     const auto & overhang_pose_on_right = [&overhang_pose, &largest_overhang, &point, &lateral]() {"
        }
    ],
    "autowarefoundation/autoware.universe/4875": [
        {
            "sha": "0a78787c559d752ddb57de06af5ebbcee874bbf8",
            "filename": "planning/behavior_path_planner/docs/behavior_path_planner_goal_planner_design.md",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/29ea805a5a0b1db75169f423e50b5c6487b485ec/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_goal_planner_design.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/29ea805a5a0b1db75169f423e50b5c6487b485ec/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_goal_planner_design.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fdocs%2Fbehavior_path_planner_goal_planner_design.md?ref=29ea805a5a0b1db75169f423e50b5c6487b485ec",
            "patch": "@@ -150,11 +150,11 @@ Generate footprints from ego-vehicle path points and determine obstacle collisio\n \n #### Parameters for object recognition based collision check\n \n-| Name                                                         | Unit | Type   | Description                                                | Default value |\n-| :----------------------------------------------------------- | :--- | :----- | :--------------------------------------------------------- | :------------ | ---------------------------------------------------------------------------------------------------------- |\n-| use_object_recognition                                       | [-]  | bool   | flag whether to use object recognition for collision check | true          |\n-| object_recognition_collision_check_margin                    | [m]  | double | margin to calculate ego-vehicle cells from footprint.      | 0.6           |\n-| object_recognition_collision_check_max_extra_stopping_margin | [m]  | double |                                                            | 1.0           | \u3000maximum value when adding longitudinal distance margin for collision check considering stopping distance |\n+| Name                                                         | Unit | Type   | Description                                                                                              | Default value |\n+| :----------------------------------------------------------- | :--- | :----- | :------------------------------------------------------------------------------------------------------- | :------------ |\n+| use_object_recognition                                       | [-]  | bool   | flag whether to use object recognition for collision check                                               | true          |\n+| object_recognition_collision_check_margin                    | [m]  | double | margin to calculate ego-vehicle cells from footprint.                                                    | 0.6           |\n+| object_recognition_collision_check_max_extra_stopping_margin | [m]  | double | maximum value when adding longitudinal distance margin for collision check considering stopping distance | 1.0           |\n \n ## **Goal Search**\n "
        }
    ],
    "autowarefoundation/autoware.universe/4878": [
        {
            "sha": "8b48d1a86712638581cacc7761826e8a14580446",
            "filename": "planning/behavior_path_planner/src/utils/goal_planner/util.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/07de290b6f00245caad1dd6e9f1ac1cf523dfb13/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgoal_planner%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/07de290b6f00245caad1dd6e9f1ac1cf523dfb13/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgoal_planner%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgoal_planner%2Futil.cpp?ref=07de290b6f00245caad1dd6e9f1ac1cf523dfb13",
            "patch": "@@ -192,9 +192,11 @@ bool checkOriginalGoalIsInShoulder(const std::shared_ptr<RouteHandler> & route_h\n   const auto shoulder_lanes = route_handler->getShoulderLanelets();\n \n   lanelet::ConstLanelet closest_shoulder_lane{};\n-  lanelet::utils::query::getClosestLanelet(shoulder_lanes, goal_pose, &closest_shoulder_lane);\n+  if (lanelet::utils::query::getClosestLanelet(shoulder_lanes, goal_pose, &closest_shoulder_lane)) {\n+    return lanelet::utils::isInLanelet(goal_pose, closest_shoulder_lane, 0.1);\n+  }\n \n-  return lanelet::utils::isInLanelet(goal_pose, closest_shoulder_lane, 0.1);\n+  return false;\n }\n \n }  // namespace goal_planner_utils"
        }
    ],
    "autowarefoundation/autoware.universe/4880": [
        {
            "sha": "abdd41f4935c57c825a6646ad96be8ffa266bc88",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8d559487540fe09eb872432702bc4e87aeb4152e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8d559487540fe09eb872432702bc4e87aeb4152e/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=8d559487540fe09eb872432702bc4e87aeb4152e",
            "patch": "@@ -416,6 +416,9 @@ void StartPlannerModule::planWithPriority(\n   }\n \n   const auto is_safe_with_pose_planner = [&](const size_t i, const auto & planner) {\n+    // Set back_finished flag based on the current index\n+    status_.back_finished = i == 0;\n+\n     // Get the pull_out_start_pose for the current index\n     const auto & pull_out_start_pose = start_pose_candidates.at(i);\n \n@@ -495,8 +498,6 @@ void StartPlannerModule::planWithPriority(\n   for (const auto & p : order_priority) {\n     if (is_safe_with_pose_planner(p.first, p.second)) {\n       const std::lock_guard<std::mutex> lock(mutex_);\n-      // Set back_finished flag based on the current index\n-      status_.back_finished = p.first == 0;\n       return;\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/4884": [
        {
            "sha": "48884cdfa2b46c76f3c327d7ff1696b8293c1271",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cbe4a751f49e3e23fb6708d0a697b904917f5ead/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cbe4a751f49e3e23fb6708d0a697b904917f5ead/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=cbe4a751f49e3e23fb6708d0a697b904917f5ead",
            "patch": "@@ -426,7 +426,7 @@ Pose RouteHandler::getStartPose() const\n {\n   if (!route_ptr_) {\n     RCLCPP_WARN(logger_, \"[Route Handler] getStartPose: Route has not been set yet\");\n-    Pose();\n+    return Pose();\n   }\n   return route_ptr_->start_pose;\n }\n@@ -440,7 +440,7 @@ Pose RouteHandler::getGoalPose() const\n {\n   if (!route_ptr_) {\n     RCLCPP_WARN(logger_, \"[Route Handler] getGoalPose: Route has not been set yet\");\n-    Pose();\n+    return Pose();\n   }\n   return route_ptr_->goal_pose;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/4899": [
        {
            "sha": "c2b372d2403e5a714521022523150789afbefd4a",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 26,
            "deletions": 8,
            "changes": 34,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9d48d8205ab6d7e19f91fab16ce43602dac0006a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9d48d8205ab6d7e19f91fab16ce43602dac0006a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=9d48d8205ab6d7e19f91fab16ce43602dac0006a",
            "patch": "@@ -881,17 +881,35 @@ AvoidLineArray AvoidanceModule::calcRawShiftLinesFromObjects(\n     }\n \n     // output avoidance path under lateral jerk constraints.\n-    const auto feasible_shift_length = PathShifter::calcLateralDistFromJerk(\n+    const auto feasible_relative_shift_length = PathShifter::calcLateralDistFromJerk(\n       remaining_distance, helper_.getLateralMaxJerkLimit(), helper_.getAvoidanceEgoSpeed());\n \n-    RCLCPP_WARN_THROTTLE(\n-      getLogger(), *clock_, 1000,\n-      \"original shift length is not feasible. generate avoidance path under the constraints. \"\n-      \"[original: (%.2f) actual: (%.2f)]\",\n-      std::abs(avoiding_shift), feasible_shift_length);\n+    if (std::abs(feasible_relative_shift_length) < parameters_->lateral_execution_threshold) {\n+      object.reason = \"LessThanExecutionThreshold\";\n+      return boost::none;\n+    }\n+\n+    const auto feasible_shift_length =\n+      desire_shift_length > 0.0 ? feasible_relative_shift_length + current_ego_shift\n+                                : -1.0 * feasible_relative_shift_length + current_ego_shift;\n+\n+    const auto feasible =\n+      std::abs(feasible_shift_length - object.overhang_dist) <\n+      0.5 * planner_data_->parameters.vehicle_width + object_parameter.safety_buffer_lateral;\n+    if (feasible) {\n+      RCLCPP_WARN_THROTTLE(\n+        getLogger(), *clock_, 1000, \"feasible shift length is not enough to avoid. \");\n+      object.reason = AvoidanceDebugFactor::INSUFFICIENT_LATERAL_MARGIN;\n+      return boost::none;\n+    }\n+\n+    {\n+      RCLCPP_WARN_THROTTLE(\n+        getLogger(), *clock_, 1000, \"use feasible shift length. [original: (%.2f) actual: (%.2f)]\",\n+        std::abs(avoiding_shift), feasible_relative_shift_length);\n+    }\n \n-    return desire_shift_length > 0.0 ? feasible_shift_length + current_ego_shift\n-                                     : -1.0 * feasible_shift_length + current_ego_shift;\n+    return feasible_shift_length;\n   };\n \n   const auto is_forward_object = [](const auto & object) { return object.longitudinal > 0.0; };"
        }
    ],
    "autowarefoundation/autoware.universe/4907": [
        {
            "sha": "ccedcceefaaf995b61707022acf7bdc7aaddc751",
            "filename": "common/tier4_planning_rviz_plugin/include/path/display_base.hpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/632d4dc7c526230bb2c37b64465d8ba1dd715afb/common%2Ftier4_planning_rviz_plugin%2Finclude%2Fpath%2Fdisplay_base.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/632d4dc7c526230bb2c37b64465d8ba1dd715afb/common%2Ftier4_planning_rviz_plugin%2Finclude%2Fpath%2Fdisplay_base.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_planning_rviz_plugin%2Finclude%2Fpath%2Fdisplay_base.hpp?ref=632d4dc7c526230bb2c37b64465d8ba1dd715afb",
            "patch": "@@ -506,6 +506,10 @@ class AutowarePathBaseDisplay : public rviz_common::MessageFilterDisplay<T>\n       vehicle_footprint_info_ = std::make_shared<VehicleFootprintInfo>(\n         vehicle_info_->vehicle_length_m, vehicle_info_->vehicle_width_m,\n         vehicle_info_->rear_overhang_m);\n+\n+      property_vehicle_length_.setValue(vehicle_info_->vehicle_length_m);\n+      property_vehicle_width_.setValue(vehicle_info_->vehicle_width_m);\n+      property_rear_overhang_.setValue(vehicle_info_->rear_overhang_m);\n     } else {\n       const float length{property_vehicle_length_.getFloat()};\n       const float width{property_vehicle_width_.getFloat()};"
        }
    ],
    "autowarefoundation/autoware.universe/4909": [
        {
            "sha": "e461995cba1e760c563f0472f726dee172facba2",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 3,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b538c1a62e0a8c5395ded936b7888e9af179e710/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b538c1a62e0a8c5395ded936b7888e9af179e710/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=b538c1a62e0a8c5395ded936b7888e9af179e710",
            "patch": "@@ -553,10 +553,15 @@ std::vector<DrivableLanes> StartPlannerModule::generateDrivableLanes(\n   const PathWithLaneId & path) const\n {\n   const auto path_road_lanes = getPathRoadLanes(path);\n-\n   if (!path_road_lanes.empty()) {\n-    return utils::generateDrivableLanesWithShoulderLanes(\n-      getPathRoadLanes(path), status_.pull_out_lanes);\n+    lanelet::ConstLanelets shoulder_lanes;\n+    const auto & rh = planner_data_->route_handler;\n+    std::copy_if(\n+      status_.pull_out_lanes.begin(), status_.pull_out_lanes.end(),\n+      std::back_inserter(shoulder_lanes),\n+      [&rh](const auto & pull_out_lane) { return rh->isShoulderLanelet(pull_out_lane); });\n+\n+    return utils::generateDrivableLanesWithShoulderLanes(getPathRoadLanes(path), shoulder_lanes);\n   }\n \n   // if path_road_lanes is empty, use only pull_out_lanes as drivable lanes"
        }
    ],
    "autowarefoundation/autoware.universe/4922": [
        {
            "sha": "5829277335433389f9023c558d50c9ef710f1367",
            "filename": "sensing/pointcloud_preprocessor/src/downsample_filter/faster_voxel_grid_downsample_filter.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d9f00eeb32ac4b92ceadad701495a2a451e327a5/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fdownsample_filter%2Ffaster_voxel_grid_downsample_filter.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d9f00eeb32ac4b92ceadad701495a2a451e327a5/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fdownsample_filter%2Ffaster_voxel_grid_downsample_filter.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fdownsample_filter%2Ffaster_voxel_grid_downsample_filter.cpp?ref=d9f00eeb32ac4b92ceadad701495a2a451e327a5",
            "patch": "@@ -36,7 +36,12 @@ void FasterVoxelGridDownsampleFilter::set_field_offsets(const PointCloud2ConstPt\n   x_offset_ = input->fields[pcl::getFieldIndex(*input, \"x\")].offset;\n   y_offset_ = input->fields[pcl::getFieldIndex(*input, \"y\")].offset;\n   z_offset_ = input->fields[pcl::getFieldIndex(*input, \"z\")].offset;\n-  intensity_offset_ = input->fields[pcl::getFieldIndex(*input, \"intensity\")].offset;\n+  int intensity_index = pcl::getFieldIndex(*input, \"intensity\");\n+  if (intensity_index != -1) {\n+    intensity_offset_ = input->fields[intensity_index].offset;\n+  } else {\n+    intensity_offset_ = z_offset_ + sizeof(float);\n+  }\n   offset_initialized_ = true;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4926": [
        {
            "sha": "70eab4c7dee31f9b7a3261cc43c917ae8a2ebbc0",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/7cfd257a92c818b68ad349f5f5ef2cbc9ef4e429/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/7cfd257a92c818b68ad349f5f5ef2cbc9ef4e429/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=7cfd257a92c818b68ad349f5f5ef2cbc9ef4e429",
            "patch": "@@ -2535,6 +2535,7 @@ void AvoidanceModule::updateData()\n void AvoidanceModule::processOnEntry()\n {\n   initVariables();\n+  removeRTCStatus();\n }\n \n void AvoidanceModule::processOnExit()"
        }
    ],
    "autowarefoundation/autoware.universe/4929": [
        {
            "sha": "6d8884647e5dc6ff597ca9fc7a0b69a82554999b",
            "filename": "planning/behavior_path_planner/src/utils/start_planner/shift_pull_out.cpp",
            "status": "modified",
            "additions": 37,
            "deletions": 6,
            "changes": 43,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cb994aecb0205119b8df7bddf98309cf1b5b55a9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fstart_planner%2Fshift_pull_out.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cb994aecb0205119b8df7bddf98309cf1b5b55a9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fstart_planner%2Fshift_pull_out.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fstart_planner%2Fshift_pull_out.cpp?ref=cb994aecb0205119b8df7bddf98309cf1b5b55a9",
            "patch": "@@ -97,17 +97,48 @@ boost::optional<PullOutPath> ShiftPullOut::plan(const Pose & start_pose, const P\n         shift_path.points.begin() + collision_check_end_idx + 1);\n     }\n \n-    // check lane departure\n+    // extract shoulder lanes from pull out lanes\n+    lanelet::ConstLanelets shoulder_lanes;\n+    std::copy_if(\n+      pull_out_lanes.begin(), pull_out_lanes.end(), std::back_inserter(shoulder_lanes),\n+      [&route_handler](const auto & pull_out_lane) {\n+        return route_handler->isShoulderLanelet(pull_out_lane);\n+      });\n     const auto drivable_lanes =\n-      utils::generateDrivableLanesWithShoulderLanes(road_lanes, pull_out_lanes);\n+      utils::generateDrivableLanesWithShoulderLanes(road_lanes, shoulder_lanes);\n     const auto & dp = planner_data_->drivable_area_expansion_parameters;\n-    const auto expanded_lanes = utils::expandLanelets(\n+    const auto expanded_lanes = utils::transformToLanelets(utils::expandLanelets(\n       drivable_lanes, dp.drivable_area_left_bound_offset, dp.drivable_area_right_bound_offset,\n-      dp.drivable_area_types_to_skip);\n+      dp.drivable_area_types_to_skip));\n+\n+    // crop backward path\n+    // removes points which are out of lanes up to the start pose.\n+    // this ensures that the backward_path stays within the drivable area when starting from a\n+    // narrow place.\n+    const size_t start_segment_idx = motion_utils::findFirstNearestIndexWithSoftConstraints(\n+      shift_path.points, start_pose, common_parameters.ego_nearest_dist_threshold,\n+      common_parameters.ego_nearest_yaw_threshold);\n+    PathWithLaneId cropped_path{};\n+    for (size_t i = 0; i < shift_path.points.size(); ++i) {\n+      const Pose pose = shift_path.points.at(i).point.pose;\n+      const auto transformed_vehicle_footprint =\n+        transformVector(vehicle_footprint_, tier4_autoware_utils::pose2transform(pose));\n+      const bool is_out_of_lane =\n+        LaneDepartureChecker::isOutOfLane(expanded_lanes, transformed_vehicle_footprint);\n+      if (i <= start_segment_idx) {\n+        if (!is_out_of_lane) {\n+          cropped_path.points.push_back(shift_path.points.at(i));\n+        }\n+      } else {\n+        cropped_path.points.push_back(shift_path.points.at(i));\n+      }\n+    }\n+    shift_path.points = cropped_path.points;\n+\n+    // check lane departure\n     if (\n       parameters_.check_shift_path_lane_departure &&\n-      lane_departure_checker_->checkPathWillLeaveLane(\n-        utils::transformToLanelets(expanded_lanes), path_start_to_end)) {\n+      lane_departure_checker_->checkPathWillLeaveLane(expanded_lanes, path_start_to_end)) {\n       continue;\n     }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4930": [
        {
            "sha": "a91da98b119990b64533d12aad4a1a0f0c0c94fb",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 2,
            "changes": 16,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/21221c6af13c134dd7481817868220439ceffa95/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/21221c6af13c134dd7481817868220439ceffa95/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=21221c6af13c134dd7481817868220439ceffa95",
            "patch": "@@ -666,6 +666,8 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n     utils::lane_change::createPolygon(target_lanes, 0.0, std::numeric_limits<double>::max());\n   const auto target_backward_polygon = utils::lane_change::createPolygon(\n     target_backward_lanes, 0.0, std::numeric_limits<double>::max());\n+  const auto dist_ego_to_current_lanes_center =\n+    lanelet::utils::getLateralDistanceToClosestLanelet(current_lanes, current_pose);\n \n   LaneChangeTargetObjectIndices filtered_obj_indices;\n   for (size_t i = 0; i < objects.objects.size(); ++i) {\n@@ -694,6 +696,14 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n       min_dist_ego_to_obj = std::min(dist_ego_to_obj, min_dist_ego_to_obj);\n     }\n \n+    const auto is_lateral_far = [&]() {\n+      const auto dist_object_to_current_lanes_center =\n+        lanelet::utils::getLateralDistanceToClosestLanelet(\n+          current_lanes, object.kinematics.initial_pose_with_covariance.pose);\n+      const auto lateral = dist_object_to_current_lanes_center - dist_ego_to_current_lanes_center;\n+      return std::abs(lateral) > (common_parameters.vehicle_width / 2);\n+    };\n+\n     // ignore static object that are behind the ego vehicle\n     if (obj_velocity_norm < 1.0 && max_dist_ego_to_obj < 0.0) {\n       continue;\n@@ -704,8 +714,10 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n       // TODO(watanabe): ignore static parked object that are in front of the ego vehicle in target\n       // lanes\n \n-      filtered_obj_indices.target_lane.push_back(i);\n-      continue;\n+      if (max_dist_ego_to_obj >= 0 || is_lateral_far()) {\n+        filtered_obj_indices.target_lane.push_back(i);\n+        continue;\n+      }\n     }\n \n     // check if the object intersects with target backward lanes"
        }
    ],
    "autowarefoundation/autoware.universe/4931": [
        {
            "sha": "afd1b75e507f4f405c2cb0425b9a576e6ddaaa36",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/46bf7a8046b93e7db5a18ba4f24b3ecf8e4b22d7/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/46bf7a8046b93e7db5a18ba4f24b3ecf8e4b22d7/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=46bf7a8046b93e7db5a18ba4f24b3ecf8e4b22d7",
            "patch": "@@ -592,7 +592,7 @@ void StartPlannerModule::updatePullOutStatus()\n \n   // skip updating if enough time has not passed for preventing chattering between back and\n   // start_planner\n-  if (!has_received_new_route && !last_pull_out_start_update_time_ && !status_.back_finished) {\n+  if (!has_received_new_route) {\n     if (!last_pull_out_start_update_time_) {\n       last_pull_out_start_update_time_ = std::make_unique<rclcpp::Time>(clock_->now());\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/4932": [
        {
            "sha": "7be05561aa34a7a215ce58285c818940220e5ab7",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6997c5514fa76107dedda66057a74fead263af2b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6997c5514fa76107dedda66057a74fead263af2b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=6997c5514fa76107dedda66057a74fead263af2b",
            "patch": "@@ -141,6 +141,10 @@ bool StartPlannerModule::isExecutionRequested() const\n \n bool StartPlannerModule::isExecutionReady() const\n {\n+  if (!status_.is_safe_static_objects) {\n+    return false;\n+  }\n+\n   if (status_.pull_out_path.partial_paths.empty()) {\n     return true;\n   }\n@@ -185,6 +189,7 @@ BehaviorModuleOutput StartPlannerModule::plan()\n       getLogger(), *clock_, 5000, \"Start plan for a backward goal is not supported now\");\n     const auto output = generateStopOutput();\n     setDebugData();  // use status updated in generateStopOutput()\n+    updateRTCStatus(0, 0);\n     return output;\n   }\n \n@@ -202,6 +207,7 @@ BehaviorModuleOutput StartPlannerModule::plan()\n       getLogger(), *clock_, 5000, \"Not found safe pull out path, publish stop path\");\n     const auto output = generateStopOutput();\n     setDebugData();  // use status updated in generateStopOutput()\n+    updateRTCStatus(0, 0);\n     return output;\n   }\n \n@@ -298,6 +304,7 @@ BehaviorModuleOutput StartPlannerModule::planWaitingApproval()\n     clearWaitingApproval();\n     const auto output = generateStopOutput();\n     setDebugData();  // use status updated in generateStopOutput()\n+    updateRTCStatus(0, 0);\n     return output;\n   }\n \n@@ -308,6 +315,7 @@ BehaviorModuleOutput StartPlannerModule::planWaitingApproval()\n     clearWaitingApproval();\n     const auto output = generateStopOutput();\n     setDebugData();  // use status updated in generateStopOutput()\n+    updateRTCStatus(0, 0);\n     return output;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4947": [
        {
            "sha": "4bad84d9dc1f3eab9985b6557c11c637ea6f1c22",
            "filename": "planning/static_centerline_optimizer/src/static_centerline_optimizer_node.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8f7ca8831f16d6d0c279a7fabe1d1555f9019581/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8f7ca8831f16d6d0c279a7fabe1d1555f9019581/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp?ref=8f7ca8831f16d6d0c279a7fabe1d1555f9019581",
            "patch": "@@ -26,9 +26,12 @@\n \n #include <mission_planner/mission_planner_plugin.hpp>\n #include <pluginlib/class_loader.hpp>\n+#include <tier4_autoware_utils/ros/marker_helper.hpp>\n \n #include <tier4_map_msgs/msg/map_projector_info.hpp>\n \n+#include <boost/geometry/algorithms/correct.hpp>\n+\n #include <lanelet2_core/LaneletMap.h>\n #include <lanelet2_io/Io.h>\n #include <lanelet2_projection/UTM.h>"
        }
    ],
    "autowarefoundation/autoware.universe/4956": [
        {
            "sha": "8c3b84854a6d03f93dba9f2ab9ffa139eed4b303",
            "filename": "planning/static_centerline_optimizer/src/static_centerline_optimizer_node.cpp",
            "status": "modified",
            "additions": 0,
            "deletions": 1,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c5575ade4f9d4549cd606956f4388193f92c17e5/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c5575ade4f9d4549cd606956f4388193f92c17e5/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fstatic_centerline_optimizer%2Fsrc%2Fstatic_centerline_optimizer_node.cpp?ref=c5575ade4f9d4549cd606956f4388193f92c17e5",
            "patch": "@@ -24,7 +24,6 @@\n #include \"static_centerline_optimizer/type_alias.hpp\"\n #include \"static_centerline_optimizer/utils.hpp\"\n #include \"tier4_autoware_utils/geometry/geometry.hpp\"\n-#include \"tier4_autoware_utils/ros/marker_helper.hpp\"\n \n #include <mission_planner/mission_planner_plugin.hpp>\n #include <pluginlib/class_loader.hpp>"
        }
    ],
    "autowarefoundation/autoware.universe/4960": [
        {
            "sha": "6c3996bfd274bf08db8da55b4daecf9fd552037f",
            "filename": "control/control_validator/src/control_validator.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bfb39abe9dcea7321a961ae8d0bfb503c5f36927/control%2Fcontrol_validator%2Fsrc%2Fcontrol_validator.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bfb39abe9dcea7321a961ae8d0bfb503c5f36927/control%2Fcontrol_validator%2Fsrc%2Fcontrol_validator.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fcontrol_validator%2Fsrc%2Fcontrol_validator.cpp?ref=bfb39abe9dcea7321a961ae8d0bfb503c5f36927",
            "patch": "@@ -163,7 +163,9 @@ void ControlValidator::publishDebugInfo()\n void ControlValidator::validate(const Trajectory & predicted_trajectory)\n {\n   if (predicted_trajectory.points.size() < 2) {\n-    RCLCPP_ERROR(get_logger(), \"predicted_trajectory size is less than 2. Cannot validate.\");\n+    RCLCPP_ERROR_THROTTLE(\n+      get_logger(), *get_clock(), 1000,\n+      \"predicted_trajectory size is less than 2. Cannot validate.\");\n     return;\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4962": [
        {
            "sha": "a285224404f12294fb7b354c131744c7714385c8",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 1,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b050967ef8bbb96bcaf542f29079ef52b23078ea/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b050967ef8bbb96bcaf542f29079ef52b23078ea/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=b050967ef8bbb96bcaf542f29079ef52b23078ea",
            "patch": "@@ -690,9 +690,16 @@ std::vector<Pose> StartPlannerModule::searchPullOutStartPoses(\n   const auto pull_out_lane_stop_objects = utils::path_safety_checker::filterObjectsByVelocity(\n     pull_out_lane_objects, parameters_->th_moving_object_velocity);\n \n+  // Set the maximum backward distance less than the distance from the vehicle's base_link to the\n+  // lane's rearmost point to prevent lane departure.\n+  const double s_current =\n+    lanelet::utils::getArcCoordinates(status_.pull_out_lanes, current_pose).length;\n+  const double max_back_distance = std::clamp(\n+    s_current - planner_data_->parameters.base_link2rear, 0.0, parameters_->max_back_distance);\n+\n   // check collision between footprint and object at the backed pose\n   const auto local_vehicle_footprint = createVehicleFootprint(vehicle_info_);\n-  for (double back_distance = 0.0; back_distance <= parameters_->max_back_distance;\n+  for (double back_distance = 0.0; back_distance <= max_back_distance;\n        back_distance += parameters_->backward_search_resolution) {\n     const auto backed_pose = calcLongitudinalOffsetPose(\n       start_pose_candidates.points, current_pose.position, -back_distance);"
        }
    ],
    "autowarefoundation/autoware.universe/4963": [
        {
            "sha": "d6af88f39a8d2d8b454e6cfe91dcef24fd12a7d9",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6e4fa35903419576cd7f32b84896963e077924bc/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6e4fa35903419576cd7f32b84896963e077924bc/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=6e4fa35903419576cd7f32b84896963e077924bc",
            "patch": "@@ -2851,7 +2851,7 @@ BehaviorModuleOutput getReferencePath(\n   // clip backward length\n   // NOTE: In order to keep backward_path_length at least, resampling interval is added to the\n   // backward.\n-  const size_t current_seg_idx = motion_utils::findFirstNearestIndexWithSoftConstraints(\n+  const size_t current_seg_idx = motion_utils::findFirstNearestSegmentIndexWithSoftConstraints(\n     reference_path.points, no_shift_pose, p.ego_nearest_dist_threshold,\n     p.ego_nearest_yaw_threshold);\n   reference_path.points = motion_utils::cropPoints("
        }
    ],
    "autowarefoundation/autoware.universe/4965": [
        {
            "sha": "1a800a38d10514317c0f7f67c22afbb32c269c23",
            "filename": "common/motion_utils/src/resample/resample.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/463f0dc391088a95c5edd1930f7f03b2dc924185/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/463f0dc391088a95c5edd1930f7f03b2dc924185/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fmotion_utils%2Fsrc%2Fresample%2Fresample.cpp?ref=463f0dc391088a95c5edd1930f7f03b2dc924185",
            "patch": "@@ -109,13 +109,16 @@ std::vector<geometry_msgs::msg::Point> resamplePointVector(\n }\n \n std::vector<geometry_msgs::msg::Pose> resamplePoseVector(\n-  const std::vector<geometry_msgs::msg::Pose> & points,\n+  const std::vector<geometry_msgs::msg::Pose> & points_raw,\n   const std::vector<double> & resampled_arclength, const bool use_akima_spline_for_xy,\n   const bool use_lerp_for_z)\n {\n+  // Remove overlap points for resampling\n+  const auto points = motion_utils::removeOverlapPoints(points_raw);\n+\n   // validate arguments\n   if (!resample_utils::validate_arguments(points, resampled_arclength)) {\n-    return points;\n+    return points_raw;\n   }\n \n   std::vector<geometry_msgs::msg::Point> position(points.size());"
        }
    ],
    "autowarefoundation/autoware.universe/4969": [
        {
            "sha": "488b23ac0aec94d66278a16e7ce55cb83e61f8c9",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6c2eda7efc6df78281a4a790db132ec20a41b8cd/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6c2eda7efc6df78281a4a790db132ec20a41b8cd/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=6c2eda7efc6df78281a4a790db132ec20a41b8cd",
            "patch": "@@ -1292,7 +1292,7 @@ TurnSignalInfo GoalPlannerModule::calcTurnSignalInfo() const\n \n bool GoalPlannerModule::checkCollision(const PathWithLaneId & path) const\n {\n-  if (parameters_->use_occupancy_grid || !occupancy_grid_map_) {\n+  if (parameters_->use_occupancy_grid && occupancy_grid_map_) {\n     const bool check_out_of_range = false;\n     if (occupancy_grid_map_->hasObstacleOnPath(path, check_out_of_range)) {\n       return true;"
        }
    ],
    "autowarefoundation/autoware.universe/4979": [
        {
            "sha": "53e19500ff428f08a78c73c05446554ec751f879",
            "filename": "perception/lidar_centerpoint/lib/centerpoint_trt.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8357bf7c84946076780e204668f0ad82143c1217/perception%2Flidar_centerpoint%2Flib%2Fcenterpoint_trt.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8357bf7c84946076780e204668f0ad82143c1217/perception%2Flidar_centerpoint%2Flib%2Fcenterpoint_trt.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_centerpoint%2Flib%2Fcenterpoint_trt.cpp?ref=8357bf7c84946076780e204668f0ad82143c1217",
            "patch": "@@ -189,7 +189,7 @@ void CenterPointTRT::postProcess(std::vector<Box3D> & det_boxes3d)\n     head_out_heatmap_d_.get(), head_out_offset_d_.get(), head_out_z_d_.get(), head_out_dim_d_.get(),\n     head_out_rot_d_.get(), head_out_vel_d_.get(), det_boxes3d, stream_));\n   if (det_boxes3d.size() == 0) {\n-    RCLCPP_WARN_STREAM(rclcpp::get_logger(\"lidar_centerpoint\"), \"No detected boxes.\");\n+    RCLCPP_DEBUG_STREAM(rclcpp::get_logger(\"lidar_centerpoint\"), \"No detected boxes.\");\n   }\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/4983": [
        {
            "sha": "eab2a56607deec689966ded09977170e7e763f77",
            "filename": "launch/tier4_perception_launch/launch/object_recognition/detection/camera_lidar_fusion_based_detection.launch.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 12,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d600e8e74ac540ad45f60682a134a65506192e05/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d600e8e74ac540ad45f60682a134a65506192e05/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_fusion_based_detection.launch.xml?ref=d600e8e74ac540ad45f60682a134a65506192e05",
            "patch": "@@ -339,22 +339,11 @@\n     </include>\n   </group>\n \n-  <group>\n-    <include file=\"$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml\">\n-      <arg name=\"input/object0\" value=\"$(var lidar_detection_model)_roi_cluster_fusion/objects\"/>\n-      <arg name=\"input/object1\" value=\"roi_pointcloud_fusion/objects\"/>\n-      <arg name=\"output/object\" value=\"$(var lidar_detection_model)_roi_fusion/objects\"/>\n-      <arg name=\"priority_mode\" value=\"0\"/>\n-      <arg name=\"data_association_matrix_path\" value=\"$(var object_recognition_detection_object_merger_data_association_matrix_param_path)\"/>\n-      <arg name=\"distance_threshold_list_path\" value=\"$(var object_recognition_detection_object_merger_distance_threshold_list_path)\"/>\n-    </include>\n-  </group>\n-\n   <group>\n     <let name=\"merger/output/objects\" value=\"objects_before_filter\" if=\"$(var use_object_filter)\"/>\n     <let name=\"merger/output/objects\" value=\"$(var output/objects)\" unless=\"$(var use_object_filter)\"/>\n     <include file=\"$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml\">\n-      <arg name=\"input/object0\" value=\"$(var lidar_detection_model)_roi_fusion/objects\"/>\n+      <arg name=\"input/object0\" value=\"$(var lidar_detection_model)_roi_cluster_fusion/objects\"/>\n       <arg name=\"input/object1\" value=\"detection_by_tracker/objects\"/>\n       <arg name=\"priority_mode\" value=\"0\"/>\n       <arg name=\"output/object\" value=\"$(var merger/output/objects)\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/4988": [
        {
            "sha": "058a5d5deb5d6c886dbfa9f80d8d609ea12c1405",
            "filename": "common/rtc_manager_rviz_plugin/src/rtc_manager_panel.cpp",
            "status": "modified",
            "additions": 15,
            "deletions": 3,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1a9d2400df4eb6586157531c274b15f5126259ff/common%2Frtc_manager_rviz_plugin%2Fsrc%2Frtc_manager_panel.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1a9d2400df4eb6586157531c274b15f5126259ff/common%2Frtc_manager_rviz_plugin%2Fsrc%2Frtc_manager_panel.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Frtc_manager_rviz_plugin%2Fsrc%2Frtc_manager_panel.cpp?ref=1a9d2400df4eb6586157531c274b15f5126259ff",
            "patch": "@@ -366,16 +366,28 @@ void RTCManagerPanel::onRTCStatus(const CooperateStatusArray::ConstSharedPtr msg\n   rtc_table_->clearContents();\n   num_rtc_status_ptr_->setText(\n     QString::fromStdString(\"The Number of RTC Statuses: \" + std::to_string(msg->statuses.size())));\n-  if (msg->statuses.empty()) return;\n+  if (msg->statuses.empty()) {\n+    rtc_table_->update();\n+    return;\n+  }\n   // this is to stable rtc display not to occupy too much\n   size_t min_display_size{5};\n   size_t max_display_size{10};\n   // rtc messages are already sorted by distance\n   rtc_table_->setRowCount(\n     std::max(min_display_size, std::min(msg->statuses.size(), max_display_size)));\n   int cnt = 0;\n-  for (auto status : msg->statuses) {\n-    if (static_cast<size_t>(cnt) >= max_display_size) return;\n+\n+  auto sorted_statuses = msg->statuses;\n+  std::partition(sorted_statuses.begin(), sorted_statuses.end(), [](const auto & status) {\n+    return !status.auto_mode && !uint2bool(status.command_status.type);\n+  });\n+\n+  for (auto status : sorted_statuses) {\n+    if (static_cast<size_t>(cnt) >= max_display_size) {\n+      rtc_table_->update();\n+      return;\n+    }\n     // uuid\n     {\n       std::stringstream uuid;"
        }
    ],
    "autowarefoundation/autoware.universe/4990": [
        {
            "sha": "693fccb7e937cf979a54a68fab4ff45dcb68e1f6",
            "filename": "perception/simple_object_merger/src/simple_object_merger_node/simple_object_merger_node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f513dddf66a7b28f99af419b854d1ac713e3fc0f/perception%2Fsimple_object_merger%2Fsrc%2Fsimple_object_merger_node%2Fsimple_object_merger_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f513dddf66a7b28f99af419b854d1ac713e3fc0f/perception%2Fsimple_object_merger%2Fsrc%2Fsimple_object_merger_node%2Fsimple_object_merger_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fsimple_object_merger%2Fsrc%2Fsimple_object_merger_node%2Fsimple_object_merger_node.cpp?ref=f513dddf66a7b28f99af419b854d1ac713e3fc0f",
            "patch": "@@ -170,7 +170,7 @@ void SimpleObjectMergerNode::onTimer()\n   output_objects.header.frame_id = node_param_.new_frame_id;\n \n   for (size_t i = 0; i < input_topic_size; i++) {\n-    double time_diff = (this->get_clock()->now()).seconds() -\n+    double time_diff = rclcpp::Time(objects_data_.at(i)->header.stamp).seconds() -\n                        rclcpp::Time(objects_data_.at(0)->header.stamp).seconds();\n     if (std::abs(time_diff) < node_param_.timeout_threshold) {\n       transform_ = transform_listener_->getTransform("
        }
    ],
    "autowarefoundation/autoware.universe/4992": [
        {
            "sha": "75684d51039fd37913d4607977a3b44c453bc6dc",
            "filename": "perception/radar_fusion_to_detected_object/src/radar_fusion_to_detected_object.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0f116475b4b2b7eff72e843c05abefb9302309c9/perception%2Fradar_fusion_to_detected_object%2Fsrc%2Fradar_fusion_to_detected_object.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0f116475b4b2b7eff72e843c05abefb9302309c9/perception%2Fradar_fusion_to_detected_object%2Fsrc%2Fradar_fusion_to_detected_object.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fradar_fusion_to_detected_object%2Fsrc%2Fradar_fusion_to_detected_object.cpp?ref=0f116475b4b2b7eff72e843c05abefb9302309c9",
            "patch": "@@ -296,7 +296,7 @@ TwistWithCovariance RadarFusionToDetectedObject::estimateTwist(\n bool RadarFusionToDetectedObject::isQualified(\n   const DetectedObject & object, std::shared_ptr<std::vector<RadarInput>> & radars)\n {\n-  if (object.classification[0].probability > param_.threshold_probability) {\n+  if (object.existence_probability > param_.threshold_probability) {\n     return true;\n   } else {\n     if (!radars || !(*radars).empty()) {"
        }
    ],
    "autowarefoundation/autoware.universe/4993": [
        {
            "sha": "1122bf7b4b18e0a4de9617fbca1fc66ae2d682ee",
            "filename": "perception/radar_tracks_msgs_converter/src/radar_tracks_msgs_converter_node/radar_tracks_msgs_converter_node.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 4,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/903b598e8fddb7cf7e436d7c80a67fb8459081cc/perception%2Fradar_tracks_msgs_converter%2Fsrc%2Fradar_tracks_msgs_converter_node%2Fradar_tracks_msgs_converter_node.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/903b598e8fddb7cf7e436d7c80a67fb8459081cc/perception%2Fradar_tracks_msgs_converter%2Fsrc%2Fradar_tracks_msgs_converter_node%2Fradar_tracks_msgs_converter_node.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fradar_tracks_msgs_converter%2Fsrc%2Fradar_tracks_msgs_converter_node%2Fradar_tracks_msgs_converter_node.cpp?ref=903b598e8fddb7cf7e436d7c80a67fb8459081cc",
            "patch": "@@ -214,8 +214,15 @@ TrackedObjects RadarTracksMsgsConverterNode::convertRadarTrackToTrackedObjects()\n     kinematics.orientation_availability = TrackedObjectKinematics::AVAILABLE;\n     kinematics.is_stationary = false;\n \n-    // Twist conversion\n-    geometry_msgs::msg::Vector3 compensated_velocity = radar_track.velocity;\n+    geometry_msgs::msg::Vector3 compensated_velocity{};\n+    {\n+      double rotate_yaw = tf2::getYaw(transform_->transform.rotation);\n+      const geometry_msgs::msg::Vector3 & vel = radar_track.velocity;\n+      compensated_velocity.x = vel.x * std::cos(rotate_yaw) - vel.y * std::sin(rotate_yaw);\n+      compensated_velocity.y = vel.x * std::sin(rotate_yaw) + vel.y * std::cos(rotate_yaw);\n+      compensated_velocity.z = radar_track.velocity.z;\n+    }\n+\n     if (node_param_.use_twist_compensation) {\n       if (odometry_data_) {\n         compensated_velocity.x += odometry_data_->twist.twist.linear.x;\n@@ -235,12 +242,12 @@ TrackedObjects RadarTracksMsgsConverterNode::convertRadarTrackToTrackedObjects()\n \n     double yaw = tier4_autoware_utils::normalizeRadian(\n       std::atan2(compensated_velocity.y, compensated_velocity.x));\n-    radar_pose_stamped.pose.orientation = tier4_autoware_utils::createQuaternionFromYaw(yaw);\n \n     geometry_msgs::msg::PoseStamped transformed_pose_stamped{};\n     tf2::doTransform(radar_pose_stamped, transformed_pose_stamped, *transform_);\n     kinematics.pose_with_covariance.pose = transformed_pose_stamped.pose;\n-\n+    kinematics.pose_with_covariance.pose.orientation =\n+      tier4_autoware_utils::createQuaternionFromYaw(yaw);\n     {\n       auto & pose_cov = kinematics.pose_with_covariance.covariance;\n       auto & radar_position_cov = radar_track.position_covariance;"
        }
    ],
    "autowarefoundation/autoware.universe/5011": [
        {
            "sha": "8ae0bdacb983a806048c1aff1c6458bca20b5ed4",
            "filename": "sensing/pointcloud_preprocessor/src/concatenate_data/concatenate_and_time_sync_nodelet.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 6,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4169fee0e8abea49792a57a4e509123e34aa5953/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fconcatenate_data%2Fconcatenate_and_time_sync_nodelet.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4169fee0e8abea49792a57a4e509123e34aa5953/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fconcatenate_data%2Fconcatenate_and_time_sync_nodelet.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fpointcloud_preprocessor%2Fsrc%2Fconcatenate_data%2Fconcatenate_and_time_sync_nodelet.cpp?ref=4169fee0e8abea49792a57a4e509123e34aa5953",
            "patch": "@@ -400,12 +400,6 @@ void PointCloudConcatenateDataSynchronizerComponent::convertToXYZICloud(\n {\n   output_ptr->header = input_ptr->header;\n \n-  if (input_ptr->data.empty()) {\n-    RCLCPP_WARN_STREAM_THROTTLE(\n-      this->get_logger(), *this->get_clock(), 1000, \"Empty sensor points!\");\n-    return;\n-  }\n-\n   PointCloud2Modifier<PointXYZI> output_modifier{*output_ptr, input_ptr->header.frame_id};\n   output_modifier.reserve(input_ptr->width);\n \n@@ -460,6 +454,12 @@ void PointCloudConcatenateDataSynchronizerComponent::cloud_callback(\n {\n   std::lock_guard<std::mutex> lock(mutex_);\n   auto input = std::make_shared<sensor_msgs::msg::PointCloud2>(*input_ptr);\n+  if (input->data.empty()) {\n+    RCLCPP_WARN_STREAM_THROTTLE(\n+      this->get_logger(), *this->get_clock(), 1000, \"Empty sensor points!\");\n+    return;\n+  }\n+\n   sensor_msgs::msg::PointCloud2::SharedPtr xyzi_input_ptr(new sensor_msgs::msg::PointCloud2());\n   convertToXYZICloud(input, xyzi_input_ptr);\n "
        }
    ],
    "autowarefoundation/autoware.universe/5019": [
        {
            "sha": "3e982ac2ccf4dc8265400815e0b57aa6c7fb7846",
            "filename": "common/geography_utils/src/lanelet2_projector.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 6,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/823f4b8edaf9cfe50850575e2590268f2854ec33/common%2Fgeography_utils%2Fsrc%2Flanelet2_projector.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/823f4b8edaf9cfe50850575e2590268f2854ec33/common%2Fgeography_utils%2Fsrc%2Flanelet2_projector.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fgeography_utils%2Fsrc%2Flanelet2_projector.cpp?ref=823f4b8edaf9cfe50850575e2590268f2854ec33",
            "patch": "@@ -43,13 +43,11 @@ std::unique_ptr<lanelet::Projector> get_lanelet2_projector(const MapProjectorInf\n     lanelet::Origin origin{position};\n     lanelet::projection::TransverseMercatorProjector projector{origin};\n     return std::make_unique<lanelet::projection::TransverseMercatorProjector>(projector);\n-\n-  } else {\n-    const std::string error_msg =\n-      \"Invalid map projector type: \" + projector_info.projector_type +\n-      \". Currently supported types: MGRS, LocalCartesianUTM, and TransverseMercator\";\n-    throw std::invalid_argument(error_msg);\n   }\n+  const std::string error_msg =\n+    \"Invalid map projector type: \" + projector_info.projector_type +\n+    \". Currently supported types: MGRS, LocalCartesianUTM, and TransverseMercator\";\n+  throw std::invalid_argument(error_msg);\n }\n \n }  // namespace geography_utils"
        }
    ],
    "autowarefoundation/autoware.universe/5020": [
        {
            "sha": "fac1a25846ee95554dcaeb798bf9efe24fc8f6ee",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 2,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/737c00571bb22391aa3aebf8a7be3e47706c8e20/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/737c00571bb22391aa3aebf8a7be3e47706c8e20/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=737c00571bb22391aa3aebf8a7be3e47706c8e20",
            "patch": "@@ -669,7 +669,9 @@ void GoalPlannerModule::setOutput(BehaviorModuleOutput & output)\n   if (!status_.is_safe_static_objects) {\n     // situation : not safe against static objects use stop_path\n     setStopPath(output);\n-  } else if (!isSafePath() && status_.has_decided_path && isActivated()) {\n+  } else if (\n+    parameters_->safety_check_params.enable_safety_check && !isSafePath() &&\n+    status_.has_decided_path && isActivated()) {\n     // situation : not safe against dynamic objects after approval\n     // insert stop point in current path if ego is able to stop with acceleration and jerk\n     // constraints\n@@ -701,7 +703,8 @@ void GoalPlannerModule::setOutput(BehaviorModuleOutput & output)\n   // for the next loop setOutput().\n   // this is used to determine whether to generate a new stop path or keep the current stop path.\n   status_.prev_is_safe = status_.is_safe_static_objects;\n-  status_.prev_is_safe_dynamic_objects = isSafePath();\n+  status_.prev_is_safe_dynamic_objects =\n+    parameters_->safety_check_params.enable_safety_check ? isSafePath() : true;\n }\n \n void GoalPlannerModule::setStopPath(BehaviorModuleOutput & output)"
        }
    ],
    "autowarefoundation/autoware.universe/5022": [
        {
            "sha": "0b1741cfa4fcf2f95c6a9d2d84f17b50773e5794",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 25,
            "deletions": 27,
            "changes": 52,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d2be3d44930c288261cc575a11406bb5746975d0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d2be3d44930c288261cc575a11406bb5746975d0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=d2be3d44930c288261cc575a11406bb5746975d0",
            "patch": "@@ -2075,37 +2075,35 @@ CandidateOutput AvoidanceModule::planCandidate() const\n \n   auto shifted_path = data.candidate_path;\n \n-  if (!data.safe_shift_line.empty()) {  // clip from shift start index for visualize\n-    utils::clipPathLength(\n-      shifted_path.path, data.safe_shift_line.front().start_idx, std::numeric_limits<double>::max(),\n-      0.0);\n-\n-    const auto sl = helper_.getMainShiftLine(data.safe_shift_line);\n-    const auto sl_front = data.safe_shift_line.front();\n-    const auto sl_back = data.safe_shift_line.back();\n-\n-    output.lateral_shift = helper_.getRelativeShiftToPath(sl);\n-    output.start_distance_to_path_change = sl_front.start_longitudinal;\n-    output.finish_distance_to_path_change = sl_back.end_longitudinal;\n-\n-    const uint16_t steering_factor_direction = std::invoke([&output]() {\n-      if (output.lateral_shift > 0.0) {\n-        return SteeringFactor::LEFT;\n-      }\n-      return SteeringFactor::RIGHT;\n-    });\n-    steering_factor_interface_ptr_->updateSteeringFactor(\n-      {sl_front.start, sl_back.end},\n-      {output.start_distance_to_path_change, output.finish_distance_to_path_change},\n-      SteeringFactor::AVOIDANCE_PATH_CHANGE, steering_factor_direction, SteeringFactor::APPROACHING,\n-      \"\");\n+  if (data.safe_shift_line.empty()) {\n+    const size_t ego_idx = planner_data_->findEgoIndex(shifted_path.path.points);\n+    utils::clipPathLength(shifted_path.path, ego_idx, planner_data_->parameters);\n+\n+    output.path_candidate = shifted_path.path;\n+    return output;\n   }\n \n-  const size_t ego_idx = planner_data_->findEgoIndex(shifted_path.path.points);\n-  utils::clipPathLength(shifted_path.path, ego_idx, planner_data_->parameters);\n+  const auto sl = helper_.getMainShiftLine(data.safe_shift_line);\n+  const auto sl_front = data.safe_shift_line.front();\n+  const auto sl_back = data.safe_shift_line.back();\n \n-  output.path_candidate = shifted_path.path;\n+  utils::clipPathLength(\n+    shifted_path.path, sl_front.start_idx, std::numeric_limits<double>::max(), 0.0);\n \n+  output.lateral_shift = helper_.getRelativeShiftToPath(sl);\n+  output.start_distance_to_path_change = sl_front.start_longitudinal;\n+  output.finish_distance_to_path_change = sl_back.end_longitudinal;\n+\n+  const uint16_t steering_factor_direction = std::invoke([&output]() {\n+    return output.lateral_shift > 0.0 ? SteeringFactor::LEFT : SteeringFactor::RIGHT;\n+  });\n+  steering_factor_interface_ptr_->updateSteeringFactor(\n+    {sl_front.start, sl_back.end},\n+    {output.start_distance_to_path_change, output.finish_distance_to_path_change},\n+    SteeringFactor::AVOIDANCE_PATH_CHANGE, steering_factor_direction, SteeringFactor::APPROACHING,\n+    \"\");\n+\n+  output.path_candidate = shifted_path.path;\n   return output;\n }\n "
        }
    ],
    "autowarefoundation/autoware.universe/5033": [
        {
            "sha": "06128599d96b8411ac2fd0f7f985a19a48915bf0",
            "filename": "sensing/gnss_poser/src/gnss_poser_core.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9ee48ea0c08f0940aef71dbc3c8bf66bae69ee38/sensing%2Fgnss_poser%2Fsrc%2Fgnss_poser_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9ee48ea0c08f0940aef71dbc3c8bf66bae69ee38/sensing%2Fgnss_poser%2Fsrc%2Fgnss_poser_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/sensing%2Fgnss_poser%2Fsrc%2Fgnss_poser_core.cpp?ref=9ee48ea0c08f0940aef71dbc3c8bf66bae69ee38",
            "patch": "@@ -139,11 +139,11 @@ void GNSSPoser::callbackNavSatFix(\n   tf2::Transform tf_map2gnss_antenna{};\n   tf2::fromMsg(gnss_antenna_pose, tf_map2gnss_antenna);\n \n-  // get TF from base_link to gnss_antenna\n+  // get TF from gnss_antenna to base_link\n   auto tf_gnss_antenna2base_link_msg_ptr = std::make_shared<geometry_msgs::msg::TransformStamped>();\n \n   getStaticTransform(\n-    gnss_frame_, base_frame_, tf_gnss_antenna2base_link_msg_ptr, nav_sat_fix_msg_ptr->header.stamp);\n+    base_frame_, gnss_frame_, tf_gnss_antenna2base_link_msg_ptr, nav_sat_fix_msg_ptr->header.stamp);\n   tf2::Transform tf_gnss_antenna2base_link{};\n   tf2::fromMsg(tf_gnss_antenna2base_link_msg_ptr->transform, tf_gnss_antenna2base_link);\n "
        }
    ],
    "autowarefoundation/autoware.universe/5039": [
        {
            "sha": "ba6eb45267ba3095079fcc45759081e4bec125e0",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 27,
            "deletions": 25,
            "changes": 52,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9fcdaaafd0668a4689590ba799e5cc0ca2ff178c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9fcdaaafd0668a4689590ba799e5cc0ca2ff178c/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=9fcdaaafd0668a4689590ba799e5cc0ca2ff178c",
            "patch": "@@ -2443,21 +2443,16 @@ std::optional<double> getSignedDistanceFromBoundary(\n   const auto & bound_line_2d = left_side ? lanelet::utils::to2D(combined_lane.leftBound3d())\n                                          : lanelet::utils::to2D(combined_lane.rightBound3d());\n \n-  // Initialize the lateral distance to the maximum (for left side) or the minimum (for right side)\n-  // possible value.\n-  double lateral_distance =\n-    left_side ? -std::numeric_limits<double>::max() : std::numeric_limits<double>::max();\n-\n   // Find the closest bound segment that contains the corner point in the X-direction\n   // and calculate the lateral distance from that segment.\n-  const auto calcLateralDistanceFromBound = [&](\n-                                              const Point & vehicle_corner_point,\n-                                              boost::optional<double> & lateral_distance,\n-                                              boost::optional<size_t> & segment_idx) {\n+  const auto calcLateralDistanceFromBound =\n+    [&](const Point & vehicle_corner_point) -> boost::optional<std::pair<double, size_t>> {\n     Pose vehicle_corner_pose{};\n     vehicle_corner_pose.position = vehicle_corner_point;\n     vehicle_corner_pose.orientation = vehicle_pose.orientation;\n \n+    boost::optional<std::pair<double, size_t>> lateral_distance_with_idx{};\n+\n     // Euclidean distance to find the closest segment containing the corner point.\n     double min_distance = std::numeric_limits<double>::max();\n \n@@ -2483,38 +2478,45 @@ std::optional<double> getSignedDistanceFromBoundary(\n         min_distance = std::min(distance1, distance2);\n         // Update lateral distance using the formula derived from similar triangles in the lateral\n         // cross-section view.\n-        lateral_distance = -1.0 * (dy_p1 * dx_p2 + dy_p2 * -dx_p1) / (dx_p2 - dx_p1);\n-        segment_idx = i;\n+        lateral_distance_with_idx =\n+          std::make_pair(-1.0 * (dy_p1 * dx_p2 + dy_p2 * -dx_p1) / (dx_p2 - dx_p1), i);\n       }\n     }\n+    if (lateral_distance_with_idx) {\n+      return lateral_distance_with_idx;\n+    }\n+    return boost::optional<std::pair<double, size_t>>{};\n   };\n \n   // Calculate the lateral distance for both the rear and front corners of the vehicle.\n-  boost::optional<size_t> rear_segment_idx{};\n-  boost::optional<double> rear_lateral_distance{};\n-  calcLateralDistanceFromBound(rear_corner_point, rear_lateral_distance, rear_segment_idx);\n-  boost::optional<size_t> front_segment_idx{};\n-  boost::optional<double> front_lateral_distance{};\n-  calcLateralDistanceFromBound(front_corner_point, front_lateral_distance, front_segment_idx);\n+  const boost::optional<std::pair<double, size_t>> rear_lateral_distance_with_idx =\n+    calcLateralDistanceFromBound(rear_corner_point);\n+  const boost::optional<std::pair<double, size_t>> front_lateral_distance_with_idx =\n+    calcLateralDistanceFromBound(front_corner_point);\n \n   // If no closest bound segment was found for both corners, return an empty optional.\n-  if (!rear_lateral_distance && !front_lateral_distance) {\n+  if (!rear_lateral_distance_with_idx && !front_lateral_distance_with_idx) {\n     return {};\n   }\n   // If only one of them found the closest bound, return the found lateral distance.\n-  if (!rear_lateral_distance) {\n-    return *front_lateral_distance;\n-  } else if (!front_lateral_distance) {\n-    return *rear_lateral_distance;\n+  if (!rear_lateral_distance_with_idx) {\n+    return front_lateral_distance_with_idx.get().first;\n+  } else if (!front_lateral_distance_with_idx) {\n+    return rear_lateral_distance_with_idx.get().first;\n   }\n   // If both corners found their closest bound, return the maximum (for left side) or the minimum\n   // (for right side) lateral distance.\n-  lateral_distance = left_side ? std::max(*rear_lateral_distance, *front_lateral_distance)\n-                               : std::min(*rear_lateral_distance, *front_lateral_distance);\n+  double lateral_distance =\n+    left_side\n+      ? std::max(\n+          rear_lateral_distance_with_idx.get().first, front_lateral_distance_with_idx.get().first)\n+      : std::min(\n+          rear_lateral_distance_with_idx.get().first, front_lateral_distance_with_idx.get().first);\n \n   // Iterate through all segments between the segments closest to the rear and front corners.\n   // Update the lateral distance in case any of these inner segments are closer to the vehicle.\n-  for (size_t i = *rear_segment_idx + 1; i < *front_segment_idx; i++) {\n+  for (size_t i = rear_lateral_distance_with_idx.get().second + 1;\n+       i < front_lateral_distance_with_idx.get().second; i++) {\n     Pose bound_pose;\n     bound_pose.position = lanelet::utils::conversion::toGeomMsgPt(bound_line_2d[i]);\n     bound_pose.orientation = vehicle_pose.orientation;"
        }
    ],
    "autowarefoundation/autoware.universe/5041": [
        {
            "sha": "6b1a4a82b314e5836187fc8ad380eb4e92da5362",
            "filename": "planning/behavior_path_planner/src/utils/geometric_parallel_parking/geometric_parallel_parking.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/15a8599a4da8094db7564c66712548581468d912/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgeometric_parallel_parking%2Fgeometric_parallel_parking.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/15a8599a4da8094db7564c66712548581468d912/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgeometric_parallel_parking%2Fgeometric_parallel_parking.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fgeometric_parallel_parking%2Fgeometric_parallel_parking.cpp?ref=15a8599a4da8094db7564c66712548581468d912",
            "patch": "@@ -289,6 +289,10 @@ bool GeometricParallelParking::planPullOut(\n     PathWithLaneId road_center_line_path =\n       planner_data_->route_handler->getCenterLinePath(road_lanes, s_start, s_end, true);\n \n+    if (road_center_line_path.points.empty()) {\n+      continue;\n+    }\n+\n     // check the continuity of straight path and arc path\n     const Pose & road_path_first_pose = road_center_line_path.points.front().point.pose;\n     const Pose & arc_path_last_pose = arc_paths.back().points.back().point.pose;"
        }
    ],
    "autowarefoundation/autoware.universe/5046": [
        {
            "sha": "5a0a5ba186b0a31118b6056f1f3de1f7e79d578a",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 7,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b6354f638f70104e5d05aab64a6c200aaadd3b7a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b6354f638f70104e5d05aab64a6c200aaadd3b7a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=b6354f638f70104e5d05aab64a6c200aaadd3b7a",
            "patch": "@@ -1432,8 +1432,9 @@ AvoidLineArray AvoidanceModule::applyFillGapProcess(\n \n AvoidLineArray AvoidanceModule::applyCombineProcess(\n   const AvoidLineArray & shift_lines, const AvoidLineArray & registered_lines,\n-  [[maybe_unused]] DebugData & debug) const\n+  DebugData & debug) const\n {\n+  debug.step1_registered_shift_line = registered_lines;\n   return utils::avoidance::combineRawShiftLinesWithUniqueCheck(registered_lines, shift_lines);\n }\n \n@@ -1936,26 +1937,29 @@ void AvoidanceModule::generateExpandDrivableLanes(BehaviorModuleOutput & output)\n \n PathWithLaneId AvoidanceModule::extendBackwardLength(const PathWithLaneId & original_path) const\n {\n-  // special for avoidance: take behind distance upt ot shift-start-point if it exist.\n+  const auto previous_path = helper_.getPreviousReferencePath();\n+\n   const auto longest_dist_to_shift_point = [&]() {\n     double max_dist = 0.0;\n     for (const auto & pnt : path_shifter_.getShiftLines()) {\n-      max_dist = std::max(max_dist, calcDistance2d(getEgoPose(), pnt.start));\n+      max_dist = std::max(\n+        max_dist, calcSignedArcLength(previous_path.points, pnt.start.position, getEgoPosition()));\n     }\n     for (const auto & sp : registered_raw_shift_lines_) {\n-      max_dist = std::max(max_dist, calcDistance2d(getEgoPose(), sp.start));\n+      max_dist = std::max(\n+        max_dist, calcSignedArcLength(previous_path.points, sp.start.position, getEgoPosition()));\n     }\n     return max_dist;\n   }();\n \n   const auto extra_margin = 10.0;  // Since distance does not consider arclength, but just line.\n   const auto backward_length = std::max(\n     planner_data_->parameters.backward_path_length, longest_dist_to_shift_point + extra_margin);\n-  const auto previous_path = helper_.getPreviousReferencePath();\n \n   const size_t orig_ego_idx = planner_data_->findEgoIndex(original_path.points);\n-  const size_t prev_ego_idx =\n-    findNearestSegmentIndex(previous_path.points, getPoint(original_path.points.at(orig_ego_idx)));\n+  const size_t prev_ego_idx = motion_utils::findFirstNearestSegmentIndexWithSoftConstraints(\n+    previous_path.points, getPose(original_path.points.at(orig_ego_idx)),\n+    std::numeric_limits<double>::max(), planner_data_->parameters.ego_nearest_yaw_threshold);\n \n   size_t clip_idx = 0;\n   for (size_t i = 0; i < prev_ego_idx; ++i) {"
        }
    ],
    "autowarefoundation/autoware.universe/5051": [
        {
            "sha": "e71888e768f239002377430f90f6c831dc612e94",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4d856c71368552bae0734a1916f673d04694a41a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4d856c71368552bae0734a1916f673d04694a41a/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=4d856c71368552bae0734a1916f673d04694a41a",
            "patch": "@@ -207,7 +207,10 @@ bool AvoidanceModule::canTransitSuccessState()\n     }\n   }\n \n-  const bool has_avoidance_target = !data.target_objects.empty();\n+  const bool has_avoidance_target =\n+    std::any_of(data.target_objects.begin(), data.target_objects.end(), [](const auto & o) {\n+      return o.is_avoidable || o.reason == AvoidanceDebugFactor::TOO_LARGE_JERK;\n+    });\n   const bool has_shift_point = !path_shifter_.getShiftLines().empty();\n   const bool has_base_offset =\n     std::abs(path_shifter_.getBaseOffset()) > parameters_->lateral_avoid_check_threshold;\n@@ -2949,6 +2952,12 @@ void AvoidanceModule::insertPrepareVelocity(ShiftedPath & shifted_path) const\n \n   const auto object = data.target_objects.front();\n \n+  const auto enough_space =\n+    object.is_avoidable || object.reason == AvoidanceDebugFactor::TOO_LARGE_JERK;\n+  if (!enough_space) {\n+    return;\n+  }\n+\n   // calculate shift length for front object.\n   const auto & vehicle_width = planner_data_->parameters.vehicle_width;\n   const auto object_type = utils::getHighestProbLabel(object.object.classification);"
        }
    ],
    "autowarefoundation/autoware.universe/5053": [
        {
            "sha": "f09b71523e80496716836f6d291b2abb4712d406",
            "filename": "localization/ndt_scan_matcher/src/pose_array_interpolator.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/362d7374c4a31e5fd8c7686aebdcbafcb07c6eb2/localization%2Fndt_scan_matcher%2Fsrc%2Fpose_array_interpolator.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/362d7374c4a31e5fd8c7686aebdcbafcb07c6eb2/localization%2Fndt_scan_matcher%2Fsrc%2Fpose_array_interpolator.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fpose_array_interpolator.cpp?ref=362d7374c4a31e5fd8c7686aebdcbafcb07c6eb2",
            "patch": "@@ -51,6 +51,7 @@ PoseArrayInterpolator::PoseArrayInterpolator(\n \n   // all validations must be true\n   if (!(is_old_pose_valid && is_new_pose_valid && is_pose_diff_valid)) {\n+    success_ = false;\n     RCLCPP_WARN(logger_, \"Validation error.\");\n   }\n }"
        }
    ],
    "autowarefoundation/autoware.universe/5058": [
        {
            "sha": "5754c256fef3c158d84b4095f29b8349ac73f820",
            "filename": "perception/object_merger/launch/object_association_merger.launch.xml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ae7e75d3b50b4886157d481357965adcf349ccbc/perception%2Fobject_merger%2Flaunch%2Fobject_association_merger.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ae7e75d3b50b4886157d481357965adcf349ccbc/perception%2Fobject_merger%2Flaunch%2Fobject_association_merger.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fobject_merger%2Flaunch%2Fobject_association_merger.launch.xml?ref=ae7e75d3b50b4886157d481357965adcf349ccbc",
            "patch": "@@ -15,7 +15,7 @@\n     <param from=\"$(var data_association_matrix_path)\"/>\n     <param from=\"$(var distance_threshold_list_path)\"/>\n     <param name=\"priority_mode\" value=\"$(var priority_mode)\"/>\n-    <param name=\"sync_queue_size\" value=\"sync_queue_size\"/>\n+    <param name=\"sync_queue_size\" value=\"$(var sync_queue_size)\"/>\n     <param name=\"precision_threshold_to_judge_overlapped\" value=\"0.4\"/>\n     <param name=\"remove_overlapped_unknown_objects\" value=\"true\"/>\n   </node>"
        }
    ],
    "autowarefoundation/autoware.universe/5066": [
        {
            "sha": "b39112b1d8d6236fa2a3d84fb4fdf16930be6973",
            "filename": "localization/ekf_localizer/src/ekf_localizer.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/04b41dd823142d4d63c457f41a1562eecdfd0e7e/localization%2Fekf_localizer%2Fsrc%2Fekf_localizer.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/04b41dd823142d4d63c457f41a1562eecdfd0e7e/localization%2Fekf_localizer%2Fsrc%2Fekf_localizer.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fekf_localizer%2Fsrc%2Fekf_localizer.cpp?ref=04b41dd823142d4d63c457f41a1562eecdfd0e7e",
            "patch": "@@ -387,7 +387,7 @@ void EKFLocalizer::callbackTwistWithCovariance(\n {\n   // Ignore twist if velocity is too small.\n   // Note that this inequality must not include \"equal\".\n-  if (msg->twist.twist.linear.x < params_.threshold_observable_velocity_mps) {\n+  if (std::abs(msg->twist.twist.linear.x) < params_.threshold_observable_velocity_mps) {\n     msg->twist.covariance[0 * 6 + 0] = 10000.0;\n   }\n   twist_queue_.push(msg);"
        }
    ],
    "autowarefoundation/autoware.universe/5075": [
        {
            "sha": "6b3b3d3bbbe016570b62451dfd415cb42d0ed3f6",
            "filename": "launch/tier4_localization_launch/package.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/aa9e11816d9223a313d29a5ffea554956aec02ed/launch%2Ftier4_localization_launch%2Fpackage.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/aa9e11816d9223a313d29a5ffea554956aec02ed/launch%2Ftier4_localization_launch%2Fpackage.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_localization_launch%2Fpackage.xml?ref=aa9e11816d9223a313d29a5ffea554956aec02ed",
            "patch": "@@ -14,13 +14,14 @@\n   <buildtool_depend>ament_cmake_auto</buildtool_depend>\n   <buildtool_depend>autoware_cmake</buildtool_depend>\n \n+  <exec_depend>ar_tag_based_localizer</exec_depend>\n   <exec_depend>automatic_pose_initializer</exec_depend>\n   <exec_depend>eagleye_fix2pose</exec_depend>\n   <exec_depend>eagleye_gnss_converter</exec_depend>\n   <exec_depend>eagleye_rt</exec_depend>\n   <exec_depend>ekf_localizer</exec_depend>\n   <exec_depend>gyro_odometer</exec_depend>\n-  <exec_depend>landmark_based_localizer</exec_depend>\n+  <exec_depend>landmark_tf_caster</exec_depend>\n   <exec_depend>ndt_scan_matcher</exec_depend>\n   <exec_depend>pointcloud_preprocessor</exec_depend>\n   <exec_depend>pose_initializer</exec_depend>"
        }
    ],
    "autowarefoundation/autoware.universe/5083": [
        {
            "sha": "848232d3421181819a299c8ed739faaacf587145",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 15,
            "deletions": 4,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a9fb85f5113e88b4ed7be701a3091d6a899a3f9f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a9fb85f5113e88b4ed7be701a3091d6a899a3f9f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=a9fb85f5113e88b4ed7be701a3091d6a899a3f9f",
            "patch": "@@ -674,10 +674,15 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n     utils::lane_change::createPolygon(current_lanes, 0.0, std::numeric_limits<double>::max());\n   const auto target_polygon =\n     utils::lane_change::createPolygon(target_lanes, 0.0, std::numeric_limits<double>::max());\n-  const auto target_backward_polygon = utils::lane_change::createPolygon(\n-    target_backward_lanes, 0.0, std::numeric_limits<double>::max());\n   const auto dist_ego_to_current_lanes_center =\n     lanelet::utils::getLateralDistanceToClosestLanelet(current_lanes, current_pose);\n+  std::vector<std::optional<lanelet::BasicPolygon2d>> target_backward_polygons;\n+  for (const auto & target_backward_lane : target_backward_lanes) {\n+    lanelet::ConstLanelets lanelet{target_backward_lane};\n+    auto lane_polygon =\n+      utils::lane_change::createPolygon(lanelet, 0.0, std::numeric_limits<double>::max());\n+    target_backward_polygons.push_back(lane_polygon);\n+  }\n \n   auto filtered_objects = objects;\n \n@@ -730,10 +735,16 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n       }\n     }\n \n+    const auto check_backward_polygon = [&obj_polygon](const auto & target_backward_polygon) {\n+      return target_backward_polygon &&\n+             boost::geometry::intersects(target_backward_polygon.value(), obj_polygon);\n+    };\n+\n     // check if the object intersects with target backward lanes\n     if (\n-      target_backward_polygon &&\n-      boost::geometry::intersects(target_backward_polygon.value(), obj_polygon)) {\n+      !target_backward_polygons.empty() &&\n+      std::any_of(\n+        target_backward_polygons.begin(), target_backward_polygons.end(), check_backward_polygon)) {\n       filtered_obj_indices.target_lane.push_back(i);\n       continue;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/5092": [
        {
            "sha": "91ea6407af7ef39c8408a5587b973f01384245cb",
            "filename": "control/pid_longitudinal_controller/src/pid_longitudinal_controller.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/60da572520f8f457813bc50ecfebbdc3a068a431/control%2Fpid_longitudinal_controller%2Fsrc%2Fpid_longitudinal_controller.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/60da572520f8f457813bc50ecfebbdc3a068a431/control%2Fpid_longitudinal_controller%2Fsrc%2Fpid_longitudinal_controller.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fpid_longitudinal_controller%2Fsrc%2Fpid_longitudinal_controller.cpp?ref=60da572520f8f457813bc50ecfebbdc3a068a431",
            "patch": "@@ -923,7 +923,8 @@ double PidLongitudinalController::applyVelocityFeedback(\n {\n   const double current_vel_abs = std::fabs(current_vel);\n   const double target_vel_abs = std::fabs(target_motion.vel);\n-  const bool is_under_control = m_current_operation_mode.mode == OperationModeState::AUTONOMOUS;\n+  const bool is_under_control = m_current_operation_mode.is_autoware_control_enabled &&\n+                                m_current_operation_mode.mode == OperationModeState::AUTONOMOUS;\n   const bool enable_integration =\n     (current_vel_abs > m_current_vel_threshold_pid_integrate) && is_under_control;\n   const double error_vel_filtered = m_lpf_vel_error->filter(target_vel_abs - current_vel_abs);"
        }
    ],
    "autowarefoundation/autoware.universe/5095": [
        {
            "sha": "9791a1f0b5e3ee0cef6a1c6dafdb1bcb1d2081f3",
            "filename": "control/pid_longitudinal_controller/src/longitudinal_controller_utils.cpp",
            "status": "modified",
            "additions": 13,
            "deletions": 23,
            "changes": 36,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/02c0c522fa713d4856d5ac36679690f30b87a48e/control%2Fpid_longitudinal_controller%2Fsrc%2Flongitudinal_controller_utils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/02c0c522fa713d4856d5ac36679690f30b87a48e/control%2Fpid_longitudinal_controller%2Fsrc%2Flongitudinal_controller_utils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fpid_longitudinal_controller%2Fsrc%2Flongitudinal_controller_utils.cpp?ref=02c0c522fa713d4856d5ac36679690f30b87a48e",
            "patch": "@@ -91,32 +91,22 @@ double getPitchByTraj(\n     return 0.0;\n   }\n \n-  for (size_t i = nearest_idx + 1; i < trajectory.points.size(); ++i) {\n-    const double dist = tier4_autoware_utils::calcDistance2d(\n-      trajectory.points.at(nearest_idx), trajectory.points.at(i));\n-    if (dist > wheel_base) {\n-      // calculate pitch from trajectory between rear wheel (nearest) and front center (i)\n-      return tier4_autoware_utils::calcElevationAngle(\n-        trajectory.points.at(nearest_idx).pose.position, trajectory.points.at(i).pose.position);\n+  const auto [prev_idx, next_idx] = [&]() {\n+    for (size_t i = nearest_idx + 1; i < trajectory.points.size(); ++i) {\n+      const double dist = tier4_autoware_utils::calcDistance2d(\n+        trajectory.points.at(nearest_idx), trajectory.points.at(i));\n+      if (dist > wheel_base) {\n+        // calculate pitch from trajectory between rear wheel (nearest) and front center (i)\n+        return std::make_pair(nearest_idx, i);\n+      }\n     }\n-  }\n-\n-  // close to goal\n-  for (size_t i = trajectory.points.size() - 1; i > 0; --i) {\n-    const double dist =\n-      tier4_autoware_utils::calcDistance2d(trajectory.points.back(), trajectory.points.at(i));\n-\n-    if (dist > wheel_base) {\n-      // calculate pitch from trajectory\n-      // between wheelbase behind the end of trajectory (i) and the end of trajectory (back)\n-      return tier4_autoware_utils::calcElevationAngle(\n-        trajectory.points.at(i).pose.position, trajectory.points.back().pose.position);\n-    }\n-  }\n+    // NOTE: The ego pose is close to the goal.\n+    return std::make_pair(\n+      std::min(nearest_idx, trajectory.points.size() - 2), trajectory.points.size() - 1);\n+  }();\n \n-  // calculate pitch from trajectory between the beginning and end of trajectory\n   return tier4_autoware_utils::calcElevationAngle(\n-    trajectory.points.at(0).pose.position, trajectory.points.back().pose.position);\n+    trajectory.points.at(prev_idx).pose.position, trajectory.points.at(next_idx).pose.position);\n }\n \n Pose calcPoseAfterTimeDelay("
        }
    ],
    "autowarefoundation/autoware.universe/5109": [
        {
            "sha": "1b14741db4a56097ea40a0658e26abf2cb7ec932",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 0,
            "changes": 7,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/fdc4da47468fd8fc6d2c2f8c63395efdcb9f93c6/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/fdc4da47468fd8fc6d2c2f8c63395efdcb9f93c6/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=fdc4da47468fd8fc6d2c2f8c63395efdcb9f93c6",
            "patch": "@@ -1675,6 +1675,13 @@ std::vector<geometry_msgs::msg::Point> calcBound(\n       continue;\n     }\n \n+    if (!enable_expanding_hatched_road_markings) {\n+      for (const auto & point : bound) {\n+        output_points.push_back(lanelet::utils::conversion::toGeomMsgPt(point));\n+      }\n+      continue;\n+    }\n+\n     // expand drivable area by hatched road markings.\n     for (size_t bound_point_idx = 0; bound_point_idx < bound.size(); ++bound_point_idx) {\n       const auto & bound_point = bound[bound_point_idx];"
        }
    ],
    "autowarefoundation/autoware.universe/5120": [
        {
            "sha": "60fb2ba2ff2e860827a8148c0f84018bf737a89f",
            "filename": "planning/behavior_path_planner/src/utils/drivable_area_expansion/drivable_area_expansion.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8692b8d3385c241a1d7edf6036a113192c39dd5b/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8692b8d3385c241a1d7edf6036a113192c39dd5b/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp?ref=8692b8d3385c241a1d7edf6036a113192c39dd5b",
            "patch": "@@ -60,7 +60,7 @@ std::vector<PathPointWithLaneId> crop_and_resample(\n   // crop\n   const auto crop_seg_idx = motion_utils::findNearestSegmentIndex(points, crop_pose.position);\n   const auto cropped_points = motion_utils::cropPoints(\n-    points, crop_pose.position, crop_seg_idx + 1,\n+    points, crop_pose.position, crop_seg_idx,\n     planner_data->drivable_area_expansion_parameters.max_path_arc_length, 0.0);\n   planner_data->drivable_area_expansion_prev_crop_pose = crop_pose;\n   // resample"
        }
    ],
    "autowarefoundation/autoware.universe/5139": [
        {
            "sha": "7f5024929b5317055f04fb8dfa667f680c03858e",
            "filename": "perception/lidar_apollo_instance_segmentation/launch/lidar_apollo_instance_segmentation.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/328595112603aa5adedf037062c5686d66df1142/perception%2Flidar_apollo_instance_segmentation%2Flaunch%2Flidar_apollo_instance_segmentation.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/328595112603aa5adedf037062c5686d66df1142/perception%2Flidar_apollo_instance_segmentation%2Flaunch%2Flidar_apollo_instance_segmentation.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Flidar_apollo_instance_segmentation%2Flaunch%2Flidar_apollo_instance_segmentation.launch.xml?ref=328595112603aa5adedf037062c5686d66df1142",
            "patch": "@@ -7,7 +7,8 @@\n   <arg if=\"$(eval &quot;'$(var model)'=='model_64'&quot;)\" name=\"base_name\" default=\"hdl-64\"/>\n   <arg if=\"$(eval &quot;'$(var model)'=='model_128'&quot;)\" name=\"base_name\" default=\"vls-128\"/>\n \n-  <arg name=\"trained_onnx_file\" default=\"$(find-pkg-share lidar_apollo_instance_segmentation)/data/$(var base_name).onnx\"/>\n+  <arg name=\"data_path\" default=\"$(env HOME)/autoware_data\" description=\"packages data and artifacts directory path\"/>\n+  <arg name=\"trained_onnx_file\" default=\"$(var data_path)/lidar_apollo_instance_segmentation/$(var base_name).onnx\"/>\n   <arg name=\"param_file\" default=\"$(find-pkg-share lidar_apollo_instance_segmentation)/config/$(var base_name).param.yaml\"/>\n \n   <arg name=\"target_frame\" default=\"base_link\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/5151": [
        {
            "sha": "afc2d3807a0afc58c91fae2be17891fc4839e238",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1309711e150541a63a4bc6fa084bc1e6eae89404/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1309711e150541a63a4bc6fa084bc1e6eae89404/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=1309711e150541a63a4bc6fa084bc1e6eae89404",
            "patch": "@@ -459,6 +459,7 @@ ModuleStatus GoalPlannerModule::updateState()\n bool GoalPlannerModule::planFreespacePath()\n {\n   mutex_.lock();\n+  goal_searcher_->setPlannerData(planner_data_);\n   goal_searcher_->update(goal_candidates_);\n   const auto goal_candidates = goal_candidates_;\n   debug_data_.freespace_planner.num_goal_candidates = goal_candidates.size();"
        }
    ],
    "autowarefoundation/autoware.universe/5152": [
        {
            "sha": "55d433d20ef00d95ede6fead7b58ba543a1516f4",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5179b1a0f6876b74e5ff7d67411c1a1ffe512c38/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5179b1a0f6876b74e5ff7d67411c1a1ffe512c38/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=5179b1a0f6876b74e5ff7d67411c1a1ffe512c38",
            "patch": "@@ -217,6 +217,10 @@ void GoalPlannerModule::onFreespaceParkingTimer()\n   if (!planner_data_->costmap) {\n     return;\n   }\n+  // fixed goal planner do not use freespace planner\n+  if (!goal_planner_utils::isAllowedGoalModification(planner_data_->route_handler)) {\n+    return;\n+  }\n \n   const bool is_new_costmap =\n     (clock_->now() - planner_data_->costmap->header.stamp).seconds() < 1.0;"
        }
    ],
    "autowarefoundation/autoware.universe/5153": [
        {
            "sha": "44c763721e159c2614a819b2bf53c3bcf8fdba6e",
            "filename": "localization/ndt_scan_matcher/src/ndt_scan_matcher_core.cpp",
            "status": "modified",
            "additions": 0,
            "deletions": 3,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a54d5d1c0d6a8af408c6bf4c78e5e652803f389e/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a54d5d1c0d6a8af408c6bf4c78e5e652803f389e/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp?ref=a54d5d1c0d6a8af408c6bf4c78e5e652803f389e",
            "patch": "@@ -144,9 +144,6 @@ NDTScanMatcher::NDTScanMatcher()\n   critical_upper_bound_exe_time_ms_ =\n     this->declare_parameter(\"critical_upper_bound_exe_time_ms\", critical_upper_bound_exe_time_ms_);\n \n-  initial_pose_timeout_sec_ =\n-    this->declare_parameter(\"initial_pose_timeout_sec\", initial_pose_timeout_sec_);\n-\n   initial_pose_timeout_sec_ = this->declare_parameter<double>(\"initial_pose_timeout_sec\");\n \n   initial_pose_distance_tolerance_m_ ="
        }
    ],
    "autowarefoundation/autoware.universe/5163": [
        {
            "sha": "8e79e21db40e39fa3856bc39e23532eb2b6ca177",
            "filename": "perception/image_projection_based_fusion/launch/pointpainting_fusion.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 1,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c0d0645c8a65b96490ff82eafc672ab5a57b2e2a/perception%2Fimage_projection_based_fusion%2Flaunch%2Fpointpainting_fusion.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c0d0645c8a65b96490ff82eafc672ab5a57b2e2a/perception%2Fimage_projection_based_fusion%2Flaunch%2Fpointpainting_fusion.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2Flaunch%2Fpointpainting_fusion.launch.xml?ref=c0d0645c8a65b96490ff82eafc672ab5a57b2e2a",
            "patch": "@@ -18,8 +18,9 @@\n   <arg name=\"input/camera_info7\" default=\"/camera_info7\"/>\n   <arg name=\"input/pointcloud\" default=\"/sensing/lidar/top/rectified/pointcloud\"/>\n   <arg name=\"output/objects\" default=\"objects\"/>\n+  <arg name=\"data_path\" default=\"$(env HOME)/autoware_data\" description=\"packages data and artifacts directory path\"/>\n   <arg name=\"model_name\" default=\"pointpainting\" description=\"options: `pointpainting`\"/>\n-  <arg name=\"model_path\" default=\"$(find-pkg-share image_projection_based_fusion)/data\"/>\n+  <arg name=\"model_path\" default=\"$(var data_path)/image_projection_based_fusion\"/>\n   <arg name=\"model_param_path\" default=\"$(find-pkg-share image_projection_based_fusion)/config/$(var model_name).param.yaml\"/>\n   <arg name=\"class_remapper_param_path\" default=\"$(find-pkg-share lidar_centerpoint)/config/detection_class_remapper.param.yaml\"/>\n   <arg name=\"sync_param_path\" default=\"$(find-pkg-share image_projection_based_fusion)/config/roi_sync.param.yaml\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/5166": [
        {
            "sha": "38d141241c215243fe255b133192eef6d2c44c32",
            "filename": "launch/tier4_perception_launch/launch/object_recognition/detection/camera_lidar_radar_fusion_based_detection.launch.xml",
            "status": "modified",
            "additions": 53,
            "deletions": 45,
            "changes": 98,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/948f570d8d5f6a17ce3330e6e883e8527321f6f7/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_radar_fusion_based_detection.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/948f570d8d5f6a17ce3330e6e883e8527321f6f7/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_radar_fusion_based_detection.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_perception_launch%2Flaunch%2Fobject_recognition%2Fdetection%2Fcamera_lidar_radar_fusion_based_detection.launch.xml?ref=948f570d8d5f6a17ce3330e6e883e8527321f6f7",
            "patch": "@@ -47,6 +47,8 @@\n   <!-- Radar parameters -->\n   <arg name=\"input/radar\" default=\"/sensing/radar/detected_objects\"/>\n   <arg name=\"radar_lanelet_filtering_range_param\" default=\"$(find-pkg-share detected_object_validation)/config/object_lanelet_filter.param.yaml\"/>\n+  <arg name=\"use_near_radar_fusion\" default=\"false\"/>\n+  <arg name=\"far_object_merger_sync_queue_size\" default=\"20\"/>\n \n   <!-- Jetson AGX -->\n   <!-- <include file=\"$(find-pkg-share tensorrt_yolo)/launch/yolo.launch.xml\">\n@@ -103,6 +105,48 @@\n       </include>\n     </group>\n \n+    <!-- roi based clustering -->\n+    <group>\n+      <include file=\"$(find-pkg-share image_projection_based_fusion)/launch/roi_pointcloud_fusion.launch.xml\" if=\"$(var use_roi_based_cluster)\">\n+        <arg name=\"input/camera_info0\" value=\"$(var camera_info0)\"/>\n+        <arg name=\"input/rois0\" value=\"$(var detection_rois0)\"/>\n+        <arg name=\"input/camera_info1\" value=\"$(var camera_info1)\"/>\n+        <arg name=\"input/rois1\" value=\"$(var detection_rois1)\"/>\n+        <arg name=\"input/camera_info2\" value=\"$(var camera_info2)\"/>\n+        <arg name=\"input/rois2\" value=\"$(var detection_rois2)\"/>\n+        <arg name=\"input/camera_info3\" value=\"$(var camera_info3)\"/>\n+        <arg name=\"input/rois3\" value=\"$(var detection_rois3)\"/>\n+        <arg name=\"input/camera_info4\" value=\"$(var camera_info4)\"/>\n+        <arg name=\"input/rois4\" value=\"$(var detection_rois4)\"/>\n+        <arg name=\"input/camera_info5\" value=\"$(var camera_info5)\"/>\n+        <arg name=\"input/rois5\" value=\"$(var detection_rois5)\"/>\n+        <arg name=\"input/camera_info6\" value=\"$(var camera_info6)\"/>\n+        <arg name=\"input/rois6\" value=\"$(var detection_rois6)\"/>\n+        <arg name=\"input/camera_info7\" value=\"$(var camera_info7)\"/>\n+        <arg name=\"input/rois7\" value=\"$(var detection_rois7)\"/>\n+        <arg name=\"input/rois_number\" value=\"$(var image_number)\"/>\n+        <arg name=\"input/image0\" value=\"$(var image_raw0)\"/>\n+        <arg name=\"input/image1\" value=\"$(var image_raw1)\"/>\n+        <arg name=\"input/image2\" value=\"$(var image_raw2)\"/>\n+        <arg name=\"input/image3\" value=\"$(var image_raw3)\"/>\n+        <arg name=\"input/image4\" value=\"$(var image_raw4)\"/>\n+        <arg name=\"input/image5\" value=\"$(var image_raw5)\"/>\n+        <arg name=\"input/image6\" value=\"$(var image_raw6)\"/>\n+        <arg name=\"input/image7\" value=\"$(var image_raw7)\"/>\n+        <arg name=\"input/pointcloud\" value=\"/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud\"/>\n+        <arg name=\"output_clusters\" value=\"roi_cluster/clusters\"/>\n+      </include>\n+    </group>\n+\n+    <!-- simple_cluster_merger -->\n+    <group>\n+      <include file=\"$(find-pkg-share cluster_merger)/launch/cluster_merger.launch.xml\" if=\"$(var use_roi_based_cluster)\">\n+        <arg name=\"input/cluster0\" value=\"euclidean_cluster/clusters\"/>\n+        <arg name=\"input/cluster1\" value=\"roi_cluster/clusters\"/>\n+        <arg name=\"output/clusters\" value=\"clusters\"/>\n+      </include>\n+    </group>\n+\n     <group>\n       <include file=\"$(find-pkg-share shape_estimation)/launch/shape_estimation.launch.xml\">\n         <arg name=\"input/objects\" value=\"clusters\"/>\n@@ -114,6 +158,8 @@\n       <let name=\"input/clustering\" value=\"/perception/object_recognition/detection/clustering/clusters\"/>\n       <push-ros-namespace namespace=\"camera_lidar_fusion\"/>\n       <!-- Fusion camera-lidar to classify -->\n+\n+      <!-- euclidean clustering -->\n       <group>\n         <include file=\"$(find-pkg-share image_projection_based_fusion)/launch/roi_cluster_fusion.launch.xml\">\n           <arg name=\"input/camera_info0\" value=\"$(var camera_info0)\"/>\n@@ -142,54 +188,12 @@\n           <arg name=\"input/image5\" value=\"$(var image_raw5)\"/>\n           <arg name=\"input/image6\" value=\"$(var image_raw6)\"/>\n           <arg name=\"input/image7\" value=\"$(var image_raw7)\"/>\n-          <arg name=\"output/clusters\" value=\"euclidean_cluster/clusters\"/>\n+          <arg name=\"output/clusters\" value=\"clusters\"/>\n           <arg name=\"remove_unknown\" value=\"$(var remove_unknown)\"/>\n           <arg name=\"trust_distance\" value=\"$(var trust_distance)\"/>\n         </include>\n       </group>\n \n-      <!-- roi based clustering -->\n-      <group>\n-        <include file=\"$(find-pkg-share image_projection_based_fusion)/launch/roi_pointcloud_fusion.launch.xml\" if=\"$(var use_roi_based_cluster)\">\n-          <arg name=\"input/camera_info0\" value=\"$(var camera_info0)\"/>\n-          <arg name=\"input/rois0\" value=\"$(var detection_rois0)\"/>\n-          <arg name=\"input/camera_info1\" value=\"$(var camera_info1)\"/>\n-          <arg name=\"input/rois1\" value=\"$(var detection_rois1)\"/>\n-          <arg name=\"input/camera_info2\" value=\"$(var camera_info2)\"/>\n-          <arg name=\"input/rois2\" value=\"$(var detection_rois2)\"/>\n-          <arg name=\"input/camera_info3\" value=\"$(var camera_info3)\"/>\n-          <arg name=\"input/rois3\" value=\"$(var detection_rois3)\"/>\n-          <arg name=\"input/camera_info4\" value=\"$(var camera_info4)\"/>\n-          <arg name=\"input/rois4\" value=\"$(var detection_rois4)\"/>\n-          <arg name=\"input/camera_info5\" value=\"$(var camera_info5)\"/>\n-          <arg name=\"input/rois5\" value=\"$(var detection_rois5)\"/>\n-          <arg name=\"input/camera_info6\" value=\"$(var camera_info6)\"/>\n-          <arg name=\"input/rois6\" value=\"$(var detection_rois6)\"/>\n-          <arg name=\"input/camera_info7\" value=\"$(var camera_info7)\"/>\n-          <arg name=\"input/rois7\" value=\"$(var detection_rois7)\"/>\n-          <arg name=\"input/rois_number\" value=\"$(var image_number)\"/>\n-          <arg name=\"input/image0\" value=\"$(var image_raw0)\"/>\n-          <arg name=\"input/image1\" value=\"$(var image_raw1)\"/>\n-          <arg name=\"input/image2\" value=\"$(var image_raw2)\"/>\n-          <arg name=\"input/image3\" value=\"$(var image_raw3)\"/>\n-          <arg name=\"input/image4\" value=\"$(var image_raw4)\"/>\n-          <arg name=\"input/image5\" value=\"$(var image_raw5)\"/>\n-          <arg name=\"input/image6\" value=\"$(var image_raw6)\"/>\n-          <arg name=\"input/image7\" value=\"$(var image_raw7)\"/>\n-          <arg name=\"input/pointcloud\" value=\"/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud\"/>\n-          <arg name=\"output_clusters\" value=\"roi_cluster/clusters\"/>\n-        </include>\n-      </group>\n-\n-      <!-- simple_cluster_merger -->\n-      <group>\n-        <include file=\"$(find-pkg-share cluster_merger)/launch/cluster_merger.launch.xml\" if=\"$(var use_roi_based_cluster)\">\n-          <arg name=\"input/cluster0\" value=\"euclidean_cluster/clusters\"/>\n-          <arg name=\"input/cluster1\" value=\"roi_cluster/clusters\"/>\n-          <arg name=\"output/clusters\" value=\"clusters\"/>\n-        </include>\n-      </group>\n-\n       <group>\n         <include file=\"$(find-pkg-share shape_estimation)/launch/shape_estimation.launch.xml\">\n           <arg name=\"input/objects\" value=\"clusters\"/>\n@@ -293,7 +297,7 @@\n \n   <!-- Radar fusion -->\n   <group>\n-    <include file=\"$(find-pkg-share radar_fusion_to_detected_object)/launch/radar_object_fusion_to_detected_object.launch.xml\">\n+    <include file=\"$(find-pkg-share radar_fusion_to_detected_object)/launch/radar_object_fusion_to_detected_object.launch.xml\" if=\"$(var use_near_radar_fusion)\">\n       <arg name=\"input/objects\" value=\"$(var lidar_detection_model)/objects\"/>\n       <arg name=\"input/radars\" value=\"radar/noise_filtered_objects\"/>\n       <arg name=\"output/objects\" value=\"radar_fusion/objects\"/>\n@@ -302,6 +306,9 @@\n \n   <!-- Camera late fusion -->\n   <group>\n+    <let name=\"target_objects\" value=\"radar_fusion/objects\" if=\"$(var use_near_radar_fusion)\"/>\n+    <let name=\"target_objects\" value=\"$(var lidar_detection_model)/objects\" unless=\"$(var use_near_radar_fusion)\"/>\n+\n     <include file=\"$(find-pkg-share image_projection_based_fusion)/launch/roi_detected_object_fusion.launch.xml\">\n       <arg name=\"input/camera_info0\" value=\"$(var camera_info0)\"/>\n       <arg name=\"input/rois0\" value=\"$(var detection_rois0)\"/>\n@@ -328,7 +335,7 @@\n       <arg name=\"input/image5\" value=\"$(var image_raw5)\"/>\n       <arg name=\"input/image6\" value=\"$(var image_raw6)\"/>\n       <arg name=\"input/image7\" value=\"$(var image_raw7)\"/>\n-      <arg name=\"input/objects\" value=\"radar_fusion/objects\"/>\n+      <arg name=\"input/objects\" value=\"$(var target_objects)\"/>\n       <arg name=\"output/objects\" value=\"$(var lidar_detection_model)/roi_fusion/objects\"/>\n     </include>\n   </group>\n@@ -403,5 +410,6 @@\n     <arg name=\"priority_mode\" value=\"0\"/>\n     <arg name=\"data_association_matrix_path\" value=\"$(var object_recognition_detection_object_merger_data_association_matrix_param_path)\"/>\n     <arg name=\"distance_threshold_list_path\" value=\"$(var object_recognition_detection_object_merger_distance_threshold_list_path)\"/>\n+    <arg name=\"sync_queue_size\" value=\"$(var far_object_merger_sync_queue_size)\"/>\n   </include>\n </launch>"
        }
    ],
    "autowarefoundation/autoware.universe/5168": [
        {
            "sha": "870b8bc7c13f57e26519fa88e270d66b2f751d6d",
            "filename": "perception/crosswalk_traffic_light_estimator/src/node.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9abdf48b98442ccf94f5b68f6f69690bae600051/perception%2Fcrosswalk_traffic_light_estimator%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9abdf48b98442ccf94f5b68f6f69690bae600051/perception%2Fcrosswalk_traffic_light_estimator%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fcrosswalk_traffic_light_estimator%2Fsrc%2Fnode.cpp?ref=9abdf48b98442ccf94f5b68f6f69690bae600051",
            "patch": "@@ -231,6 +231,7 @@ void CrosswalkTrafficLightEstimatorNode::setCrosswalkTrafficSignal(\n     TrafficSignal output_traffic_signal;\n     TrafficSignalElement output_traffic_signal_element;\n     output_traffic_signal_element.color = color;\n+    output_traffic_signal_element.shape = TrafficSignalElement::CIRCLE;\n     output_traffic_signal_element.confidence = 1.0;\n     output_traffic_signal.elements.push_back(output_traffic_signal_element);\n     output_traffic_signal.traffic_signal_id = tl_reg_elem->id();"
        }
    ],
    "autowarefoundation/autoware.universe/5169": [
        {
            "sha": "b99bd522b81f8dff5a3571a34497f374ed142dff",
            "filename": "planning/behavior_velocity_crosswalk_module/src/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6feee17b1854433c9faa19ccd5f415fdf167cd97/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6feee17b1854433c9faa19ccd5f415fdf167cd97/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp?ref=6feee17b1854433c9faa19ccd5f415fdf167cd97",
            "patch": "@@ -962,8 +962,10 @@ bool CrosswalkModule::isRedSignalForPedestrians() const\n       continue;\n     }\n \n-    if (lights.front().color == TrafficSignalElement::RED) {\n-      return true;\n+    for (const auto & element : lights) {\n+      if (\n+        element.color == TrafficSignalElement::RED && element.shape == TrafficSignalElement::CIRCLE)\n+        return true;\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/5180": [
        {
            "sha": "7de6bb2c966f6b43fcc630b5c5e1592866681860",
            "filename": "planning/obstacle_cruise_planner/src/node.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 6,
            "changes": 13,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0835acc179087fa14fe542cb74ef5d0173d1ed5b/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0835acc179087fa14fe542cb74ef5d0173d1ed5b/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fobstacle_cruise_planner%2Fsrc%2Fnode.cpp?ref=0835acc179087fa14fe542cb74ef5d0173d1ed5b",
            "patch": "@@ -100,14 +100,15 @@ std::pair<double, double> projectObstacleVelocityToTrajectory(\n   const std::vector<TrajectoryPoint> & traj_points, const Obstacle & obstacle)\n {\n   const size_t object_idx = motion_utils::findNearestIndex(traj_points, obstacle.pose.position);\n-\n-  const double object_vel_norm = std::hypot(obstacle.twist.linear.x, obstacle.twist.linear.y);\n-  const double object_vel_yaw = std::atan2(obstacle.twist.linear.y, obstacle.twist.linear.x);\n   const double traj_yaw = tf2::getYaw(traj_points.at(object_idx).pose.orientation);\n \n-  return std::make_pair(\n-    object_vel_norm * std::cos(object_vel_yaw - traj_yaw),\n-    object_vel_norm * std::sin(object_vel_yaw - traj_yaw));\n+  const double obstacle_yaw = tf2::getYaw(obstacle.pose.orientation);\n+\n+  const Eigen::Rotation2Dd R_ego_to_obstacle(obstacle_yaw - traj_yaw);\n+  const Eigen::Vector2d obstacle_velocity(obstacle.twist.linear.x, obstacle.twist.linear.y);\n+  const Eigen::Vector2d projected_velocity = R_ego_to_obstacle * obstacle_velocity;\n+\n+  return std::make_pair(projected_velocity[0], projected_velocity[1]);\n }\n \n double calcObstacleMaxLength(const Shape & shape)"
        }
    ],
    "autowarefoundation/autoware.universe/5181": [
        {
            "sha": "10bd41c5c9c93e700ee350fedb9e70791d7d8753",
            "filename": "planning/planning_debug_tools/scripts/trajectory_visualizer.py",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4223b54cae8bda4685317c02895c550af0223d13/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4223b54cae8bda4685317c02895c550af0223d13/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2Fscripts%2Ftrajectory_visualizer.py?ref=4223b54cae8bda4685317c02895c550af0223d13",
            "patch": "@@ -178,15 +178,15 @@ def __init__(self):\n \n         # main process\n         if PLOT_TYPE == \"VEL_ACC_JERK\":\n+            self.setPlotTrajectory()\n             self.ani = animation.FuncAnimation(\n                 self.fig, self.plotTrajectory, interval=100, blit=True\n             )\n-            self.setPlotTrajectory()\n         else:\n+            self.setPlotTrajectoryVelocity()\n             self.ani = animation.FuncAnimation(\n                 self.fig, self.plotTrajectoryVelocity, interval=100, blit=True\n             )\n-            self.setPlotTrajectoryVelocity()\n \n         plt.show()\n "
        }
    ],
    "autowarefoundation/autoware.universe/5205": [
        {
            "sha": "36908bd87de239e56592b92691b93ecdedf10b35",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/5eef6c4e450ff954aaff89cbbc479455464aeafb/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/5eef6c4e450ff954aaff89cbbc479455464aeafb/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=5eef6c4e450ff954aaff89cbbc479455464aeafb",
            "patch": "@@ -2662,6 +2662,7 @@ void AvoidanceModule::updateDebugMarker(\n     addObjects(data.other_objects, std::string(\"OutOfTargetArea\"));\n     addObjects(data.other_objects, std::string(\"NotNeedAvoidance\"));\n     addObjects(data.other_objects, std::string(\"LessThanExecutionThreshold\"));\n+    addObjects(data.other_objects, std::string(\"TooNearToGoal\"));\n   }\n \n   // shift line pre-process"
        }
    ],
    "autowarefoundation/autoware.universe/5214": [
        {
            "sha": "c75970e6fcc2d81b3cf4bfeca73f7d08b72709c1",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/aef33242d89d95824a160d9b94497ca5656b1751/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/aef33242d89d95824a160d9b94497ca5656b1751/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=aef33242d89d95824a160d9b94497ca5656b1751",
            "patch": "@@ -683,6 +683,16 @@ LaneChangeTargetObjectIndices NormalLaneChange::filterObject(\n     lanelet::utils::getLateralDistanceToClosestLanelet(current_lanes, current_pose);\n   std::vector<std::optional<lanelet::BasicPolygon2d>> target_backward_polygons;\n   for (const auto & target_backward_lane : target_backward_lanes) {\n+    // Check to see is target_backward_lane is in current_lanes\n+    // Without this check, current lane object might be treated as target lane object\n+    const auto is_current_lane = [&](const lanelet::ConstLanelet & current_lane) {\n+      return current_lane.id() == target_backward_lane.id();\n+    };\n+\n+    if (std::any_of(current_lanes.begin(), current_lanes.end(), is_current_lane)) {\n+      continue;\n+    }\n+\n     lanelet::ConstLanelets lanelet{target_backward_lane};\n     auto lane_polygon =\n       utils::lane_change::createPolygon(lanelet, 0.0, std::numeric_limits<double>::max());"
        }
    ],
    "autowarefoundation/autoware.universe/5220": [
        {
            "sha": "cf41a4cf55d0b4aa1a3aa281f290b2f51117cb44",
            "filename": "localization/ndt_scan_matcher/config/ndt_scan_matcher.param.yaml",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/271214c52ec1a02919685fd3eff6bcde5a77c0a6/localization%2Fndt_scan_matcher%2Fconfig%2Fndt_scan_matcher.param.yaml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/271214c52ec1a02919685fd3eff6bcde5a77c0a6/localization%2Fndt_scan_matcher%2Fconfig%2Fndt_scan_matcher.param.yaml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fconfig%2Fndt_scan_matcher.param.yaml?ref=271214c52ec1a02919685fd3eff6bcde5a77c0a6",
            "patch": "@@ -41,7 +41,7 @@\n     converged_param_nearest_voxel_transformation_likelihood: 2.3\n \n     # The number of particles to estimate initial pose\n-    initial_estimate_particles_num: 100\n+    initial_estimate_particles_num: 200\n \n     # Tolerance of timestamp difference between current time and sensor pointcloud. [sec]\n     lidar_topic_timeout_sec: 1.0"
        }
    ],
    "autowarefoundation/autoware.universe/5226": [
        {
            "sha": "725b528abad511e03da7e65ddc00cf256053c87f",
            "filename": "planning/behavior_path_planner/src/utils/avoidance/utils.cpp",
            "status": "modified",
            "additions": 18,
            "deletions": 5,
            "changes": 23,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6a05855ffcb4c5aed60c86b515b5e31336d909d8/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6a05855ffcb4c5aed60c86b515b5e31336d909d8/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp?ref=6a05855ffcb4c5aed60c86b515b5e31336d909d8",
            "patch": "@@ -1037,25 +1037,38 @@ void filterTargetObjects(\n       };\n \n       // current lanelet\n-      update_road_to_shoulder_distance(overhang_lanelet);\n+      {\n+        update_road_to_shoulder_distance(overhang_lanelet);\n+\n+        o.to_road_shoulder_distance = extendToRoadShoulderDistanceWithPolygon(\n+          rh, target_line, o.to_road_shoulder_distance, overhang_lanelet, o.overhang_pose.position,\n+          overhang_basic_pose, parameters->use_hatched_road_markings,\n+          parameters->use_intersection_areas);\n+      }\n+\n       // previous lanelet\n       lanelet::ConstLanelets previous_lanelet{};\n       if (rh->getPreviousLaneletsWithinRoute(overhang_lanelet, &previous_lanelet)) {\n         update_road_to_shoulder_distance(previous_lanelet.front());\n+\n+        o.to_road_shoulder_distance = extendToRoadShoulderDistanceWithPolygon(\n+          rh, target_line, o.to_road_shoulder_distance, previous_lanelet.front(),\n+          o.overhang_pose.position, overhang_basic_pose, parameters->use_hatched_road_markings,\n+          parameters->use_intersection_areas);\n       }\n+\n       // next lanelet\n       lanelet::ConstLanelet next_lanelet{};\n       if (rh->getNextLaneletWithinRoute(overhang_lanelet, &next_lanelet)) {\n         update_road_to_shoulder_distance(next_lanelet);\n-      }\n-      debug.bounds.push_back(target_line);\n \n-      {\n         o.to_road_shoulder_distance = extendToRoadShoulderDistanceWithPolygon(\n-          rh, target_line, o.to_road_shoulder_distance, overhang_lanelet, o.overhang_pose.position,\n+          rh, target_line, o.to_road_shoulder_distance, next_lanelet, o.overhang_pose.position,\n           overhang_basic_pose, parameters->use_hatched_road_markings,\n           parameters->use_intersection_areas);\n       }\n+\n+      debug.bounds.push_back(target_line);\n     }\n \n     // calculate avoid_margin dynamically"
        }
    ],
    "autowarefoundation/autoware.universe/5227": [
        {
            "sha": "7da494bfd52313937cbe1a180ceee9d4275af9bd",
            "filename": "planning/behavior_velocity_blind_spot_module/src/debug.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c276c88065ddfcacfeabe945c25633c129d7ab53/planning%2Fbehavior_velocity_blind_spot_module%2Fsrc%2Fdebug.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c276c88065ddfcacfeabe945c25633c129d7ab53/planning%2Fbehavior_velocity_blind_spot_module%2Fsrc%2Fdebug.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_blind_spot_module%2Fsrc%2Fdebug.cpp?ref=c276c88065ddfcacfeabe945c25633c129d7ab53",
            "patch": "@@ -19,6 +19,8 @@\n #include <motion_utils/marker/virtual_wall_marker_creator.hpp>\n #include <tier4_autoware_utils/ros/marker_helper.hpp>\n \n+#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>\n+\n #include <tf2/utils.h>\n \n #include <string>"
        }
    ],
    "autowarefoundation/autoware.universe/5231": [
        {
            "sha": "fe96985743b94cb1f56bf096792c2a4f74a589a0",
            "filename": "planning/behavior_velocity_crosswalk_module/src/scene_crosswalk.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/41a21f16de5f923089a08d569138369b1544ba4c/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/41a21f16de5f923089a08d569138369b1544ba4c/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_crosswalk_module%2Fsrc%2Fscene_crosswalk.cpp?ref=41a21f16de5f923089a08d569138369b1544ba4c",
            "patch": "@@ -299,8 +299,7 @@ std::optional<std::pair<geometry_msgs::msg::Point, double>> CrosswalkModule::get\n     const auto p_stop_lines = getLinestringIntersects(\n       ego_path, lanelet::utils::to2D(stop_line).basicLineString(), ego_pos, 2);\n     if (!p_stop_lines.empty()) {\n-      return std::make_pair(\n-        p_stop_lines.front(), -planner_param_.stop_distance_from_object - base_link2front);\n+      return std::make_pair(p_stop_lines.front(), -base_link2front);\n     }\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/5232": [
        {
            "sha": "b35eb6e93ce6e04129d55f99e8185a028fecba85",
            "filename": "common/autoware_auto_tf2/include/autoware_auto_tf2/tf2_autoware_auto_msgs.hpp",
            "status": "modified",
            "additions": 0,
            "deletions": 50,
            "changes": 50,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/75fce96766b1ad5f145eddc6e504f78e665a0175/common%2Fautoware_auto_tf2%2Finclude%2Fautoware_auto_tf2%2Ftf2_autoware_auto_msgs.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/75fce96766b1ad5f145eddc6e504f78e665a0175/common%2Fautoware_auto_tf2%2Finclude%2Fautoware_auto_tf2%2Ftf2_autoware_auto_msgs.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Fautoware_auto_tf2%2Finclude%2Fautoware_auto_tf2%2Ftf2_autoware_auto_msgs.hpp?ref=75fce96766b1ad5f145eddc6e504f78e665a0175",
            "patch": "@@ -45,56 +45,6 @@ using BoundingBox = autoware_auto_perception_msgs::msg::BoundingBox;\n \n namespace tf2\n {\n-\n-/*************/\n-/** Point32 **/\n-/*************/\n-\n-/** \\brief Apply a geometry_msgs TransformStamped to a geometry_msgs Point32 type.\n- * This function is a specialization of the doTransform template defined in tf2/convert.h.\n- * \\param t_in The point to transform, as a Point32 message.\n- * \\param t_out The transformed point, as a Point32 message.\n- * \\param transform The timestamped transform to apply, as a TransformStamped message.\n- */\n-template <>\n-inline void doTransform(\n-  const geometry_msgs::msg::Point32 & t_in, geometry_msgs::msg::Point32 & t_out,\n-  const geometry_msgs::msg::TransformStamped & transform)\n-{\n-  const KDL::Vector v_out = gmTransformToKDL(transform) * KDL::Vector(t_in.x, t_in.y, t_in.z);\n-  t_out.x = static_cast<float>(v_out[0]);\n-  t_out.y = static_cast<float>(v_out[1]);\n-  t_out.z = static_cast<float>(v_out[2]);\n-}\n-\n-/*************/\n-/** Polygon **/\n-/*************/\n-\n-/** \\brief Apply a geometry_msgs TransformStamped to a geometry_msgs Polygon type.\n- * This function is a specialization of the doTransform template defined in tf2/convert.h.\n- * \\param t_in The polygon to transform.\n- * \\param t_out The transformed polygon.\n- * \\param transform The timestamped transform to apply, as a TransformStamped message.\n- */\n-template <>\n-inline void doTransform(\n-  const geometry_msgs::msg::Polygon & t_in, geometry_msgs::msg::Polygon & t_out,\n-  const geometry_msgs::msg::TransformStamped & transform)\n-{\n-  // Don't call the Point32 doTransform to avoid doing this conversion every time\n-  const auto kdl_frame = gmTransformToKDL(transform);\n-  // We don't use std::back_inserter to allow aliasing between t_in and t_out\n-  t_out.points.resize(t_in.points.size());\n-  for (size_t i = 0; i < t_in.points.size(); ++i) {\n-    const KDL::Vector v_out =\n-      kdl_frame * KDL::Vector(t_in.points[i].x, t_in.points[i].y, t_in.points[i].z);\n-    t_out.points[i].x = static_cast<float>(v_out[0]);\n-    t_out.points[i].y = static_cast<float>(v_out[1]);\n-    t_out.points[i].z = static_cast<float>(v_out[2]);\n-  }\n-}\n-\n /******************/\n /** Quaternion32 **/\n /******************/"
        }
    ],
    "autowarefoundation/autoware.universe/5250": [
        {
            "sha": "e681bc22cd24bf6b74d81eea8d37f2d25eace9de",
            "filename": "control/vehicle_cmd_gate/src/vehicle_cmd_gate.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 3,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c1aa8ce5da75a51a741aa1b85e8b3a01d9a1c8f3/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c1aa8ce5da75a51a741aa1b85e8b3a01d9a1c8f3/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fvehicle_cmd_gate%2Fsrc%2Fvehicle_cmd_gate.cpp?ref=c1aa8ce5da75a51a741aa1b85e8b3a01d9a1c8f3",
            "patch": "@@ -555,9 +555,7 @@ AckermannControlCommand VehicleCmdGate::filterControlCommand(const AckermannCont\n   // set prev value for both to keep consistency over switching:\n   // Actual steer, vel, acc should be considered in manual mode to prevent sudden motion when\n   // switching from manual to autonomous\n-  const auto in_autonomous =\n-    (mode.mode == OperationModeState::AUTONOMOUS && mode.is_autoware_control_enabled);\n-  auto prev_values = in_autonomous ? out : current_status_cmd;\n+  auto prev_values = mode.is_autoware_control_enabled ? out : current_status_cmd;\n \n   if (ego_is_stopped) {\n     prev_values.longitudinal = out.longitudinal;"
        }
    ],
    "autowarefoundation/autoware.universe/5258": [
        {
            "sha": "2e299fd7a2e519c60dd538ff77b493ee9553c54e",
            "filename": "system/default_ad_api_helpers/ad_api_adaptors/README.md",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0c31b2c968cb320490a834283c6bfadd5247ec62/system%2Fdefault_ad_api_helpers%2Fad_api_adaptors%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0c31b2c968cb320490a834283c6bfadd5247ec62/system%2Fdefault_ad_api_helpers%2Fad_api_adaptors%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/system%2Fdefault_ad_api_helpers%2Fad_api_adaptors%2FREADME.md?ref=0c31b2c968cb320490a834283c6bfadd5247ec62",
            "patch": "@@ -21,9 +21,11 @@ The clear API is called automatically before setting the route.\n \n | Interface    | Local Name         | Global Name                           | Description                                        |\n | ------------ | ------------------ | ------------------------------------- | -------------------------------------------------- |\n+| Subscription | -                  | /api/routing/state                    | The state of the routing API.                      |\n | Subscription | ~/input/fixed_goal | /planning/mission_planning/goal       | The goal pose of route. Disable goal modification. |\n | Subscription | ~/input/rough_goal | /rviz/routing/rough_goal              | The goal pose of route. Enable goal modification.  |\n | Subscription | ~/input/reroute    | /rviz/routing/reroute                 | The goal pose of reroute.                          |\n | Subscription | ~/input/waypoint   | /planning/mission_planning/checkpoint | The waypoint pose of route.                        |\n | Client       | -                  | /api/routing/clear_route              | The route clear API.                               |\n | Client       | -                  | /api/routing/set_route_points         | The route points set API.                          |\n+| Client       | -                  | /api/routing/change_route_points      | The route points change API.                       |"
        }
    ],
    "autowarefoundation/autoware.universe/5262": [
        {
            "sha": "94b142da3dcf9d2e3784f167b29749ab14233669",
            "filename": "map/map_projection_loader/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/43fdcd9cc114cfd4f6207a7ad73daa1eab5f4083/map%2Fmap_projection_loader%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/43fdcd9cc114cfd4f6207a7ad73daa1eab5f4083/map%2Fmap_projection_loader%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/map%2Fmap_projection_loader%2FREADME.md?ref=43fdcd9cc114cfd4f6207a7ad73daa1eab5f4083",
            "patch": "@@ -25,7 +25,7 @@ sample-map-rosbag\n \n ```yaml\n # map_projector_info.yaml\n-type: \"local\"\n+projector_type: local\n ```\n \n ### Using MGRS"
        }
    ],
    "autowarefoundation/autoware.universe/5265": [
        {
            "sha": "a0f5f4f92bd6f22dd000738470e2ac4a1a77427c",
            "filename": "planning/behavior_velocity_intersection_module/src/scene_intersection.cpp",
            "status": "modified",
            "additions": 31,
            "deletions": 4,
            "changes": 35,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b6786ace6285d3a71261cf233e014651cebd23f1/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b6786ace6285d3a71261cf233e014651cebd23f1/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp?ref=b6786ace6285d3a71261cf233e014651cebd23f1",
            "patch": "@@ -25,6 +25,7 @@\n #include <tier4_autoware_utils/geometry/geometry.hpp>\n #include <tier4_autoware_utils/ros/uuid_helper.hpp>\n \n+#include <boost/geometry/algorithms/convex_hull.hpp>\n #include <boost/geometry/algorithms/correct.hpp>\n #include <boost/geometry/algorithms/intersection.hpp>\n \n@@ -43,6 +44,32 @@ namespace behavior_velocity_planner\n {\n namespace bg = boost::geometry;\n \n+namespace\n+{\n+Polygon2d createOneStepPolygon(\n+  const geometry_msgs::msg::Pose & prev_pose, const geometry_msgs::msg::Pose & next_pose,\n+  const autoware_auto_perception_msgs::msg::Shape & shape)\n+{\n+  const auto prev_poly = tier4_autoware_utils::toPolygon2d(prev_pose, shape);\n+  const auto next_poly = tier4_autoware_utils::toPolygon2d(next_pose, shape);\n+\n+  Polygon2d one_step_poly;\n+  for (const auto & point : prev_poly.outer()) {\n+    one_step_poly.outer().push_back(point);\n+  }\n+  for (const auto & point : next_poly.outer()) {\n+    one_step_poly.outer().push_back(point);\n+  }\n+\n+  bg::correct(one_step_poly);\n+\n+  Polygon2d convex_one_step_poly;\n+  bg::convex_hull(one_step_poly, convex_one_step_poly);\n+\n+  return convex_one_step_poly;\n+}\n+}  // namespace\n+\n static bool isTargetCollisionVehicleType(\n   const autoware_auto_perception_msgs::msg::PredictedObject & object)\n {\n@@ -1312,14 +1339,14 @@ bool IntersectionModule::checkCollision(\n       // collision point\n       const auto first_itr = std::adjacent_find(\n         predicted_path.path.cbegin(), predicted_path.path.cend(),\n-        [&ego_poly](const auto & a, const auto & b) {\n-          return bg::intersects(ego_poly, LineString2d{to_bg2d(a), to_bg2d(b)});\n+        [&ego_poly, &object](const auto & a, const auto & b) {\n+          return bg::intersects(ego_poly, createOneStepPolygon(a, b, object.shape));\n         });\n       if (first_itr == predicted_path.path.cend()) continue;\n       const auto last_itr = std::adjacent_find(\n         predicted_path.path.crbegin(), predicted_path.path.crend(),\n-        [&ego_poly](const auto & a, const auto & b) {\n-          return bg::intersects(ego_poly, LineString2d{to_bg2d(a), to_bg2d(b)});\n+        [&ego_poly, &object](const auto & a, const auto & b) {\n+          return bg::intersects(ego_poly, createOneStepPolygon(a, b, object.shape));\n         });\n       if (last_itr == predicted_path.path.crend()) continue;\n "
        }
    ],
    "autowarefoundation/autoware.universe/5266": [
        {
            "sha": "632aad887390604876d6135b1d8da9d5318bad22",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f0b5b404b9017ad11296458ce4cd8987df6aca44/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f0b5b404b9017ad11296458ce4cd8987df6aca44/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=f0b5b404b9017ad11296458ce4cd8987df6aca44",
            "patch": "@@ -171,7 +171,10 @@ bool AvoidanceModule::isExecutionRequested() const\n     return false;\n   }\n \n-  return !avoid_data_.target_objects.empty();\n+  return std::any_of(\n+    avoid_data_.target_objects.begin(), avoid_data_.target_objects.end(), [](const auto & o) {\n+      return o.is_avoidable || o.reason == AvoidanceDebugFactor::TOO_LARGE_JERK;\n+    });\n }\n \n bool AvoidanceModule::isExecutionReady() const"
        }
    ],
    "autowarefoundation/autoware.universe/5280": [
        {
            "sha": "ffc0b61880188061fa08fe275f1edcf9328023b2",
            "filename": "planning/behavior_velocity_intersection_module/src/util.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 0,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cc6c756f1fede147308c019fe00de2b789d4327c/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cc6c756f1fede147308c019fe00de2b789d4327c/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp?ref=cc6c756f1fede147308c019fe00de2b789d4327c",
            "patch": "@@ -475,6 +475,9 @@ std::optional<size_t> getFirstPointInsidePolygon(\n       if (is_in_lanelet) {\n         return std::make_optional<size_t>(i);\n       }\n+      if (i == 0) {\n+        break;\n+      }\n     }\n   }\n   return std::nullopt;\n@@ -517,6 +520,9 @@ getFirstPointInsidePolygons(\n       if (is_in_lanelet) {\n         break;\n       }\n+      if (i == 0) {\n+        break;\n+      }\n     }\n   }\n   return std::nullopt;"
        }
    ],
    "autowarefoundation/autoware.universe/5284": [
        {
            "sha": "69c39b41efb065d2a0092b96b952494764a81ff7",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 4,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/ad8ab47dd6f88a2a32f8831b126e3e089cb4cc53/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/ad8ab47dd6f88a2a32f8831b126e3e089cb4cc53/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=ad8ab47dd6f88a2a32f8831b126e3e089cb4cc53",
            "patch": "@@ -1560,12 +1560,14 @@ PathSafetyStatus NormalLaneChange::isLaneChangePathSafe(\n     auto current_debug_data = marker_utils::createObjectDebug(obj);\n     const auto obj_predicted_paths = utils::path_safety_checker::getPredictedPathFromObj(\n       obj, lane_change_parameters_->use_all_predicted_path);\n+    auto is_safe = true;\n     for (const auto & obj_path : obj_predicted_paths) {\n       const auto collided_polygons = utils::path_safety_checker::getCollidedPolygons(\n         path, ego_predicted_path, obj, obj_path, common_parameters, rss_params, 1.0,\n         current_debug_data.second);\n \n       if (collided_polygons.empty()) {\n+        marker_utils::updateCollisionCheckDebugMap(debug_data, current_debug_data, is_safe);\n         continue;\n       }\n \n@@ -1575,20 +1577,20 @@ PathSafetyStatus NormalLaneChange::isLaneChangePathSafe(\n         utils::lane_change::isCollidedPolygonsInLanelet(collided_polygons, expanded_target_lanes);\n \n       if (!collision_in_current_lanes && !collision_in_target_lanes) {\n+        marker_utils::updateCollisionCheckDebugMap(debug_data, current_debug_data, is_safe);\n         continue;\n       }\n \n+      is_safe = false;\n       path_safety_status.is_safe = false;\n-      marker_utils::updateCollisionCheckDebugMap(\n-        debug_data, current_debug_data, path_safety_status.is_safe);\n+      marker_utils::updateCollisionCheckDebugMap(debug_data, current_debug_data, is_safe);\n       const auto & obj_pose = obj.initial_pose.pose;\n       const auto obj_polygon = tier4_autoware_utils::toPolygon2d(obj_pose, obj.shape);\n       path_safety_status.is_object_coming_from_rear |=\n         !utils::path_safety_checker::isTargetObjectFront(\n           path, current_pose, common_parameters.vehicle_info, obj_polygon);\n     }\n-    marker_utils::updateCollisionCheckDebugMap(\n-      debug_data, current_debug_data, path_safety_status.is_safe);\n+    marker_utils::updateCollisionCheckDebugMap(debug_data, current_debug_data, is_safe);\n   }\n \n   return path_safety_status;"
        }
    ],
    "autowarefoundation/autoware.universe/5287": [
        {
            "sha": "520917c04c96599e6e22649885de74d860f7c742",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 0,
            "changes": 1,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f895c4013c7e64ccf343185b1083b430a6dff188/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f895c4013c7e64ccf343185b1083b430a6dff188/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=f895c4013c7e64ccf343185b1083b430a6dff188",
            "patch": "@@ -89,6 +89,7 @@ std::pair<bool, bool> NormalLaneChange::getSafePath(LaneChangePath & safe_path)\n \n   if (valid_paths.empty()) {\n     safe_path.info.current_lanes = current_lanes;\n+    safe_path.info.target_lanes = target_lanes;\n     return {false, false};\n   }\n "
        }
    ],
    "autowarefoundation/autoware.universe/5288": [
        {
            "sha": "21fa1495fba753ac5e6497f97b41f0632949cb60",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f0be85ff585477374a022c3fea12d54f07357fa7/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f0be85ff585477374a022c3fea12d54f07357fa7/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=f0be85ff585477374a022c3fea12d54f07357fa7",
            "patch": "@@ -1222,12 +1222,12 @@ bool NormalLaneChange::getLaneChangePaths(\n             logger_, \"Stop time is over threshold. Allow lane change in intersection.\");\n         }\n \n+        candidate_paths->push_back(*candidate_path);\n         if (utils::lane_change::passParkedObject(\n               route_handler, *candidate_path, target_objects.target_lane, lane_change_buffer,\n               is_goal_in_route, *lane_change_parameters_)) {\n           return false;\n         }\n-        candidate_paths->push_back(*candidate_path);\n \n         if (!check_safety) {\n           return false;"
        }
    ],
    "autowarefoundation/autoware.universe/5290": [
        {
            "sha": "c6e68f8e81af7898dcf3415843a5ec6a943d0da6",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 0,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d2cd9132e510a18bc628586a89efcf184468bef5/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d2cd9132e510a18bc628586a89efcf184468bef5/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=d2cd9132e510a18bc628586a89efcf184468bef5",
            "patch": "@@ -218,6 +218,10 @@ void GoalPlannerModule::onFreespaceParkingTimer()\n     return;\n   }\n \n+  if (isOnModifiedGoal()) {\n+    return;\n+  }\n+\n   const bool is_new_costmap =\n     (clock_->now() - planner_data_->costmap->header.stamp).seconds() < 1.0;\n   constexpr double path_update_duration = 1.0;\n@@ -1210,6 +1214,10 @@ bool GoalPlannerModule::isStopped()\n \n bool GoalPlannerModule::isStuck()\n {\n+  if (isOnModifiedGoal()) {\n+    return false;\n+  }\n+\n   constexpr double stuck_time = 5.0;\n   if (!isStopped(odometry_buffer_stuck_, stuck_time)) {\n     return false;"
        }
    ],
    "autowarefoundation/autoware.universe/5292": [
        {
            "sha": "b57204c84cc3b840f7cc03e1cfff08d56b96adfe",
            "filename": "perception/euclidean_cluster/README.md",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/2d6c26ce0a73bb2ca951da37b681bdb0f5e58901/perception%2Feuclidean_cluster%2FREADME.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/2d6c26ce0a73bb2ca951da37b681bdb0f5e58901/perception%2Feuclidean_cluster%2FREADME.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Feuclidean_cluster%2FREADME.md?ref=2d6c26ce0a73bb2ca951da37b681bdb0f5e58901",
            "patch": "@@ -10,7 +10,7 @@ This package has two clustering methods: `euclidean_cluster` and `voxel_grid_bas\n \n ### euclidean_cluster\n \n-`pcl::EuclideanClusterExtraction` is applied to points. See [official document](https://pcl.readthedocs.io/en/latest/cluster_extraction.html) for details.\n+`pcl::EuclideanClusterExtraction` is applied to points. See [official document](https://pcl.readthedocs.io/projects/tutorials/en/master/cluster_extraction.html) for details.\n \n ### voxel_grid_based_euclidean_cluster\n "
        }
    ],
    "autowarefoundation/autoware.universe/5296": [
        {
            "sha": "8fbe618b4766533daa32fea7135bb330fce6c840",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 68,
            "deletions": 54,
            "changes": 122,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/b28cfd8ea8658d2472c9a270ab59d95229bd4972/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/b28cfd8ea8658d2472c9a270ab59d95229bd4972/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=b28cfd8ea8658d2472c9a270ab59d95229bd4972",
            "patch": "@@ -194,79 +194,93 @@ void NormalLaneChange::insertStopPoint(\n   const double lane_change_buffer =\n     utils::calcMinimumLaneChangeLength(getCommonParam(), shift_intervals, 0.0);\n \n+  const auto getDistanceAlongLanelet = [&](const geometry_msgs::msg::Pose & target) {\n+    return utils::getSignedDistance(path.points.front().point.pose, target, lanelets);\n+  };\n+\n   // If lanelets.back() is in goal route section, get distance to goal.\n   // Otherwise, get distance to end of lane.\n   double distance_to_terminal = 0.0;\n   if (route_handler->isInGoalRouteSection(lanelets.back())) {\n     const auto goal = route_handler->getGoalPose();\n-    distance_to_terminal = utils::getSignedDistance(path.points.front().point.pose, goal, lanelets);\n+    distance_to_terminal = getDistanceAlongLanelet(goal);\n   } else {\n     distance_to_terminal = utils::getDistanceToEndOfLane(path.points.front().point.pose, lanelets);\n   }\n \n   const double stop_point_buffer = getCommonParam().backward_length_buffer_for_end_of_lane;\n   const auto target_objects = getTargetObjects(status_.current_lanes, status_.target_lanes);\n-  const bool is_in_terminal_section = lanelet::utils::isInLanelet(getEgoPose(), lanelets.back()) ||\n-                                      distance_to_terminal < lane_change_buffer;\n-  const bool has_blocking_target_lane_obj = std::any_of(\n-    target_objects.target_lane.begin(), target_objects.target_lane.end(), [&](const auto & o) {\n-      if (o.initial_twist.twist.linear.x > lane_change_parameters_->stop_velocity_threshold) {\n-        return false;\n+  double stopping_distance = distance_to_terminal - lane_change_buffer - stop_point_buffer;\n+\n+  // calculate minimum distance from path front to the stationary object on the ego lane.\n+  const auto distance_to_ego_lane_obj = [&]() -> double {\n+    double distance_to_obj = distance_to_terminal;\n+    const double distance_to_ego = getDistanceAlongLanelet(getEgoPose());\n+\n+    for (const auto & object : target_objects.current_lane) {\n+      // check if stationary\n+      const auto obj_v = std::abs(object.initial_twist.twist.linear.x);\n+      if (obj_v > lane_change_parameters_->stop_velocity_threshold) {\n+        continue;\n       }\n-      const double distance_to_target_lane_obj = utils::getSignedDistance(\n-        path.points.front().point.pose, o.initial_pose.pose, status_.target_lanes);\n-      return distance_to_target_lane_obj < distance_to_terminal;\n-    });\n \n-  // auto stopping_distance = raw_stopping_distance;\n-  double stopping_distance = distance_to_terminal - lane_change_buffer - stop_point_buffer;\n-  if (is_in_terminal_section || !has_blocking_target_lane_obj) {\n-    // calculate minimum distance from path front to the stationary object on the ego lane.\n-    const auto distance_to_ego_lane_obj = [&]() -> double {\n-      double distance_to_obj = distance_to_terminal;\n-      const double distance_to_ego =\n-        utils::getSignedDistance(path.points.front().point.pose, getEgoPose(), lanelets);\n-\n-      for (const auto & object : target_objects.current_lane) {\n-        // check if stationary\n-        const auto obj_v = std::abs(object.initial_twist.twist.linear.x);\n-        if (obj_v > lane_change_parameters_->stop_velocity_threshold) {\n+      // calculate distance from path front to the stationary object polygon on the ego lane.\n+      const auto polygon =\n+        tier4_autoware_utils::toPolygon2d(object.initial_pose.pose, object.shape).outer();\n+      for (const auto & polygon_p : polygon) {\n+        const auto p_fp = tier4_autoware_utils::toMsg(polygon_p.to_3d());\n+        const auto lateral_fp = motion_utils::calcLateralOffset(path.points, p_fp);\n+\n+        // ignore if the point is around the ego path\n+        if (std::abs(lateral_fp) > planner_data_->parameters.vehicle_width) {\n           continue;\n         }\n \n-        // calculate distance from path front to the stationary object polygon on the ego lane.\n-        const auto polygon =\n-          tier4_autoware_utils::toPolygon2d(object.initial_pose.pose, object.shape).outer();\n-        for (const auto & polygon_p : polygon) {\n-          const auto p_fp = tier4_autoware_utils::toMsg(polygon_p.to_3d());\n-          const auto lateral_fp = motion_utils::calcLateralOffset(path.points, p_fp);\n+        const double current_distance_to_obj = calcSignedArcLength(path.points, 0, p_fp);\n \n-          // ignore if the point is around the ego path\n-          if (std::abs(lateral_fp) > planner_data_->parameters.vehicle_width) {\n-            continue;\n-          }\n-\n-          const double current_distance_to_obj = calcSignedArcLength(path.points, 0, p_fp);\n-\n-          // ignore backward object\n-          if (current_distance_to_obj < distance_to_ego) {\n-            continue;\n-          }\n-          distance_to_obj = std::min(distance_to_obj, current_distance_to_obj);\n+        // ignore backward object\n+        if (current_distance_to_obj < distance_to_ego) {\n+          continue;\n         }\n+        distance_to_obj = std::min(distance_to_obj, current_distance_to_obj);\n       }\n-      return distance_to_obj;\n-    }();\n-\n-    // If the lane change space is occupied by a stationary obstacle, move the stop line closer.\n-    // TODO(Horibe): We need to loop this process because the new space could be occupied as well.\n-    stopping_distance = std::min(\n-      distance_to_ego_lane_obj - lane_change_buffer - stop_point_buffer -\n-        getCommonParam().base_link2front -\n-        calcRssDistance(\n-          0.0, planner_data_->parameters.minimum_lane_changing_velocity,\n-          lane_change_parameters_->rss_params),\n-      stopping_distance);\n+    }\n+    return distance_to_obj;\n+  }();\n+\n+  // Need to stop before blocking obstacle\n+  if (distance_to_ego_lane_obj < distance_to_terminal) {\n+    // consider rss distance when the LC need to avoid obstacles\n+    const auto rss_dist = calcRssDistance(\n+      0.0, planner_data_->parameters.minimum_lane_changing_velocity,\n+      lane_change_parameters_->rss_params);\n+\n+    const auto stopping_distance_for_obj = distance_to_ego_lane_obj - lane_change_buffer -\n+                                           stop_point_buffer - rss_dist -\n+                                           getCommonParam().base_link2front;\n+\n+    //  If the target lane in the lane change section is blocked by a stationary obstacle, there\n+    //  is no reason for stopping with a lane change margin. Instead, stop right behind the\n+    //  obstacle.\n+    //  ----------------------------------------------------------\n+    //                            [obj]>\n+    //  ----------------------------------------------------------\n+    //    [ego]>          | <--- lane change margin --->  [obj]>\n+    //  ----------------------------------------------------------\n+    const bool has_blocking_target_lane_obj = std::any_of(\n+      target_objects.target_lane.begin(), target_objects.target_lane.end(), [&](const auto & o) {\n+        const auto v = std::abs(o.initial_twist.twist.linear.x);\n+        if (v > lane_change_parameters_->stop_velocity_threshold) {\n+          return false;\n+        }\n+        const double distance_to_target_lane_obj = getDistanceAlongLanelet(o.initial_pose.pose);\n+        return stopping_distance_for_obj < distance_to_target_lane_obj &&\n+               distance_to_target_lane_obj < distance_to_ego_lane_obj;\n+      });\n+\n+    if (!has_blocking_target_lane_obj) {\n+      stopping_distance = stopping_distance_for_obj;\n+    }\n   }\n \n   if (stopping_distance > 0.0) {"
        }
    ],
    "autowarefoundation/autoware.universe/5299": [
        {
            "sha": "6e5dd2cda8920c3aa2c485e0ba03cc21a4bb1ca0",
            "filename": "planning/behavior_path_planner/include/behavior_path_planner/utils/path_safety_checker/safety_check.hpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/daeff8296eaa81e0a7797c61cdfe2e3d78c07dcc/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Futils%2Fpath_safety_checker%2Fsafety_check.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/daeff8296eaa81e0a7797c61cdfe2e3d78c07dcc/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Futils%2Fpath_safety_checker%2Fsafety_check.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Finclude%2Fbehavior_path_planner%2Futils%2Fpath_safety_checker%2Fsafety_check.hpp?ref=daeff8296eaa81e0a7797c61cdfe2e3d78c07dcc",
            "patch": "@@ -80,7 +80,7 @@ double calcRssDistance(\n \n double calcMinimumLongitudinalLength(\n   const double front_object_velocity, const double rear_object_velocity,\n-  const BehaviorPathPlannerParameters & params);\n+  const RSSparams & rss_params);\n \n boost::optional<PoseWithVelocityStamped> calcInterpolatedPoseWithVelocity(\n   const std::vector<PoseWithVelocityStamped> & path, const double relative_time);"
        }
    ],
    "autowarefoundation/autoware.universe/5301": [
        {
            "sha": "6106e3a15f4c7952d088db042abefc1f2c4ae180",
            "filename": "common/tier4_autoware_utils/include/tier4_autoware_utils/geometry/geometry.hpp",
            "status": "modified",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8a19ef04c77dd5fe101abb6f6eb2d90b78d2b53c/common%2Ftier4_autoware_utils%2Finclude%2Ftier4_autoware_utils%2Fgeometry%2Fgeometry.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8a19ef04c77dd5fe101abb6f6eb2d90b78d2b53c/common%2Ftier4_autoware_utils%2Finclude%2Ftier4_autoware_utils%2Fgeometry%2Fgeometry.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/common%2Ftier4_autoware_utils%2Finclude%2Ftier4_autoware_utils%2Fgeometry%2Fgeometry.hpp?ref=8a19ef04c77dd5fe101abb6f6eb2d90b78d2b53c",
            "patch": "@@ -261,29 +261,29 @@ inline void setOrientation(const geometry_msgs::msg::Quaternion & orientation, T\n }\n \n template <class T>\n-void setLongitudinalVelocity([[maybe_unused]] const double velocity, [[maybe_unused]] T & p)\n+void setLongitudinalVelocity([[maybe_unused]] const float velocity, [[maybe_unused]] T & p)\n {\n   static_assert(sizeof(T) == 0, \"Only specializations of getLongitudinalVelocity can be used.\");\n   throw std::logic_error(\"Only specializations of getLongitudinalVelocity can be used.\");\n }\n \n template <>\n inline void setLongitudinalVelocity(\n-  const double velocity, autoware_auto_planning_msgs::msg::TrajectoryPoint & p)\n+  const float velocity, autoware_auto_planning_msgs::msg::TrajectoryPoint & p)\n {\n   p.longitudinal_velocity_mps = velocity;\n }\n \n template <>\n inline void setLongitudinalVelocity(\n-  const double velocity, autoware_auto_planning_msgs::msg::PathPoint & p)\n+  const float velocity, autoware_auto_planning_msgs::msg::PathPoint & p)\n {\n   p.longitudinal_velocity_mps = velocity;\n }\n \n template <>\n inline void setLongitudinalVelocity(\n-  const double velocity, autoware_auto_planning_msgs::msg::PathPointWithLaneId & p)\n+  const float velocity, autoware_auto_planning_msgs::msg::PathPointWithLaneId & p)\n {\n   p.point.longitudinal_velocity_mps = velocity;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/5306": [
        {
            "sha": "16226730a8866ff063dfc2acc2d1d48ac021b5ff",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 16,
            "deletions": 2,
            "changes": 18,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/91fac34671d78a98c056a5b12983ae215113a75f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/91fac34671d78a98c056a5b12983ae215113a75f/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=91fac34671d78a98c056a5b12983ae215113a75f",
            "patch": "@@ -646,7 +646,7 @@ std::vector<double> NormalLaneChange::sampleLongitudinalAccValues(\n   }\n \n   // If the ego is in stuck, sampling all possible accelerations to find avoiding path.\n-  if (isVehicleStuckByObstacle(current_lanes, max_lane_change_length)) {\n+  if (isVehicleStuckByObstacle(current_lanes)) {\n     auto clock = rclcpp::Clock(RCL_ROS_TIME);\n     RCLCPP_INFO_THROTTLE(\n       logger_, clock, 1000, \"Vehicle is stuck. sample all longitudinal acceleration.\");\n@@ -1655,7 +1655,21 @@ bool NormalLaneChange::isVehicleStuckByObstacle(const lanelet::ConstLanelets & c\n \n   const auto [min_acc, max_acc] = calcCurrentMinMaxAcceleration();\n   const auto max_lane_change_length = calcMaximumLaneChangeLength(current_lanes.back(), max_acc);\n-  return isVehicleStuckByObstacle(current_lanes, max_lane_change_length);\n+  const auto rss_dist = calcRssDistance(\n+    0.0, planner_data_->parameters.minimum_lane_changing_velocity,\n+    lane_change_parameters_->rss_params);\n+\n+  // It is difficult to define the detection range. If it is too short, the stuck will not be\n+  // determined, even though you are stuck by an obstacle. If it is too long,\n+  // the ego will be judged to be stuck by a distant vehicle, even though the ego is only\n+  // stopped at a traffic light. Essentially, the calculation should be based on the information of\n+  // the stop reason, but this is outside the scope of one module. I keep it as a TODO.\n+  constexpr double DETECTION_DISTANCE_MARGIN = 10.0;\n+  const auto detection_distance = max_lane_change_length + rss_dist +\n+                                  getCommonParam().base_link2front + DETECTION_DISTANCE_MARGIN;\n+  RCLCPP_INFO(logger_, \"max_lane_change_length: %f, max_acc: %f\", max_lane_change_length, max_acc);\n+\n+  return isVehicleStuckByObstacle(current_lanes, detection_distance);\n }\n \n void NormalLaneChange::setStopPose(const Pose & stop_pose)"
        }
    ],
    "autowarefoundation/autoware.universe/5315": [
        {
            "sha": "12b6d53a83220c15a77e7841182b6b5cb52b2bc8",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/c64402f1c06ae74434f834638f5af10333a64e1b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/c64402f1c06ae74434f834638f5af10333a64e1b/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=c64402f1c06ae74434f834638f5af10333a64e1b",
            "patch": "@@ -1725,7 +1725,7 @@ bool NormalLaneChange::isVehicleStuckByObstacle(const lanelet::ConstLanelets & c\n   constexpr double DETECTION_DISTANCE_MARGIN = 10.0;\n   const auto detection_distance = max_lane_change_length + rss_dist +\n                                   getCommonParam().base_link2front + DETECTION_DISTANCE_MARGIN;\n-  RCLCPP_INFO(logger_, \"max_lane_change_length: %f, max_acc: %f\", max_lane_change_length, max_acc);\n+  RCLCPP_DEBUG(logger_, \"max_lane_change_length: %f, max_acc: %f\", max_lane_change_length, max_acc);\n \n   return isVehicleStuckByObstacle(current_lanes, detection_distance);\n }"
        }
    ],
    "autowarefoundation/autoware.universe/5321": [
        {
            "sha": "3a2903cb01e9e25506b155478e230cd5a4ac0824",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 0,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/160073307dfffe888fb4a1d1a9757d47519708de/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/160073307dfffe888fb4a1d1a9757d47519708de/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=160073307dfffe888fb4a1d1a9757d47519708de",
            "patch": "@@ -282,6 +282,16 @@ void NormalLaneChange::insertStopPoint(\n         if (v > lane_change_parameters_->stop_velocity_threshold) {\n           return false;\n         }\n+\n+        // target_objects includes objects out of target lanes, so filter them out\n+        if (!boost::geometry::intersects(\n+              tier4_autoware_utils::toPolygon2d(o.initial_pose.pose, o.shape).outer(),\n+              lanelet::utils::combineLaneletsShape(status_.target_lanes)\n+                .polygon2d()\n+                .basicPolygon())) {\n+          return false;\n+        }\n+\n         const double distance_to_target_lane_obj = getDistanceAlongLanelet(o.initial_pose.pose);\n         return stopping_distance_for_obj < distance_to_target_lane_obj &&\n                distance_to_target_lane_obj < distance_to_ego_lane_obj;"
        }
    ],
    "autowarefoundation/autoware.universe/5325": [
        {
            "sha": "44dddb57e726e545c7cf008b044628d0314d9846",
            "filename": "planning/behavior_path_planner/src/utils/drivable_area_expansion/drivable_area_expansion.cpp",
            "status": "modified",
            "additions": 12,
            "deletions": 23,
            "changes": 35,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f436a0308e4eaaf2a3a0d24334ea67ca58b8d933/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f436a0308e4eaaf2a3a0d24334ea67ca58b8d933/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp?ref=f436a0308e4eaaf2a3a0d24334ea67ca58b8d933",
            "patch": "@@ -126,30 +126,19 @@ std::vector<double> calculate_minimum_expansions(\n         minimum_expansions[bound_idx] = std::max(minimum_expansions[bound_idx], dist);\n         minimum_expansions[bound_idx + 1] = std::max(minimum_expansions[bound_idx + 1], dist);\n         // apply the expansion to all bound points within the extra arc length\n-        if (bound_idx + 2 < bound.size()) {\n-          auto up_arc_length =\n-            tier4_autoware_utils::calcDistance2d(*intersection_point, bound[bound_idx + 1]) +\n-            tier4_autoware_utils::calcDistance2d(bound[bound_idx + 1], bound[bound_idx + 2]);\n-          for (auto up_bound_idx = bound_idx + 2;\n-               bound_idx < bound.size() && up_arc_length <= params.extra_arc_length;\n-               ++up_bound_idx) {\n-            minimum_expansions[up_bound_idx] = std::max(minimum_expansions[up_bound_idx], dist);\n-            if (up_bound_idx + 1 < bound.size())\n-              up_arc_length +=\n-                tier4_autoware_utils::calcDistance2d(bound[up_bound_idx], bound[up_bound_idx + 1]);\n-          }\n+        auto arc_length =\n+          tier4_autoware_utils::calcDistance2d(*intersection_point, bound[bound_idx + 1]);\n+        for (auto up_bound_idx = bound_idx + 2; up_bound_idx < bound.size(); ++up_bound_idx) {\n+          tier4_autoware_utils::calcDistance2d(bound[bound_idx - 1], bound[bound_idx]);\n+          if (arc_length > params.extra_arc_length) break;\n+          minimum_expansions[up_bound_idx] = std::max(minimum_expansions[up_bound_idx], dist);\n         }\n-        if (bound_idx > 0) {\n-          auto down_arc_length =\n-            tier4_autoware_utils::calcDistance2d(*intersection_point, bound[bound_idx]) +\n-            tier4_autoware_utils::calcDistance2d(bound[bound_idx - 1], bound[bound_idx]);\n-          for (auto down_bound_idx = bound_idx - 1;\n-               down_bound_idx > 0 && down_arc_length <= params.extra_arc_length; --down_bound_idx) {\n-            minimum_expansions[down_bound_idx] = std::max(minimum_expansions[down_bound_idx], dist);\n-            if (down_bound_idx > 1)\n-              down_arc_length += tier4_autoware_utils::calcDistance2d(\n-                bound[down_bound_idx], bound[down_bound_idx - 1]);\n-          }\n+        arc_length = tier4_autoware_utils::calcDistance2d(*intersection_point, bound[bound_idx]);\n+        for (auto down_offset_idx = 1LU; down_offset_idx < bound_idx; ++down_offset_idx) {\n+          const auto idx = bound_idx - down_offset_idx;\n+          arc_length += tier4_autoware_utils::calcDistance2d(bound[idx - 1], bound[idx]);\n+          if (arc_length > params.extra_arc_length) break;\n+          minimum_expansions[idx] = std::max(minimum_expansions[idx], dist);\n         }\n         break;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/5326": [
        {
            "sha": "4da6720b0af47cd66a263b7799f44e2f48c8d1c7",
            "filename": "launch/tier4_simulator_launch/launch/simulator.launch.xml",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/db2c80c75380bcf21a80a257bf0ae969e5313913/launch%2Ftier4_simulator_launch%2Flaunch%2Fsimulator.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/db2c80c75380bcf21a80a257bf0ae969e5313913/launch%2Ftier4_simulator_launch%2Flaunch%2Fsimulator.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_simulator_launch%2Flaunch%2Fsimulator.launch.xml?ref=db2c80c75380bcf21a80a257bf0ae969e5313913",
            "patch": "@@ -65,7 +65,16 @@\n       <!-- tracking module -->\n       <group>\n         <push-ros-namespace namespace=\"tracking\"/>\n-        <include file=\"$(find-pkg-share tier4_perception_launch)/launch/object_recognition/tracking/tracking.launch.xml\"/>\n+        <include file=\"$(find-pkg-share tier4_perception_launch)/launch/object_recognition/tracking/tracking.launch.xml\">\n+          <arg\n+            name=\"object_recognition_tracking_radar_object_tracker_data_association_matrix_param_path\"\n+            value=\"$(var object_recognition_tracking_radar_object_tracker_data_association_matrix_param_path)\"\n+          />\n+          <arg name=\"object_recognition_tracking_radar_object_tracker_tracking_setting_param_path\" value=\"$(var object_recognition_tracking_radar_object_tracker_tracking_setting_param_path)\"/>\n+          <arg name=\"object_recognition_tracking_radar_object_tracker_node_param_path\" value=\"$(var object_recognition_tracking_radar_object_tracker_node_param_path)\"/>\n+          <arg name=\"object_recognition_tracking_object_merger_data_association_matrix_param_path\" value=\"$(var object_recognition_tracking_object_merger_data_association_matrix_param_path)\"/>\n+          <arg name=\"object_recognition_tracking_object_merger_node_param_path\" value=\"$(var object_recognition_tracking_object_merger_node_param_path)\"/>\n+        </include>\n       </group>\n       <!-- prediction module -->\n       <group>"
        }
    ],
    "autowarefoundation/autoware.universe/5329": [
        {
            "sha": "0ccc9bc4a3daefaedcc7947aa3d547ec2b3cf80a",
            "filename": "control/autonomous_emergency_braking/src/node.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/030c18f9ddc13bace74a2e0bc01d953b66885ec9/control%2Fautonomous_emergency_braking%2Fsrc%2Fnode.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/030c18f9ddc13bace74a2e0bc01d953b66885ec9/control%2Fautonomous_emergency_braking%2Fsrc%2Fnode.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fautonomous_emergency_braking%2Fsrc%2Fnode.cpp?ref=030c18f9ddc13bace74a2e0bc01d953b66885ec9",
            "patch": "@@ -432,6 +432,10 @@ void AEB::generateEgoPath(\n   const Trajectory & predicted_traj, Path & path,\n   std::vector<tier4_autoware_utils::Polygon2d> & polygons)\n {\n+  if (predicted_traj.points.empty()) {\n+    return;\n+  }\n+\n   geometry_msgs::msg::TransformStamped transform_stamped{};\n   try {\n     transform_stamped = tf_buffer_.lookupTransform("
        }
    ],
    "autowarefoundation/autoware.universe/5332": [
        {
            "sha": "a0e4cd4aa0a668e3dac2efbbd57335f241f7d1ee",
            "filename": "planning/behavior_velocity_intersection_module/src/util.cpp",
            "status": "modified",
            "additions": 10,
            "deletions": 1,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8e05ebf78980ebf1860ba101cc381a2d6915ec02/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8e05ebf78980ebf1860ba101cc381a2d6915ec02/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp?ref=8e05ebf78980ebf1860ba101cc381a2d6915ec02",
            "patch": "@@ -605,6 +605,8 @@ mergeLaneletsByTopologicalSort(\n     id2lanelet[id] = lanelet;\n     ind++;\n   }\n+  // NOTE: this function aims to traverse the detection lanelet backward from ego side to farthest\n+  // side, so if lane B follows lane A on the routing_graph, adj[B][A] = true\n   for (const auto & lanelet : lanelets) {\n     const auto & followings = routing_graph_ptr->following(lanelet);\n     const int dst = lanelet.id();\n@@ -628,18 +630,25 @@ mergeLaneletsByTopologicalSort(\n     if (!has_no_previous(src)) {\n       continue;\n     }\n+    // So `src` has no previous lanelets\n     branches[(ind2id[src])] = std::vector<lanelet::Id>{};\n     auto & branch = branches[(ind2id[src])];\n     lanelet::Id node_iter = ind2id[src];\n+    std::set<lanelet::Id> visited_ids;\n     while (true) {\n       const auto & destinations = adjacency[(id2ind[node_iter])];\n-      // NOTE: assuming detection lanelets have only one previous lanelet\n+      // NOTE: assuming detection lanelets have only one \"previous\"(on the routing_graph) lanelet\n       const auto next = std::find(destinations.begin(), destinations.end(), true);\n       if (next == destinations.end()) {\n         branch.push_back(node_iter);\n         break;\n       }\n+      if (visited_ids.find(node_iter) != visited_ids.end()) {\n+        // loop detected\n+        break;\n+      }\n       branch.push_back(node_iter);\n+      visited_ids.insert(node_iter);\n       node_iter = ind2id[std::distance(destinations.begin(), next)];\n     }\n   }"
        }
    ],
    "autowarefoundation/autoware.universe/5333": [
        {
            "sha": "25cf917d2713505c57b2a0be1108cb0016a82c92",
            "filename": "planning/behavior_path_planner/src/utils/drivable_area_expansion/drivable_area_expansion.cpp",
            "status": "modified",
            "additions": 19,
            "deletions": 10,
            "changes": 29,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d0affcaa7970b206e8da1541a65129a17d020e54/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d0affcaa7970b206e8da1541a65129a17d020e54/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fdrivable_area_expansion%2Fdrivable_area_expansion.cpp?ref=d0affcaa7970b206e8da1541a65129a17d020e54",
            "patch": "@@ -74,14 +74,21 @@ void reuse_previous_poses(\n   if (cropped_poses.empty()) {\n     const auto resampled_path_points =\n       motion_utils::resamplePath(path, params.resample_interval, true, true, false).points;\n-    for (const auto & p : resampled_path_points) cropped_poses.push_back(p.point.pose);\n-  } else if (!path.points.empty()) {\n+    const auto cropped_path =\n+      params.max_path_arc_length <= 0.0\n+        ? resampled_path_points\n+        : motion_utils::cropForwardPoints(\n+            resampled_path_points, resampled_path_points.front().point.pose.position, 0,\n+            params.max_path_arc_length);\n+    for (const auto & p : cropped_path) cropped_poses.push_back(p.point.pose);\n+  } else {\n     const auto initial_arc_length = motion_utils::calcArcLength(cropped_poses);\n     const auto max_path_arc_length = motion_utils::calcArcLength(path.points);\n     const auto first_arc_length = motion_utils::calcSignedArcLength(\n       path.points, path.points.front().point.pose.position, cropped_poses.back().position);\n     for (auto arc_length = first_arc_length + params.resample_interval;\n-         initial_arc_length + (arc_length - first_arc_length) <= params.max_path_arc_length &&\n+         (params.max_path_arc_length <= 0.0 ||\n+          initial_arc_length + (arc_length - first_arc_length) <= params.max_path_arc_length) &&\n          arc_length <= max_path_arc_length;\n          arc_length += params.resample_interval)\n       cropped_poses.push_back(motion_utils::calcInterpolatedPose(path.points, arc_length));\n@@ -129,7 +136,8 @@ std::vector<double> calculate_minimum_expansions(\n         auto arc_length =\n           tier4_autoware_utils::calcDistance2d(*intersection_point, bound[bound_idx + 1]);\n         for (auto up_bound_idx = bound_idx + 2; up_bound_idx < bound.size(); ++up_bound_idx) {\n-          tier4_autoware_utils::calcDistance2d(bound[bound_idx - 1], bound[bound_idx]);\n+          arc_length +=\n+            tier4_autoware_utils::calcDistance2d(bound[up_bound_idx - 1], bound[up_bound_idx]);\n           if (arc_length > params.extra_arc_length) break;\n           minimum_expansions[up_bound_idx] = std::max(minimum_expansions[up_bound_idx], dist);\n         }\n@@ -200,11 +208,11 @@ void expand_bound(\n   LineString2d path_ls;\n   for (const auto & p : path_poses) path_ls.push_back(convert_point(p.position));\n   for (auto idx = 0LU; idx < bound.size(); ++idx) {\n-    const auto bound_p = convert_point(bound[idx]);\n-    const auto projection = point_to_linestring_projection(bound_p, path_ls);\n-    const auto expansion_ratio =\n-      (expansions[idx] + std::abs(projection.distance)) / std::abs(projection.distance);\n-    if (expansion_ratio > 1.0) {\n+    if (expansions[idx] > 0.0) {\n+      const auto bound_p = convert_point(bound[idx]);\n+      const auto projection = point_to_linestring_projection(bound_p, path_ls);\n+      const auto expansion_ratio =\n+        (expansions[idx] + std::abs(projection.distance)) / std::abs(projection.distance);\n       const auto & path_p = projection.projected_point;\n       const auto expanded_p = lerp_point(path_p, bound_p, expansion_ratio);\n       bound[idx].x = expanded_p.x();\n@@ -267,6 +275,7 @@ void expand_drivable_area(\n   stop_watch.tic(\"crop\");\n   std::vector<Pose> path_poses = planner_data->drivable_area_expansion_prev_path_poses;\n   std::vector<double> curvatures = planner_data->drivable_area_expansion_prev_curvatures;\n+\n   reuse_previous_poses(\n     path, path_poses, curvatures, planner_data->self_odometry->pose.pose.position, params);\n   const auto crop_ms = stop_watch.toc(\"crop\");\n@@ -299,6 +308,7 @@ void expand_drivable_area(\n   apply_bound_change_rate_limit(left_expansions, path.left_bound, params.max_bound_rate);\n   apply_bound_change_rate_limit(right_expansions, path.right_bound, params.max_bound_rate);\n   const auto smooth_ms = stop_watch.toc(\"smooth\");\n+\n   // TODO(Maxime): limit the distances based on the total width (left + right < min_lane_width)\n   stop_watch.tic(\"expand\");\n   expand_bound(path.left_bound, path_poses, left_expansions);\n@@ -312,7 +322,6 @@ void expand_drivable_area(\n       \"%2.2f\\n\\tMaximum expansion: %2.2f\\n\\tSmoothing: %2.2f\\n\\tExpansion: %2.2f\\n\\n\",\n       total_ms, preprocessing_ms, crop_ms, curvature_expansion_ms, max_dist_ms, smooth_ms,\n       expand_ms);\n-\n   planner_data->drivable_area_expansion_prev_path_poses = path_poses;\n   planner_data->drivable_area_expansion_prev_curvatures = curvatures;\n }"
        }
    ],
    "autowarefoundation/autoware.universe/5334": [
        {
            "sha": "bd31f758f6d0db4787a285226c85eb9422619435",
            "filename": "planning/behavior_velocity_intersection_module/src/util.cpp",
            "status": "modified",
            "additions": 14,
            "deletions": 1,
            "changes": 15,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/38f2167f716d226b2feb1894290936a7fe483e48/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/38f2167f716d226b2feb1894290936a7fe483e48/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp?ref=38f2167f716d226b2feb1894290936a7fe483e48",
            "patch": "@@ -1327,6 +1327,19 @@ TimeDistanceArray calcIntersectionPassingTime(\n   dist_sum = 0.0;\n   double passing_time = time_delay;\n   time_distance_array.emplace_back(passing_time, dist_sum);\n+\n+  // NOTE: `reference_path` is resampled in `reference_smoothed_path`, so\n+  // `last_intersection_stop_line_candidate_idx` makes no sense\n+  const auto last_intersection_stop_line_candidate_point_orig =\n+    path.points.at(last_intersection_stop_line_candidate_idx).point.pose;\n+  const auto last_intersection_stop_line_candidate_nearest_ind_opt = motion_utils::findNearestIndex(\n+    smoothed_reference_path.points, last_intersection_stop_line_candidate_point_orig, 3.0, M_PI_4);\n+  if (!last_intersection_stop_line_candidate_nearest_ind_opt) {\n+    return time_distance_array;\n+  }\n+  const auto last_intersection_stop_line_candidate_nearest_ind =\n+    last_intersection_stop_line_candidate_nearest_ind_opt.value();\n+\n   for (size_t i = 1; i < smoothed_reference_path.points.size(); ++i) {\n     const auto & p1 = smoothed_reference_path.points.at(i - 1);\n     const auto & p2 = smoothed_reference_path.points.at(i);\n@@ -1338,7 +1351,7 @@ TimeDistanceArray calcIntersectionPassingTime(\n     const double average_velocity =\n       (p1.point.longitudinal_velocity_mps + p2.point.longitudinal_velocity_mps) / 2.0;\n     const double minimum_ego_velocity_division =\n-      (use_upstream_velocity && i > last_intersection_stop_line_candidate_idx)\n+      (use_upstream_velocity && i > last_intersection_stop_line_candidate_nearest_ind)\n         ? minimum_upstream_velocity /* to avoid null division */\n         : minimum_ego_velocity;\n     const double passing_velocity ="
        }
    ],
    "autowarefoundation/autoware.universe/5343": [
        {
            "sha": "f7453ad32ce585973075dff875651c60da0af282",
            "filename": "planning/planning_debug_tools/scripts/perception_replayer/perception_replayer_common.py",
            "status": "modified",
            "additions": 5,
            "deletions": 0,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4d2fb1f0c44cc998f54ffc121806f8e202b6c9f1/planning%2Fplanning_debug_tools%2Fscripts%2Fperception_replayer%2Fperception_replayer_common.py",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4d2fb1f0c44cc998f54ffc121806f8e202b6c9f1/planning%2Fplanning_debug_tools%2Fscripts%2Fperception_replayer%2Fperception_replayer_common.py",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fplanning_debug_tools%2Fscripts%2Fperception_replayer%2Fperception_replayer_common.py?ref=4d2fb1f0c44cc998f54ffc121806f8e202b6c9f1",
            "patch": "@@ -153,6 +153,11 @@ def kill_online_perception_node(self):\n                 pass\n \n     def binary_search(self, data, timestamp):\n+        if data[-1][0] < timestamp:\n+            return data[-1][1]\n+        elif data[0][0] > timestamp:\n+            return data[0][1]\n+\n         low, high = 0, len(data) - 1\n \n         while low <= high:"
        }
    ],
    "autowarefoundation/autoware.universe/5346": [
        {
            "sha": "08ebd01ba5d0504e2877e5224653fedeeddbaec4",
            "filename": "planning/behavior_path_planner/src/utils/path_safety_checker/safety_check.cpp",
            "status": "modified",
            "additions": 11,
            "deletions": 15,
            "changes": 26,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/8a5a9178b167c154162c3777c07e142487818a57/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_safety_checker%2Fsafety_check.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/8a5a9178b167c154162c3777c07e142487818a57/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_safety_checker%2Fsafety_check.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Fpath_safety_checker%2Fsafety_check.cpp?ref=8a5a9178b167c154162c3777c07e142487818a57",
            "patch": "@@ -157,7 +157,7 @@ Polygon2d createExtendedPolygon(\n   {\n     debug.forward_lon_offset = forward_lon_offset;\n     debug.backward_lon_offset = backward_lon_offset;\n-    debug.lat_offset = (left_lat_offset + right_lat_offset) / 2;\n+    debug.lat_offset = std::max(std::abs(left_lat_offset), std::abs(right_lat_offset));\n   }\n \n   const auto p1 =\n@@ -324,17 +324,15 @@ std::vector<Polygon2d> getCollidedPolygons(\n     const auto & ego_polygon = interpolated_data->poly;\n     const auto & ego_velocity = interpolated_data->velocity;\n \n-    {\n-      debug.expected_ego_pose = ego_pose;\n-      debug.expected_obj_pose = obj_pose;\n-      debug.extended_ego_polygon = ego_polygon;\n-      debug.extended_obj_polygon = obj_polygon;\n-    }\n-\n     // check overlap\n     if (boost::geometry::overlaps(ego_polygon, obj_polygon)) {\n       debug.unsafe_reason = \"overlap_polygon\";\n       collided_polygons.push_back(obj_polygon);\n+\n+      debug.expected_ego_pose = ego_pose;\n+      debug.expected_obj_pose = obj_pose;\n+      debug.extended_ego_polygon = ego_polygon;\n+      debug.extended_obj_polygon = obj_polygon;\n       continue;\n     }\n \n@@ -366,19 +364,17 @@ std::vector<Polygon2d> getCollidedPolygons(\n         : createExtendedPolygon(\n             obj_pose, target_object.shape, lon_offset, lat_margin, is_stopped_object, debug);\n \n-    {\n+    // check overlap with extended polygon\n+    if (boost::geometry::overlaps(extended_ego_polygon, extended_obj_polygon)) {\n+      debug.unsafe_reason = \"overlap_extended_polygon\";\n+      collided_polygons.push_back(obj_polygon);\n+\n       debug.rss_longitudinal = rss_dist;\n       debug.inter_vehicle_distance = min_lon_length;\n       debug.extended_ego_polygon = extended_ego_polygon;\n       debug.extended_obj_polygon = extended_obj_polygon;\n       debug.is_front = is_object_front;\n     }\n-\n-    // check overlap with extended polygon\n-    if (boost::geometry::overlaps(extended_ego_polygon, extended_obj_polygon)) {\n-      debug.unsafe_reason = \"overlap_extended_polygon\";\n-      collided_polygons.push_back(obj_polygon);\n-    }\n   }\n \n   return collided_polygons;"
        }
    ],
    "autowarefoundation/autoware.universe/5354": [
        {
            "sha": "8e583fd3a666be557e5e3953f52d80e00b602f9a",
            "filename": "localization/ndt_scan_matcher/src/ndt_scan_matcher_core.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 13,
            "changes": 14,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/d9e423ff6e3a6d43f7fe845b9d46e6a46b76ab21/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/d9e423ff6e3a6d43f7fe845b9d46e6a46b76ab21/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/localization%2Fndt_scan_matcher%2Fsrc%2Fndt_scan_matcher_core.cpp?ref=d9e423ff6e3a6d43f7fe845b9d46e6a46b76ab21",
            "patch": "@@ -448,20 +448,8 @@ void NDTScanMatcher::callback_sensor_points(\n   }\n \n   // perform several validations\n-  /*****************************************************************************\n-  The reason the add 2 to the ndt_ptr_->getMaximumIterations() is that there are bugs in\n-  implementation of ndt.\n-  1. gradient descent method ends when the iteration is greater than max_iteration if it does not\n-  converge (be careful it's 'greater than' instead of 'greater equal than'.)\n-     https://github.com/tier4/autoware.iv/blob/2323e5baa0b680d43a9219f5fb3b7a11dd9edc82/localization/pose_estimator/ndt_scan_matcher/ndt_omp/include/ndt_omp/ndt_omp_impl.hpp#L212\n-  2. iterate iteration count when end of gradient descent function.\n-     https://github.com/tier4/autoware.iv/blob/2323e5baa0b680d43a9219f5fb3b7a11dd9edc82/localization/pose_estimator/ndt_scan_matcher/ndt_omp/include/ndt_omp/ndt_omp_impl.hpp#L217\n-\n-  These bugs are now resolved in original pcl implementation.\n-  https://github.com/PointCloudLibrary/pcl/blob/424c1c6a0ca97d94ca63e5daff4b183a4db8aae4/registration/include/pcl/registration/impl/ndt.hpp#L73-L180\n-  *****************************************************************************/\n   bool is_ok_iteration_num =\n-    validate_num_iteration(ndt_result.iteration_num, ndt_ptr_->getMaximumIterations() + 2);\n+    validate_num_iteration(ndt_result.iteration_num, ndt_ptr_->getMaximumIterations());\n   bool is_local_optimal_solution_oscillation = false;\n   if (!is_ok_iteration_num) {\n     is_local_optimal_solution_oscillation = validate_local_optimal_solution_oscillation("
        }
    ],
    "autowarefoundation/autoware.universe/5355": [
        {
            "sha": "cf309a294d81ff95878c7bcf8d26082c3da12ff6",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 3,
            "changes": 5,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/bcf62b65247cd6992c644e977e7df29f9e3a3168/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/bcf62b65247cd6992c644e977e7df29f9e3a3168/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=bcf62b65247cd6992c644e977e7df29f9e3a3168",
            "patch": "@@ -855,12 +855,11 @@ bool RouteHandler::getNextLaneletWithinRoute(\n     return false;\n   }\n \n-  lanelet::ConstLanelet start_lanelet;\n-  const bool flag_check = getClosestLaneletWithinRoute(route_ptr_->start_pose, &start_lanelet);\n+  const auto start_lane_id = route_ptr_->segments.front().preferred_primitive.id;\n \n   const auto following_lanelets = routing_graph_ptr_->following(lanelet);\n   for (const auto & llt : following_lanelets) {\n-    if (!(flag_check && start_lanelet.id() == llt.id()) && exists(route_lanelets_, llt)) {\n+    if (start_lane_id != llt.id() && exists(route_lanelets_, llt)) {\n       *next_lanelet = llt;\n       return true;\n     }"
        }
    ],
    "autowarefoundation/autoware.universe/5358": [
        {
            "sha": "d74a8712a6e3fa6a7071d9a4d25a94325f70125f",
            "filename": "planning/route_handler/src/route_handler.cpp",
            "status": "modified",
            "additions": 17,
            "deletions": 2,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/768728666217fbdb3216fa337815c32831642f6a/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/768728666217fbdb3216fa337815c32831642f6a/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Froute_handler%2Fsrc%2Froute_handler.cpp?ref=768728666217fbdb3216fa337815c32831642f6a",
            "patch": "@@ -14,6 +14,7 @@\n \n #include \"route_handler/route_handler.hpp\"\n \n+#include <autoware_utils/math/normalization.hpp>\n #include <lanelet2_extension/utility/message_conversion.hpp>\n #include <lanelet2_extension/utility/query.hpp>\n #include <lanelet2_extension/utility/route_checker.hpp>\n@@ -2127,10 +2128,24 @@ bool RouteHandler::planPathLaneletsBetweenCheckpoints(\n   double shortest_path_length2d = std::numeric_limits<double>::max();\n \n   for (const auto & st_llt : start_lanelets) {\n+    // check if the angle difference between start_checkpoint and start lanelet center line\n+    // orientation is in yaw_threshold range\n+    double yaw_threshold = M_PI / 2.0;\n+    bool is_proper_angle = false;\n+    {\n+      double lanelet_angle = lanelet::utils::getLaneletAngle(st_llt, start_checkpoint.position);\n+      double pose_yaw = tf2::getYaw(start_checkpoint.orientation);\n+      double angle_diff = std::abs(autoware_utils::normalize_radian(lanelet_angle - pose_yaw));\n+\n+      if (angle_diff <= std::abs(yaw_threshold)) {\n+        is_proper_angle = true;\n+      }\n+    }\n+\n     optional_route = routing_graph_ptr_->getRoute(st_llt, goal_lanelet, 0);\n-    if (!optional_route) {\n+    if (!optional_route || !is_proper_angle) {\n       RCLCPP_ERROR_STREAM(\n-        logger_, \"Failed to find a proper path!\"\n+        logger_, \"Failed to find a proper route!\"\n                    << std::endl\n                    << \" - start checkpoint: \" << toString(start_checkpoint) << std::endl\n                    << \" - goal checkpoint: \" << toString(goal_checkpoint) << std::endl"
        }
    ],
    "autowarefoundation/autoware.universe/5369": [
        {
            "sha": "79e6055d26a815293cc2f5dd8b8fd9fea432a825",
            "filename": "planning/behavior_path_planner/src/planner_manager.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/3aa11402f230e93ab5a85933b9b4a7335a72742b/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/3aa11402f230e93ab5a85933b9b4a7335a72742b/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fplanner_manager.cpp?ref=3aa11402f230e93ab5a85933b9b4a7335a72742b",
            "patch": "@@ -83,7 +83,7 @@ BehaviorModuleOutput PlannerManager::run(const std::shared_ptr<PlannerData> & da\n       return output;\n     }\n \n-    for (size_t itr_num = 0;; ++itr_num) {\n+    for (size_t itr_num = 1;; ++itr_num) {\n       /**\n        * STEP1: get approved modules' output\n        */"
        }
    ],
    "autowarefoundation/autoware.universe/5372": [
        {
            "sha": "6b56c88eb942a0c157749f5a624f068d3b6f0dc0",
            "filename": "planning/behavior_path_planner/src/scene_module/start_planner/start_planner_module.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 0,
            "changes": 3,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a742922278243bf8e54428550b027062cbfc4152/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a742922278243bf8e54428550b027062cbfc4152/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fstart_planner%2Fstart_planner_module.cpp?ref=a742922278243bf8e54428550b027062cbfc4152",
            "patch": "@@ -624,6 +624,9 @@ lanelet::ConstLanelets StartPlannerModule::getPathRoadLanes(const PathWithLaneId\n   std::vector<lanelet::Id> lane_ids;\n   for (const auto & p : path.points) {\n     for (const auto & id : p.lane_ids) {\n+      if (id == lanelet::InvalId) {\n+        continue;\n+      }\n       if (route_handler->isShoulderLanelet(lanelet_layer.get(id))) {\n         continue;\n       }"
        }
    ],
    "autowarefoundation/autoware.universe/5384": [
        {
            "sha": "9b10dfc32457fb221c5af51f6b5a9395d961f09b",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 17,
            "deletions": 3,
            "changes": 20,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/49df393fefe4755ba1a8cf0594184f45498fb2e0/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/49df393fefe4755ba1a8cf0594184f45498fb2e0/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=49df393fefe4755ba1a8cf0594184f45498fb2e0",
            "patch": "@@ -2011,6 +2011,11 @@ void makeBoundLongitudinallyMonotonic(\n     std::vector<Point> ret = bound;\n     auto itr = std::next(ret.begin());\n     while (std::next(itr) != ret.end()) {\n+      if (itr == ret.begin()) {\n+        itr++;\n+        continue;\n+      }\n+\n       const auto p1 = *std::prev(itr);\n       const auto p2 = *itr;\n       const auto p3 = *std::next(itr);\n@@ -2024,11 +2029,20 @@ void makeBoundLongitudinallyMonotonic(\n       const auto dist_3to2 = tier4_autoware_utils::calcDistance3d(p3, p2);\n \n       constexpr double epsilon = 1e-3;\n+\n+      // Remove overlapped point.\n+      if (dist_1to2 < epsilon || dist_3to2 < epsilon) {\n+        itr = std::prev(ret.erase(itr));\n+        continue;\n+      }\n+\n+      // If the angle between the points is sharper than 45 degrees, remove the middle point.\n       if (std::cos(M_PI_4) < product / dist_1to2 / dist_3to2 + epsilon) {\n-        itr = ret.erase(itr);\n-      } else {\n-        itr++;\n+        itr = std::prev(ret.erase(itr));\n+        continue;\n       }\n+\n+      itr++;\n     }\n \n     return ret;"
        }
    ],
    "autowarefoundation/autoware.universe/5388": [
        {
            "sha": "da7406444b42b9d33d08d99321e26ce6536a59e6",
            "filename": "planning/behavior_path_planner/src/utils/avoidance/utils.cpp",
            "status": "modified",
            "additions": 21,
            "deletions": 6,
            "changes": 27,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/cdd282a664c11c8408c93412b0453cc7dc4c5bc9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/cdd282a664c11c8408c93412b0453cc7dc4c5bc9/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Favoidance%2Futils.cpp?ref=cdd282a664c11c8408c93412b0453cc7dc4c5bc9",
            "patch": "@@ -679,26 +679,41 @@ void fillObjectEnvelopePolygon(\n     return;\n   }\n \n-  const auto envelope_poly =\n+  const auto one_shot_envelope_poly =\n     createEnvelopePolygon(object_data, closest_pose, envelope_buffer_margin);\n \n-  if (boost::geometry::within(envelope_poly, same_id_obj->envelope_poly)) {\n+  // If the one_shot_envelope_poly is within the registered envelope, use the registered one\n+  if (boost::geometry::within(one_shot_envelope_poly, same_id_obj->envelope_poly)) {\n     object_data.envelope_poly = same_id_obj->envelope_poly;\n     return;\n   }\n \n   std::vector<Polygon2d> unions;\n-  boost::geometry::union_(envelope_poly, same_id_obj->envelope_poly, unions);\n+  boost::geometry::union_(one_shot_envelope_poly, same_id_obj->envelope_poly, unions);\n \n+  // If union fails, use the current envelope\n   if (unions.empty()) {\n-    object_data.envelope_poly =\n-      createEnvelopePolygon(object_data, closest_pose, envelope_buffer_margin);\n+    object_data.envelope_poly = one_shot_envelope_poly;\n     return;\n   }\n \n   boost::geometry::correct(unions.front());\n \n-  object_data.envelope_poly = createEnvelopePolygon(unions.front(), closest_pose, 0.0);\n+  const auto multi_step_envelope_poly = createEnvelopePolygon(unions.front(), closest_pose, 0.0);\n+\n+  const auto object_polygon = tier4_autoware_utils::toPolygon2d(object_data.object);\n+  const auto object_polygon_area = boost::geometry::area(object_polygon);\n+  const auto envelope_polygon_area = boost::geometry::area(multi_step_envelope_poly);\n+\n+  // keep multi-step envelope polygon.\n+  constexpr double THRESHOLD = 5.0;\n+  if (envelope_polygon_area < object_polygon_area * THRESHOLD) {\n+    object_data.envelope_poly = multi_step_envelope_poly;\n+    return;\n+  }\n+\n+  // use latest one-shot envelope polygon.\n+  object_data.envelope_poly = one_shot_envelope_poly;\n }\n \n void fillObjectMovingTime("
        }
    ],
    "autowarefoundation/autoware.universe/5392": [
        {
            "sha": "1de92d1b4e18f08bcdac0f56b17c6bf5e55f85f2",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 17,
            "deletions": 2,
            "changes": 19,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6c74b589a6233ac78eebf3e81ca412f7b9714c07/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6c74b589a6233ac78eebf3e81ca412f7b9714c07/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=6c74b589a6233ac78eebf3e81ca412f7b9714c07",
            "patch": "@@ -3067,9 +3067,24 @@ lanelet::ConstLanelets getCurrentLanesFromPath(\n \n   lanelet::ConstLanelet current_lane;\n   lanelet::utils::query::getClosestLanelet(reference_lanes, current_pose, &current_lane);\n-\n-  return route_handler->getLaneletSequence(\n+  auto current_lanes = route_handler->getLaneletSequence(\n     current_lane, current_pose, p.backward_path_length, p.forward_path_length);\n+\n+  // Extend the 'current_lanes' with previous lanes until it contains 'front_lane_ids'.\n+  const auto front_lane_ids = path.points.front().lane_ids;\n+  auto have_front_lanes = [front_lane_ids](const auto & lanes) {\n+    return std::any_of(lanes.begin(), lanes.end(), [&](const auto & lane) {\n+      return std::find(front_lane_ids.begin(), front_lane_ids.end(), lane.id()) !=\n+             front_lane_ids.end();\n+    });\n+  };\n+  while (!have_front_lanes(current_lanes)) {\n+    const auto extended_lanes = extendPrevLane(route_handler, current_lanes);\n+    if (extended_lanes.size() == current_lanes.size()) break;\n+    current_lanes = extended_lanes;\n+  }\n+\n+  return current_lanes;\n }\n \n lanelet::ConstLanelets extendNextLane("
        }
    ],
    "autowarefoundation/autoware.universe/5402": [
        {
            "sha": "84f5b2247f86948d7f4a8e708cb265da15dc1c6c",
            "filename": "planning/behavior_path_planner/src/scene_module/lane_change/normal.cpp",
            "status": "modified",
            "additions": 33,
            "deletions": 14,
            "changes": 47,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/1294b969eaea43b0734a9e5151a625aa6043e9de/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/1294b969eaea43b0734a9e5151a625aa6043e9de/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Flane_change%2Fnormal.cpp?ref=1294b969eaea43b0734a9e5151a625aa6043e9de",
            "patch": "@@ -221,6 +221,23 @@ void NormalLaneChange::insertStopPoint(\n   const auto target_objects = getTargetObjects(status_.current_lanes, status_.target_lanes);\n   double stopping_distance = distance_to_terminal - lane_change_buffer - stop_point_buffer;\n \n+  const auto is_valid_start_point = std::invoke([&]() -> bool {\n+    auto lc_start_point = lanelet::utils::conversion::toLaneletPoint(\n+      status_.lane_change_path.info.lane_changing_start.position);\n+    const auto target_neighbor_preferred_lane_poly_2d =\n+      utils::lane_change::getTargetNeighborLanesPolygon(\n+        *route_handler, status_.current_lanes, type_);\n+    return boost::geometry::covered_by(\n+      lanelet::traits::to2D(lc_start_point), target_neighbor_preferred_lane_poly_2d);\n+  });\n+\n+  if (!is_valid_start_point) {\n+    const auto stop_point = utils::insertStopPoint(stopping_distance, path);\n+    setStopPose(stop_point.point.pose);\n+\n+    return;\n+  }\n+\n   // calculate minimum distance from path front to the stationary object on the ego lane.\n   const auto distance_to_ego_lane_obj = [&]() -> double {\n     double distance_to_obj = distance_to_terminal;\n@@ -640,7 +657,8 @@ double NormalLaneChange::calcMaximumLaneChangeLength(\n   const auto shift_intervals =\n     getRouteHandler()->getLateralIntervalsToPreferredLane(current_terminal_lanelet);\n   return utils::lane_change::calcMaximumLaneChangeLength(\n-    getEgoVelocity(), getCommonParam(), shift_intervals, max_acc);\n+    std::max(getCommonParam().minimum_lane_changing_velocity, getEgoVelocity()), getCommonParam(),\n+    shift_intervals, max_acc);\n }\n \n std::vector<double> NormalLaneChange::sampleLongitudinalAccValues(\n@@ -1242,6 +1260,20 @@ bool NormalLaneChange::getLaneChangePaths(\n           boost::geometry::covered_by(lc_start_point, target_neighbor_preferred_lane_poly_2d) ||\n           boost::geometry::covered_by(lc_start_point, target_lane_poly_2d);\n \n+        LaneChangeInfo lane_change_info;\n+        lane_change_info.longitudinal_acceleration =\n+          LaneChangePhaseInfo{longitudinal_acc_on_prepare, longitudinal_acc_on_lane_changing};\n+        lane_change_info.duration = LaneChangePhaseInfo{prepare_duration, lane_changing_time};\n+        lane_change_info.velocity =\n+          LaneChangePhaseInfo{prepare_velocity, initial_lane_changing_velocity};\n+        lane_change_info.length = LaneChangePhaseInfo{prepare_length, lane_changing_length};\n+        lane_change_info.current_lanes = current_lanes;\n+        lane_change_info.target_lanes = target_lanes;\n+        lane_change_info.lane_changing_start = prepare_segment.points.back().point.pose;\n+        lane_change_info.lane_changing_end = target_segment.points.front().point.pose;\n+        lane_change_info.lateral_acceleration = lateral_acc;\n+        lane_change_info.terminal_lane_changing_velocity = terminal_lane_changing_velocity;\n+\n         if (!is_valid_start_point) {\n           debug_print(\n             \"Reject: lane changing points are not inside of the target preferred lanes or its \"\n@@ -1261,21 +1293,8 @@ bool NormalLaneChange::getLaneChangePaths(\n           continue;\n         }\n \n-        LaneChangeInfo lane_change_info;\n-        lane_change_info.longitudinal_acceleration =\n-          LaneChangePhaseInfo{longitudinal_acc_on_prepare, longitudinal_acc_on_lane_changing};\n-        lane_change_info.duration = LaneChangePhaseInfo{prepare_duration, lane_changing_time};\n-        lane_change_info.velocity =\n-          LaneChangePhaseInfo{prepare_velocity, initial_lane_changing_velocity};\n-        lane_change_info.length = LaneChangePhaseInfo{prepare_length, lane_changing_length};\n-        lane_change_info.current_lanes = current_lanes;\n-        lane_change_info.target_lanes = target_lanes;\n-        lane_change_info.lane_changing_start = prepare_segment.points.back().point.pose;\n-        lane_change_info.lane_changing_end = target_segment.points.front().point.pose;\n         lane_change_info.shift_line = utils::lane_change::getLaneChangingShiftLine(\n           prepare_segment, target_segment, target_lane_reference_path, shift_length);\n-        lane_change_info.lateral_acceleration = lateral_acc;\n-        lane_change_info.terminal_lane_changing_velocity = terminal_lane_changing_velocity;\n \n         const auto candidate_path = utils::lane_change::constructCandidatePath(\n           lane_change_info, prepare_segment, target_segment, target_lane_reference_path,"
        }
    ],
    "autowarefoundation/autoware.universe/5403": [
        {
            "sha": "31b63413a6437cbafc7c2a89c477af44d5cc1900",
            "filename": "planning/behavior_velocity_intersection_module/src/scene_intersection.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 10,
            "changes": 12,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/9882cc1f2e17b1939d7ff72300ecb1251b781245/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/9882cc1f2e17b1939d7ff72300ecb1251b781245/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Fscene_intersection.cpp?ref=9882cc1f2e17b1939d7ff72300ecb1251b781245",
            "patch": "@@ -1064,16 +1064,8 @@ IntersectionModule::DecisionResult IntersectionModule::modifyPathVelocityDetail(\n   const bool yield_stuck_detected = checkYieldStuckVehicle(\n     planner_data_, path_lanelets, intersection_lanelets.first_attention_area());\n   if (yield_stuck_detected && stuck_stop_line_idx_opt) {\n-    auto stuck_stop_line_idx = stuck_stop_line_idx_opt.value();\n-    if (is_private_area_ && planner_param_.stuck_vehicle.enable_private_area_stuck_disregard) {\n-      if (\n-        default_stop_line_idx_opt &&\n-        fromEgoDist(stuck_stop_line_idx) < -planner_param_.common.stop_overshoot_margin) {\n-        stuck_stop_line_idx = default_stop_line_idx_opt.value();\n-      }\n-    } else {\n-      return IntersectionModule::YieldStuckStop{closest_idx, stuck_stop_line_idx};\n-    }\n+    const auto stuck_stop_line_idx = stuck_stop_line_idx_opt.value();\n+    return IntersectionModule::YieldStuckStop{closest_idx, stuck_stop_line_idx};\n   }\n \n   // if attention area is empty, collision/occlusion detection is impossible"
        }
    ],
    "autowarefoundation/autoware.universe/5406": [
        {
            "sha": "6e6198e30b13cff258529d1c04546b56018fbea0",
            "filename": "planning/behavior_path_planner/src/utils/utils.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/6cae9865499471d2c4ee0942633e9797434f4d12/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/6cae9865499471d2c4ee0942633e9797434f4d12/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Futils%2Futils.cpp?ref=6cae9865499471d2c4ee0942633e9797434f4d12",
            "patch": "@@ -3104,6 +3104,8 @@ lanelet::ConstLanelets getCurrentLanesFromPath(\n lanelet::ConstLanelets extendNextLane(\n   const std::shared_ptr<RouteHandler> route_handler, const lanelet::ConstLanelets & lanes)\n {\n+  if (lanes.empty()) return lanes;\n+\n   auto extended_lanes = lanes;\n \n   // Add next lane\n@@ -3125,6 +3127,8 @@ lanelet::ConstLanelets extendNextLane(\n lanelet::ConstLanelets extendPrevLane(\n   const std::shared_ptr<RouteHandler> route_handler, const lanelet::ConstLanelets & lanes)\n {\n+  if (lanes.empty()) return lanes;\n+\n   auto extended_lanes = lanes;\n \n   // Add previous lane"
        }
    ],
    "autowarefoundation/autoware.universe/5411": [
        {
            "sha": "241a820175ffed00bdd0ad053b8d69383bebb890",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/99db3498ada3c495252e96e061371a9ac7dafdeb/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/99db3498ada3c495252e96e061371a9ac7dafdeb/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=99db3498ada3c495252e96e061371a9ac7dafdeb",
            "patch": "@@ -1386,7 +1386,7 @@ bool GoalPlannerModule::hasEnoughDistance(const PullOverPath & pull_over_path) c\n   // so need enough distance to restart.\n   // distance to restart should be less than decide_path_distance.\n   // otherwise, the goal would change immediately after departure.\n-  const bool is_separated_path = status_.get_pull_over_path()->partial_paths.size() > 1;\n+  const bool is_separated_path = pull_over_path.partial_paths.size() > 1;\n   const double distance_to_start = calcSignedArcLength(\n     pull_over_path.getFullPath().points, current_pose.position, pull_over_path.start_pose.position);\n   const double distance_to_restart = parameters_->decide_path_distance / 2;"
        }
    ],
    "autowarefoundation/autoware.universe/5433": [
        {
            "sha": "3c470cef2c9354bf779772b57785f4cea0233bf1",
            "filename": "planning/behavior_path_planner/src/scene_module/goal_planner/goal_planner_module.cpp",
            "status": "modified",
            "additions": 16,
            "deletions": 1,
            "changes": 17,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/90ae48d2f8697037a382a563bec9758f95c98aa1/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/90ae48d2f8697037a382a563bec9758f95c98aa1/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Fgoal_planner%2Fgoal_planner_module.cpp?ref=90ae48d2f8697037a382a563bec9758f95c98aa1",
            "patch": "@@ -146,6 +146,17 @@ void GoalPlannerModule::onTimer()\n   if (status_.get_goal_candidates().empty()) {\n     return;\n   }\n+\n+  if (!isExecutionRequested()) {\n+    return;\n+  }\n+\n+  if (\n+    !planner_data_ ||\n+    !goal_planner_utils::isAllowedGoalModification(planner_data_->route_handler)) {\n+    return;\n+  }\n+\n   const auto goal_candidates = status_.get_goal_candidates();\n \n   // generate valid pull over path candidates and calculate closest start pose\n@@ -229,6 +240,10 @@ void GoalPlannerModule::onFreespaceParkingTimer()\n \n void GoalPlannerModule::updateData()\n {\n+  if (getCurrentStatus() == ModuleStatus::IDLE) {\n+    return;\n+  }\n+\n   // Initialize Occupancy Grid Map\n   // This operation requires waiting for `planner_data_`, hence it is executed here instead of in\n   // the constructor. Ideally, this operation should only need to be performed once.\n@@ -990,7 +1005,7 @@ BehaviorModuleOutput GoalPlannerModule::planWaitingApprovalWithGoalModification(\n   }\n \n   BehaviorModuleOutput out;\n-  out.modified_goal = plan().modified_goal;  // update status_\n+  out.modified_goal = planWithGoalModification().modified_goal;  // update status_\n   out.path = std::make_shared<PathWithLaneId>(generateStopPath());\n   out.reference_path = getPreviousModuleOutput().reference_path;\n   path_candidate_ = std::make_shared<PathWithLaneId>(planCandidate().path_candidate);"
        }
    ],
    "autowarefoundation/autoware.universe/5444": [
        {
            "sha": "d1b8bdc806bf4a96972efe245d4479b3afa44cb9",
            "filename": "planning/behavior_path_planner/src/turn_signal_decider.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 19,
            "changes": 24,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0ca67d3bba702ea60b5aa52e6f6b7b730af24429/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0ca67d3bba702ea60b5aa52e6f6b7b730af24429/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fturn_signal_decider.cpp?ref=0ca67d3bba702ea60b5aa52e6f6b7b730af24429",
            "patch": "@@ -165,30 +165,16 @@ boost::optional<TurnSignalInfo> TurnSignalDecider::getIntersectionTurnSignalInfo\n       const std::string lane_attribute =\n         current_lane.attributeOr(\"turn_direction\", std::string(\"none\"));\n \n-      // check next lanes\n-      auto next_lanes = route_handler.getNextLanelets(current_lane);\n-      if (next_lanes.empty()) {\n+      // check next lane has the same attribute\n+      lanelet::ConstLanelet next_lane{};\n+      if (!route_handler.getNextLaneletWithinRoute(current_lane, &next_lane)) {\n         break;\n       }\n-\n-      // filter next lanes with same attribute in the path\n-      std::vector<lanelet::ConstLanelet> next_lanes_in_path{};\n-      std::copy_if(\n-        next_lanes.begin(), next_lanes.end(), std::back_inserter(next_lanes_in_path),\n-        [&](const auto & next_lane) {\n-          const bool is_in_unique_ids =\n-            std::find(unique_lane_ids.begin(), unique_lane_ids.end(), next_lane.id()) !=\n-            unique_lane_ids.end();\n-          const bool has_same_attribute =\n-            next_lane.attributeOr(\"turn_direction\", std::string(\"none\")) == lane_attribute;\n-          return is_in_unique_ids && has_same_attribute;\n-        });\n-      if (next_lanes_in_path.empty()) {\n+      if (next_lane.attributeOr(\"turn_direction\", std::string(\"none\")) != lane_attribute) {\n         break;\n       }\n \n-      // assume that the next lane in the path is only one\n-      current_lane = next_lanes_in_path.front();\n+      current_lane = next_lane;\n     }\n \n     if (!combined_lane_elems.empty()) {"
        }
    ],
    "autowarefoundation/autoware.universe/5456": [
        {
            "sha": "d13e628f2e1d41f467ecb36544d9df66c7d877aa",
            "filename": "control/pid_longitudinal_controller/src/pid_longitudinal_controller.cpp",
            "status": "modified",
            "additions": 7,
            "deletions": 4,
            "changes": 11,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/dcb3b1c7a89a9dedcb96e1cc2fb03d06278ce2a4/control%2Fpid_longitudinal_controller%2Fsrc%2Fpid_longitudinal_controller.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/dcb3b1c7a89a9dedcb96e1cc2fb03d06278ce2a4/control%2Fpid_longitudinal_controller%2Fsrc%2Fpid_longitudinal_controller.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/control%2Fpid_longitudinal_controller%2Fsrc%2Fpid_longitudinal_controller.cpp?ref=dcb3b1c7a89a9dedcb96e1cc2fb03d06278ce2a4",
            "patch": "@@ -497,8 +497,13 @@ void PidLongitudinalController::updateControlState(const ControlData & control_d\n     stop_dist > p.drive_state_stop_dist + p.drive_state_offset_stop_dist;\n   const bool departure_condition_from_stopped = stop_dist > p.drive_state_stop_dist;\n \n-  const bool keep_stopped_condition =\n-    m_enable_keep_stopped_until_steer_convergence && !lateral_sync_data_.is_steer_converged;\n+  // NOTE: the same velocity threshold as motion_utils::searchZeroVelocity\n+  static constexpr double vel_epsilon = 1e-3;\n+\n+  // Let vehicle start after the steering is converged for control accuracy\n+  const bool keep_stopped_condition = std::fabs(current_vel) < vel_epsilon &&\n+                                      m_enable_keep_stopped_until_steer_convergence &&\n+                                      !lateral_sync_data_.is_steer_converged;\n \n   const bool stopping_condition = stop_dist < p.stopping_state_stop_dist;\n \n@@ -528,8 +533,6 @@ void PidLongitudinalController::updateControlState(const ControlData & control_d\n       ? (clock_->now() - *m_last_running_time).seconds() > p.stopped_state_entry_duration_time\n       : false;\n \n-  static constexpr double vel_epsilon =\n-    1e-3;  // NOTE: the same velocity threshold as motion_utils::searchZeroVelocity\n   const double current_vel_cmd =\n     std::fabs(m_trajectory.points.at(control_data.nearest_idx).longitudinal_velocity_mps);\n   const bool emergency_condition = m_enable_overshoot_emergency &&"
        }
    ],
    "autowarefoundation/autoware.universe/5460": [
        {
            "sha": "b0df04285ac9f66280477d758434ea6652fcffc1",
            "filename": "simulator/simple_planning_simulator/include/simple_planning_simulator/simple_planning_simulator_core.hpp",
            "status": "modified",
            "additions": 23,
            "deletions": 23,
            "changes": 46,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/4e7cce8299a833990ac3e3e82d1fbcefbd7f1068/simulator%2Fsimple_planning_simulator%2Finclude%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.hpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/4e7cce8299a833990ac3e3e82d1fbcefbd7f1068/simulator%2Fsimple_planning_simulator%2Finclude%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.hpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Finclude%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.hpp?ref=4e7cce8299a833990ac3e3e82d1fbcefbd7f1068",
            "patch": "@@ -171,36 +171,36 @@ class PLANNING_SIMULATOR_PUBLIC SimplePlanningSimulator : public rclcpp::Node\n   tf2_ros::TransformListener tf_listener_;\n \n   /* received & published topics */\n-  PoseWithCovarianceStamped::ConstSharedPtr initial_pose_;\n-  TwistStamped initial_twist_;\n-  VelocityReport current_velocity_;\n-  Odometry current_odometry_;\n-  SteeringReport current_steer_;\n-  AckermannControlCommand current_ackermann_cmd_;\n-  AckermannControlCommand current_manual_ackermann_cmd_;\n-  GearCommand current_gear_cmd_;\n-  GearCommand current_manual_gear_cmd_;\n-  TurnIndicatorsCommand::ConstSharedPtr current_turn_indicators_cmd_ptr_;\n-  HazardLightsCommand::ConstSharedPtr current_hazard_lights_cmd_ptr_;\n-  Trajectory::ConstSharedPtr current_trajectory_ptr_;\n-  bool simulate_motion_;  //!< stop vehicle motion simulation if false\n-  ControlModeReport current_control_mode_;\n-  bool enable_road_slope_simulation_;\n+  PoseWithCovarianceStamped::ConstSharedPtr initial_pose_{};\n+  TwistStamped initial_twist_{};\n+  VelocityReport current_velocity_{};\n+  Odometry current_odometry_{};\n+  SteeringReport current_steer_{};\n+  AckermannControlCommand current_ackermann_cmd_{};\n+  AckermannControlCommand current_manual_ackermann_cmd_{};\n+  GearCommand current_gear_cmd_{};\n+  GearCommand current_manual_gear_cmd_{};\n+  TurnIndicatorsCommand::ConstSharedPtr current_turn_indicators_cmd_ptr_{};\n+  HazardLightsCommand::ConstSharedPtr current_hazard_lights_cmd_ptr_{};\n+  Trajectory::ConstSharedPtr current_trajectory_ptr_{};\n+  bool simulate_motion_ = true;  //!< stop vehicle motion simulation if false\n+  ControlModeReport current_control_mode_{};\n+  bool enable_road_slope_simulation_ = true;\n \n   /* frame_id */\n-  std::string simulated_frame_id_;  //!< @brief simulated vehicle frame id\n-  std::string origin_frame_id_;     //!< @brief map frame_id\n+  std::string simulated_frame_id_ = \"\";  //!< @brief simulated vehicle frame id\n+  std::string origin_frame_id_ = \"\";     //!< @brief map frame_id\n \n   /* flags */\n-  bool is_initialized_;         //!< @brief flag to check the initial position is set\n-  bool add_measurement_noise_;  //!< @brief flag to add measurement noise\n+  bool is_initialized_ = false;         //!< @brief flag to check the initial position is set\n+  bool add_measurement_noise_ = false;  //!< @brief flag to add measurement noise\n \n-  DeltaTime delta_time_;  //!< @brief to calculate delta time\n+  DeltaTime delta_time_{};  //!< @brief to calculate delta time\n \n-  MeasurementNoiseGenerator measurement_noise_;  //!< @brief for measurement noise\n+  MeasurementNoiseGenerator measurement_noise_{};  //!< @brief for measurement noise\n \n-  double x_stddev_;  //!< @brief x standard deviation for dummy covariance in map coordinate\n-  double y_stddev_;  //!< @brief y standard deviation for dummy covariance in map coordinate\n+  double x_stddev_ = 0.0;  //!< @brief x standard deviation for dummy covariance in map coordinate\n+  double y_stddev_ = 0.0;  //!< @brief y standard deviation for dummy covariance in map coordinate\n \n   /* vehicle model */\n   enum class VehicleModelType {"
        }
    ],
    "autowarefoundation/autoware.universe/5463": [
        {
            "sha": "a6a331a0e73240ff862fad0659acb938c21f36ab",
            "filename": "vehicle/raw_vehicle_cmd_converter/src/csv_loader.cpp",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/a0daa4c924b4e9d2628f89dd8a97c59ede7b9096/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fcsv_loader.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/a0daa4c924b4e9d2628f89dd8a97c59ede7b9096/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fcsv_loader.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/vehicle%2Fraw_vehicle_cmd_converter%2Fsrc%2Fcsv_loader.cpp?ref=a0daa4c924b4e9d2628f89dd8a97c59ede7b9096",
            "patch": "@@ -85,6 +85,10 @@ bool CSVLoader::validateMap(const Map & map, const bool is_col_decent)\n \n bool CSVLoader::validateData(const Table & table, const std::string & csv_path)\n {\n+  if (table.empty()) {\n+    std::cerr << \"The table is empty.\" << std::endl;\n+    return false;\n+  }\n   if (table[0].size() < 2) {\n     std::cerr << \"Cannot read \" << csv_path.c_str() << \" CSV file should have at least 2 column\"\n               << std::endl;"
        }
    ],
    "autowarefoundation/autoware.universe/5489": [
        {
            "sha": "99093b465d154a9784fdc5787660cb519fa26ac7",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 8,
            "deletions": 1,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/84adaf60fec7b43dba5d9266aef1214d39c21dd0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/84adaf60fec7b43dba5d9266aef1214d39c21dd0/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=84adaf60fec7b43dba5d9266aef1214d39c21dd0",
            "patch": "@@ -2902,8 +2902,15 @@ void AvoidanceModule::insertReturnDeadLine(\n     return;\n   }\n \n+  // Consider the difference in path length between the shifted path and original path (the path\n+  // that is shifted inward has a shorter distance to the end of the path than the other one.)\n+  const auto & to_reference_path_end = data.arclength_from_ego.back();\n+  const auto to_shifted_path_end = calcSignedArcLength(\n+    shifted_path.path.points, getEgoPosition(), shifted_path.path.points.size() - 1);\n+  const auto buffer = std::max(0.0, to_shifted_path_end - to_reference_path_end);\n+\n   const auto min_return_distance = helper_.getMinAvoidanceDistance(shift_length);\n-  const auto to_stop_line = data.to_return_point - min_return_distance;\n+  const auto to_stop_line = data.to_return_point - min_return_distance - buffer;\n \n   // If we don't need to consider deceleration constraints, insert a deceleration point\n   // and return immediately"
        }
    ],
    "autowarefoundation/autoware.universe/5501": [
        {
            "sha": "f2629a0586045d7c9073799d7887c8593910b5c6",
            "filename": "simulator/simple_planning_simulator/src/simple_planning_simulator/simple_planning_simulator_core.cpp",
            "status": "modified",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/350a81be820eaa39d0f1e720b15d1eaf86597285/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/350a81be820eaa39d0f1e720b15d1eaf86597285/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp?ref=350a81be820eaa39d0f1e720b15d1eaf86597285",
            "patch": "@@ -326,9 +326,9 @@ void SimplePlanningSimulator::on_timer()\n   }\n \n   // calculate longitudinal acceleration by slope\n-  const double ego_pitch_angle = calculate_ego_pitch();\n-  const double acc_by_slope =\n-    enable_road_slope_simulation_ ? -9.81 * std::sin(ego_pitch_angle) : 0.0;\n+  constexpr double gravity_acceleration = -9.81;\n+  const double ego_pitch_angle = enable_road_slope_simulation_ ? calculate_ego_pitch() : 0.0;\n+  const double acc_by_slope = gravity_acceleration * std::sin(ego_pitch_angle);\n \n   // update vehicle dynamics\n   {"
        }
    ],
    "autowarefoundation/autoware.universe/5508": [
        {
            "sha": "084035449e5c12d2d7808c91f605cfca001951bb",
            "filename": "planning/behavior_velocity_intersection_module/src/util.cpp",
            "status": "modified",
            "additions": 21,
            "deletions": 32,
            "changes": 53,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/565ab8eaa3c0b1251c39f1d3d8f1538ef0022ae9/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/565ab8eaa3c0b1251c39f1d3d8f1538ef0022ae9/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp?ref=565ab8eaa3c0b1251c39f1d3d8f1538ef0022ae9",
            "patch": "@@ -84,21 +84,16 @@ static std::optional<size_t> getDuplicatedPointIdx(\n \n static std::optional<size_t> insertPointIndex(\n   const geometry_msgs::msg::Pose & in_pose,\n-  autoware_auto_planning_msgs::msg::PathWithLaneId * inout_path)\n+  autoware_auto_planning_msgs::msg::PathWithLaneId * inout_path,\n+  const double ego_nearest_dist_threshold, const double ego_nearest_yaw_threshold)\n {\n   const auto duplicate_idx_opt = getDuplicatedPointIdx(*inout_path, in_pose.position);\n   if (duplicate_idx_opt) {\n     return duplicate_idx_opt.value();\n   }\n \n-  static constexpr double dist_thr = 10.0;\n-  static constexpr double angle_thr = M_PI / 1.5;\n-  const auto closest_idx_opt =\n-    motion_utils::findNearestIndex(inout_path->points, in_pose, dist_thr, angle_thr);\n-  if (!closest_idx_opt) {\n-    return std::nullopt;\n-  }\n-  const size_t closest_idx = closest_idx_opt.get();\n+  const size_t closest_idx = motion_utils::findFirstNearestIndexWithSoftConstraints(\n+    inout_path->points, in_pose, ego_nearest_dist_threshold, ego_nearest_yaw_threshold);\n   // vector.insert(i) inserts element on the left side of v[i]\n   // the velocity need to be zero order hold(from prior point)\n   int insert_idx = closest_idx;\n@@ -165,7 +160,7 @@ std::optional<std::pair<size_t, size_t>> findLaneIdsInterval(\n  */\n static std::optional<size_t> getStopLineIndexFromMap(\n   const InterpolatedPathInfo & interpolated_path_info,\n-  const std::shared_ptr<const PlannerData> & planner_data, const double dist_thr)\n+  const std::shared_ptr<const PlannerData> & planner_data)\n {\n   const auto & path = interpolated_path_info.path;\n   const auto & lane_interval = interpolated_path_info.lane_id_interval.value();\n@@ -212,12 +207,9 @@ static std::optional<size_t> getStopLineIndexFromMap(\n   stop_point_from_map.position.y = 0.5 * (p_start.y() + p_end.y());\n   stop_point_from_map.position.z = 0.5 * (p_start.z() + p_end.z());\n \n-  const auto stop_idx_ip_opt =\n-    motion_utils::findNearestIndex(path.points, stop_point_from_map, static_cast<double>(dist_thr));\n-  if (!stop_idx_ip_opt) {\n-    return std::nullopt;\n-  }\n-  return stop_idx_ip_opt.get();\n+  return motion_utils::findFirstNearestIndexWithSoftConstraints(\n+    path.points, stop_point_from_map, planner_data->ego_nearest_dist_threshold,\n+    planner_data->ego_nearest_yaw_threshold);\n }\n \n static std::optional<size_t> getFirstPointInsidePolygonByFootprint(\n@@ -304,8 +296,7 @@ std::optional<IntersectionStopLines> generateIntersectionStopLines(\n   // (1) default stop line position on interpolated path\n   bool default_stop_line_valid = true;\n   int stop_idx_ip_int = -1;\n-  if (const auto map_stop_idx_ip =\n-        getStopLineIndexFromMap(interpolated_path_info, planner_data, 10.0);\n+  if (const auto map_stop_idx_ip = getStopLineIndexFromMap(interpolated_path_info, planner_data);\n       map_stop_idx_ip) {\n     stop_idx_ip_int = static_cast<int>(map_stop_idx_ip.value()) - base2front_idx_dist;\n   }\n@@ -319,12 +310,9 @@ std::optional<IntersectionStopLines> generateIntersectionStopLines(\n \n   // (2) ego front stop line position on interpolated path\n   const geometry_msgs::msg::Pose & current_pose = planner_data->current_odometry->pose;\n-  const auto closest_idx_ip_opt =\n-    motion_utils::findNearestIndex(path_ip.points, current_pose, 3.0, M_PI_4);\n-  if (!closest_idx_ip_opt) {\n-    return std::nullopt;\n-  }\n-  const auto closest_idx_ip = closest_idx_ip_opt.value();\n+  const auto closest_idx_ip = motion_utils::findFirstNearestIndexWithSoftConstraints(\n+    path_ip.points, current_pose, planner_data->ego_nearest_dist_threshold,\n+    planner_data->ego_nearest_yaw_threshold);\n \n   // (3) occlusion peeking stop line position on interpolated path\n   int occlusion_peeking_line_ip_int = static_cast<int>(default_stop_line_ip);\n@@ -404,7 +392,9 @@ std::optional<IntersectionStopLines> generateIntersectionStopLines(\n     [](const auto & it1, const auto & it2) { return *(std::get<0>(it1)) < *(std::get<0>(it2)); });\n   for (const auto & [stop_idx_ip, stop_idx] : stop_lines) {\n     const auto & insert_point = path_ip.points.at(*stop_idx_ip).point.pose;\n-    const auto insert_idx = insertPointIndex(insert_point, original_path);\n+    const auto insert_idx = insertPointIndex(\n+      insert_point, original_path, planner_data->ego_nearest_dist_threshold,\n+      planner_data->ego_nearest_yaw_threshold);\n     if (!insert_idx) {\n       return std::nullopt;\n     }\n@@ -555,7 +545,9 @@ std::optional<size_t> generateStuckStopLine(\n     static_cast<int>(stuck_stop_line_idx_ip) - 1 - stop_line_margin_idx_dist - base2front_idx_dist,\n     0));\n   const auto & insert_point = path_ip.points.at(insert_idx_ip).point.pose;\n-  return insertPointIndex(insert_point, original_path);\n+  return insertPointIndex(\n+    insert_point, original_path, planner_data->ego_nearest_dist_threshold,\n+    planner_data->ego_nearest_yaw_threshold);\n }\n \n static std::vector<lanelet::CompoundPolygon3d> getPolygon3dFromLanelets(\n@@ -1348,13 +1340,10 @@ TimeDistanceArray calcIntersectionPassingTime(\n   // `last_intersection_stop_line_candidate_idx` makes no sense\n   const auto last_intersection_stop_line_candidate_point_orig =\n     path.points.at(last_intersection_stop_line_candidate_idx).point.pose;\n-  const auto last_intersection_stop_line_candidate_nearest_ind_opt = motion_utils::findNearestIndex(\n-    smoothed_reference_path.points, last_intersection_stop_line_candidate_point_orig, 3.0, M_PI_4);\n-  if (!last_intersection_stop_line_candidate_nearest_ind_opt) {\n-    return time_distance_array;\n-  }\n   const auto last_intersection_stop_line_candidate_nearest_ind =\n-    last_intersection_stop_line_candidate_nearest_ind_opt.value();\n+    motion_utils::findFirstNearestIndexWithSoftConstraints(\n+      smoothed_reference_path.points, last_intersection_stop_line_candidate_point_orig,\n+      planner_data->ego_nearest_dist_threshold, planner_data->ego_nearest_yaw_threshold);\n \n   for (size_t i = 1; i < smoothed_reference_path.points.size(); ++i) {\n     const auto & p1 = smoothed_reference_path.points.at(i - 1);"
        }
    ],
    "autowarefoundation/autoware.universe/5516": [
        {
            "sha": "502213e9dbdcd73cbd7aa2896c209a2d618226ba",
            "filename": "planning/behavior_velocity_intersection_module/src/util.cpp",
            "status": "modified",
            "additions": 5,
            "deletions": 5,
            "changes": 10,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/42ea18f6760970e4d55f8451431167144b62f124/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/42ea18f6760970e4d55f8451431167144b62f124/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_velocity_intersection_module%2Fsrc%2Futil.cpp?ref=42ea18f6760970e4d55f8451431167144b62f124",
            "patch": "@@ -1470,14 +1470,14 @@ lanelet::ConstLanelet generatePathLanelet(\n {\n   lanelet::Points3d lefts;\n   lanelet::Points3d rights;\n+  size_t prev_idx = start_idx;\n   for (size_t i = start_idx; i <= end_idx; ++i) {\n     const auto & p = path.points.at(i).point.pose;\n-    if (start_idx < i && i != end_idx) {\n-      const auto & p_prev = path.points.at(i - 1).point.pose;\n-      if (tier4_autoware_utils::calcDistance2d(p_prev, p) < interval) {\n-        continue;\n-      }\n+    const auto & p_prev = path.points.at(prev_idx).point.pose;\n+    if (i != start_idx && tier4_autoware_utils::calcDistance2d(p_prev, p) < interval) {\n+      continue;\n     }\n+    prev_idx = i;\n     const double yaw = tf2::getYaw(p.orientation);\n     const double x = p.position.x;\n     const double y = p.position.y;"
        }
    ],
    "autowarefoundation/autoware.universe/5542": [
        {
            "sha": "18de04fd9e3172e09daebea0a1bd287c08deec76",
            "filename": "launch/tier4_planning_launch/launch/scenario_planning/lane_driving/motion_planning/motion_planning.launch.xml",
            "status": "modified",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/08777af666212090a465c7759c738d4e67fb022a/launch%2Ftier4_planning_launch%2Flaunch%2Fscenario_planning%2Flane_driving%2Fmotion_planning%2Fmotion_planning.launch.xml",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/08777af666212090a465c7759c738d4e67fb022a/launch%2Ftier4_planning_launch%2Flaunch%2Fscenario_planning%2Flane_driving%2Fmotion_planning%2Fmotion_planning.launch.xml",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/launch%2Ftier4_planning_launch%2Flaunch%2Fscenario_planning%2Flane_driving%2Fmotion_planning%2Fmotion_planning.launch.xml?ref=08777af666212090a465c7759c738d4e67fb022a",
            "patch": "@@ -127,8 +127,8 @@\n           <remap from=\"~/input/objects\" to=\"/perception/object_recognition/objects\"/>\n           <remap from=\"~/output/trajectory\" to=\"$(var interface_output_topic)\"/>\n           <remap from=\"~/output/stop_reasons\" to=\"/planning/scenario_planning/status/stop_reasons\"/>\n-          <remap from=\"~/output/max_velocity\" to=\"/planning/scenario_planning/max_velocity_candidates\"/>\n-          <remap from=\"~/output/velocity_limit_clear_command\" to=\"/planning/scenario_planning/clear_velocity_limit\"/>\n+          <remap from=\"~/output/velocity_limit\" to=\"/planning/scenario_planning/max_velocity_candidates\"/>\n+          <remap from=\"~/output/clear_velocity_limit\" to=\"/planning/scenario_planning/clear_velocity_limit\"/>\n           <!-- params -->\n           <param from=\"$(var common_param_path)\"/>\n           <param from=\"$(var vehicle_param_file)\"/>"
        }
    ],
    "autowarefoundation/autoware.universe/5548": [
        {
            "sha": "c021dd92dae645c2453d41235068da9b49001d1f",
            "filename": "perception/image_projection_based_fusion/CMakeLists.txt",
            "status": "modified",
            "additions": 4,
            "deletions": 0,
            "changes": 4,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/60fa0086faa122029d10a4efbfa250ed37164923/perception%2Fimage_projection_based_fusion%2FCMakeLists.txt",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/60fa0086faa122029d10a4efbfa250ed37164923/perception%2Fimage_projection_based_fusion%2FCMakeLists.txt",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fimage_projection_based_fusion%2FCMakeLists.txt?ref=60fa0086faa122029d10a4efbfa250ed37164923",
            "patch": "@@ -146,6 +146,10 @@ if(TRT_AVAIL AND CUDA_AVAIL AND CUDNN_AVAIL)\n     EXECUTABLE pointpainting_fusion_node\n   )\n \n+  install(\n+    TARGETS pointpainting_cuda_lib\n+    DESTINATION lib\n+  )\n else()\n   message(\"Skipping build of some nodes due to missing dependencies\")\n endif()"
        }
    ],
    "autowarefoundation/autoware.universe/5552": [
        {
            "sha": "21df6fa6ea1b99d605cd7923a2205afc0529d437",
            "filename": "perception/ground_segmentation/docs/scan-ground-filter.md",
            "status": "modified",
            "additions": 20,
            "deletions": 19,
            "changes": 39,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/44643e172ec4e730377d1cb267ed6dcf2947760e/perception%2Fground_segmentation%2Fdocs%2Fscan-ground-filter.md",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/44643e172ec4e730377d1cb267ed6dcf2947760e/perception%2Fground_segmentation%2Fdocs%2Fscan-ground-filter.md",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/perception%2Fground_segmentation%2Fdocs%2Fscan-ground-filter.md?ref=44643e172ec4e730377d1cb267ed6dcf2947760e",
            "patch": "@@ -30,25 +30,26 @@ This implementation inherits `pointcloud_preprocessor::Filter` class, please ref\n #### Core Parameters\n \n ![scan_ground_parameter](./image/scan_ground_filter_parameters.drawio.svg)\n-| Name | Type | Default Value | Description |\n-| --------------------------------- | ------ | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n-| `input_frame` | string | \"base_link\" | frame id of input pointcloud |\n-| `output_frame` | string | \"base_link\" | frame id of output pointcloud |\n-| `global_slope_max_angle_deg` | double | 8.0 | The global angle to classify as the ground or object [deg].<br/>A large threshold may reduce false positive of high slope road classification but it may lead to increase false negative of non-ground classification, particularly for small objects. |\n-| `local_slope_max_angle_deg` | double | 10.0 | The local angle to classify as the ground or object [deg] when comparing with adjacent point.<br/>A small value enhance accuracy classification of object with inclined surface. This should be considered together with `split_points_distance_tolerance` value. |\n-| `radial_divider_angle_deg` | double | 1.0 | The angle which divide the whole pointcloud to sliced group [deg] |\n-| `split_points_distance_tolerance` | double | 0.2 | The xy-distance threshold to distinguish far and near [m] |\n-| `split_height_distance` | double | 0.2 | The height threshold to distinguish ground and non-ground pointcloud when comparing with adjacent points [m]. <br/>A small threshold improves classification of non-ground point, especially for high elevation resolution pointcloud lidar. However, it might cause false positive for small step-like road surface or misaligned multiple lidar configuration. |\n-| `use_virtual_ground_point` | bool | true | whether to use the ground center of front wheels as the virtual ground point. |\n-| `detection_range_z_max` | float | 2.5 | Maximum height of detection range [m], applied only for elevation_grid_mode |\n-| `center_pcl_shift` | float | 0.0 | The x-axis offset of addition LiDARs from vehicle center of mass [m], <br /> recommended to use only for additional LiDARs in elevation_grid_mode |\n-| `non_ground_height_threshold` | float | 0.2 | Height threshold of non ground objects [m] as `split_height_distance` and applied only for elevation_grid_mode |\n-| `grid_mode_switch_radius` | float | 20.0 | The distance where grid division mode change from by distance to by vertical angle [m],<br /> applied only for elevation_grid_mode |\n-| `grid_size_m` | float | 0.5 | The first grid size [m], applied only for elevation_grid_mode.<br/>A large value enhances the prediction stability for ground surface. suitable for rough surface or multiple lidar configuration. |\n-| `gnd_grid_buffer_size` | uint16 | 4 | Number of grids using to estimate local ground slope,<br /> applied only for elevation_grid_mode |\n-| `low_priority_region_x` | float | -20.0 | The non-zero x threshold in back side from which small objects detection is low priority [m] |\n-| `elevation_grid_mode` | bool | true | Elevation grid scan mode option |\n-| `use_recheck_ground_cluster` | bool | true | Enable recheck ground cluster |\n+\n+| Name                              | Type   | Default Value | Description                                                                                                                                                                                                                                                                                                                                                      |\n+| --------------------------------- | ------ | ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n+| `input_frame`                     | string | \"base_link\"   | frame id of input pointcloud                                                                                                                                                                                                                                                                                                                                     |\n+| `output_frame`                    | string | \"base_link\"   | frame id of output pointcloud                                                                                                                                                                                                                                                                                                                                    |\n+| `global_slope_max_angle_deg`      | double | 8.0           | The global angle to classify as the ground or object [deg].<br/>A large threshold may reduce false positive of high slope road classification but it may lead to increase false negative of non-ground classification, particularly for small objects.                                                                                                           |\n+| `local_slope_max_angle_deg`       | double | 10.0          | The local angle to classify as the ground or object [deg] when comparing with adjacent point.<br/>A small value enhance accuracy classification of object with inclined surface. This should be considered together with `split_points_distance_tolerance` value.                                                                                                |\n+| `radial_divider_angle_deg`        | double | 1.0           | The angle which divide the whole pointcloud to sliced group [deg]                                                                                                                                                                                                                                                                                                |\n+| `split_points_distance_tolerance` | double | 0.2           | The xy-distance threshold to distinguish far and near [m]                                                                                                                                                                                                                                                                                                        |\n+| `split_height_distance`           | double | 0.2           | The height threshold to distinguish ground and non-ground pointcloud when comparing with adjacent points [m]. <br/>A small threshold improves classification of non-ground point, especially for high elevation resolution pointcloud lidar. However, it might cause false positive for small step-like road surface or misaligned multiple lidar configuration. |\n+| `use_virtual_ground_point`        | bool   | true          | whether to use the ground center of front wheels as the virtual ground point.                                                                                                                                                                                                                                                                                    |\n+| `detection_range_z_max`           | float  | 2.5           | Maximum height of detection range [m], applied only for elevation_grid_mode                                                                                                                                                                                                                                                                                      |\n+| `center_pcl_shift`                | float  | 0.0           | The x-axis offset of addition LiDARs from vehicle center of mass [m], <br /> recommended to use only for additional LiDARs in elevation_grid_mode                                                                                                                                                                                                                |\n+| `non_ground_height_threshold`     | float  | 0.2           | Height threshold of non ground objects [m] as `split_height_distance` and applied only for elevation_grid_mode                                                                                                                                                                                                                                                   |\n+| `grid_mode_switch_radius`         | float  | 20.0          | The distance where grid division mode change from by distance to by vertical angle [m],<br /> applied only for elevation_grid_mode                                                                                                                                                                                                                               |\n+| `grid_size_m`                     | float  | 0.5           | The first grid size [m], applied only for elevation_grid_mode.<br/>A large value enhances the prediction stability for ground surface. suitable for rough surface or multiple lidar configuration.                                                                                                                                                               |\n+| `gnd_grid_buffer_size`            | uint16 | 4             | Number of grids using to estimate local ground slope,<br /> applied only for elevation_grid_mode                                                                                                                                                                                                                                                                 |\n+| `low_priority_region_x`           | float  | -20.0         | The non-zero x threshold in back side from which small objects detection is low priority [m]                                                                                                                                                                                                                                                                     |\n+| `elevation_grid_mode`             | bool   | true          | Elevation grid scan mode option                                                                                                                                                                                                                                                                                                                                  |\n+| `use_recheck_ground_cluster`      | bool   | true          | Enable recheck ground cluster                                                                                                                                                                                                                                                                                                                                    |\n \n ## Assumptions / Known limits\n "
        }
    ],
    "autowarefoundation/autoware.universe/5563": [
        {
            "sha": "a3715a1efe8abc9a62a2d0f881b1023409edfc15",
            "filename": "simulator/simple_planning_simulator/src/simple_planning_simulator/simple_planning_simulator_core.cpp",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/f45a9e01a13dd2a61a66ae3c982f7c43831149cc/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/f45a9e01a13dd2a61a66ae3c982f7c43831149cc/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/simulator%2Fsimple_planning_simulator%2Fsrc%2Fsimple_planning_simulator%2Fsimple_planning_simulator_core.cpp?ref=f45a9e01a13dd2a61a66ae3c982f7c43831149cc",
            "patch": "@@ -210,7 +210,7 @@ SimplePlanningSimulator::SimplePlanningSimulator(const rclcpp::NodeOptions & opt\n \n   // control mode\n   current_control_mode_.mode = ControlModeReport::AUTONOMOUS;\n-  current_manual_gear_cmd_.command = GearCommand::DRIVE;\n+  current_manual_gear_cmd_.command = GearCommand::PARK;\n }\n \n void SimplePlanningSimulator::initialize_vehicle_model()"
        }
    ],
    "autowarefoundation/autoware.universe/5575": [
        {
            "sha": "2d85f8cbe3224a4fead38f7392a9be37c516e279",
            "filename": "planning/behavior_path_planner/src/scene_module/avoidance/avoidance_module.cpp",
            "status": "modified",
            "additions": 6,
            "deletions": 3,
            "changes": 9,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/055712a47697dface4060d3460bff18d06ca1868/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/055712a47697dface4060d3460bff18d06ca1868/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fscene_module%2Favoidance%2Favoidance_module.cpp?ref=055712a47697dface4060d3460bff18d06ca1868",
            "patch": "@@ -2025,13 +2025,16 @@ PathWithLaneId AvoidanceModule::extendBackwardLength(const PathWithLaneId & orig\n     planner_data_->parameters.backward_path_length, longest_dist_to_shift_point + extra_margin);\n \n   const size_t orig_ego_idx = planner_data_->findEgoIndex(original_path.points);\n-  const size_t prev_ego_idx = motion_utils::findFirstNearestSegmentIndexWithSoftConstraints(\n+  const auto prev_ego_idx = motion_utils::findNearestSegmentIndex(\n     previous_path.points, getPose(original_path.points.at(orig_ego_idx)),\n     std::numeric_limits<double>::max(), planner_data_->parameters.ego_nearest_yaw_threshold);\n+  if (!prev_ego_idx) {\n+    return original_path;\n+  }\n \n   size_t clip_idx = 0;\n   for (size_t i = 0; i < prev_ego_idx; ++i) {\n-    if (backward_length > calcSignedArcLength(previous_path.points, clip_idx, prev_ego_idx)) {\n+    if (backward_length > calcSignedArcLength(previous_path.points, clip_idx, *prev_ego_idx)) {\n       break;\n     }\n     clip_idx = i;\n@@ -2041,7 +2044,7 @@ PathWithLaneId AvoidanceModule::extendBackwardLength(const PathWithLaneId & orig\n   {\n     extended_path.points.insert(\n       extended_path.points.end(), previous_path.points.begin() + clip_idx,\n-      previous_path.points.begin() + prev_ego_idx);\n+      previous_path.points.begin() + *prev_ego_idx);\n   }\n \n   // overwrite backward path velocity by latest one."
        }
    ],
    "autowarefoundation/autoware.universe/5577": [
        {
            "sha": "f1f681fed06a0a1d950a927dfed0a8873414472d",
            "filename": "planning/behavior_path_planner/src/marker_utils/utils.cpp",
            "status": "modified",
            "additions": 2,
            "deletions": 0,
            "changes": 2,
            "blob_url": "https://github.com/autowarefoundation/autoware.universe/blob/0fb51c5774594e1a9852c1ba9d57b9618655d8ad/planning%2Fbehavior_path_planner%2Fsrc%2Fmarker_utils%2Futils.cpp",
            "raw_url": "https://github.com/autowarefoundation/autoware.universe/raw/0fb51c5774594e1a9852c1ba9d57b9618655d8ad/planning%2Fbehavior_path_planner%2Fsrc%2Fmarker_utils%2Futils.cpp",
            "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/planning%2Fbehavior_path_planner%2Fsrc%2Fmarker_utils%2Futils.cpp?ref=0fb51c5774594e1a9852c1ba9d57b9618655d8ad",
            "patch": "@@ -18,6 +18,7 @@\n #include \"behavior_path_planner/utils/path_safety_checker/path_safety_checker_parameters.hpp\"\n #include \"behavior_path_planner/utils/path_utils.hpp\"\n \n+#include <tier4_autoware_utils/geometry/boost_polygon_utils.hpp>\n #include <tier4_autoware_utils/ros/marker_helper.hpp>\n #include <tier4_autoware_utils/ros/uuid_helper.hpp>\n \n@@ -45,6 +46,7 @@ CollisionCheckDebugPair createObjectDebug(const ExtendedPredictedObject & obj)\n {\n   CollisionCheckDebug debug;\n   debug.current_obj_pose = obj.initial_pose.pose;\n+  debug.extended_obj_polygon = tier4_autoware_utils::toPolygon2d(obj.initial_pose.pose, obj.shape);\n   debug.current_twist = obj.initial_twist.twist;\n   return {tier4_autoware_utils::toHexString(obj.uuid), debug};\n }"
        }
    ]
}