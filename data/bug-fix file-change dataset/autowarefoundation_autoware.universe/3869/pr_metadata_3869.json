{
  "url": "https://api.github.com/repos/autowarefoundation/autoware.universe/pulls/3869",
  "id": 1370509463,
  "node_id": "PR_kwDOGZv2oM5RsFCX",
  "html_url": "https://github.com/autowarefoundation/autoware.universe/pull/3869",
  "diff_url": "https://github.com/autowarefoundation/autoware.universe/pull/3869.diff",
  "patch_url": "https://github.com/autowarefoundation/autoware.universe/pull/3869.patch",
  "issue_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/issues/3869",
  "number": 3869,
  "state": "closed",
  "locked": false,
  "title": "fix(dummy_perception_publisher): fix runtime error",
  "user": {
    "login": "satoshi-ota",
    "id": 44889564,
    "node_id": "MDQ6VXNlcjQ0ODg5NTY0",
    "avatar_url": "https://avatars.githubusercontent.com/u/44889564?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/satoshi-ota",
    "html_url": "https://github.com/satoshi-ota",
    "followers_url": "https://api.github.com/users/satoshi-ota/followers",
    "following_url": "https://api.github.com/users/satoshi-ota/following{/other_user}",
    "gists_url": "https://api.github.com/users/satoshi-ota/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/satoshi-ota/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/satoshi-ota/subscriptions",
    "organizations_url": "https://api.github.com/users/satoshi-ota/orgs",
    "repos_url": "https://api.github.com/users/satoshi-ota/repos",
    "events_url": "https://api.github.com/users/satoshi-ota/events{/privacy}",
    "received_events_url": "https://api.github.com/users/satoshi-ota/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "body": "## Description\r\n\r\nfix runtime error\r\n\r\n- https://github.com/autowarefoundation/autoware.universe/pull/3731\r\n\r\ndied `dummy_percption_publisher`\r\n\r\n```\r\n[ERROR] [dummy_perception_publisher_node-40]: process has died [pid 1836737, exit code -6, cmd '/home/satoshi/pilot-auto/install/dummy_perception_publisher/lib/dummy_perception_publisher/dummy_perception_publisher_node --ros-args -r __node:=dummy_perception_publisher -r __ns:=/simulation -p use_sim_time:=False -p wheel_radius:=0.383 -p wheel_width:=0.235 -p wheel_base:=2.79 -p wheel_tread:=1.64 -p front_overhang:\r\n=1.0 -p rear_overhang:=1.1 -p left_overhang:=0.128 -p right_overhang:=0.128 -p vehicle_height:=2.5 -p max_steer_angle:=0.7 --params-file /tmp/launch_params_beil9v60 --params-file /tmp/launch_params_dprqtbiu --params-file /tmp/launch_params_9298ceju --params-file /tmp/launch_params_vpw95otd --params-file /tmp/launch_params_v0p06epd --params-file /tmp/launch_params_1ndka5ul --params-file /tmp/launch_params_13y9o8mf\r\n -r output/dynamic_object:=/perception/object_recognition/detection/labeled_clusters -r output/objects_pose:=debug/object_pose -r output/points_raw:=/perception/obstacle_segmentation/pointcloud -r input/object:=dummy_perception_publisher/object_info -r input/reset:=input/reset -r output/debug/ground_truth_objects:=debug/ground_truth_objects'].\r\n```\r\n\r\n```\r\n#0  __pthread_kill_implementation (no_tid=0, signo=6, threadid=140667628806144) at ./nptl/pthread_kill.c:44                                                                                                                                                                                                                                                                                                                     \r\n44      ./nptl/pthread_kill.c: No such file or directory.                                                                                                                                                                                                                                                                                                                                                                       \r\n[Current thread is 1 (Thread 0x7fefbc0be000 (LWP 1836737))]                                                                                                                                                                                                                                                                                                                                                                     \r\n(gdb) bt                                                                                                                                                                                                                                                                                                                                                                                                                        \r\n#0  __pthread_kill_implementation (no_tid=0, signo=6, threadid=140667628806144) at ./nptl/pthread_kill.c:44                                                                                                                                                                                                                                                                                                                     \r\n#1  __pthread_kill_internal (signo=6, threadid=140667628806144) at ./nptl/pthread_kill.c:78                                                                                                                                                                                                                                                                                                                                     \r\n#2  __GI___pthread_kill (threadid=140667628806144, signo=signo@entry=6) at ./nptl/pthread_kill.c:89                                                                                                                                                                                                                                                                                                                             \r\n#3  0x00007fefbd422476 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26                                                                                                                                                                                                                                                                                                                                           \r\n#4  0x00007fefbd4087f3 in __GI_abort () at ./stdlib/abort.c:79                                                                                                                                                                                                                                                                                                                                                                  \r\n#5  0x00007fefbd7b1bbe in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6                                                                                                                                                                                                                                                                                                                                                       \r\n#6  0x00007fefbd7bd24c in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6                                                                                                                                                                                                                                                                                                                                                       \r\n#7  0x00007fefbd7bd2b7 in std::terminate() () from /lib/x86_64-linux-gnu/libstdc++.so.6                                                                                                                                                                                                                                                                                                                                         \r\n#8  0x00007fefbd7bd518 in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6                                                                                                                                                                                                                                                                                                                                              \r\n#9  0x00007fefbe13b490 in ?? () from /opt/ros/humble/lib/librclcpp.so                                                                                                                                                                                                                                                                                                                                                           \r\n#10 0x00007fefbe1d9977 in rclcpp::PublisherBase::PublisherBase(rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rosidl_message_type_support_t const&, rcl_publisher_options_s const&) () from /opt/ros/humble/lib/librclcpp.so                                                                                                              \r\n#11 0x000056176883d4ac in rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> >::Publisher (this=0x561769bf4990, node_base=0x561769b74af0,                                                                                                                                                                                                                       \r\n    topic=..., qos=..., options=...) at /opt/ros/humble/include/rclcpp/rclcpp/publisher.hpp:137                                                                                                                                                                                                                                                                                                                                 \r\n#12 0x000056176883d76a in __gnu_cxx::new_allocator<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >::construct<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> >, rclcpp::node_interfaces::NodeBaseInterface*&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator\r\n<char> > const&, rclcpp::QoS const&, rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&> (__p=0x561769bf4990, this=<optimized out>) at /usr/include/c++/11/ext/new_allocator.h:160                                                                                                                                                                                                                             \r\n#13 std::allocator_traits<std::allocator<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > > >::construct<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> >, rclcpp::node_interfaces::NodeBaseInterface*&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\r\n const&, rclcpp::QoS const&, rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&> (__p=0x561769bf4990, __a=...) at /usr/include/c++/11/bits/alloc_traits.h:516                                                                                                                                                                                                                                                  \r\n#14 std::_Sp_counted_ptr_inplace<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> >, std::allocator<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<rclcpp::node_interfaces::NodeBaseInterface*&, std::__cxx11::basic_string<char\r\n, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&, rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&> (__a=..., this=0x561769bf4980)                                                                                                                                                                                                                                                \r\n    at /usr/include/c++/11/bits/shared_ptr_base.h:519                                                                                                                                                                                                                                                                                                                                                                           \r\n#15 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> >, std::allocator<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >, rclcpp::node_interfaces::NodeBaseInterface*&, std::__cxx11::basic_string<char, std::char_traits\r\n<char>, std::allocator<char> > const&, rclcpp::QoS const&, rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&> (__a=..., __p=<optimized out>, this=<optimized out>)                                                                                                                                                                                                                                            \r\n    at /usr/include/c++/11/bits/shared_ptr_base.h:650                                                                                                                                                                                                                                                                                                                                                                           \r\n#16 std::__shared_ptr<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >, rclcpp::node_interfaces::NodeBaseInterface*&, std::__cxx11::basic_string<char, std::char_traits<cha\r\nr>, std::allocator<char> > const&, rclcpp::QoS const&, rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&> (__tag=..., this=<optimized out>)                                                                                                                                                                                                                                                                   \r\n    at /usr/include/c++/11/bits/shared_ptr_base.h:1342                                                                                                                                                                                                                                                                                                                                                                          \r\n#17 std::shared_ptr<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >::shared_ptr<std::allocator<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >, rclcpp::node_interfaces::NodeBaseInterface*&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > cons\r\nt&, rclcpp::QoS const&, rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&> (__tag=..., this=<optimized out>) at /usr/include/c++/11/bits/shared_ptr.h:409                                                                                                                                                                                                                                                     \r\n#18 std::allocate_shared<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> >, std::allocator<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >, rclcpp::node_interfaces::NodeBaseInterface*&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclc\r\npp::QoS const&, rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&> (__a=...) at /usr/include/c++/11/bits/shared_ptr.h:863                                                                     \r\n#19 std::make_shared<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> >, rclcpp::node_interfaces::NodeBaseInterface*&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&, rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&> () at /usr/include/c++/11/bits/shared_ptr.h:879\r\n#20 rclcpp::create_publisher_factory<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void>, rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >(rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&)::{lambda(rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::c\r\nhar_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&)#1}::operator()(rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&) const (qos=..., topic_name=\"~output/debug/ground_truth_objects\", node_base=<optimized out>, __closure=<optimized out>)\r\n    at /opt/ros/humble/include/rclcpp/rclcpp/publisher_factory.hpp:76                                                                                                                                           \r\n#21 std::__invoke_impl<std::shared_ptr<rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >, rclcpp::create_publisher_factory<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void>, rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >(rclcpp:\r\n:PublisherOptionsWithAllocator<std::allocator<void> > const&)::{lambda(rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&)#1}&, rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&>(std::__invoke_other, rclcpp::creat\r\ne_publisher_factory<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void>, rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >(rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&)::{lambda(rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>,\r\n std::allocator<char> > const&, rclcpp::QoS const&)#1}&, rclcpp::node_interfaces::NodeBaseInterface*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&) (__f=...) at /usr/include/c++/11/bits/invoke.h:61\r\n#22 std::__invoke_r<std::shared_ptr<rclcpp::PublisherBase>, rclcpp::create_publisher_factory<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void>, rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >(rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&)::{lambda(rclcpp::node_interfaces::Nod\r\neBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&)#1}&, rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&>(rclcpp::create_publisher_factory<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void>, rc\r\nlcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > >(rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&)::{lambda(rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&)#1}&, rclcpp::node_interfaces::NodeBaseInterface*&&, std::__cxx11::ba\r\nsic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&) (__fn=...) at /usr/include/c++/11/bits/invoke.h:116                                                                 \r\n#23 std::_Function_handler<std::shared_ptr<rclcpp::PublisherBase> (rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&), rclcpp::create_publisher_factory<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void>, rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObj\r\nects_<std::allocator<void> >, std::allocator<void> > >(rclcpp::PublisherOptionsWithAllocator<std::allocator<void> > const&)::{lambda(rclcpp::node_interfaces::NodeBaseInterface*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::QoS const&)#1}>::_M_invoke(std::_Any_data const&, rclcpp::node_interfaces::NodeBaseInterface*&&, std::__cxx11::basic_string<char, std::char_tr\r\naits<char>, std::allocator<char> > const&, rclcpp::QoS const&) (__functor=..., __args#0=<optimized out>, __args#1=\"~output/debug/ground_truth_objects\", __args#2=...)                                           \r\n    at /usr/include/c++/11/bits/std_function.h:291                                                                                                                                                              \r\n#24 0x00007fefbe196f4c in rclcpp::node_interfaces::NodeTopics::create_publisher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::PublisherFactory const&, rclcpp::QoS const&) () from /opt/ros/humble/lib/librclcpp.so\r\n#25 0x000056176882c590 in rclcpp::detail::create_publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void>, rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> >, rclcpp::Node, rclcpp::Node> (node_parameters=..., node_topics=..., topic_name=\"~output/debug/ground_truth_objects\", qos=..., options=...)\r\n    at /opt/ros/humble/include/rclcpp/rclcpp/create_publisher.hpp:65                                                                                                                                            \r\n#26 0x00005617688145a1 in rclcpp::create_publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void>, rclcpp::Publisher<autoware_auto_perception_msgs::msg::Track--Type <RET> for more, q to quit, c to continue without paging--\r\nedObjects_<std::allocator<void> >, std::allocator<void> >, rclcpp::Node&> (options=..., qos=..., topic_name=\"~output/debug/ground_truth_objects\", node=...)                                                     \r\n    at /opt/ros/humble/include/rclcpp/rclcpp/create_publisher.hpp:94                                                                                                                                            \r\n#27 rclcpp::Node::create_publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void>, rclcpp::Publisher<autoware_auto_perception_msgs::msg::TrackedObjects_<std::allocator<void> >, std::allocator<void> > > (options=..., qos=..., topic_name=\"~output/debug/ground_truth_objects\", this=0x561769b62fa0) at /opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:82\r\n#28 DummyPerceptionPublisherNode::DummyPerceptionPublisherNode (this=this@entry=0x561769b62fa0) at /home/satoshi/pilot-auto/src/autoware/universe/simulator/dummy_perception_publisher/src/node.cpp:172         \r\n#29 0x00005617688091a8 in __gnu_cxx::new_allocator<DummyPerceptionPublisherNode>::construct<DummyPerceptionPublisherNode> (__p=0x561769b62fa0, this=<optimized out>)                                            \r\n    at /usr/include/c++/11/ext/new_allocator.h:160                                                                                                                                                              \r\n#30 std::allocator_traits<std::allocator<DummyPerceptionPublisherNode> >::construct<DummyPerceptionPublisherNode> (__p=0x561769b62fa0, __a=...) at /usr/include/c++/11/bits/alloc_traits.h:516                  \r\n#31 std::_Sp_counted_ptr_inplace<DummyPerceptionPublisherNode, std::allocator<DummyPerceptionPublisherNode>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<>(std::allocator<DummyPerceptionPublisherNode>) (__a=..., this=0x561769b62f90) at /usr/include/c++/11/bits/shared_ptr_base.h:519\r\n#32 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<DummyPerceptionPublisherNode, std::allocator<DummyPerceptionPublisherNode>>(DummyPerceptionPublisherNode*&, std::_Sp_alloc_shared_tag<std::allocator<DummyPerceptionPublisherNode> >) (__a=..., __p=<optimized out>, this=<optimized out>) at /usr/include/c++/11/bits/shared_ptr_base.h:650\r\n#33 std::__shared_ptr<DummyPerceptionPublisherNode, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<DummyPerceptionPublisherNode>>(std::_Sp_alloc_shared_tag<std::allocator<DummyPerceptionPublisherNode> >) (__tag=..., this=<optimized out>) at /usr/include/c++/11/bits/shared_ptr_base.h:1342\r\n#34 std::shared_ptr<DummyPerceptionPublisherNode>::shared_ptr<std::allocator<DummyPerceptionPublisherNode>>(std::_Sp_alloc_shared_tag<std::allocator<DummyPerceptionPublisherNode> >) (__tag=...,               \r\n    this=<optimized out>) at /usr/include/c++/11/bits/shared_ptr.h:409                                                                                                                                          \r\n#35 std::allocate_shared<DummyPerceptionPublisherNode, std::allocator<DummyPerceptionPublisherNode>>(std::allocator<DummyPerceptionPublisherNode> const&) (__a=...)                                             \r\n    at /usr/include/c++/11/bits/shared_ptr.h:863                                                                                                                                                                \r\n#36 std::make_shared<DummyPerceptionPublisherNode> () at /usr/include/c++/11/bits/shared_ptr.h:879                                                                                                              \r\n#37 main (argc=<optimized out>, argv=<optimized out>) at /home/satoshi/pilot-auto/src/autoware/universe/simulator/dummy_perception_publisher/src/main.cpp:24\r\n```\r\n\r\n<!-- Write a brief description of this PR. -->\r\n\r\n## Tests performed\r\n\r\n<!-- Describe how you have tested this PR. -->\r\n<!-- Although the default value is set to \"Not Applicable.\", please update this section if the type is either [feat, fix, perf], or if requested by the reviewers. -->\r\n\r\nPsim\r\n\r\n## Effects on system behavior\r\n\r\n<!-- Describe how this PR affects the system behavior. -->\r\n\r\nNot applicable.\r\n\r\n## Pre-review checklist for the PR author\r\n\r\nThe PR author **must** check the checkboxes below when creating the PR.\r\n\r\n- [x] I've confirmed the [contribution guidelines].\r\n- [x] The PR follows the [pull request guidelines].\r\n\r\n## In-review checklist for the PR reviewers\r\n\r\nThe PR reviewers **must** check the checkboxes below before approval.\r\n\r\n- [x] The PR follows the [pull request guidelines].\r\n\r\n## Post-review checklist for the PR author\r\n\r\nThe PR author **must** check the checkboxes below before merging.\r\n\r\n- [x] There are no open discussions or they are tracked via tickets.\r\n\r\nAfter all checkboxes are checked, anyone who has write access can merge the PR.\r\n\r\n[contribution guidelines]: https://autowarefoundation.github.io/autoware-documentation/main/contributing/\r\n[pull request guidelines]: https://autowarefoundation.github.io/autoware-documentation/main/contributing/pull-request-guidelines/\r\n",
  "created_at": "2023-05-30T13:46:06Z",
  "updated_at": "2023-05-30T23:20:41Z",
  "closed_at": "2023-05-30T23:16:51Z",
  "merged_at": "2023-05-30T23:16:51Z",
  "merge_commit_sha": "efec782c310624cedeea3a336084f7269cd39f45",
  "assignee": null,
  "assignees": [],
  "requested_reviewers": [
    {
      "login": "YoshiRi",
      "id": 20086766,
      "node_id": "MDQ6VXNlcjIwMDg2NzY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/20086766?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YoshiRi",
      "html_url": "https://github.com/YoshiRi",
      "followers_url": "https://api.github.com/users/YoshiRi/followers",
      "following_url": "https://api.github.com/users/YoshiRi/following{/other_user}",
      "gists_url": "https://api.github.com/users/YoshiRi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YoshiRi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YoshiRi/subscriptions",
      "organizations_url": "https://api.github.com/users/YoshiRi/orgs",
      "repos_url": "https://api.github.com/users/YoshiRi/repos",
      "events_url": "https://api.github.com/users/YoshiRi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YoshiRi/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    }
  ],
  "requested_teams": [
    {
      "name": "autoware-global-codeowners",
      "id": 6999990,
      "node_id": "T_kwDOAuLW984Aas-2",
      "slug": "autoware-global-codeowners",
      "description": "This team can approve any review.",
      "privacy": "closed",
      "notification_setting": "notifications_enabled",
      "url": "https://api.github.com/organizations/48420599/team/6999990",
      "html_url": "https://github.com/orgs/autowarefoundation/teams/autoware-global-codeowners",
      "members_url": "https://api.github.com/organizations/48420599/team/6999990/members{/member}",
      "repositories_url": "https://api.github.com/organizations/48420599/team/6999990/repos",
      "permission": "pull",
      "parent": null
    }
  ],
  "labels": [
    {
      "id": 4865919779,
      "node_id": "LA_kwDOGZv2oM8AAAABIggLIw",
      "url": "https://api.github.com/repos/autowarefoundation/autoware.universe/labels/component:simulation",
      "name": "component:simulation",
      "color": "99ffdf",
      "default": false,
      "description": "Virtual environment setups and simulations. (auto-assigned)"
    }
  ],
  "milestone": null,
  "draft": false,
  "commits_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/pulls/3869/commits",
  "review_comments_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/pulls/3869/comments",
  "review_comment_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/pulls/comments{/number}",
  "comments_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/issues/3869/comments",
  "statuses_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/statuses/fb0ca6375e09274f3d955d61dd1fd21ed444d734",
  "head": {
    "label": "satoshi-ota:fix/namespace",
    "ref": "fix/namespace",
    "sha": "fb0ca6375e09274f3d955d61dd1fd21ed444d734",
    "user": {
      "login": "satoshi-ota",
      "id": 44889564,
      "node_id": "MDQ6VXNlcjQ0ODg5NTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/44889564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/satoshi-ota",
      "html_url": "https://github.com/satoshi-ota",
      "followers_url": "https://api.github.com/users/satoshi-ota/followers",
      "following_url": "https://api.github.com/users/satoshi-ota/following{/other_user}",
      "gists_url": "https://api.github.com/users/satoshi-ota/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/satoshi-ota/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/satoshi-ota/subscriptions",
      "organizations_url": "https://api.github.com/users/satoshi-ota/orgs",
      "repos_url": "https://api.github.com/users/satoshi-ota/repos",
      "events_url": "https://api.github.com/users/satoshi-ota/events{/privacy}",
      "received_events_url": "https://api.github.com/users/satoshi-ota/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "repo": {
      "id": 447078112,
      "node_id": "R_kgDOGqXe4A",
      "name": "autoware.universe",
      "full_name": "satoshi-ota/autoware.universe",
      "private": false,
      "owner": {
        "login": "satoshi-ota",
        "id": 44889564,
        "node_id": "MDQ6VXNlcjQ0ODg5NTY0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44889564?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satoshi-ota",
        "html_url": "https://github.com/satoshi-ota",
        "followers_url": "https://api.github.com/users/satoshi-ota/followers",
        "following_url": "https://api.github.com/users/satoshi-ota/following{/other_user}",
        "gists_url": "https://api.github.com/users/satoshi-ota/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/satoshi-ota/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/satoshi-ota/subscriptions",
        "organizations_url": "https://api.github.com/users/satoshi-ota/orgs",
        "repos_url": "https://api.github.com/users/satoshi-ota/repos",
        "events_url": "https://api.github.com/users/satoshi-ota/events{/privacy}",
        "received_events_url": "https://api.github.com/users/satoshi-ota/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "html_url": "https://github.com/satoshi-ota/autoware.universe",
      "description": null,
      "fork": true,
      "url": "https://api.github.com/repos/satoshi-ota/autoware.universe",
      "forks_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/forks",
      "keys_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/keys{/key_id}",
      "collaborators_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/collaborators{/collaborator}",
      "teams_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/teams",
      "hooks_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/hooks",
      "issue_events_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/issues/events{/number}",
      "events_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/events",
      "assignees_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/assignees{/user}",
      "branches_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/branches{/branch}",
      "tags_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/tags",
      "blobs_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/git/blobs{/sha}",
      "git_tags_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/git/tags{/sha}",
      "git_refs_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/git/refs{/sha}",
      "trees_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/git/trees{/sha}",
      "statuses_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/statuses/{sha}",
      "languages_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/languages",
      "stargazers_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/stargazers",
      "contributors_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/contributors",
      "subscribers_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/subscribers",
      "subscription_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/subscription",
      "commits_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/commits{/sha}",
      "git_commits_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/git/commits{/sha}",
      "comments_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/comments{/number}",
      "issue_comment_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/issues/comments{/number}",
      "contents_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/contents/{+path}",
      "compare_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/compare/{base}...{head}",
      "merges_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/merges",
      "archive_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/{archive_format}{/ref}",
      "downloads_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/downloads",
      "issues_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/issues{/number}",
      "pulls_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/pulls{/number}",
      "milestones_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/notifications{?since,all,participating}",
      "labels_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/labels{/name}",
      "releases_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/releases{/id}",
      "deployments_url": "https://api.github.com/repos/satoshi-ota/autoware.universe/deployments",
      "created_at": "2022-01-12T04:39:26Z",
      "updated_at": "2024-04-22T08:53:33Z",
      "pushed_at": "2024-05-16T23:39:17Z",
      "git_url": "git://github.com/satoshi-ota/autoware.universe.git",
      "ssh_url": "git@github.com:satoshi-ota/autoware.universe.git",
      "clone_url": "https://github.com/satoshi-ota/autoware.universe.git",
      "svn_url": "https://github.com/satoshi-ota/autoware.universe",
      "homepage": null,
      "size": 341360,
      "stargazers_count": 0,
      "watchers_count": 0,
      "language": "C++",
      "has_issues": false,
      "has_projects": true,
      "has_downloads": true,
      "has_wiki": false,
      "has_pages": false,
      "has_discussions": false,
      "forks_count": 1,
      "mirror_url": null,
      "archived": false,
      "disabled": false,
      "open_issues_count": 1,
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0",
        "node_id": "MDc6TGljZW5zZTI="
      },
      "allow_forking": true,
      "is_template": false,
      "web_commit_signoff_required": false,
      "topics": [],
      "visibility": "public",
      "forks": 1,
      "open_issues": 1,
      "watchers": 0,
      "default_branch": "main"
    }
  },
  "base": {
    "label": "autowarefoundation:main",
    "ref": "main",
    "sha": "4e99d2f704a8c3f90773a98adc780f56bc341946",
    "user": {
      "login": "autowarefoundation",
      "id": 48420599,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NDIwNTk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/48420599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/autowarefoundation",
      "html_url": "https://github.com/autowarefoundation",
      "followers_url": "https://api.github.com/users/autowarefoundation/followers",
      "following_url": "https://api.github.com/users/autowarefoundation/following{/other_user}",
      "gists_url": "https://api.github.com/users/autowarefoundation/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/autowarefoundation/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/autowarefoundation/subscriptions",
      "organizations_url": "https://api.github.com/users/autowarefoundation/orgs",
      "repos_url": "https://api.github.com/users/autowarefoundation/repos",
      "events_url": "https://api.github.com/users/autowarefoundation/events{/privacy}",
      "received_events_url": "https://api.github.com/users/autowarefoundation/received_events",
      "type": "Organization",
      "user_view_type": "public",
      "site_admin": false
    },
    "repo": {
      "id": 429651616,
      "node_id": "R_kgDOGZv2oA",
      "name": "autoware.universe",
      "full_name": "autowarefoundation/autoware.universe",
      "private": false,
      "owner": {
        "login": "autowarefoundation",
        "id": 48420599,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NDIwNTk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/48420599?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/autowarefoundation",
        "html_url": "https://github.com/autowarefoundation",
        "followers_url": "https://api.github.com/users/autowarefoundation/followers",
        "following_url": "https://api.github.com/users/autowarefoundation/following{/other_user}",
        "gists_url": "https://api.github.com/users/autowarefoundation/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/autowarefoundation/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/autowarefoundation/subscriptions",
        "organizations_url": "https://api.github.com/users/autowarefoundation/orgs",
        "repos_url": "https://api.github.com/users/autowarefoundation/repos",
        "events_url": "https://api.github.com/users/autowarefoundation/events{/privacy}",
        "received_events_url": "https://api.github.com/users/autowarefoundation/received_events",
        "type": "Organization",
        "user_view_type": "public",
        "site_admin": false
      },
      "html_url": "https://github.com/autowarefoundation/autoware.universe",
      "description": null,
      "fork": false,
      "url": "https://api.github.com/repos/autowarefoundation/autoware.universe",
      "forks_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/forks",
      "keys_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/keys{/key_id}",
      "collaborators_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/collaborators{/collaborator}",
      "teams_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/teams",
      "hooks_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/hooks",
      "issue_events_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/issues/events{/number}",
      "events_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/events",
      "assignees_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/assignees{/user}",
      "branches_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/branches{/branch}",
      "tags_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/tags",
      "blobs_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/git/blobs{/sha}",
      "git_tags_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/git/tags{/sha}",
      "git_refs_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/git/refs{/sha}",
      "trees_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/git/trees{/sha}",
      "statuses_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/statuses/{sha}",
      "languages_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/languages",
      "stargazers_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/stargazers",
      "contributors_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contributors",
      "subscribers_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/subscribers",
      "subscription_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/subscription",
      "commits_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/commits{/sha}",
      "git_commits_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/git/commits{/sha}",
      "comments_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/comments{/number}",
      "issue_comment_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/issues/comments{/number}",
      "contents_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/contents/{+path}",
      "compare_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/compare/{base}...{head}",
      "merges_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/merges",
      "archive_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/{archive_format}{/ref}",
      "downloads_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/downloads",
      "issues_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/issues{/number}",
      "pulls_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/pulls{/number}",
      "milestones_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/notifications{?since,all,participating}",
      "labels_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/labels{/name}",
      "releases_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/releases{/id}",
      "deployments_url": "https://api.github.com/repos/autowarefoundation/autoware.universe/deployments",
      "created_at": "2021-11-19T02:59:37Z",
      "updated_at": "2024-10-31T10:19:18Z",
      "pushed_at": "2024-11-01T00:28:47Z",
      "git_url": "git://github.com/autowarefoundation/autoware.universe.git",
      "ssh_url": "git@github.com:autowarefoundation/autoware.universe.git",
      "clone_url": "https://github.com/autowarefoundation/autoware.universe.git",
      "svn_url": "https://github.com/autowarefoundation/autoware.universe",
      "homepage": "https://autowarefoundation.github.io/autoware.universe/",
      "size": 840043,
      "stargazers_count": 1004,
      "watchers_count": 1004,
      "language": "C++",
      "has_issues": true,
      "has_projects": false,
      "has_downloads": true,
      "has_wiki": false,
      "has_pages": true,
      "has_discussions": false,
      "forks_count": 641,
      "mirror_url": null,
      "archived": false,
      "disabled": false,
      "open_issues_count": 392,
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0",
        "node_id": "MDc6TGljZW5zZTI="
      },
      "allow_forking": true,
      "is_template": false,
      "web_commit_signoff_required": false,
      "topics": [
        "3d-map",
        "autonomous-driving",
        "autonomous-vehicles",
        "autoware",
        "calibration",
        "planner",
        "ros",
        "ros2",
        "self-driving-car"
      ],
      "visibility": "public",
      "forks": 641,
      "open_issues": 392,
      "watchers": 1004,
      "default_branch": "main"
    }
  },
  "_links": {
    "self": {
      "href": "https://api.github.com/repos/autowarefoundation/autoware.universe/pulls/3869"
    },
    "html": {
      "href": "https://github.com/autowarefoundation/autoware.universe/pull/3869"
    },
    "issue": {
      "href": "https://api.github.com/repos/autowarefoundation/autoware.universe/issues/3869"
    },
    "comments": {
      "href": "https://api.github.com/repos/autowarefoundation/autoware.universe/issues/3869/comments"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/autowarefoundation/autoware.universe/pulls/3869/comments"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/autowarefoundation/autoware.universe/pulls/comments{/number}"
    },
    "commits": {
      "href": "https://api.github.com/repos/autowarefoundation/autoware.universe/pulls/3869/commits"
    },
    "statuses": {
      "href": "https://api.github.com/repos/autowarefoundation/autoware.universe/statuses/fb0ca6375e09274f3d955d61dd1fd21ed444d734"
    }
  },
  "author_association": "CONTRIBUTOR",
  "auto_merge": null,
  "active_lock_reason": null,
  "merged": true,
  "mergeable": null,
  "rebaseable": null,
  "mergeable_state": "unknown",
  "merged_by": {
    "login": "satoshi-ota",
    "id": 44889564,
    "node_id": "MDQ6VXNlcjQ0ODg5NTY0",
    "avatar_url": "https://avatars.githubusercontent.com/u/44889564?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/satoshi-ota",
    "html_url": "https://github.com/satoshi-ota",
    "followers_url": "https://api.github.com/users/satoshi-ota/followers",
    "following_url": "https://api.github.com/users/satoshi-ota/following{/other_user}",
    "gists_url": "https://api.github.com/users/satoshi-ota/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/satoshi-ota/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/satoshi-ota/subscriptions",
    "organizations_url": "https://api.github.com/users/satoshi-ota/orgs",
    "repos_url": "https://api.github.com/users/satoshi-ota/repos",
    "events_url": "https://api.github.com/users/satoshi-ota/events{/privacy}",
    "received_events_url": "https://api.github.com/users/satoshi-ota/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "comments": 1,
  "review_comments": 0,
  "maintainer_can_modify": false,
  "commits": 1,
  "additions": 1,
  "deletions": 1,
  "changed_files": 1
}